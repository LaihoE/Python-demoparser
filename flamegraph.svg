<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="219"><g><title>[unknown] (51 samples, 23.29%)</title><rect x="0.0000%" y="1077" width="23.2877%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="51"/><text x="0.2500%" y="1087.50">[unknown]</text></g><g><title>[unknown] (36 samples, 16.44%)</title><rect x="6.8493%" y="1061" width="16.4384%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="36"/><text x="7.0993%" y="1071.50">[unknown]</text></g><g><title>[unknown] (36 samples, 16.44%)</title><rect x="6.8493%" y="1045" width="16.4384%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="36"/><text x="7.0993%" y="1055.50">[unknown]</text></g><g><title>[unknown] (31 samples, 14.16%)</title><rect x="9.1324%" y="1029" width="14.1553%" height="15" fill="rgb(248,212,6)" fg:x="20" fg:w="31"/><text x="9.3824%" y="1039.50">[unknown]</text></g><g><title>[unknown] (21 samples, 9.59%)</title><rect x="13.6986%" y="1013" width="9.5890%" height="15" fill="rgb(208,68,35)" fg:x="30" fg:w="21"/><text x="13.9486%" y="1023.50">[unknown]</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="21.0046%" y="997" width="2.2831%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="5"/><text x="21.2546%" y="1007.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="21.0046%" y="981" width="2.2831%" height="15" fill="rgb(207,160,47)" fg:x="46" fg:w="5"/><text x="21.2546%" y="991.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="21.0046%" y="965" width="2.2831%" height="15" fill="rgb(228,23,34)" fg:x="46" fg:w="5"/><text x="21.2546%" y="975.50">[..</text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="949" width="1.3699%" height="15" fill="rgb(218,30,26)" fg:x="48" fg:w="3"/><text x="22.1678%" y="959.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="933" width="1.3699%" height="15" fill="rgb(220,122,19)" fg:x="48" fg:w="3"/><text x="22.1678%" y="943.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="917" width="1.3699%" height="15" fill="rgb(250,228,42)" fg:x="48" fg:w="3"/><text x="22.1678%" y="927.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="901" width="1.3699%" height="15" fill="rgb(240,193,28)" fg:x="48" fg:w="3"/><text x="22.1678%" y="911.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="885" width="1.3699%" height="15" fill="rgb(216,20,37)" fg:x="48" fg:w="3"/><text x="22.1678%" y="895.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="869" width="1.3699%" height="15" fill="rgb(206,188,39)" fg:x="48" fg:w="3"/><text x="22.1678%" y="879.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="21.9178%" y="853" width="1.3699%" height="15" fill="rgb(217,207,13)" fg:x="48" fg:w="3"/><text x="22.1678%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="22.3744%" y="837" width="0.9132%" height="15" fill="rgb(231,73,38)" fg:x="49" fg:w="2"/><text x="22.6244%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="22.3744%" y="821" width="0.9132%" height="15" fill="rgb(225,20,46)" fg:x="49" fg:w="2"/><text x="22.6244%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="22.3744%" y="805" width="0.9132%" height="15" fill="rgb(210,31,41)" fg:x="49" fg:w="2"/><text x="22.6244%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="22.8311%" y="789" width="0.4566%" height="15" fill="rgb(221,200,47)" fg:x="50" fg:w="1"/><text x="23.0811%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="22.8311%" y="773" width="0.4566%" height="15" fill="rgb(226,26,5)" fg:x="50" fg:w="1"/><text x="23.0811%" y="783.50"></text></g><g><title>_mi_arena_alloc_aligned (1 samples, 0.46%)</title><rect x="23.2877%" y="533" width="0.4566%" height="15" fill="rgb(249,33,26)" fg:x="51" fg:w="1"/><text x="23.5377%" y="543.50"></text></g><g><title>_mi_os_alloc_aligned (1 samples, 0.46%)</title><rect x="23.2877%" y="517" width="0.4566%" height="15" fill="rgb(235,183,28)" fg:x="51" fg:w="1"/><text x="23.5377%" y="527.50"></text></g><g><title>mi_os_mem_alloc_aligned (1 samples, 0.46%)</title><rect x="23.2877%" y="501" width="0.4566%" height="15" fill="rgb(221,5,38)" fg:x="51" fg:w="1"/><text x="23.5377%" y="511.50"></text></g><g><title>mi_os_mem_alloc (1 samples, 0.46%)</title><rect x="23.2877%" y="485" width="0.4566%" height="15" fill="rgb(247,18,42)" fg:x="51" fg:w="1"/><text x="23.5377%" y="495.50"></text></g><g><title>mi_unix_mmap (1 samples, 0.46%)</title><rect x="23.2877%" y="469" width="0.4566%" height="15" fill="rgb(241,131,45)" fg:x="51" fg:w="1"/><text x="23.5377%" y="479.50"></text></g><g><title>use_large_os_page (1 samples, 0.46%)</title><rect x="23.2877%" y="453" width="0.4566%" height="15" fill="rgb(249,31,29)" fg:x="51" fg:w="1"/><text x="23.5377%" y="463.50"></text></g><g><title>memset (6 samples, 2.74%)</title><rect x="23.7443%" y="533" width="2.7397%" height="15" fill="rgb(225,111,53)" fg:x="52" fg:w="6"/><text x="23.9943%" y="543.50">me..</text></g><g><title>[libc.so.6] (6 samples, 2.74%)</title><rect x="23.7443%" y="517" width="2.7397%" height="15" fill="rgb(238,160,17)" fg:x="52" fg:w="6"/><text x="23.9943%" y="527.50">[l..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="24.2009%" y="501" width="2.2831%" height="15" fill="rgb(214,148,48)" fg:x="53" fg:w="5"/><text x="24.4509%" y="511.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="24.2009%" y="485" width="2.2831%" height="15" fill="rgb(232,36,49)" fg:x="53" fg:w="5"/><text x="24.4509%" y="495.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="24.2009%" y="469" width="2.2831%" height="15" fill="rgb(209,103,24)" fg:x="53" fg:w="5"/><text x="24.4509%" y="479.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="24.2009%" y="453" width="2.2831%" height="15" fill="rgb(229,88,8)" fg:x="53" fg:w="5"/><text x="24.4509%" y="463.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="24.2009%" y="437" width="2.2831%" height="15" fill="rgb(213,181,19)" fg:x="53" fg:w="5"/><text x="24.4509%" y="447.50">[..</text></g><g><title>mi_find_page (12 samples, 5.48%)</title><rect x="23.2877%" y="677" width="5.4795%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="12"/><text x="23.5377%" y="687.50">mi_find..</text></g><g><title>mi_find_free_page (12 samples, 5.48%)</title><rect x="23.2877%" y="661" width="5.4795%" height="15" fill="rgb(241,83,37)" fg:x="51" fg:w="12"/><text x="23.5377%" y="671.50">mi_find..</text></g><g><title>mi_page_queue_find_free_ex (12 samples, 5.48%)</title><rect x="23.2877%" y="645" width="5.4795%" height="15" fill="rgb(233,36,39)" fg:x="51" fg:w="12"/><text x="23.5377%" y="655.50">mi_page..</text></g><g><title>mi_page_fresh (12 samples, 5.48%)</title><rect x="23.2877%" y="629" width="5.4795%" height="15" fill="rgb(226,3,54)" fg:x="51" fg:w="12"/><text x="23.5377%" y="639.50">mi_page..</text></g><g><title>mi_page_fresh_alloc (12 samples, 5.48%)</title><rect x="23.2877%" y="613" width="5.4795%" height="15" fill="rgb(245,192,40)" fg:x="51" fg:w="12"/><text x="23.5377%" y="623.50">mi_page..</text></g><g><title>mi_segments_page_alloc (12 samples, 5.48%)</title><rect x="23.2877%" y="597" width="5.4795%" height="15" fill="rgb(238,167,29)" fg:x="51" fg:w="12"/><text x="23.5377%" y="607.50">mi_segm..</text></g><g><title>mi_segment_reclaim_or_alloc (12 samples, 5.48%)</title><rect x="23.2877%" y="581" width="5.4795%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="12"/><text x="23.5377%" y="591.50">mi_segm..</text></g><g><title>mi_segment_alloc (12 samples, 5.48%)</title><rect x="23.2877%" y="565" width="5.4795%" height="15" fill="rgb(231,60,39)" fg:x="51" fg:w="12"/><text x="23.5377%" y="575.50">mi_segm..</text></g><g><title>mi_segment_init (12 samples, 5.48%)</title><rect x="23.2877%" y="549" width="5.4795%" height="15" fill="rgb(208,69,12)" fg:x="51" fg:w="12"/><text x="23.5377%" y="559.50">mi_segm..</text></g><g><title>mi_segment_span_allocate (5 samples, 2.28%)</title><rect x="26.4840%" y="533" width="2.2831%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="5"/><text x="26.7340%" y="543.50">m..</text></g><g><title>mi_segment_ensure_committed (5 samples, 2.28%)</title><rect x="26.4840%" y="517" width="2.2831%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="5"/><text x="26.7340%" y="527.50">m..</text></g><g><title>mi_segment_commitx (5 samples, 2.28%)</title><rect x="26.4840%" y="501" width="2.2831%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="5"/><text x="26.7340%" y="511.50">m..</text></g><g><title>_mi_os_commit (5 samples, 2.28%)</title><rect x="26.4840%" y="485" width="2.2831%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="5"/><text x="26.7340%" y="495.50">_..</text></g><g><title>mi_os_commitx (5 samples, 2.28%)</title><rect x="26.4840%" y="469" width="2.2831%" height="15" fill="rgb(218,138,4)" fg:x="58" fg:w="5"/><text x="26.7340%" y="479.50">m..</text></g><g><title>__GI___mprotect (5 samples, 2.28%)</title><rect x="26.4840%" y="453" width="2.2831%" height="15" fill="rgb(250,191,14)" fg:x="58" fg:w="5"/><text x="26.7340%" y="463.50">_..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="437" width="2.2831%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="5"/><text x="26.7340%" y="447.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="421" width="2.2831%" height="15" fill="rgb(206,27,48)" fg:x="58" fg:w="5"/><text x="26.7340%" y="431.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="405" width="2.2831%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="5"/><text x="26.7340%" y="415.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="389" width="2.2831%" height="15" fill="rgb(250,213,24)" fg:x="58" fg:w="5"/><text x="26.7340%" y="399.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="373" width="2.2831%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="5"/><text x="26.7340%" y="383.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="357" width="2.2831%" height="15" fill="rgb(231,138,38)" fg:x="58" fg:w="5"/><text x="26.7340%" y="367.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="341" width="2.2831%" height="15" fill="rgb(231,145,46)" fg:x="58" fg:w="5"/><text x="26.7340%" y="351.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="325" width="2.2831%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="5"/><text x="26.7340%" y="335.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="309" width="2.2831%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="5"/><text x="26.7340%" y="319.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="293" width="2.2831%" height="15" fill="rgb(247,81,37)" fg:x="58" fg:w="5"/><text x="26.7340%" y="303.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="277" width="2.2831%" height="15" fill="rgb(209,12,38)" fg:x="58" fg:w="5"/><text x="26.7340%" y="287.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="261" width="2.2831%" height="15" fill="rgb(227,1,9)" fg:x="58" fg:w="5"/><text x="26.7340%" y="271.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="245" width="2.2831%" height="15" fill="rgb(248,47,43)" fg:x="58" fg:w="5"/><text x="26.7340%" y="255.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="229" width="2.2831%" height="15" fill="rgb(221,10,30)" fg:x="58" fg:w="5"/><text x="26.7340%" y="239.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="26.4840%" y="213" width="2.2831%" height="15" fill="rgb(210,229,1)" fg:x="58" fg:w="5"/><text x="26.7340%" y="223.50">[..</text></g><g><title>rayon_core::job::JobFifo::new (17 samples, 7.76%)</title><rect x="23.2877%" y="821" width="7.7626%" height="15" fill="rgb(222,148,37)" fg:x="51" fg:w="17"/><text x="23.5377%" y="831.50">rayon_core:..</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (17 samples, 7.76%)</title><rect x="23.2877%" y="805" width="7.7626%" height="15" fill="rgb(234,67,33)" fg:x="51" fg:w="17"/><text x="23.5377%" y="815.50">crossbeam_d..</text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (17 samples, 7.76%)</title><rect x="23.2877%" y="789" width="7.7626%" height="15" fill="rgb(247,98,35)" fg:x="51" fg:w="17"/><text x="23.5377%" y="799.50">&lt;crossbeam_..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 7.76%)</title><rect x="23.2877%" y="773" width="7.7626%" height="15" fill="rgb(247,138,52)" fg:x="51" fg:w="17"/><text x="23.5377%" y="783.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 7.76%)</title><rect x="23.2877%" y="757" width="7.7626%" height="15" fill="rgb(213,79,30)" fg:x="51" fg:w="17"/><text x="23.5377%" y="767.50">alloc::allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 7.76%)</title><rect x="23.2877%" y="741" width="7.7626%" height="15" fill="rgb(246,177,23)" fg:x="51" fg:w="17"/><text x="23.5377%" y="751.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 7.76%)</title><rect x="23.2877%" y="725" width="7.7626%" height="15" fill="rgb(230,62,27)" fg:x="51" fg:w="17"/><text x="23.5377%" y="735.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (17 samples, 7.76%)</title><rect x="23.2877%" y="709" width="7.7626%" height="15" fill="rgb(216,154,8)" fg:x="51" fg:w="17"/><text x="23.5377%" y="719.50">alloc::allo..</text></g><g><title>_mi_malloc_generic (17 samples, 7.76%)</title><rect x="23.2877%" y="693" width="7.7626%" height="15" fill="rgb(244,35,45)" fg:x="51" fg:w="17"/><text x="23.5377%" y="703.50">_mi_malloc_..</text></g><g><title>mi_thread_init (5 samples, 2.28%)</title><rect x="28.7671%" y="677" width="2.2831%" height="15" fill="rgb(251,115,12)" fg:x="63" fg:w="5"/><text x="29.0171%" y="687.50">m..</text></g><g><title>_mi_heap_init (5 samples, 2.28%)</title><rect x="28.7671%" y="661" width="2.2831%" height="15" fill="rgb(240,54,50)" fg:x="63" fg:w="5"/><text x="29.0171%" y="671.50">_..</text></g><g><title>_mi_memcpy_aligned (5 samples, 2.28%)</title><rect x="28.7671%" y="645" width="2.2831%" height="15" fill="rgb(233,84,52)" fg:x="63" fg:w="5"/><text x="29.0171%" y="655.50">_..</text></g><g><title>_mi_memcpy (5 samples, 2.28%)</title><rect x="28.7671%" y="629" width="2.2831%" height="15" fill="rgb(207,117,47)" fg:x="63" fg:w="5"/><text x="29.0171%" y="639.50">_..</text></g><g><title>memcpy (5 samples, 2.28%)</title><rect x="28.7671%" y="613" width="2.2831%" height="15" fill="rgb(249,43,39)" fg:x="63" fg:w="5"/><text x="29.0171%" y="623.50">m..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="28.7671%" y="597" width="2.2831%" height="15" fill="rgb(209,38,44)" fg:x="63" fg:w="5"/><text x="29.0171%" y="607.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="28.7671%" y="581" width="2.2831%" height="15" fill="rgb(236,212,23)" fg:x="63" fg:w="5"/><text x="29.0171%" y="591.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="28.7671%" y="565" width="2.2831%" height="15" fill="rgb(242,79,21)" fg:x="63" fg:w="5"/><text x="29.0171%" y="575.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="28.7671%" y="549" width="2.2831%" height="15" fill="rgb(211,96,35)" fg:x="63" fg:w="5"/><text x="29.0171%" y="559.50">[..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 13.24%)</title><rect x="23.2877%" y="1029" width="13.2420%" height="15" fill="rgb(253,215,40)" fg:x="51" fg:w="29"/><text x="23.5377%" y="1039.50">&lt;alloc::boxed::Box&lt;F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 13.24%)</title><rect x="23.2877%" y="1013" width="13.2420%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="29"/><text x="23.5377%" y="1023.50">&lt;alloc::boxed::Box&lt;F..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (29 samples, 13.24%)</title><rect x="23.2877%" y="997" width="13.2420%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="29"/><text x="23.5377%" y="1007.50">core::ops::function:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (29 samples, 13.24%)</title><rect x="23.2877%" y="981" width="13.2420%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="29"/><text x="23.5377%" y="991.50">std::thread::Builder..</text></g><g><title>std::panic::catch_unwind (29 samples, 13.24%)</title><rect x="23.2877%" y="965" width="13.2420%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="29"/><text x="23.5377%" y="975.50">std::panic::catch_un..</text></g><g><title>std::panicking::try (29 samples, 13.24%)</title><rect x="23.2877%" y="949" width="13.2420%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="29"/><text x="23.5377%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (29 samples, 13.24%)</title><rect x="23.2877%" y="933" width="13.2420%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="29"/><text x="23.5377%" y="943.50">std::panicking::try:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 13.24%)</title><rect x="23.2877%" y="917" width="13.2420%" height="15" fill="rgb(210,16,53)" fg:x="51" fg:w="29"/><text x="23.5377%" y="927.50">&lt;core::panic::unwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (29 samples, 13.24%)</title><rect x="23.2877%" y="901" width="13.2420%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="29"/><text x="23.5377%" y="911.50">std::thread::Builder..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29 samples, 13.24%)</title><rect x="23.2877%" y="885" width="13.2420%" height="15" fill="rgb(224,169,11)" fg:x="51" fg:w="29"/><text x="23.5377%" y="895.50">std::sys_common::bac..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (29 samples, 13.24%)</title><rect x="23.2877%" y="869" width="13.2420%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="29"/><text x="23.5377%" y="879.50">&lt;rayon_core::registr..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (29 samples, 13.24%)</title><rect x="23.2877%" y="853" width="13.2420%" height="15" fill="rgb(242,216,29)" fg:x="51" fg:w="29"/><text x="23.5377%" y="863.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::main_loop (29 samples, 13.24%)</title><rect x="23.2877%" y="837" width="13.2420%" height="15" fill="rgb(230,116,27)" fg:x="51" fg:w="29"/><text x="23.5377%" y="847.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (12 samples, 5.48%)</title><rect x="31.0502%" y="821" width="5.4795%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="12"/><text x="31.3002%" y="831.50">rayon_c..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (12 samples, 5.48%)</title><rect x="31.0502%" y="805" width="5.4795%" height="15" fill="rgb(253,11,6)" fg:x="68" fg:w="12"/><text x="31.3002%" y="815.50">rayon_c..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (12 samples, 5.48%)</title><rect x="31.0502%" y="789" width="5.4795%" height="15" fill="rgb(247,143,39)" fg:x="68" fg:w="12"/><text x="31.3002%" y="799.50">rayon_c..</text></g><g><title>rayon_core::sleep::Sleep::sleep (12 samples, 5.48%)</title><rect x="31.0502%" y="773" width="5.4795%" height="15" fill="rgb(236,97,10)" fg:x="68" fg:w="12"/><text x="31.3002%" y="783.50">rayon_c..</text></g><g><title>std::sync::condvar::Condvar::wait (12 samples, 5.48%)</title><rect x="31.0502%" y="757" width="5.4795%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="12"/><text x="31.3002%" y="767.50">std::sy..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (12 samples, 5.48%)</title><rect x="31.0502%" y="741" width="5.4795%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="12"/><text x="31.3002%" y="751.50">std::sy..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (12 samples, 5.48%)</title><rect x="31.0502%" y="725" width="5.4795%" height="15" fill="rgb(220,129,5)" fg:x="68" fg:w="12"/><text x="31.3002%" y="735.50">std::sy..</text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 5.48%)</title><rect x="31.0502%" y="709" width="5.4795%" height="15" fill="rgb(242,17,10)" fg:x="68" fg:w="12"/><text x="31.3002%" y="719.50">std::sy..</text></g><g><title>syscall (12 samples, 5.48%)</title><rect x="31.0502%" y="693" width="5.4795%" height="15" fill="rgb(242,107,0)" fg:x="68" fg:w="12"/><text x="31.3002%" y="703.50">syscall</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="677" width="5.4795%" height="15" fill="rgb(251,28,31)" fg:x="68" fg:w="12"/><text x="31.3002%" y="687.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="661" width="5.4795%" height="15" fill="rgb(233,223,10)" fg:x="68" fg:w="12"/><text x="31.3002%" y="671.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="645" width="5.4795%" height="15" fill="rgb(215,21,27)" fg:x="68" fg:w="12"/><text x="31.3002%" y="655.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="629" width="5.4795%" height="15" fill="rgb(232,23,21)" fg:x="68" fg:w="12"/><text x="31.3002%" y="639.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="613" width="5.4795%" height="15" fill="rgb(244,5,23)" fg:x="68" fg:w="12"/><text x="31.3002%" y="623.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="597" width="5.4795%" height="15" fill="rgb(226,81,46)" fg:x="68" fg:w="12"/><text x="31.3002%" y="607.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="581" width="5.4795%" height="15" fill="rgb(247,70,30)" fg:x="68" fg:w="12"/><text x="31.3002%" y="591.50">[unknow..</text></g><g><title>[unknown] (12 samples, 5.48%)</title><rect x="31.0502%" y="565" width="5.4795%" height="15" fill="rgb(212,68,19)" fg:x="68" fg:w="12"/><text x="31.3002%" y="575.50">[unknow..</text></g><g><title>[unknown] (6 samples, 2.74%)</title><rect x="33.7900%" y="549" width="2.7397%" height="15" fill="rgb(240,187,13)" fg:x="74" fg:w="6"/><text x="34.0400%" y="559.50">[u..</text></g><g><title>[unknown] (6 samples, 2.74%)</title><rect x="33.7900%" y="533" width="2.7397%" height="15" fill="rgb(223,113,26)" fg:x="74" fg:w="6"/><text x="34.0400%" y="543.50">[u..</text></g><g><title>[unknown] (6 samples, 2.74%)</title><rect x="33.7900%" y="517" width="2.7397%" height="15" fill="rgb(206,192,2)" fg:x="74" fg:w="6"/><text x="34.0400%" y="527.50">[u..</text></g><g><title>__clone3 (43 samples, 19.63%)</title><rect x="23.2877%" y="1077" width="19.6347%" height="15" fill="rgb(241,108,4)" fg:x="51" fg:w="43"/><text x="23.5377%" y="1087.50">__clone3</text></g><g><title>start_thread (43 samples, 19.63%)</title><rect x="23.2877%" y="1061" width="19.6347%" height="15" fill="rgb(247,173,49)" fg:x="51" fg:w="43"/><text x="23.5377%" y="1071.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (43 samples, 19.63%)</title><rect x="23.2877%" y="1045" width="19.6347%" height="15" fill="rgb(224,114,35)" fg:x="51" fg:w="43"/><text x="23.5377%" y="1055.50">std::sys::unix::thread::Thread:..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (14 samples, 6.39%)</title><rect x="36.5297%" y="1029" width="6.3927%" height="15" fill="rgb(245,159,27)" fg:x="80" fg:w="14"/><text x="36.7797%" y="1039.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (14 samples, 6.39%)</title><rect x="36.5297%" y="1013" width="6.3927%" height="15" fill="rgb(245,172,44)" fg:x="80" fg:w="14"/><text x="36.7797%" y="1023.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (14 samples, 6.39%)</title><rect x="36.5297%" y="997" width="6.3927%" height="15" fill="rgb(236,23,11)" fg:x="80" fg:w="14"/><text x="36.7797%" y="1007.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (14 samples, 6.39%)</title><rect x="36.5297%" y="981" width="6.3927%" height="15" fill="rgb(205,117,38)" fg:x="80" fg:w="14"/><text x="36.7797%" y="991.50">std::sys..</text></g><g><title>__GI___mmap64 (14 samples, 6.39%)</title><rect x="36.5297%" y="965" width="6.3927%" height="15" fill="rgb(237,72,25)" fg:x="80" fg:w="14"/><text x="36.7797%" y="975.50">__GI___m..</text></g><g><title>__GI___mmap64 (14 samples, 6.39%)</title><rect x="36.5297%" y="949" width="6.3927%" height="15" fill="rgb(244,70,9)" fg:x="80" fg:w="14"/><text x="36.7797%" y="959.50">__GI___m..</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="933" width="6.3927%" height="15" fill="rgb(217,125,39)" fg:x="80" fg:w="14"/><text x="36.7797%" y="943.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="917" width="6.3927%" height="15" fill="rgb(235,36,10)" fg:x="80" fg:w="14"/><text x="36.7797%" y="927.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="901" width="6.3927%" height="15" fill="rgb(251,123,47)" fg:x="80" fg:w="14"/><text x="36.7797%" y="911.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="885" width="6.3927%" height="15" fill="rgb(221,13,13)" fg:x="80" fg:w="14"/><text x="36.7797%" y="895.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="869" width="6.3927%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="14"/><text x="36.7797%" y="879.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="853" width="6.3927%" height="15" fill="rgb(211,50,8)" fg:x="80" fg:w="14"/><text x="36.7797%" y="863.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="837" width="6.3927%" height="15" fill="rgb(245,182,24)" fg:x="80" fg:w="14"/><text x="36.7797%" y="847.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="821" width="6.3927%" height="15" fill="rgb(242,14,37)" fg:x="80" fg:w="14"/><text x="36.7797%" y="831.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.39%)</title><rect x="36.5297%" y="805" width="6.3927%" height="15" fill="rgb(246,228,12)" fg:x="80" fg:w="14"/><text x="36.7797%" y="815.50">[unknown]</text></g><g><title>[unknown] (11 samples, 5.02%)</title><rect x="37.8995%" y="789" width="5.0228%" height="15" fill="rgb(213,55,15)" fg:x="83" fg:w="11"/><text x="38.1495%" y="799.50">[unkno..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="41.0959%" y="773" width="1.8265%" height="15" fill="rgb(209,9,3)" fg:x="90" fg:w="4"/><text x="41.3459%" y="783.50">[..</text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="41.5525%" y="757" width="1.3699%" height="15" fill="rgb(230,59,30)" fg:x="91" fg:w="3"/><text x="41.8025%" y="767.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="41.5525%" y="741" width="1.3699%" height="15" fill="rgb(209,121,21)" fg:x="91" fg:w="3"/><text x="41.8025%" y="751.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="41.5525%" y="725" width="1.3699%" height="15" fill="rgb(220,109,13)" fg:x="91" fg:w="3"/><text x="41.8025%" y="735.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="41.5525%" y="709" width="1.3699%" height="15" fill="rgb(232,18,1)" fg:x="91" fg:w="3"/><text x="41.8025%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="42.0091%" y="693" width="0.9132%" height="15" fill="rgb(215,41,42)" fg:x="92" fg:w="2"/><text x="42.2591%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.4658%" y="677" width="0.4566%" height="15" fill="rgb(224,123,36)" fg:x="93" fg:w="1"/><text x="42.7158%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.4658%" y="661" width="0.4566%" height="15" fill="rgb(240,125,3)" fg:x="93" fg:w="1"/><text x="42.7158%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.4658%" y="645" width="0.4566%" height="15" fill="rgb(205,98,50)" fg:x="93" fg:w="1"/><text x="42.7158%" y="655.50"></text></g><g><title>__GI_exit (1 samples, 0.46%)</title><rect x="42.9224%" y="1029" width="0.4566%" height="15" fill="rgb(205,185,37)" fg:x="94" fg:w="1"/><text x="43.1724%" y="1039.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.46%)</title><rect x="42.9224%" y="1013" width="0.4566%" height="15" fill="rgb(238,207,15)" fg:x="94" fg:w="1"/><text x="43.1724%" y="1023.50"></text></g><g><title>mi_process_done (1 samples, 0.46%)</title><rect x="42.9224%" y="997" width="0.4566%" height="15" fill="rgb(213,199,42)" fg:x="94" fg:w="1"/><text x="43.1724%" y="1007.50"></text></g><g><title>mi_process_done (1 samples, 0.46%)</title><rect x="42.9224%" y="981" width="0.4566%" height="15" fill="rgb(235,201,11)" fg:x="94" fg:w="1"/><text x="43.1724%" y="991.50"></text></g><g><title>mi_heap_collect_ex (1 samples, 0.46%)</title><rect x="42.9224%" y="965" width="0.4566%" height="15" fill="rgb(207,46,11)" fg:x="94" fg:w="1"/><text x="43.1724%" y="975.50"></text></g><g><title>mi_segment_cache_purge (1 samples, 0.46%)</title><rect x="42.9224%" y="949" width="0.4566%" height="15" fill="rgb(241,35,35)" fg:x="94" fg:w="1"/><text x="43.1724%" y="959.50"></text></g><g><title>mi_commit_mask_decommit (1 samples, 0.46%)</title><rect x="42.9224%" y="933" width="0.4566%" height="15" fill="rgb(243,32,47)" fg:x="94" fg:w="1"/><text x="43.1724%" y="943.50"></text></g><g><title>_mi_os_decommit (1 samples, 0.46%)</title><rect x="42.9224%" y="917" width="0.4566%" height="15" fill="rgb(247,202,23)" fg:x="94" fg:w="1"/><text x="43.1724%" y="927.50"></text></g><g><title>mi_os_commitx (1 samples, 0.46%)</title><rect x="42.9224%" y="901" width="0.4566%" height="15" fill="rgb(219,102,11)" fg:x="94" fg:w="1"/><text x="43.1724%" y="911.50"></text></g><g><title>__GI_madvise (1 samples, 0.46%)</title><rect x="42.9224%" y="885" width="0.4566%" height="15" fill="rgb(243,110,44)" fg:x="94" fg:w="1"/><text x="43.1724%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="869" width="0.4566%" height="15" fill="rgb(222,74,54)" fg:x="94" fg:w="1"/><text x="43.1724%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="853" width="0.4566%" height="15" fill="rgb(216,99,12)" fg:x="94" fg:w="1"/><text x="43.1724%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="837" width="0.4566%" height="15" fill="rgb(226,22,26)" fg:x="94" fg:w="1"/><text x="43.1724%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="821" width="0.4566%" height="15" fill="rgb(217,163,10)" fg:x="94" fg:w="1"/><text x="43.1724%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="805" width="0.4566%" height="15" fill="rgb(213,25,53)" fg:x="94" fg:w="1"/><text x="43.1724%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="789" width="0.4566%" height="15" fill="rgb(252,105,26)" fg:x="94" fg:w="1"/><text x="43.1724%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="773" width="0.4566%" height="15" fill="rgb(220,39,43)" fg:x="94" fg:w="1"/><text x="43.1724%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="757" width="0.4566%" height="15" fill="rgb(229,68,48)" fg:x="94" fg:w="1"/><text x="43.1724%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="741" width="0.4566%" height="15" fill="rgb(252,8,32)" fg:x="94" fg:w="1"/><text x="43.1724%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="725" width="0.4566%" height="15" fill="rgb(223,20,43)" fg:x="94" fg:w="1"/><text x="43.1724%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="709" width="0.4566%" height="15" fill="rgb(229,81,49)" fg:x="94" fg:w="1"/><text x="43.1724%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="693" width="0.4566%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="1"/><text x="43.1724%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="677" width="0.4566%" height="15" fill="rgb(249,185,26)" fg:x="94" fg:w="1"/><text x="43.1724%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="42.9224%" y="661" width="0.4566%" height="15" fill="rgb(249,174,33)" fg:x="94" fg:w="1"/><text x="43.1724%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::cache::cache_reader::ReadCache&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="613" width="0.4566%" height="15" fill="rgb(233,201,37)" fg:x="95" fg:w="1"/><text x="43.6290%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="597" width="0.4566%" height="15" fill="rgb(221,78,26)" fg:x="95" fg:w="1"/><text x="43.6290%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="581" width="0.4566%" height="15" fill="rgb(250,127,30)" fg:x="95" fg:w="1"/><text x="43.6290%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;)&gt;&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="565" width="0.4566%" height="15" fill="rgb(230,49,44)" fg:x="95" fg:w="1"/><text x="43.6290%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="43.3790%" y="549" width="0.4566%" height="15" fill="rgb(229,67,23)" fg:x="95" fg:w="1"/><text x="43.6290%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.46%)</title><rect x="43.3790%" y="533" width="0.4566%" height="15" fill="rgb(249,83,47)" fg:x="95" fg:w="1"/><text x="43.6290%" y="543.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.46%)</title><rect x="43.3790%" y="517" width="0.4566%" height="15" fill="rgb(215,43,3)" fg:x="95" fg:w="1"/><text x="43.6290%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.46%)</title><rect x="43.3790%" y="501" width="0.4566%" height="15" fill="rgb(238,154,13)" fg:x="95" fg:w="1"/><text x="43.6290%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;)&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="485" width="0.4566%" height="15" fill="rgb(219,56,2)" fg:x="95" fg:w="1"/><text x="43.6290%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="469" width="0.4566%" height="15" fill="rgb(233,0,4)" fg:x="95" fg:w="1"/><text x="43.6290%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="453" width="0.4566%" height="15" fill="rgb(235,30,7)" fg:x="95" fg:w="1"/><text x="43.6290%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.46%)</title><rect x="43.3790%" y="437" width="0.4566%" height="15" fill="rgb(250,79,13)" fg:x="95" fg:w="1"/><text x="43.6290%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="43.3790%" y="421" width="0.4566%" height="15" fill="rgb(211,146,34)" fg:x="95" fg:w="1"/><text x="43.6290%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.46%)</title><rect x="43.3790%" y="405" width="0.4566%" height="15" fill="rgb(228,22,38)" fg:x="95" fg:w="1"/><text x="43.6290%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.46%)</title><rect x="43.3790%" y="389" width="0.4566%" height="15" fill="rgb(235,168,5)" fg:x="95" fg:w="1"/><text x="43.6290%" y="399.50"></text></g><g><title>mi_free (1 samples, 0.46%)</title><rect x="43.3790%" y="373" width="0.4566%" height="15" fill="rgb(221,155,16)" fg:x="95" fg:w="1"/><text x="43.6290%" y="383.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.46%)</title><rect x="43.3790%" y="357" width="0.4566%" height="15" fill="rgb(215,215,53)" fg:x="95" fg:w="1"/><text x="43.6290%" y="367.50"></text></g><g><title>mi_slice_first (1 samples, 0.46%)</title><rect x="43.3790%" y="341" width="0.4566%" height="15" fill="rgb(223,4,10)" fg:x="95" fg:w="1"/><text x="43.6290%" y="351.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (4 samples, 1.83%)</title><rect x="43.8356%" y="549" width="1.8265%" height="15" fill="rgb(234,103,6)" fg:x="96" fg:w="4"/><text x="44.0856%" y="559.50">b..</text></g><g><title>std::io::Read::read_exact (4 samples, 1.83%)</title><rect x="43.8356%" y="533" width="1.8265%" height="15" fill="rgb(227,97,0)" fg:x="96" fg:w="4"/><text x="44.0856%" y="543.50">s..</text></g><g><title>std::io::default_read_exact (4 samples, 1.83%)</title><rect x="43.8356%" y="517" width="1.8265%" height="15" fill="rgb(234,150,53)" fg:x="96" fg:w="4"/><text x="44.0856%" y="527.50">s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 1.83%)</title><rect x="43.8356%" y="501" width="1.8265%" height="15" fill="rgb(228,201,54)" fg:x="96" fg:w="4"/><text x="44.0856%" y="511.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read (4 samples, 1.83%)</title><rect x="43.8356%" y="485" width="1.8265%" height="15" fill="rgb(222,22,37)" fg:x="96" fg:w="4"/><text x="44.0856%" y="495.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 1.83%)</title><rect x="43.8356%" y="469" width="1.8265%" height="15" fill="rgb(237,53,32)" fg:x="96" fg:w="4"/><text x="44.0856%" y="479.50">s..</text></g><g><title>__GI___libc_read (4 samples, 1.83%)</title><rect x="43.8356%" y="453" width="1.8265%" height="15" fill="rgb(233,25,53)" fg:x="96" fg:w="4"/><text x="44.0856%" y="463.50">_..</text></g><g><title>__GI___libc_read (4 samples, 1.83%)</title><rect x="43.8356%" y="437" width="1.8265%" height="15" fill="rgb(210,40,34)" fg:x="96" fg:w="4"/><text x="44.0856%" y="447.50">_..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="43.8356%" y="421" width="1.8265%" height="15" fill="rgb(241,220,44)" fg:x="96" fg:w="4"/><text x="44.0856%" y="431.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="43.8356%" y="405" width="1.8265%" height="15" fill="rgb(235,28,35)" fg:x="96" fg:w="4"/><text x="44.0856%" y="415.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="43.8356%" y="389" width="1.8265%" height="15" fill="rgb(210,56,17)" fg:x="96" fg:w="4"/><text x="44.0856%" y="399.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="43.8356%" y="373" width="1.8265%" height="15" fill="rgb(224,130,29)" fg:x="96" fg:w="4"/><text x="44.0856%" y="383.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="43.8356%" y="357" width="1.8265%" height="15" fill="rgb(235,212,8)" fg:x="96" fg:w="4"/><text x="44.0856%" y="367.50">[..</text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="44.2922%" y="341" width="1.3699%" height="15" fill="rgb(223,33,50)" fg:x="97" fg:w="3"/><text x="44.5422%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="44.2922%" y="325" width="1.3699%" height="15" fill="rgb(219,149,13)" fg:x="97" fg:w="3"/><text x="44.5422%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="44.7489%" y="309" width="0.9132%" height="15" fill="rgb(250,156,29)" fg:x="98" fg:w="2"/><text x="44.9989%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="44.7489%" y="293" width="0.9132%" height="15" fill="rgb(216,193,19)" fg:x="98" fg:w="2"/><text x="44.9989%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="44.7489%" y="277" width="0.9132%" height="15" fill="rgb(216,135,14)" fg:x="98" fg:w="2"/><text x="44.9989%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="45.2055%" y="261" width="0.4566%" height="15" fill="rgb(241,47,5)" fg:x="99" fg:w="1"/><text x="45.4555%" y="271.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_cache_if_exists (8 samples, 3.65%)</title><rect x="43.8356%" y="613" width="3.6530%" height="15" fill="rgb(233,42,35)" fg:x="96" fg:w="8"/><text x="44.0856%" y="623.50">demo..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::new (8 samples, 3.65%)</title><rect x="43.8356%" y="597" width="3.6530%" height="15" fill="rgb(231,13,6)" fg:x="96" fg:w="8"/><text x="44.0856%" y="607.50">demo..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::new (8 samples, 3.65%)</title><rect x="43.8356%" y="581" width="3.6530%" height="15" fill="rgb(207,181,40)" fg:x="96" fg:w="8"/><text x="44.0856%" y="591.50">zip:..</text></g><g><title>zip::read::central_header_to_zip_file (8 samples, 3.65%)</title><rect x="43.8356%" y="565" width="3.6530%" height="15" fill="rgb(254,173,49)" fg:x="96" fg:w="8"/><text x="44.0856%" y="575.50">zip:..</text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (4 samples, 1.83%)</title><rect x="45.6621%" y="549" width="1.8265%" height="15" fill="rgb(221,1,38)" fg:x="100" fg:w="4"/><text x="45.9121%" y="559.50">b..</text></g><g><title>std::io::Read::read_exact (4 samples, 1.83%)</title><rect x="45.6621%" y="533" width="1.8265%" height="15" fill="rgb(206,124,46)" fg:x="100" fg:w="4"/><text x="45.9121%" y="543.50">s..</text></g><g><title>std::io::default_read_exact (4 samples, 1.83%)</title><rect x="45.6621%" y="517" width="1.8265%" height="15" fill="rgb(249,21,11)" fg:x="100" fg:w="4"/><text x="45.9121%" y="527.50">s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 1.83%)</title><rect x="45.6621%" y="501" width="1.8265%" height="15" fill="rgb(222,201,40)" fg:x="100" fg:w="4"/><text x="45.9121%" y="511.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read (4 samples, 1.83%)</title><rect x="45.6621%" y="485" width="1.8265%" height="15" fill="rgb(235,61,29)" fg:x="100" fg:w="4"/><text x="45.9121%" y="495.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 1.83%)</title><rect x="45.6621%" y="469" width="1.8265%" height="15" fill="rgb(219,207,3)" fg:x="100" fg:w="4"/><text x="45.9121%" y="479.50">s..</text></g><g><title>__GI___libc_read (4 samples, 1.83%)</title><rect x="45.6621%" y="453" width="1.8265%" height="15" fill="rgb(222,56,46)" fg:x="100" fg:w="4"/><text x="45.9121%" y="463.50">_..</text></g><g><title>__GI___libc_read (4 samples, 1.83%)</title><rect x="45.6621%" y="437" width="1.8265%" height="15" fill="rgb(239,76,54)" fg:x="100" fg:w="4"/><text x="45.9121%" y="447.50">_..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="45.6621%" y="421" width="1.8265%" height="15" fill="rgb(231,124,27)" fg:x="100" fg:w="4"/><text x="45.9121%" y="431.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="45.6621%" y="405" width="1.8265%" height="15" fill="rgb(249,195,6)" fg:x="100" fg:w="4"/><text x="45.9121%" y="415.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="45.6621%" y="389" width="1.8265%" height="15" fill="rgb(237,174,47)" fg:x="100" fg:w="4"/><text x="45.9121%" y="399.50">[..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="45.6621%" y="373" width="1.8265%" height="15" fill="rgb(206,201,31)" fg:x="100" fg:w="4"/><text x="45.9121%" y="383.50">[..</text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="46.1187%" y="357" width="1.3699%" height="15" fill="rgb(231,57,52)" fg:x="101" fg:w="3"/><text x="46.3687%" y="367.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="46.1187%" y="341" width="1.3699%" height="15" fill="rgb(248,177,22)" fg:x="101" fg:w="3"/><text x="46.3687%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="46.1187%" y="325" width="1.3699%" height="15" fill="rgb(215,211,37)" fg:x="101" fg:w="3"/><text x="46.3687%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="46.5753%" y="309" width="0.9132%" height="15" fill="rgb(241,128,51)" fg:x="102" fg:w="2"/><text x="46.8253%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="46.5753%" y="293" width="0.9132%" height="15" fill="rgb(227,165,31)" fg:x="102" fg:w="2"/><text x="46.8253%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="46.5753%" y="277" width="0.9132%" height="15" fill="rgb(228,167,24)" fg:x="102" fg:w="2"/><text x="46.8253%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="47.0320%" y="261" width="0.4566%" height="15" fill="rgb(228,143,12)" fg:x="103" fg:w="1"/><text x="47.2820%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="47.0320%" y="245" width="0.4566%" height="15" fill="rgb(249,149,8)" fg:x="103" fg:w="1"/><text x="47.2820%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.46%)</title><rect x="47.4886%" y="581" width="0.4566%" height="15" fill="rgb(243,35,44)" fg:x="104" fg:w="1"/><text x="47.7386%" y="591.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.46%)</title><rect x="47.4886%" y="565" width="0.4566%" height="15" fill="rgb(246,89,9)" fg:x="104" fg:w="1"/><text x="47.7386%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.46%)</title><rect x="47.4886%" y="549" width="0.4566%" height="15" fill="rgb(233,213,13)" fg:x="104" fg:w="1"/><text x="47.7386%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.91%)</title><rect x="47.9452%" y="581" width="0.9132%" height="15" fill="rgb(233,141,41)" fg:x="105" fg:w="2"/><text x="48.1952%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.46%)</title><rect x="48.4018%" y="565" width="0.4566%" height="15" fill="rgb(239,167,4)" fg:x="106" fg:w="1"/><text x="48.6518%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.46%)</title><rect x="48.4018%" y="549" width="0.4566%" height="15" fill="rgb(209,217,16)" fg:x="106" fg:w="1"/><text x="48.6518%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.46%)</title><rect x="48.4018%" y="533" width="0.4566%" height="15" fill="rgb(219,88,35)" fg:x="106" fg:w="1"/><text x="48.6518%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.46%)</title><rect x="48.4018%" y="517" width="0.4566%" height="15" fill="rgb(220,193,23)" fg:x="106" fg:w="1"/><text x="48.6518%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.46%)</title><rect x="48.4018%" y="501" width="0.4566%" height="15" fill="rgb(230,90,52)" fg:x="106" fg:w="1"/><text x="48.6518%" y="511.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.46%)</title><rect x="48.4018%" y="485" width="0.4566%" height="15" fill="rgb(252,106,19)" fg:x="106" fg:w="1"/><text x="48.6518%" y="495.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.46%)</title><rect x="48.4018%" y="469" width="0.4566%" height="15" fill="rgb(206,74,20)" fg:x="106" fg:w="1"/><text x="48.6518%" y="479.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.46%)</title><rect x="48.4018%" y="453" width="0.4566%" height="15" fill="rgb(230,138,44)" fg:x="106" fg:w="1"/><text x="48.6518%" y="463.50"></text></g><g><title>_mi_memcpy (1 samples, 0.46%)</title><rect x="48.4018%" y="437" width="0.4566%" height="15" fill="rgb(235,182,43)" fg:x="106" fg:w="1"/><text x="48.6518%" y="447.50"></text></g><g><title>memcpy (1 samples, 0.46%)</title><rect x="48.4018%" y="421" width="0.4566%" height="15" fill="rgb(242,16,51)" fg:x="106" fg:w="1"/><text x="48.6518%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.46%)</title><rect x="48.4018%" y="405" width="0.4566%" height="15" fill="rgb(248,9,4)" fg:x="106" fg:w="1"/><text x="48.6518%" y="415.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_player_messages (4 samples, 1.83%)</title><rect x="47.4886%" y="613" width="1.8265%" height="15" fill="rgb(210,31,22)" fg:x="104" fg:w="4"/><text x="47.7386%" y="623.50">d..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_game_events (4 samples, 1.83%)</title><rect x="47.4886%" y="597" width="1.8265%" height="15" fill="rgb(239,54,39)" fg:x="104" fg:w="4"/><text x="47.7386%" y="607.50">d..</text></g><g><title>std::io::Read::read_to_end (1 samples, 0.46%)</title><rect x="48.8584%" y="581" width="0.4566%" height="15" fill="rgb(230,99,41)" fg:x="107" fg:w="1"/><text x="49.1084%" y="591.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.46%)</title><rect x="48.8584%" y="565" width="0.4566%" height="15" fill="rgb(253,106,12)" fg:x="107" fg:w="1"/><text x="49.1084%" y="575.50"></text></g><g><title>std::io::Read::read_buf (1 samples, 0.46%)</title><rect x="48.8584%" y="549" width="0.4566%" height="15" fill="rgb(213,46,41)" fg:x="107" fg:w="1"/><text x="49.1084%" y="559.50"></text></g><g><title>std::io::default_read_buf (1 samples, 0.46%)</title><rect x="48.8584%" y="533" width="0.4566%" height="15" fill="rgb(215,133,35)" fg:x="107" fg:w="1"/><text x="49.1084%" y="543.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (1 samples, 0.46%)</title><rect x="48.8584%" y="517" width="0.4566%" height="15" fill="rgb(213,28,5)" fg:x="107" fg:w="1"/><text x="49.1084%" y="527.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (1 samples, 0.46%)</title><rect x="48.8584%" y="501" width="0.4566%" height="15" fill="rgb(215,77,49)" fg:x="107" fg:w="1"/><text x="49.1084%" y="511.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (1 samples, 0.46%)</title><rect x="48.8584%" y="485" width="0.4566%" height="15" fill="rgb(248,100,22)" fg:x="107" fg:w="1"/><text x="49.1084%" y="495.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.46%)</title><rect x="48.8584%" y="469" width="0.4566%" height="15" fill="rgb(208,67,9)" fg:x="107" fg:w="1"/><text x="49.1084%" y="479.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.46%)</title><rect x="48.8584%" y="453" width="0.4566%" height="15" fill="rgb(219,133,21)" fg:x="107" fg:w="1"/><text x="49.1084%" y="463.50"></text></g><g><title>&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (1 samples, 0.46%)</title><rect x="48.8584%" y="437" width="0.4566%" height="15" fill="rgb(246,46,29)" fg:x="107" fg:w="1"/><text x="49.1084%" y="447.50"></text></g><g><title>&lt;zstd::stream::raw::Decoder as zstd::stream::raw::Operation&gt;::run (1 samples, 0.46%)</title><rect x="48.8584%" y="421" width="0.4566%" height="15" fill="rgb(246,185,52)" fg:x="107" fg:w="1"/><text x="49.1084%" y="431.50"></text></g><g><title>zstd_safe::DCtx::decompress_stream (1 samples, 0.46%)</title><rect x="48.8584%" y="405" width="0.4566%" height="15" fill="rgb(252,136,11)" fg:x="107" fg:w="1"/><text x="49.1084%" y="415.50"></text></g><g><title>ZSTD_decompressStream (1 samples, 0.46%)</title><rect x="48.8584%" y="389" width="0.4566%" height="15" fill="rgb(219,138,53)" fg:x="107" fg:w="1"/><text x="49.1084%" y="399.50"></text></g><g><title>ZSTD_decompressContinueStream (1 samples, 0.46%)</title><rect x="48.8584%" y="373" width="0.4566%" height="15" fill="rgb(211,51,23)" fg:x="107" fg:w="1"/><text x="49.1084%" y="383.50"></text></g><g><title>ZSTD_decompressContinue (1 samples, 0.46%)</title><rect x="48.8584%" y="357" width="0.4566%" height="15" fill="rgb(247,221,28)" fg:x="107" fg:w="1"/><text x="49.1084%" y="367.50"></text></g><g><title>ZSTD_decompressContinue (1 samples, 0.46%)</title><rect x="48.8584%" y="341" width="0.4566%" height="15" fill="rgb(251,222,45)" fg:x="107" fg:w="1"/><text x="49.1084%" y="351.50"></text></g><g><title>ZSTD_decompressBlock_internal (1 samples, 0.46%)</title><rect x="48.8584%" y="325" width="0.4566%" height="15" fill="rgb(217,162,53)" fg:x="107" fg:w="1"/><text x="49.1084%" y="335.50"></text></g><g><title>ZSTD_decompressBlock_internal (1 samples, 0.46%)</title><rect x="48.8584%" y="309" width="0.4566%" height="15" fill="rgb(229,93,14)" fg:x="107" fg:w="1"/><text x="49.1084%" y="319.50"></text></g><g><title>ZSTD_decompressSequences (1 samples, 0.46%)</title><rect x="48.8584%" y="293" width="0.4566%" height="15" fill="rgb(209,67,49)" fg:x="107" fg:w="1"/><text x="49.1084%" y="303.50"></text></g><g><title>ZSTD_decompressSequences_bmi2 (1 samples, 0.46%)</title><rect x="48.8584%" y="277" width="0.4566%" height="15" fill="rgb(213,87,29)" fg:x="107" fg:w="1"/><text x="49.1084%" y="287.50"></text></g><g><title>ZSTD_decompressSequences_body (1 samples, 0.46%)</title><rect x="48.8584%" y="261" width="0.4566%" height="15" fill="rgb(205,151,52)" fg:x="107" fg:w="1"/><text x="49.1084%" y="271.50"></text></g><g><title>ZSTD_execSequence (1 samples, 0.46%)</title><rect x="48.8584%" y="245" width="0.4566%" height="15" fill="rgb(253,215,39)" fg:x="107" fg:w="1"/><text x="49.1084%" y="255.50"></text></g><g><title>ZSTD_overlapCopy8 (1 samples, 0.46%)</title><rect x="48.8584%" y="229" width="0.4566%" height="15" fill="rgb(221,220,41)" fg:x="107" fg:w="1"/><text x="49.1084%" y="239.50"></text></g><g><title>ZSTD_copy8 (1 samples, 0.46%)</title><rect x="48.8584%" y="213" width="0.4566%" height="15" fill="rgb(218,133,21)" fg:x="107" fg:w="1"/><text x="49.1084%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::parser::JobResult&gt;&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="597" width="0.4566%" height="15" fill="rgb(221,193,43)" fg:x="108" fg:w="1"/><text x="49.5651%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="49.3151%" y="581" width="0.4566%" height="15" fill="rgb(240,128,52)" fg:x="108" fg:w="1"/><text x="49.5651%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::parser::JobResult]&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="565" width="0.4566%" height="15" fill="rgb(253,114,12)" fg:x="108" fg:w="1"/><text x="49.5651%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::JobResult&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="549" width="0.4566%" height="15" fill="rgb(215,223,47)" fg:x="108" fg:w="1"/><text x="49.5651%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt;&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="533" width="0.4566%" height="15" fill="rgb(248,225,23)" fg:x="108" fg:w="1"/><text x="49.5651%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="49.3151%" y="517" width="0.4566%" height="15" fill="rgb(250,108,0)" fg:x="108" fg:w="1"/><text x="49.5651%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::GameEvent]&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="501" width="0.4566%" height="15" fill="rgb(228,208,7)" fg:x="108" fg:w="1"/><text x="49.5651%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="485" width="0.4566%" height="15" fill="rgb(244,45,10)" fg:x="108" fg:w="1"/><text x="49.5651%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt;&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="469" width="0.4566%" height="15" fill="rgb(207,125,25)" fg:x="108" fg:w="1"/><text x="49.5651%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="49.3151%" y="453" width="0.4566%" height="15" fill="rgb(210,195,18)" fg:x="108" fg:w="1"/><text x="49.5651%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::NameDataPair]&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="437" width="0.4566%" height="15" fill="rgb(249,80,12)" fg:x="108" fg:w="1"/><text x="49.5651%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="421" width="0.4566%" height="15" fill="rgb(221,65,9)" fg:x="108" fg:w="1"/><text x="49.5651%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="405" width="0.4566%" height="15" fill="rgb(235,49,36)" fg:x="108" fg:w="1"/><text x="49.5651%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="389" width="0.4566%" height="15" fill="rgb(225,32,20)" fg:x="108" fg:w="1"/><text x="49.5651%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.46%)</title><rect x="49.3151%" y="373" width="0.4566%" height="15" fill="rgb(215,141,46)" fg:x="108" fg:w="1"/><text x="49.5651%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="49.3151%" y="357" width="0.4566%" height="15" fill="rgb(250,160,47)" fg:x="108" fg:w="1"/><text x="49.5651%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.46%)</title><rect x="49.3151%" y="341" width="0.4566%" height="15" fill="rgb(216,222,40)" fg:x="108" fg:w="1"/><text x="49.5651%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.46%)</title><rect x="49.3151%" y="325" width="0.4566%" height="15" fill="rgb(234,217,39)" fg:x="108" fg:w="1"/><text x="49.5651%" y="335.50"></text></g><g><title>mi_free (1 samples, 0.46%)</title><rect x="49.3151%" y="309" width="0.4566%" height="15" fill="rgb(207,178,40)" fg:x="108" fg:w="1"/><text x="49.5651%" y="319.50"></text></g><g><title>mi_block_set_next (1 samples, 0.46%)</title><rect x="49.3151%" y="293" width="0.4566%" height="15" fill="rgb(221,136,13)" fg:x="108" fg:w="1"/><text x="49.5651%" y="303.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.46%)</title><rect x="49.3151%" y="277" width="0.4566%" height="15" fill="rgb(249,199,10)" fg:x="108" fg:w="1"/><text x="49.5651%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.46%)</title><rect x="57.9909%" y="421" width="0.4566%" height="15" fill="rgb(249,222,13)" fg:x="127" fg:w="1"/><text x="58.2409%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 7.76%)</title><rect x="51.1416%" y="453" width="7.7626%" height="15" fill="rgb(244,185,38)" fg:x="112" fg:w="17"/><text x="51.3916%" y="463.50">&lt;core::iter..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (17 samples, 7.76%)</title><rect x="51.1416%" y="437" width="7.7626%" height="15" fill="rgb(236,202,9)" fg:x="112" fg:w="17"/><text x="51.3916%" y="447.50">&lt;core::slic..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.46%)</title><rect x="58.4475%" y="421" width="0.4566%" height="15" fill="rgb(250,229,37)" fg:x="128" fg:w="1"/><text x="58.6975%" y="431.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}} (1 samples, 0.46%)</title><rect x="58.4475%" y="405" width="0.4566%" height="15" fill="rgb(206,174,23)" fg:x="128" fg:w="1"/><text x="58.6975%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 8.68%)</title><rect x="51.1416%" y="469" width="8.6758%" height="15" fill="rgb(211,33,43)" fg:x="112" fg:w="19"/><text x="51.3916%" y="479.50">&lt;core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.91%)</title><rect x="58.9041%" y="453" width="0.9132%" height="15" fill="rgb(245,58,50)" fg:x="129" fg:w="2"/><text x="59.1541%" y="463.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.91%)</title><rect x="58.9041%" y="437" width="0.9132%" height="15" fill="rgb(244,68,36)" fg:x="129" fg:w="2"/><text x="59.1541%" y="447.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}} (2 samples, 0.91%)</title><rect x="58.9041%" y="421" width="0.9132%" height="15" fill="rgb(232,229,15)" fg:x="129" fg:w="2"/><text x="59.1541%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.46%)</title><rect x="59.8174%" y="469" width="0.4566%" height="15" fill="rgb(254,30,23)" fg:x="131" fg:w="1"/><text x="60.0674%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.91%)</title><rect x="60.2740%" y="469" width="0.9132%" height="15" fill="rgb(235,160,14)" fg:x="132" fg:w="2"/><text x="60.5240%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.91%)</title><rect x="60.2740%" y="453" width="0.9132%" height="15" fill="rgb(212,155,44)" fg:x="132" fg:w="2"/><text x="60.5240%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 11.87%)</title><rect x="49.7717%" y="565" width="11.8721%" height="15" fill="rgb(226,2,50)" fg:x="109" fg:w="26"/><text x="50.0217%" y="575.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (26 samples, 11.87%)</title><rect x="49.7717%" y="549" width="11.8721%" height="15" fill="rgb(234,177,6)" fg:x="109" fg:w="26"/><text x="50.0217%" y="559.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 11.87%)</title><rect x="49.7717%" y="533" width="11.8721%" height="15" fill="rgb(217,24,9)" fg:x="109" fg:w="26"/><text x="50.0217%" y="543.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26 samples, 11.87%)</title><rect x="49.7717%" y="517" width="11.8721%" height="15" fill="rgb(220,13,46)" fg:x="109" fg:w="26"/><text x="50.0217%" y="527.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 11.87%)</title><rect x="49.7717%" y="501" width="11.8721%" height="15" fill="rgb(239,221,27)" fg:x="109" fg:w="26"/><text x="50.0217%" y="511.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (26 samples, 11.87%)</title><rect x="49.7717%" y="485" width="11.8721%" height="15" fill="rgb(222,198,25)" fg:x="109" fg:w="26"/><text x="50.0217%" y="495.50">alloc::vec::Vec&lt;T,..</text></g><g><title>core::ptr::write (1 samples, 0.46%)</title><rect x="61.1872%" y="469" width="0.4566%" height="15" fill="rgb(211,99,13)" fg:x="134" fg:w="1"/><text x="61.4372%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="453" width="0.4566%" height="15" fill="rgb(232,111,31)" fg:x="134" fg:w="1"/><text x="61.4372%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="437" width="0.4566%" height="15" fill="rgb(245,82,37)" fg:x="134" fg:w="1"/><text x="61.4372%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="421" width="0.4566%" height="15" fill="rgb(227,149,46)" fg:x="134" fg:w="1"/><text x="61.4372%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="405" width="0.4566%" height="15" fill="rgb(218,36,50)" fg:x="134" fg:w="1"/><text x="61.4372%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="389" width="0.4566%" height="15" fill="rgb(226,80,48)" fg:x="134" fg:w="1"/><text x="61.4372%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="373" width="0.4566%" height="15" fill="rgb(238,224,15)" fg:x="134" fg:w="1"/><text x="61.4372%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="357" width="0.4566%" height="15" fill="rgb(241,136,10)" fg:x="134" fg:w="1"/><text x="61.4372%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="61.1872%" y="341" width="0.4566%" height="15" fill="rgb(208,32,45)" fg:x="134" fg:w="1"/><text x="61.4372%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 1.37%)</title><rect x="61.6438%" y="549" width="1.3699%" height="15" fill="rgb(207,135,9)" fg:x="135" fg:w="3"/><text x="61.8938%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 1.37%)</title><rect x="61.6438%" y="533" width="1.3699%" height="15" fill="rgb(206,86,44)" fg:x="135" fg:w="3"/><text x="61.8938%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 1.37%)</title><rect x="61.6438%" y="517" width="1.3699%" height="15" fill="rgb(245,177,15)" fg:x="135" fg:w="3"/><text x="61.8938%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 1.37%)</title><rect x="61.6438%" y="501" width="1.3699%" height="15" fill="rgb(206,64,50)" fg:x="135" fg:w="3"/><text x="61.8938%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 1.37%)</title><rect x="61.6438%" y="485" width="1.3699%" height="15" fill="rgb(234,36,40)" fg:x="135" fg:w="3"/><text x="61.8938%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 1.37%)</title><rect x="61.6438%" y="469" width="1.3699%" height="15" fill="rgb(213,64,8)" fg:x="135" fg:w="3"/><text x="61.8938%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 1.37%)</title><rect x="61.6438%" y="453" width="1.3699%" height="15" fill="rgb(210,75,36)" fg:x="135" fg:w="3"/><text x="61.8938%" y="463.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks (33 samples, 15.07%)</title><rect x="49.7717%" y="581" width="15.0685%" height="15" fill="rgb(229,88,21)" fg:x="109" fg:w="33"/><text x="50.0217%" y="591.50">demoparser::parsing::ca..</text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::filter_delta_ticks_wanted (7 samples, 3.20%)</title><rect x="61.6438%" y="565" width="3.1963%" height="15" fill="rgb(252,204,47)" fg:x="135" fg:w="7"/><text x="61.8938%" y="575.50">dem..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (4 samples, 1.83%)</title><rect x="63.0137%" y="549" width="1.8265%" height="15" fill="rgb(208,77,27)" fg:x="138" fg:w="4"/><text x="63.2637%" y="559.50">a..</text></g><g><title>alloc::slice::merge_sort (4 samples, 1.83%)</title><rect x="63.0137%" y="533" width="1.8265%" height="15" fill="rgb(221,76,26)" fg:x="138" fg:w="4"/><text x="63.2637%" y="543.50">a..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.46%)</title><rect x="66.2100%" y="565" width="0.4566%" height="15" fill="rgb(225,139,18)" fg:x="145" fg:w="1"/><text x="66.4600%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.46%)</title><rect x="66.2100%" y="549" width="0.4566%" height="15" fill="rgb(230,137,11)" fg:x="145" fg:w="1"/><text x="66.4600%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.46%)</title><rect x="66.2100%" y="533" width="0.4566%" height="15" fill="rgb(212,28,1)" fg:x="145" fg:w="1"/><text x="66.4600%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.46%)</title><rect x="66.2100%" y="517" width="0.4566%" height="15" fill="rgb(248,164,17)" fg:x="145" fg:w="1"/><text x="66.4600%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.46%)</title><rect x="66.2100%" y="501" width="0.4566%" height="15" fill="rgb(222,171,42)" fg:x="145" fg:w="1"/><text x="66.4600%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.46%)</title><rect x="66.2100%" y="485" width="0.4566%" height="15" fill="rgb(243,84,45)" fg:x="145" fg:w="1"/><text x="66.4600%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.46%)</title><rect x="66.2100%" y="469" width="0.4566%" height="15" fill="rgb(252,49,23)" fg:x="145" fg:w="1"/><text x="66.4600%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.46%)</title><rect x="66.2100%" y="453" width="0.4566%" height="15" fill="rgb(215,19,7)" fg:x="145" fg:w="1"/><text x="66.4600%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.46%)</title><rect x="66.2100%" y="437" width="0.4566%" height="15" fill="rgb(238,81,41)" fg:x="145" fg:w="1"/><text x="66.4600%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.46%)</title><rect x="66.6667%" y="565" width="0.4566%" height="15" fill="rgb(210,199,37)" fg:x="146" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="549" width="0.4566%" height="15" fill="rgb(244,192,49)" fg:x="146" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="533" width="0.4566%" height="15" fill="rgb(226,211,11)" fg:x="146" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="517" width="0.4566%" height="15" fill="rgb(236,162,54)" fg:x="146" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="501" width="0.4566%" height="15" fill="rgb(220,229,9)" fg:x="146" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="485" width="0.4566%" height="15" fill="rgb(250,87,22)" fg:x="146" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="469" width="0.4566%" height="15" fill="rgb(239,43,17)" fg:x="146" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="453" width="0.4566%" height="15" fill="rgb(231,177,25)" fg:x="146" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="437" width="0.4566%" height="15" fill="rgb(219,179,1)" fg:x="146" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="421" width="0.4566%" height="15" fill="rgb(238,219,53)" fg:x="146" fg:w="1"/><text x="66.9167%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="405" width="0.4566%" height="15" fill="rgb(232,167,36)" fg:x="146" fg:w="1"/><text x="66.9167%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="389" width="0.4566%" height="15" fill="rgb(244,19,51)" fg:x="146" fg:w="1"/><text x="66.9167%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="373" width="0.4566%" height="15" fill="rgb(224,6,22)" fg:x="146" fg:w="1"/><text x="66.9167%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="357" width="0.4566%" height="15" fill="rgb(224,145,5)" fg:x="146" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="341" width="0.4566%" height="15" fill="rgb(234,130,49)" fg:x="146" fg:w="1"/><text x="66.9167%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="325" width="0.4566%" height="15" fill="rgb(254,6,2)" fg:x="146" fg:w="1"/><text x="66.9167%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="309" width="0.4566%" height="15" fill="rgb(208,96,46)" fg:x="146" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="293" width="0.4566%" height="15" fill="rgb(239,3,39)" fg:x="146" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="277" width="0.4566%" height="15" fill="rgb(233,210,1)" fg:x="146" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="261" width="0.4566%" height="15" fill="rgb(244,137,37)" fg:x="146" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="245" width="0.4566%" height="15" fill="rgb(240,136,2)" fg:x="146" fg:w="1"/><text x="66.9167%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="229" width="0.4566%" height="15" fill="rgb(239,18,37)" fg:x="146" fg:w="1"/><text x="66.9167%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="213" width="0.4566%" height="15" fill="rgb(218,185,22)" fg:x="146" fg:w="1"/><text x="66.9167%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="197" width="0.4566%" height="15" fill="rgb(225,218,4)" fg:x="146" fg:w="1"/><text x="66.9167%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="181" width="0.4566%" height="15" fill="rgb(230,182,32)" fg:x="146" fg:w="1"/><text x="66.9167%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="165" width="0.4566%" height="15" fill="rgb(242,56,43)" fg:x="146" fg:w="1"/><text x="66.9167%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="149" width="0.4566%" height="15" fill="rgb(233,99,24)" fg:x="146" fg:w="1"/><text x="66.9167%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="133" width="0.4566%" height="15" fill="rgb(234,209,42)" fg:x="146" fg:w="1"/><text x="66.9167%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="117" width="0.4566%" height="15" fill="rgb(227,7,12)" fg:x="146" fg:w="1"/><text x="66.9167%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="101" width="0.4566%" height="15" fill="rgb(245,203,43)" fg:x="146" fg:w="1"/><text x="66.9167%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="85" width="0.4566%" height="15" fill="rgb(238,205,33)" fg:x="146" fg:w="1"/><text x="66.9167%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="69" width="0.4566%" height="15" fill="rgb(231,56,7)" fg:x="146" fg:w="1"/><text x="66.9167%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="53" width="0.4566%" height="15" fill="rgb(244,186,29)" fg:x="146" fg:w="1"/><text x="66.9167%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="66.6667%" y="37" width="0.4566%" height="15" fill="rgb(234,111,31)" fg:x="146" fg:w="1"/><text x="66.9167%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 5.02%)</title><rect x="67.1233%" y="565" width="5.0228%" height="15" fill="rgb(241,149,10)" fg:x="147" fg:w="11"/><text x="67.3733%" y="575.50">alloc:..</text></g><g><title>core::ptr::write (5 samples, 2.28%)</title><rect x="69.8630%" y="549" width="2.2831%" height="15" fill="rgb(249,206,44)" fg:x="153" fg:w="5"/><text x="70.1130%" y="559.50">c..</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="70.3196%" y="533" width="1.8265%" height="15" fill="rgb(251,153,30)" fg:x="154" fg:w="4"/><text x="70.5696%" y="543.50">[..</text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="70.7763%" y="517" width="1.3699%" height="15" fill="rgb(239,152,38)" fg:x="155" fg:w="3"/><text x="71.0263%" y="527.50"></text></g><g><title>[unknown] (3 samples, 1.37%)</title><rect x="70.7763%" y="501" width="1.3699%" height="15" fill="rgb(249,139,47)" fg:x="155" fg:w="3"/><text x="71.0263%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.91%)</title><rect x="71.2329%" y="485" width="0.9132%" height="15" fill="rgb(244,64,35)" fg:x="156" fg:w="2"/><text x="71.4829%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="469" width="0.4566%" height="15" fill="rgb(216,46,15)" fg:x="157" fg:w="1"/><text x="71.9395%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="453" width="0.4566%" height="15" fill="rgb(250,74,19)" fg:x="157" fg:w="1"/><text x="71.9395%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="437" width="0.4566%" height="15" fill="rgb(249,42,33)" fg:x="157" fg:w="1"/><text x="71.9395%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="421" width="0.4566%" height="15" fill="rgb(242,149,17)" fg:x="157" fg:w="1"/><text x="71.9395%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="405" width="0.4566%" height="15" fill="rgb(244,29,21)" fg:x="157" fg:w="1"/><text x="71.9395%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="389" width="0.4566%" height="15" fill="rgb(220,130,37)" fg:x="157" fg:w="1"/><text x="71.9395%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="71.6895%" y="373" width="0.4566%" height="15" fill="rgb(211,67,2)" fg:x="157" fg:w="1"/><text x="71.9395%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 5.02%)</title><rect x="72.1461%" y="533" width="5.0228%" height="15" fill="rgb(235,68,52)" fg:x="158" fg:w="11"/><text x="72.3961%" y="543.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 5.02%)</title><rect x="72.1461%" y="517" width="5.0228%" height="15" fill="rgb(246,142,3)" fg:x="158" fg:w="11"/><text x="72.3961%" y="527.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 5.02%)</title><rect x="72.1461%" y="501" width="5.0228%" height="15" fill="rgb(241,25,7)" fg:x="158" fg:w="11"/><text x="72.3961%" y="511.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 5.02%)</title><rect x="72.1461%" y="485" width="5.0228%" height="15" fill="rgb(242,119,39)" fg:x="158" fg:w="11"/><text x="72.3961%" y="495.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 5.02%)</title><rect x="72.1461%" y="469" width="5.0228%" height="15" fill="rgb(241,98,45)" fg:x="158" fg:w="11"/><text x="72.3961%" y="479.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 5.02%)</title><rect x="72.1461%" y="453" width="5.0228%" height="15" fill="rgb(254,28,30)" fg:x="158" fg:w="11"/><text x="72.3961%" y="463.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 5.02%)</title><rect x="72.1461%" y="437" width="5.0228%" height="15" fill="rgb(241,142,54)" fg:x="158" fg:w="11"/><text x="72.3961%" y="447.50">alloc:..</text></g><g><title>alloc::alloc::realloc (11 samples, 5.02%)</title><rect x="72.1461%" y="421" width="5.0228%" height="15" fill="rgb(222,85,15)" fg:x="158" fg:w="11"/><text x="72.3961%" y="431.50">alloc:..</text></g><g><title>_mi_heap_realloc_zero (11 samples, 5.02%)</title><rect x="72.1461%" y="405" width="5.0228%" height="15" fill="rgb(210,85,47)" fg:x="158" fg:w="11"/><text x="72.3961%" y="415.50">_mi_he..</text></g><g><title>_mi_memcpy_aligned (11 samples, 5.02%)</title><rect x="72.1461%" y="389" width="5.0228%" height="15" fill="rgb(224,206,25)" fg:x="158" fg:w="11"/><text x="72.3961%" y="399.50">_mi_me..</text></g><g><title>_mi_memcpy (11 samples, 5.02%)</title><rect x="72.1461%" y="373" width="5.0228%" height="15" fill="rgb(243,201,19)" fg:x="158" fg:w="11"/><text x="72.3961%" y="383.50">_mi_me..</text></g><g><title>memcpy (11 samples, 5.02%)</title><rect x="72.1461%" y="357" width="5.0228%" height="15" fill="rgb(236,59,4)" fg:x="158" fg:w="11"/><text x="72.3961%" y="367.50">memcpy</text></g><g><title>[libc.so.6] (11 samples, 5.02%)</title><rect x="72.1461%" y="341" width="5.0228%" height="15" fill="rgb(254,179,45)" fg:x="158" fg:w="11"/><text x="72.3961%" y="351.50">[libc...</text></g><g><title>[unknown] (4 samples, 1.83%)</title><rect x="75.3425%" y="325" width="1.8265%" height="15" fill="rgb(226,14,10)" fg:x="165" fg:w="4"/><text x="75.5925%" y="335.50">[..</text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="309" width="0.4566%" height="15" fill="rgb(244,27,41)" fg:x="168" fg:w="1"/><text x="76.9623%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="293" width="0.4566%" height="15" fill="rgb(235,35,32)" fg:x="168" fg:w="1"/><text x="76.9623%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="277" width="0.4566%" height="15" fill="rgb(218,68,31)" fg:x="168" fg:w="1"/><text x="76.9623%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="261" width="0.4566%" height="15" fill="rgb(207,120,37)" fg:x="168" fg:w="1"/><text x="76.9623%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="245" width="0.4566%" height="15" fill="rgb(227,98,0)" fg:x="168" fg:w="1"/><text x="76.9623%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="76.7123%" y="229" width="0.4566%" height="15" fill="rgb(207,7,3)" fg:x="168" fg:w="1"/><text x="76.9623%" y="239.50"></text></g><g><title>ZSTD_decodeSeqHeaders (1 samples, 0.46%)</title><rect x="77.1689%" y="277" width="0.4566%" height="15" fill="rgb(206,98,19)" fg:x="169" fg:w="1"/><text x="77.4189%" y="287.50"></text></g><g><title>ZSTD_buildSeqTable (1 samples, 0.46%)</title><rect x="77.1689%" y="261" width="0.4566%" height="15" fill="rgb(217,5,26)" fg:x="169" fg:w="1"/><text x="77.4189%" y="271.50"></text></g><g><title>FSE_readNCount_body_default (1 samples, 0.46%)</title><rect x="77.1689%" y="245" width="0.4566%" height="15" fill="rgb(235,190,38)" fg:x="169" fg:w="1"/><text x="77.4189%" y="255.50"></text></g><g><title>FSE_readNCount_body (1 samples, 0.46%)</title><rect x="77.1689%" y="229" width="0.4566%" height="15" fill="rgb(247,86,24)" fg:x="169" fg:w="1"/><text x="77.4189%" y="239.50"></text></g><g><title>BIT_reloadDStream (1 samples, 0.46%)</title><rect x="77.6256%" y="229" width="0.4566%" height="15" fill="rgb(205,101,16)" fg:x="170" fg:w="1"/><text x="77.8756%" y="239.50"></text></g><g><title>BIT_reloadDStreamFast (1 samples, 0.46%)</title><rect x="77.6256%" y="213" width="0.4566%" height="15" fill="rgb(246,168,33)" fg:x="170" fg:w="1"/><text x="77.8756%" y="223.50"></text></g><g><title>ZSTD_decodeSequence (1 samples, 0.46%)</title><rect x="78.0822%" y="229" width="0.4566%" height="15" fill="rgb(231,114,1)" fg:x="171" fg:w="1"/><text x="78.3322%" y="239.50"></text></g><g><title>BIT_readBitsFast (1 samples, 0.46%)</title><rect x="78.0822%" y="213" width="0.4566%" height="15" fill="rgb(207,184,53)" fg:x="171" fg:w="1"/><text x="78.3322%" y="223.50"></text></g><g><title>BIT_skipBits (1 samples, 0.46%)</title><rect x="78.0822%" y="197" width="0.4566%" height="15" fill="rgb(224,95,51)" fg:x="171" fg:w="1"/><text x="78.3322%" y="207.50"></text></g><g><title>ZSTD_overlapCopy8 (1 samples, 0.46%)</title><rect x="78.5388%" y="213" width="0.4566%" height="15" fill="rgb(212,188,45)" fg:x="172" fg:w="1"/><text x="78.7888%" y="223.50"></text></g><g><title>ZSTD_copy4 (1 samples, 0.46%)</title><rect x="78.5388%" y="197" width="0.4566%" height="15" fill="rgb(223,154,38)" fg:x="172" fg:w="1"/><text x="78.7888%" y="207.50"></text></g><g><title>ZSTD_wildcopy (3 samples, 1.37%)</title><rect x="78.9954%" y="213" width="1.3699%" height="15" fill="rgb(251,22,52)" fg:x="173" fg:w="3"/><text x="79.2454%" y="223.50"></text></g><g><title>ZSTD_decompressContinueStream (8 samples, 3.65%)</title><rect x="77.1689%" y="357" width="3.6530%" height="15" fill="rgb(229,209,22)" fg:x="169" fg:w="8"/><text x="77.4189%" y="367.50">ZSTD..</text></g><g><title>ZSTD_decompressContinue (8 samples, 3.65%)</title><rect x="77.1689%" y="341" width="3.6530%" height="15" fill="rgb(234,138,34)" fg:x="169" fg:w="8"/><text x="77.4189%" y="351.50">ZSTD..</text></g><g><title>ZSTD_decompressContinue (8 samples, 3.65%)</title><rect x="77.1689%" y="325" width="3.6530%" height="15" fill="rgb(212,95,11)" fg:x="169" fg:w="8"/><text x="77.4189%" y="335.50">ZSTD..</text></g><g><title>ZSTD_decompressBlock_internal (8 samples, 3.65%)</title><rect x="77.1689%" y="309" width="3.6530%" height="15" fill="rgb(240,179,47)" fg:x="169" fg:w="8"/><text x="77.4189%" y="319.50">ZSTD..</text></g><g><title>ZSTD_decompressBlock_internal (8 samples, 3.65%)</title><rect x="77.1689%" y="293" width="3.6530%" height="15" fill="rgb(240,163,11)" fg:x="169" fg:w="8"/><text x="77.4189%" y="303.50">ZSTD..</text></g><g><title>ZSTD_decompressSequences (7 samples, 3.20%)</title><rect x="77.6256%" y="277" width="3.1963%" height="15" fill="rgb(236,37,12)" fg:x="170" fg:w="7"/><text x="77.8756%" y="287.50">ZST..</text></g><g><title>ZSTD_decompressSequences_bmi2 (7 samples, 3.20%)</title><rect x="77.6256%" y="261" width="3.1963%" height="15" fill="rgb(232,164,16)" fg:x="170" fg:w="7"/><text x="77.8756%" y="271.50">ZST..</text></g><g><title>ZSTD_decompressSequences_body (7 samples, 3.20%)</title><rect x="77.6256%" y="245" width="3.1963%" height="15" fill="rgb(244,205,15)" fg:x="170" fg:w="7"/><text x="77.8756%" y="255.50">ZST..</text></g><g><title>ZSTD_execSequence (5 samples, 2.28%)</title><rect x="78.5388%" y="229" width="2.2831%" height="15" fill="rgb(223,117,47)" fg:x="172" fg:w="5"/><text x="78.7888%" y="239.50">Z..</text></g><g><title>[libc.so.6] (1 samples, 0.46%)</title><rect x="80.3653%" y="213" width="0.4566%" height="15" fill="rgb(244,107,35)" fg:x="176" fg:w="1"/><text x="80.6153%" y="223.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (9 samples, 4.11%)</title><rect x="77.1689%" y="437" width="4.1096%" height="15" fill="rgb(205,140,8)" fg:x="169" fg:w="9"/><text x="77.4189%" y="447.50">&lt;zst..</text></g><g><title>&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (9 samples, 4.11%)</title><rect x="77.1689%" y="421" width="4.1096%" height="15" fill="rgb(228,84,46)" fg:x="169" fg:w="9"/><text x="77.4189%" y="431.50">&lt;zst..</text></g><g><title>&lt;zstd::stream::raw::Decoder as zstd::stream::raw::Operation&gt;::run (9 samples, 4.11%)</title><rect x="77.1689%" y="405" width="4.1096%" height="15" fill="rgb(254,188,9)" fg:x="169" fg:w="9"/><text x="77.4189%" y="415.50">&lt;zst..</text></g><g><title>zstd_safe::DCtx::decompress_stream (9 samples, 4.11%)</title><rect x="77.1689%" y="389" width="4.1096%" height="15" fill="rgb(206,112,54)" fg:x="169" fg:w="9"/><text x="77.4189%" y="399.50">zstd..</text></g><g><title>ZSTD_decompressStream (9 samples, 4.11%)</title><rect x="77.1689%" y="373" width="4.1096%" height="15" fill="rgb(216,84,49)" fg:x="169" fg:w="9"/><text x="77.4189%" y="383.50">ZSTD..</text></g><g><title>ZSTD_limitCopy (1 samples, 0.46%)</title><rect x="80.8219%" y="357" width="0.4566%" height="15" fill="rgb(214,194,35)" fg:x="177" fg:w="1"/><text x="81.0719%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.46%)</title><rect x="80.8219%" y="341" width="0.4566%" height="15" fill="rgb(249,28,3)" fg:x="177" fg:w="1"/><text x="81.0719%" y="351.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (3 samples, 1.37%)</title><rect x="81.2785%" y="389" width="1.3699%" height="15" fill="rgb(222,56,52)" fg:x="178" fg:w="3"/><text x="81.5285%" y="399.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (13 samples, 5.94%)</title><rect x="77.1689%" y="501" width="5.9361%" height="15" fill="rgb(245,217,50)" fg:x="169" fg:w="13"/><text x="77.4189%" y="511.50">std::io:..</text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (13 samples, 5.94%)</title><rect x="77.1689%" y="485" width="5.9361%" height="15" fill="rgb(213,201,24)" fg:x="169" fg:w="13"/><text x="77.4189%" y="495.50">&lt;zip::re..</text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (13 samples, 5.94%)</title><rect x="77.1689%" y="469" width="5.9361%" height="15" fill="rgb(248,116,28)" fg:x="169" fg:w="13"/><text x="77.4189%" y="479.50">&lt;zip::re..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (13 samples, 5.94%)</title><rect x="77.1689%" y="453" width="5.9361%" height="15" fill="rgb(219,72,43)" fg:x="169" fg:w="13"/><text x="77.4189%" y="463.50">&lt;zip::cr..</text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (4 samples, 1.83%)</title><rect x="81.2785%" y="437" width="1.8265%" height="15" fill="rgb(209,138,14)" fg:x="178" fg:w="4"/><text x="81.5285%" y="447.50">c..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (4 samples, 1.83%)</title><rect x="81.2785%" y="421" width="1.8265%" height="15" fill="rgb(222,18,33)" fg:x="178" fg:w="4"/><text x="81.5285%" y="431.50">c..</text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (4 samples, 1.83%)</title><rect x="81.2785%" y="405" width="1.8265%" height="15" fill="rgb(213,199,7)" fg:x="178" fg:w="4"/><text x="81.5285%" y="415.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1 samples, 0.46%)</title><rect x="82.6484%" y="389" width="0.4566%" height="15" fill="rgb(250,110,10)" fg:x="181" fg:w="1"/><text x="82.8984%" y="399.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_wanted_bytes (79 samples, 36.07%)</title><rect x="49.7717%" y="597" width="36.0731%" height="15" fill="rgb(248,123,6)" fg:x="109" fg:w="79"/><text x="50.0217%" y="607.50">demoparser::parsing::cache::cache_algorithms::&lt;impl demopar..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_deltas_by_name (46 samples, 21.00%)</title><rect x="64.8402%" y="581" width="21.0046%" height="15" fill="rgb(206,91,31)" fg:x="142" fg:w="46"/><text x="65.0902%" y="591.50">demoparser::parsing::cache::cache..</text></g><g><title>std::io::Read::read_to_end (30 samples, 13.70%)</title><rect x="72.1461%" y="565" width="13.6986%" height="15" fill="rgb(211,154,13)" fg:x="158" fg:w="30"/><text x="72.3961%" y="575.50">std::io::Read::read_t..</text></g><g><title>std::io::default_read_to_end (30 samples, 13.70%)</title><rect x="72.1461%" y="549" width="13.6986%" height="15" fill="rgb(225,148,7)" fg:x="158" fg:w="30"/><text x="72.3961%" y="559.50">std::io::default_read..</text></g><g><title>std::io::Read::read_buf (19 samples, 8.68%)</title><rect x="77.1689%" y="533" width="8.6758%" height="15" fill="rgb(220,160,43)" fg:x="169" fg:w="19"/><text x="77.4189%" y="543.50">std::io::Rea..</text></g><g><title>std::io::default_read_buf (19 samples, 8.68%)</title><rect x="77.1689%" y="517" width="8.6758%" height="15" fill="rgb(213,52,39)" fg:x="169" fg:w="19"/><text x="77.4189%" y="527.50">std::io::def..</text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (6 samples, 2.74%)</title><rect x="83.1050%" y="501" width="2.7397%" height="15" fill="rgb(243,137,7)" fg:x="182" fg:w="6"/><text x="83.3550%" y="511.50">st..</text></g><g><title>core::intrinsics::write_bytes (6 samples, 2.74%)</title><rect x="83.1050%" y="485" width="2.7397%" height="15" fill="rgb(230,79,13)" fg:x="182" fg:w="6"/><text x="83.3550%" y="495.50">co..</text></g><g><title>[libc.so.6] (6 samples, 2.74%)</title><rect x="83.1050%" y="469" width="2.7397%" height="15" fill="rgb(247,105,23)" fg:x="182" fg:w="6"/><text x="83.3550%" y="479.50">[l..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="83.5616%" y="453" width="2.2831%" height="15" fill="rgb(223,179,41)" fg:x="183" fg:w="5"/><text x="83.8116%" y="463.50">[..</text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="437" width="0.4566%" height="15" fill="rgb(218,9,34)" fg:x="187" fg:w="1"/><text x="85.6381%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="421" width="0.4566%" height="15" fill="rgb(222,106,8)" fg:x="187" fg:w="1"/><text x="85.6381%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="405" width="0.4566%" height="15" fill="rgb(211,220,0)" fg:x="187" fg:w="1"/><text x="85.6381%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="389" width="0.4566%" height="15" fill="rgb(229,52,16)" fg:x="187" fg:w="1"/><text x="85.6381%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="373" width="0.4566%" height="15" fill="rgb(212,155,18)" fg:x="187" fg:w="1"/><text x="85.6381%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="85.3881%" y="357" width="0.4566%" height="15" fill="rgb(242,21,14)" fg:x="187" fg:w="1"/><text x="85.6381%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 2.28%)</title><rect x="87.2146%" y="373" width="2.2831%" height="15" fill="rgb(222,19,48)" fg:x="191" fg:w="5"/><text x="87.4646%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 2.28%)</title><rect x="87.2146%" y="357" width="2.2831%" height="15" fill="rgb(232,45,27)" fg:x="191" fg:w="5"/><text x="87.4646%" y="367.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 2.28%)</title><rect x="87.2146%" y="341" width="2.2831%" height="15" fill="rgb(249,103,42)" fg:x="191" fg:w="5"/><text x="87.4646%" y="351.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 2.28%)</title><rect x="87.2146%" y="325" width="2.2831%" height="15" fill="rgb(246,81,33)" fg:x="191" fg:w="5"/><text x="87.4646%" y="335.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 2.28%)</title><rect x="87.2146%" y="309" width="2.2831%" height="15" fill="rgb(252,33,42)" fg:x="191" fg:w="5"/><text x="87.4646%" y="319.50">a..</text></g><g><title>alloc::alloc::realloc (5 samples, 2.28%)</title><rect x="87.2146%" y="293" width="2.2831%" height="15" fill="rgb(209,212,41)" fg:x="191" fg:w="5"/><text x="87.4646%" y="303.50">a..</text></g><g><title>_mi_heap_realloc_zero (5 samples, 2.28%)</title><rect x="87.2146%" y="277" width="2.2831%" height="15" fill="rgb(207,154,6)" fg:x="191" fg:w="5"/><text x="87.4646%" y="287.50">_..</text></g><g><title>_mi_memcpy_aligned (5 samples, 2.28%)</title><rect x="87.2146%" y="261" width="2.2831%" height="15" fill="rgb(223,64,47)" fg:x="191" fg:w="5"/><text x="87.4646%" y="271.50">_..</text></g><g><title>_mi_memcpy (5 samples, 2.28%)</title><rect x="87.2146%" y="245" width="2.2831%" height="15" fill="rgb(211,161,38)" fg:x="191" fg:w="5"/><text x="87.4646%" y="255.50">_..</text></g><g><title>memcpy (5 samples, 2.28%)</title><rect x="87.2146%" y="229" width="2.2831%" height="15" fill="rgb(219,138,40)" fg:x="191" fg:w="5"/><text x="87.4646%" y="239.50">m..</text></g><g><title>[libc.so.6] (5 samples, 2.28%)</title><rect x="87.2146%" y="213" width="2.2831%" height="15" fill="rgb(241,228,46)" fg:x="191" fg:w="5"/><text x="87.4646%" y="223.50">[..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 4.11%)</title><rect x="85.8447%" y="389" width="4.1096%" height="15" fill="rgb(223,209,38)" fg:x="188" fg:w="9"/><text x="86.0947%" y="399.50">allo..</text></g><g><title>core::ptr::write (1 samples, 0.46%)</title><rect x="89.4977%" y="373" width="0.4566%" height="15" fill="rgb(236,164,45)" fg:x="196" fg:w="1"/><text x="89.7477%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StringTable&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="389" width="0.9132%" height="15" fill="rgb(231,15,5)" fg:x="197" fg:w="2"/><text x="90.2043%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt;&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="373" width="0.9132%" height="15" fill="rgb(252,35,15)" fg:x="197" fg:w="2"/><text x="90.2043%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.91%)</title><rect x="89.9543%" y="357" width="0.9132%" height="15" fill="rgb(248,181,18)" fg:x="197" fg:w="2"/><text x="90.2043%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::stringtables::StField]&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="341" width="0.9132%" height="15" fill="rgb(233,39,42)" fg:x="197" fg:w="2"/><text x="90.2043%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="325" width="0.9132%" height="15" fill="rgb(238,110,33)" fg:x="197" fg:w="2"/><text x="90.2043%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="309" width="0.9132%" height="15" fill="rgb(233,195,10)" fg:x="197" fg:w="2"/><text x="90.2043%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="293" width="0.9132%" height="15" fill="rgb(254,105,3)" fg:x="197" fg:w="2"/><text x="90.2043%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.91%)</title><rect x="89.9543%" y="277" width="0.9132%" height="15" fill="rgb(221,225,9)" fg:x="197" fg:w="2"/><text x="90.2043%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.91%)</title><rect x="89.9543%" y="261" width="0.9132%" height="15" fill="rgb(224,227,45)" fg:x="197" fg:w="2"/><text x="90.2043%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.91%)</title><rect x="89.9543%" y="245" width="0.9132%" height="15" fill="rgb(229,198,43)" fg:x="197" fg:w="2"/><text x="90.2043%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.46%)</title><rect x="90.8676%" y="373" width="0.4566%" height="15" fill="rgb(206,209,35)" fg:x="199" fg:w="1"/><text x="91.1176%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.46%)</title><rect x="90.8676%" y="357" width="0.4566%" height="15" fill="rgb(245,195,53)" fg:x="199" fg:w="1"/><text x="91.1176%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.46%)</title><rect x="90.8676%" y="341" width="0.4566%" height="15" fill="rgb(240,92,26)" fg:x="199" fg:w="1"/><text x="91.1176%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.46%)</title><rect x="90.8676%" y="325" width="0.4566%" height="15" fill="rgb(207,40,23)" fg:x="199" fg:w="1"/><text x="91.1176%" y="335.50"></text></g><g><title>mi_malloc (1 samples, 0.46%)</title><rect x="90.8676%" y="309" width="0.4566%" height="15" fill="rgb(223,111,35)" fg:x="199" fg:w="1"/><text x="91.1176%" y="319.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.46%)</title><rect x="90.8676%" y="293" width="0.4566%" height="15" fill="rgb(229,147,28)" fg:x="199" fg:w="1"/><text x="91.1176%" y="303.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.46%)</title><rect x="90.8676%" y="277" width="0.4566%" height="15" fill="rgb(211,29,28)" fg:x="199" fg:w="1"/><text x="91.1176%" y="287.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.46%)</title><rect x="90.8676%" y="261" width="0.4566%" height="15" fill="rgb(228,72,33)" fg:x="199" fg:w="1"/><text x="91.1176%" y="271.50"></text></g><g><title>demoparser::parsing::demo_parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::update_string_table (3 samples, 1.37%)</title><rect x="90.8676%" y="389" width="1.3699%" height="15" fill="rgb(205,214,31)" fg:x="199" fg:w="3"/><text x="91.1176%" y="399.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_string (2 samples, 0.91%)</title><rect x="91.3242%" y="373" width="0.9132%" height="15" fill="rgb(224,111,15)" fg:x="200" fg:w="2"/><text x="91.5742%" y="383.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::ToString&gt;::to_string (2 samples, 0.91%)</title><rect x="91.3242%" y="357" width="0.9132%" height="15" fill="rgb(253,21,26)" fg:x="200" fg:w="2"/><text x="91.5742%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.91%)</title><rect x="91.3242%" y="341" width="0.9132%" height="15" fill="rgb(245,139,43)" fg:x="200" fg:w="2"/><text x="91.5742%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.91%)</title><rect x="91.3242%" y="325" width="0.9132%" height="15" fill="rgb(252,170,7)" fg:x="200" fg:w="2"/><text x="91.5742%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.91%)</title><rect x="91.3242%" y="309" width="0.9132%" height="15" fill="rgb(231,118,14)" fg:x="200" fg:w="2"/><text x="91.5742%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.91%)</title><rect x="91.3242%" y="293" width="0.9132%" height="15" fill="rgb(238,83,0)" fg:x="200" fg:w="2"/><text x="91.5742%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.91%)</title><rect x="91.3242%" y="277" width="0.9132%" height="15" fill="rgb(221,39,39)" fg:x="200" fg:w="2"/><text x="91.5742%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.91%)</title><rect x="91.3242%" y="261" width="0.9132%" height="15" fill="rgb(222,119,46)" fg:x="200" fg:w="2"/><text x="91.5742%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.91%)</title><rect x="91.3242%" y="245" width="0.9132%" height="15" fill="rgb(222,165,49)" fg:x="200" fg:w="2"/><text x="91.5742%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.91%)</title><rect x="91.3242%" y="229" width="0.9132%" height="15" fill="rgb(219,113,52)" fg:x="200" fg:w="2"/><text x="91.5742%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.91%)</title><rect x="91.3242%" y="213" width="0.9132%" height="15" fill="rgb(214,7,15)" fg:x="200" fg:w="2"/><text x="91.5742%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.91%)</title><rect x="91.3242%" y="197" width="0.9132%" height="15" fill="rgb(235,32,4)" fg:x="200" fg:w="2"/><text x="91.5742%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.91%)</title><rect x="91.3242%" y="181" width="0.9132%" height="15" fill="rgb(238,90,54)" fg:x="200" fg:w="2"/><text x="91.5742%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.91%)</title><rect x="91.3242%" y="165" width="0.9132%" height="15" fill="rgb(213,208,19)" fg:x="200" fg:w="2"/><text x="91.5742%" y="175.50"></text></g><g><title>mi_malloc (2 samples, 0.91%)</title><rect x="91.3242%" y="149" width="0.9132%" height="15" fill="rgb(233,156,4)" fg:x="200" fg:w="2"/><text x="91.5742%" y="159.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.91%)</title><rect x="91.3242%" y="133" width="0.9132%" height="15" fill="rgb(207,194,5)" fg:x="200" fg:w="2"/><text x="91.5742%" y="143.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.91%)</title><rect x="91.3242%" y="117" width="0.9132%" height="15" fill="rgb(206,111,30)" fg:x="200" fg:w="2"/><text x="91.5742%" y="127.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.91%)</title><rect x="91.3242%" y="101" width="0.9132%" height="15" fill="rgb(243,70,54)" fg:x="200" fg:w="2"/><text x="91.5742%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 6.85%)</title><rect x="85.8447%" y="581" width="6.8493%" height="15" fill="rgb(242,28,8)" fg:x="188" fg:w="15"/><text x="86.0947%" y="591.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 6.85%)</title><rect x="85.8447%" y="565" width="6.8493%" height="15" fill="rgb(219,106,18)" fg:x="188" fg:w="15"/><text x="86.0947%" y="575.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 6.85%)</title><rect x="85.8447%" y="549" width="6.8493%" height="15" fill="rgb(244,222,10)" fg:x="188" fg:w="15"/><text x="86.0947%" y="559.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 6.85%)</title><rect x="85.8447%" y="533" width="6.8493%" height="15" fill="rgb(236,179,52)" fg:x="188" fg:w="15"/><text x="86.0947%" y="543.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 6.85%)</title><rect x="85.8447%" y="517" width="6.8493%" height="15" fill="rgb(213,23,39)" fg:x="188" fg:w="15"/><text x="86.0947%" y="527.50">&lt;alloc::v..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 6.85%)</title><rect x="85.8447%" y="501" width="6.8493%" height="15" fill="rgb(238,48,10)" fg:x="188" fg:w="15"/><text x="86.0947%" y="511.50">core::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 6.85%)</title><rect x="85.8447%" y="485" width="6.8493%" height="15" fill="rgb(251,196,23)" fg:x="188" fg:w="15"/><text x="86.0947%" y="495.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 6.85%)</title><rect x="85.8447%" y="469" width="6.8493%" height="15" fill="rgb(250,152,24)" fg:x="188" fg:w="15"/><text x="86.0947%" y="479.50">core::ite..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15 samples, 6.85%)</title><rect x="85.8447%" y="453" width="6.8493%" height="15" fill="rgb(209,150,17)" fg:x="188" fg:w="15"/><text x="86.0947%" y="463.50">core::ite..</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints::{{closure}} (15 samples, 6.85%)</title><rect x="85.8447%" y="437" width="6.8493%" height="15" fill="rgb(234,202,34)" fg:x="188" fg:w="15"/><text x="86.0947%" y="447.50">demoparse..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (15 samples, 6.85%)</title><rect x="85.8447%" y="421" width="6.8493%" height="15" fill="rgb(253,148,53)" fg:x="188" fg:w="15"/><text x="86.0947%" y="431.50">demoparse..</text></g><g><title>demoparser::parsing::demo_parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (15 samples, 6.85%)</title><rect x="85.8447%" y="405" width="6.8493%" height="15" fill="rgb(218,129,16)" fg:x="188" fg:w="15"/><text x="86.0947%" y="415.50">demoparse..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.46%)</title><rect x="92.2374%" y="389" width="0.4566%" height="15" fill="rgb(216,85,19)" fg:x="202" fg:w="1"/><text x="92.4874%" y="399.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.46%)</title><rect x="92.2374%" y="373" width="0.4566%" height="15" fill="rgb(235,228,7)" fg:x="202" fg:w="1"/><text x="92.4874%" y="383.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_CreateStringTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.46%)</title><rect x="92.2374%" y="357" width="0.4566%" height="15" fill="rgb(245,175,0)" fg:x="202" fg:w="1"/><text x="92.4874%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (1 samples, 0.46%)</title><rect x="92.2374%" y="341" width="0.4566%" height="15" fill="rgb(208,168,36)" fg:x="202" fg:w="1"/><text x="92.4874%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (1 samples, 0.46%)</title><rect x="92.2374%" y="325" width="0.4566%" height="15" fill="rgb(246,171,24)" fg:x="202" fg:w="1"/><text x="92.4874%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (1 samples, 0.46%)</title><rect x="92.2374%" y="309" width="0.4566%" height="15" fill="rgb(215,142,24)" fg:x="202" fg:w="1"/><text x="92.4874%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (1 samples, 0.46%)</title><rect x="92.2374%" y="293" width="0.4566%" height="15" fill="rgb(250,187,7)" fg:x="202" fg:w="1"/><text x="92.4874%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.46%)</title><rect x="92.2374%" y="277" width="0.4566%" height="15" fill="rgb(228,66,33)" fg:x="202" fg:w="1"/><text x="92.4874%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.46%)</title><rect x="92.2374%" y="261" width="0.4566%" height="15" fill="rgb(234,215,21)" fg:x="202" fg:w="1"/><text x="92.4874%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.46%)</title><rect x="92.2374%" y="245" width="0.4566%" height="15" fill="rgb(222,191,20)" fg:x="202" fg:w="1"/><text x="92.4874%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.46%)</title><rect x="92.2374%" y="229" width="0.4566%" height="15" fill="rgb(245,79,54)" fg:x="202" fg:w="1"/><text x="92.4874%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.46%)</title><rect x="92.2374%" y="213" width="0.4566%" height="15" fill="rgb(240,10,37)" fg:x="202" fg:w="1"/><text x="92.4874%" y="223.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.46%)</title><rect x="92.2374%" y="197" width="0.4566%" height="15" fill="rgb(214,192,32)" fg:x="202" fg:w="1"/><text x="92.4874%" y="207.50"></text></g><g><title>mi_find_page (1 samples, 0.46%)</title><rect x="92.2374%" y="181" width="0.4566%" height="15" fill="rgb(209,36,54)" fg:x="202" fg:w="1"/><text x="92.4874%" y="191.50"></text></g><g><title>mi_find_free_page (1 samples, 0.46%)</title><rect x="92.2374%" y="165" width="0.4566%" height="15" fill="rgb(220,10,11)" fg:x="202" fg:w="1"/><text x="92.4874%" y="175.50"></text></g><g><title>mi_page_queue (1 samples, 0.46%)</title><rect x="92.2374%" y="149" width="0.4566%" height="15" fill="rgb(221,106,17)" fg:x="202" fg:w="1"/><text x="92.4874%" y="159.50"></text></g><g><title>_mi_bin (1 samples, 0.46%)</title><rect x="92.2374%" y="133" width="0.4566%" height="15" fill="rgb(251,142,44)" fg:x="202" fg:w="1"/><text x="92.4874%" y="143.50"></text></g><g><title>mi_bin (1 samples, 0.46%)</title><rect x="92.2374%" y="117" width="0.4566%" height="15" fill="rgb(238,13,15)" fg:x="202" fg:w="1"/><text x="92.4874%" y="127.50"></text></g><g><title>mi_bsr (1 samples, 0.46%)</title><rect x="92.2374%" y="101" width="0.4566%" height="15" fill="rgb(208,107,27)" fg:x="202" fg:w="1"/><text x="92.4874%" y="111.50"></text></g><g><title>mi_clz (1 samples, 0.46%)</title><rect x="92.2374%" y="85" width="0.4566%" height="15" fill="rgb(205,136,37)" fg:x="202" fg:w="1"/><text x="92.4874%" y="95.50"></text></g><g><title>demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_with_cache (96 samples, 43.84%)</title><rect x="49.3151%" y="613" width="43.8356%" height="15" fill="rgb(250,205,27)" fg:x="108" fg:w="96"/><text x="49.5651%" y="623.50">demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::P..</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints (16 samples, 7.31%)</title><rect x="85.8447%" y="597" width="7.3059%" height="15" fill="rgb(210,80,43)" fg:x="188" fg:w="16"/><text x="86.0947%" y="607.50">demoparser..</text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_event_map (1 samples, 0.46%)</title><rect x="92.6941%" y="581" width="0.4566%" height="15" fill="rgb(247,160,36)" fg:x="203" fg:w="1"/><text x="92.9441%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.46%)</title><rect x="92.6941%" y="565" width="0.4566%" height="15" fill="rgb(234,13,49)" fg:x="203" fg:w="1"/><text x="92.9441%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.46%)</title><rect x="92.6941%" y="549" width="0.4566%" height="15" fill="rgb(234,122,0)" fg:x="203" fg:w="1"/><text x="92.9441%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.46%)</title><rect x="92.6941%" y="533" width="0.4566%" height="15" fill="rgb(207,146,38)" fg:x="203" fg:w="1"/><text x="92.9441%" y="543.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.46%)</title><rect x="92.6941%" y="517" width="0.4566%" height="15" fill="rgb(207,177,25)" fg:x="203" fg:w="1"/><text x="92.9441%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.46%)</title><rect x="92.6941%" y="501" width="0.4566%" height="15" fill="rgb(211,178,42)" fg:x="203" fg:w="1"/><text x="92.9441%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.46%)</title><rect x="92.6941%" y="485" width="0.4566%" height="15" fill="rgb(230,69,54)" fg:x="203" fg:w="1"/><text x="92.9441%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.46%)</title><rect x="93.1507%" y="549" width="0.4566%" height="15" fill="rgb(214,135,41)" fg:x="204" fg:w="1"/><text x="93.4007%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.46%)</title><rect x="93.1507%" y="533" width="0.4566%" height="15" fill="rgb(237,67,25)" fg:x="204" fg:w="1"/><text x="93.4007%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.46%)</title><rect x="93.1507%" y="517" width="0.4566%" height="15" fill="rgb(222,189,50)" fg:x="204" fg:w="1"/><text x="93.4007%" y="527.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.46%)</title><rect x="93.1507%" y="501" width="0.4566%" height="15" fill="rgb(245,148,34)" fg:x="204" fg:w="1"/><text x="93.4007%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.46%)</title><rect x="93.1507%" y="485" width="0.4566%" height="15" fill="rgb(222,29,6)" fg:x="204" fg:w="1"/><text x="93.4007%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.46%)</title><rect x="93.1507%" y="469" width="0.4566%" height="15" fill="rgb(221,189,43)" fg:x="204" fg:w="1"/><text x="93.4007%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.46%)</title><rect x="93.1507%" y="453" width="0.4566%" height="15" fill="rgb(207,36,27)" fg:x="204" fg:w="1"/><text x="93.4007%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.46%)</title><rect x="93.1507%" y="437" width="0.4566%" height="15" fill="rgb(217,90,24)" fg:x="204" fg:w="1"/><text x="93.4007%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.46%)</title><rect x="93.1507%" y="421" width="0.4566%" height="15" fill="rgb(224,66,35)" fg:x="204" fg:w="1"/><text x="93.4007%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.46%)</title><rect x="93.1507%" y="405" width="0.4566%" height="15" fill="rgb(221,13,50)" fg:x="204" fg:w="1"/><text x="93.4007%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.46%)</title><rect x="93.1507%" y="389" width="0.4566%" height="15" fill="rgb(236,68,49)" fg:x="204" fg:w="1"/><text x="93.4007%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.46%)</title><rect x="93.1507%" y="373" width="0.4566%" height="15" fill="rgb(229,146,28)" fg:x="204" fg:w="1"/><text x="93.4007%" y="383.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.46%)</title><rect x="93.1507%" y="357" width="0.4566%" height="15" fill="rgb(225,31,38)" fg:x="204" fg:w="1"/><text x="93.4007%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.46%)</title><rect x="93.1507%" y="341" width="0.4566%" height="15" fill="rgb(250,208,3)" fg:x="204" fg:w="1"/><text x="93.4007%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.46%)</title><rect x="93.1507%" y="325" width="0.4566%" height="15" fill="rgb(246,54,23)" fg:x="204" fg:w="1"/><text x="93.4007%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (1 samples, 0.46%)</title><rect x="93.1507%" y="309" width="0.4566%" height="15" fill="rgb(243,76,11)" fg:x="204" fg:w="1"/><text x="93.4007%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i32 (1 samples, 0.46%)</title><rect x="93.1507%" y="293" width="0.4566%" height="15" fill="rgb(245,21,50)" fg:x="204" fg:w="1"/><text x="93.4007%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.46%)</title><rect x="93.1507%" y="277" width="0.4566%" height="15" fill="rgb(228,9,43)" fg:x="204" fg:w="1"/><text x="93.4007%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.46%)</title><rect x="93.1507%" y="261" width="0.4566%" height="15" fill="rgb(208,100,47)" fg:x="204" fg:w="1"/><text x="93.4007%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.46%)</title><rect x="93.1507%" y="245" width="0.4566%" height="15" fill="rgb(232,26,8)" fg:x="204" fg:w="1"/><text x="93.4007%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.46%)</title><rect x="93.1507%" y="229" width="0.4566%" height="15" fill="rgb(216,166,38)" fg:x="204" fg:w="1"/><text x="93.4007%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.46%)</title><rect x="93.1507%" y="213" width="0.4566%" height="15" fill="rgb(251,202,51)" fg:x="204" fg:w="1"/><text x="93.4007%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.46%)</title><rect x="93.6073%" y="517" width="0.4566%" height="15" fill="rgb(254,216,34)" fg:x="205" fg:w="1"/><text x="93.8573%" y="527.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.46%)</title><rect x="93.6073%" y="501" width="0.4566%" height="15" fill="rgb(251,32,27)" fg:x="205" fg:w="1"/><text x="93.8573%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.46%)</title><rect x="93.6073%" y="485" width="0.4566%" height="15" fill="rgb(208,127,28)" fg:x="205" fg:w="1"/><text x="93.8573%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.46%)</title><rect x="93.6073%" y="469" width="0.4566%" height="15" fill="rgb(224,137,22)" fg:x="205" fg:w="1"/><text x="93.8573%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.46%)</title><rect x="93.6073%" y="453" width="0.4566%" height="15" fill="rgb(254,70,32)" fg:x="205" fg:w="1"/><text x="93.8573%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.46%)</title><rect x="93.6073%" y="437" width="0.4566%" height="15" fill="rgb(229,75,37)" fg:x="205" fg:w="1"/><text x="93.8573%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.46%)</title><rect x="93.6073%" y="421" width="0.4566%" height="15" fill="rgb(252,64,23)" fg:x="205" fg:w="1"/><text x="93.8573%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.46%)</title><rect x="93.6073%" y="405" width="0.4566%" height="15" fill="rgb(232,162,48)" fg:x="205" fg:w="1"/><text x="93.8573%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.46%)</title><rect x="93.6073%" y="389" width="0.4566%" height="15" fill="rgb(246,160,12)" fg:x="205" fg:w="1"/><text x="93.8573%" y="399.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.46%)</title><rect x="93.6073%" y="373" width="0.4566%" height="15" fill="rgb(247,166,0)" fg:x="205" fg:w="1"/><text x="93.8573%" y="383.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.46%)</title><rect x="93.6073%" y="357" width="0.4566%" height="15" fill="rgb(249,219,21)" fg:x="205" fg:w="1"/><text x="93.8573%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.46%)</title><rect x="94.0639%" y="517" width="0.4566%" height="15" fill="rgb(205,209,3)" fg:x="206" fg:w="1"/><text x="94.3139%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.46%)</title><rect x="94.0639%" y="501" width="0.4566%" height="15" fill="rgb(243,44,1)" fg:x="206" fg:w="1"/><text x="94.3139%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.46%)</title><rect x="94.5205%" y="501" width="0.4566%" height="15" fill="rgb(206,159,16)" fg:x="207" fg:w="1"/><text x="94.7705%" y="511.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.46%)</title><rect x="94.5205%" y="485" width="0.4566%" height="15" fill="rgb(244,77,30)" fg:x="207" fg:w="1"/><text x="94.7705%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (5 samples, 2.28%)</title><rect x="93.1507%" y="565" width="2.2831%" height="15" fill="rgb(218,69,12)" fg:x="204" fg:w="5"/><text x="93.4007%" y="575.50">d..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 1.83%)</title><rect x="93.6073%" y="549" width="1.8265%" height="15" fill="rgb(212,87,7)" fg:x="205" fg:w="4"/><text x="93.8573%" y="559.50">d..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 1.83%)</title><rect x="93.6073%" y="533" width="1.8265%" height="15" fill="rgb(245,114,25)" fg:x="205" fg:w="4"/><text x="93.8573%" y="543.50">d..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.91%)</title><rect x="94.5205%" y="517" width="0.9132%" height="15" fill="rgb(210,61,42)" fg:x="207" fg:w="2"/><text x="94.7705%" y="527.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::flags (1 samples, 0.46%)</title><rect x="94.9772%" y="501" width="0.4566%" height="15" fill="rgb(211,52,33)" fg:x="208" fg:w="1"/><text x="95.2272%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.46%)</title><rect x="94.9772%" y="485" width="0.4566%" height="15" fill="rgb(234,58,33)" fg:x="208" fg:w="1"/><text x="95.2272%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.46%)</title><rect x="95.8904%" y="517" width="0.4566%" height="15" fill="rgb(220,115,36)" fg:x="210" fg:w="1"/><text x="96.1404%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.46%)</title><rect x="96.3470%" y="517" width="0.4566%" height="15" fill="rgb(243,153,54)" fg:x="211" fg:w="1"/><text x="96.5970%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.46%)</title><rect x="96.3470%" y="501" width="0.4566%" height="15" fill="rgb(251,47,18)" fg:x="211" fg:w="1"/><text x="96.5970%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.46%)</title><rect x="96.3470%" y="485" width="0.4566%" height="15" fill="rgb(242,102,42)" fg:x="211" fg:w="1"/><text x="96.5970%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.46%)</title><rect x="96.3470%" y="469" width="0.4566%" height="15" fill="rgb(234,31,38)" fg:x="211" fg:w="1"/><text x="96.5970%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.46%)</title><rect x="96.3470%" y="453" width="0.4566%" height="15" fill="rgb(221,117,51)" fg:x="211" fg:w="1"/><text x="96.5970%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.46%)</title><rect x="96.3470%" y="437" width="0.4566%" height="15" fill="rgb(212,20,18)" fg:x="211" fg:w="1"/><text x="96.5970%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.46%)</title><rect x="96.3470%" y="421" width="0.4566%" height="15" fill="rgb(245,133,36)" fg:x="211" fg:w="1"/><text x="96.5970%" y="431.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.46%)</title><rect x="96.3470%" y="405" width="0.4566%" height="15" fill="rgb(212,6,19)" fg:x="211" fg:w="1"/><text x="96.5970%" y="415.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.46%)</title><rect x="96.3470%" y="389" width="0.4566%" height="15" fill="rgb(218,1,36)" fg:x="211" fg:w="1"/><text x="96.5970%" y="399.50"></text></g><g><title>_mi_memcpy (1 samples, 0.46%)</title><rect x="96.3470%" y="373" width="0.4566%" height="15" fill="rgb(246,84,54)" fg:x="211" fg:w="1"/><text x="96.5970%" y="383.50"></text></g><g><title>memcpy (1 samples, 0.46%)</title><rect x="96.3470%" y="357" width="0.4566%" height="15" fill="rgb(242,110,6)" fg:x="211" fg:w="1"/><text x="96.5970%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.46%)</title><rect x="96.3470%" y="341" width="0.4566%" height="15" fill="rgb(214,47,5)" fg:x="211" fg:w="1"/><text x="96.5970%" y="351.50"></text></g><g><title>std::panic::catch_unwind (118 samples, 53.88%)</title><rect x="43.3790%" y="933" width="53.8813%" height="15" fill="rgb(218,159,25)" fg:x="95" fg:w="118"/><text x="43.6290%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (118 samples, 53.88%)</title><rect x="43.3790%" y="917" width="53.8813%" height="15" fill="rgb(215,211,28)" fg:x="95" fg:w="118"/><text x="43.6290%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (118 samples, 53.88%)</title><rect x="43.3790%" y="901" width="53.8813%" height="15" fill="rgb(238,59,32)" fg:x="95" fg:w="118"/><text x="43.6290%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (118 samples, 53.88%)</title><rect x="43.3790%" y="885" width="53.8813%" height="15" fill="rgb(226,82,3)" fg:x="95" fg:w="118"/><text x="43.6290%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (118 samples, 53.88%)</title><rect x="43.3790%" y="869" width="53.8813%" height="15" fill="rgb(240,164,32)" fg:x="95" fg:w="118"/><text x="43.6290%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (118 samples, 53.88%)</title><rect x="43.3790%" y="853" width="53.8813%" height="15" fill="rgb(232,46,7)" fg:x="95" fg:w="118"/><text x="43.6290%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (118 samples, 53.88%)</title><rect x="43.3790%" y="837" width="53.8813%" height="15" fill="rgb(229,129,53)" fg:x="95" fg:w="118"/><text x="43.6290%" y="847.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (118 samples, 53.88%)</title><rect x="43.3790%" y="821" width="53.8813%" height="15" fill="rgb(234,188,29)" fg:x="95" fg:w="118"/><text x="43.6290%" y="831.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (118 samples, 53.88%)</title><rect x="43.3790%" y="805" width="53.8813%" height="15" fill="rgb(246,141,4)" fg:x="95" fg:w="118"/><text x="43.6290%" y="815.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (118 samples, 53.88%)</title><rect x="43.3790%" y="789" width="53.8813%" height="15" fill="rgb(229,23,39)" fg:x="95" fg:w="118"/><text x="43.6290%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (118 samples, 53.88%)</title><rect x="43.3790%" y="773" width="53.8813%" height="15" fill="rgb(206,12,3)" fg:x="95" fg:w="118"/><text x="43.6290%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (118 samples, 53.88%)</title><rect x="43.3790%" y="757" width="53.8813%" height="15" fill="rgb(252,226,20)" fg:x="95" fg:w="118"/><text x="43.6290%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (118 samples, 53.88%)</title><rect x="43.3790%" y="741" width="53.8813%" height="15" fill="rgb(216,123,35)" fg:x="95" fg:w="118"/><text x="43.6290%" y="751.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (118 samples, 53.88%)</title><rect x="43.3790%" y="725" width="53.8813%" height="15" fill="rgb(212,68,40)" fg:x="95" fg:w="118"/><text x="43.6290%" y="735.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (118 samples, 53.88%)</title><rect x="43.3790%" y="709" width="53.8813%" height="15" fill="rgb(254,125,32)" fg:x="95" fg:w="118"/><text x="43.6290%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (118 samples, 53.88%)</title><rect x="43.3790%" y="693" width="53.8813%" height="15" fill="rgb(253,97,22)" fg:x="95" fg:w="118"/><text x="43.6290%" y="703.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (118 samples, 53.88%)</title><rect x="43.3790%" y="677" width="53.8813%" height="15" fill="rgb(241,101,14)" fg:x="95" fg:w="118"/><text x="43.6290%" y="687.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (118 samples, 53.88%)</title><rect x="43.3790%" y="661" width="53.8813%" height="15" fill="rgb(238,103,29)" fg:x="95" fg:w="118"/><text x="43.6290%" y="671.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (118 samples, 53.88%)</title><rect x="43.3790%" y="645" width="53.8813%" height="15" fill="rgb(233,195,47)" fg:x="95" fg:w="118"/><text x="43.6290%" y="655.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (118 samples, 53.88%)</title><rect x="43.3790%" y="629" width="53.8813%" height="15" fill="rgb(246,218,30)" fg:x="95" fg:w="118"/><text x="43.6290%" y="639.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (9 samples, 4.11%)</title><rect x="93.1507%" y="613" width="4.1096%" height="15" fill="rgb(219,145,47)" fg:x="204" fg:w="9"/><text x="93.4007%" y="623.50">demo..</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (9 samples, 4.11%)</title><rect x="93.1507%" y="597" width="4.1096%" height="15" fill="rgb(243,12,26)" fg:x="204" fg:w="9"/><text x="93.4007%" y="607.50">demo..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (9 samples, 4.11%)</title><rect x="93.1507%" y="581" width="4.1096%" height="15" fill="rgb(214,87,16)" fg:x="204" fg:w="9"/><text x="93.4007%" y="591.50">demo..</text></g><g><title>protobuf::message::Message::parse_from_bytes (4 samples, 1.83%)</title><rect x="95.4338%" y="565" width="1.8265%" height="15" fill="rgb(208,99,42)" fg:x="209" fg:w="4"/><text x="95.6838%" y="575.50">p..</text></g><g><title>protobuf::message::Message::parse_from (3 samples, 1.37%)</title><rect x="95.8904%" y="549" width="1.3699%" height="15" fill="rgb(253,99,2)" fg:x="210" fg:w="3"/><text x="96.1404%" y="559.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (3 samples, 1.37%)</title><rect x="95.8904%" y="533" width="1.3699%" height="15" fill="rgb(220,168,23)" fg:x="210" fg:w="3"/><text x="96.1404%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.46%)</title><rect x="96.8037%" y="517" width="0.4566%" height="15" fill="rgb(242,38,24)" fg:x="212" fg:w="1"/><text x="97.0537%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.46%)</title><rect x="96.8037%" y="501" width="0.4566%" height="15" fill="rgb(225,182,9)" fg:x="212" fg:w="1"/><text x="97.0537%" y="511.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.46%)</title><rect x="96.8037%" y="485" width="0.4566%" height="15" fill="rgb(243,178,37)" fg:x="212" fg:w="1"/><text x="97.0537%" y="495.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.46%)</title><rect x="96.8037%" y="469" width="0.4566%" height="15" fill="rgb(232,139,19)" fg:x="212" fg:w="1"/><text x="97.0537%" y="479.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.46%)</title><rect x="96.8037%" y="453" width="0.4566%" height="15" fill="rgb(225,201,24)" fg:x="212" fg:w="1"/><text x="97.0537%" y="463.50"></text></g><g><title>demoparser (214 samples, 97.72%)</title><rect x="0.0000%" y="1093" width="97.7169%" height="15" fill="rgb(221,47,46)" fg:x="0" fg:w="214"/><text x="0.2500%" y="1103.50">demoparser</text></g><g><title>_start (120 samples, 54.79%)</title><rect x="42.9224%" y="1077" width="54.7945%" height="15" fill="rgb(249,23,13)" fg:x="94" fg:w="120"/><text x="43.1724%" y="1087.50">_start</text></g><g><title>__libc_start_main_impl (120 samples, 54.79%)</title><rect x="42.9224%" y="1061" width="54.7945%" height="15" fill="rgb(219,9,5)" fg:x="94" fg:w="120"/><text x="43.1724%" y="1071.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (120 samples, 54.79%)</title><rect x="42.9224%" y="1045" width="54.7945%" height="15" fill="rgb(254,171,16)" fg:x="94" fg:w="120"/><text x="43.1724%" y="1055.50">__libc_start_call_main</text></g><g><title>main (119 samples, 54.34%)</title><rect x="43.3790%" y="1029" width="54.3379%" height="15" fill="rgb(230,171,20)" fg:x="95" fg:w="119"/><text x="43.6290%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (119 samples, 54.34%)</title><rect x="43.3790%" y="1013" width="54.3379%" height="15" fill="rgb(210,71,41)" fg:x="95" fg:w="119"/><text x="43.6290%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (119 samples, 54.34%)</title><rect x="43.3790%" y="997" width="54.3379%" height="15" fill="rgb(206,173,20)" fg:x="95" fg:w="119"/><text x="43.6290%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (119 samples, 54.34%)</title><rect x="43.3790%" y="981" width="54.3379%" height="15" fill="rgb(233,88,34)" fg:x="95" fg:w="119"/><text x="43.6290%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (119 samples, 54.34%)</title><rect x="43.3790%" y="965" width="54.3379%" height="15" fill="rgb(223,209,46)" fg:x="95" fg:w="119"/><text x="43.6290%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (119 samples, 54.34%)</title><rect x="43.3790%" y="949" width="54.3379%" height="15" fill="rgb(250,43,18)" fg:x="95" fg:w="119"/><text x="43.6290%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.46%)</title><rect x="97.2603%" y="933" width="0.4566%" height="15" fill="rgb(208,13,10)" fg:x="213" fg:w="1"/><text x="97.5103%" y="943.50"></text></g><g><title>std::sys::unix::init (1 samples, 0.46%)</title><rect x="97.2603%" y="917" width="0.4566%" height="15" fill="rgb(212,200,36)" fg:x="213" fg:w="1"/><text x="97.5103%" y="927.50"></text></g><g><title>std::sys::unix::init::reset_sigpipe (1 samples, 0.46%)</title><rect x="97.2603%" y="901" width="0.4566%" height="15" fill="rgb(225,90,30)" fg:x="213" fg:w="1"/><text x="97.5103%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="885" width="0.4566%" height="15" fill="rgb(236,182,39)" fg:x="213" fg:w="1"/><text x="97.5103%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="869" width="0.4566%" height="15" fill="rgb(212,144,35)" fg:x="213" fg:w="1"/><text x="97.5103%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="853" width="0.4566%" height="15" fill="rgb(228,63,44)" fg:x="213" fg:w="1"/><text x="97.5103%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="837" width="0.4566%" height="15" fill="rgb(228,109,6)" fg:x="213" fg:w="1"/><text x="97.5103%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="821" width="0.4566%" height="15" fill="rgb(238,117,24)" fg:x="213" fg:w="1"/><text x="97.5103%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="805" width="0.4566%" height="15" fill="rgb(242,26,26)" fg:x="213" fg:w="1"/><text x="97.5103%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="789" width="0.4566%" height="15" fill="rgb(221,92,48)" fg:x="213" fg:w="1"/><text x="97.5103%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="773" width="0.4566%" height="15" fill="rgb(209,209,32)" fg:x="213" fg:w="1"/><text x="97.5103%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="757" width="0.4566%" height="15" fill="rgb(221,70,22)" fg:x="213" fg:w="1"/><text x="97.5103%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.46%)</title><rect x="97.2603%" y="741" width="0.4566%" height="15" fill="rgb(248,145,5)" fg:x="213" fg:w="1"/><text x="97.5103%" y="751.50"></text></g><g><title>all (219 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="219"/><text x="0.2500%" y="1119.50"></text></g><g><title>perf-exec (5 samples, 2.28%)</title><rect x="97.7169%" y="1093" width="2.2831%" height="15" fill="rgb(244,5,17)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1103.50">p..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="1077" width="2.2831%" height="15" fill="rgb(252,159,33)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1087.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="1061" width="2.2831%" height="15" fill="rgb(206,71,0)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1071.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="1045" width="2.2831%" height="15" fill="rgb(233,118,54)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1055.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="1029" width="2.2831%" height="15" fill="rgb(234,83,48)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1039.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="1013" width="2.2831%" height="15" fill="rgb(228,3,54)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1023.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="997" width="2.2831%" height="15" fill="rgb(226,155,13)" fg:x="214" fg:w="5"/><text x="97.9669%" y="1007.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="981" width="2.2831%" height="15" fill="rgb(241,28,37)" fg:x="214" fg:w="5"/><text x="97.9669%" y="991.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="965" width="2.2831%" height="15" fill="rgb(233,93,10)" fg:x="214" fg:w="5"/><text x="97.9669%" y="975.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="949" width="2.2831%" height="15" fill="rgb(225,113,19)" fg:x="214" fg:w="5"/><text x="97.9669%" y="959.50">[..</text></g><g><title>[unknown] (5 samples, 2.28%)</title><rect x="97.7169%" y="933" width="2.2831%" height="15" fill="rgb(241,2,18)" fg:x="214" fg:w="5"/><text x="97.9669%" y="943.50">[..</text></g></svg></svg>