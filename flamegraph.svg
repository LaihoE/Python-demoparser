<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1318" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1301.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1301.00"> </text><svg id="frames" x="10" width="1180" total_samples="247"><g><title>[[stack]] (1 samples, 0.40%)</title><rect x="0.0000%" y="1237" width="0.4049%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.40%)</title><rect x="0.0000%" y="1221" width="0.4049%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50"></text></g><g><title>mi_block_set_next (1 samples, 0.40%)</title><rect x="0.0000%" y="1205" width="0.4049%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.40%)</title><rect x="0.0000%" y="1189" width="0.4049%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.40%)</title><rect x="0.0000%" y="1173" width="0.4049%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="0.4049%" y="1237" width="0.4049%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.6549%" y="1247.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.40%)</title><rect x="0.4049%" y="1221" width="0.4049%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.6549%" y="1231.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.40%)</title><rect x="0.4049%" y="1205" width="0.4049%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.6549%" y="1215.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="0.4049%" y="1189" width="0.4049%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.6549%" y="1199.50"></text></g><g><title>sync_regs (1 samples, 0.40%)</title><rect x="0.4049%" y="1173" width="0.4049%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.6549%" y="1183.50"></text></g><g><title>do_group_exit (12 samples, 4.86%)</title><rect x="3.2389%" y="725" width="4.8583%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="12"/><text x="3.4889%" y="735.50">do_gro..</text></g><g><title>do_exit (12 samples, 4.86%)</title><rect x="3.2389%" y="709" width="4.8583%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="12"/><text x="3.4889%" y="719.50">do_exit</text></g><g><title>exit_mm (1 samples, 0.40%)</title><rect x="7.6923%" y="693" width="0.4049%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="1"/><text x="7.9423%" y="703.50"></text></g><g><title>exit_mm_release (1 samples, 0.40%)</title><rect x="7.6923%" y="677" width="0.4049%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="1"/><text x="7.9423%" y="687.50"></text></g><g><title>futex_exit_release (1 samples, 0.40%)</title><rect x="7.6923%" y="661" width="0.4049%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="7.9423%" y="671.50"></text></g><g><title>mutex_lock (1 samples, 0.40%)</title><rect x="7.6923%" y="645" width="0.4049%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="1"/><text x="7.9423%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 9.72%)</title><rect x="0.8097%" y="1189" width="9.7166%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1199.50">&lt;alloc::boxed:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 9.72%)</title><rect x="0.8097%" y="1173" width="9.7166%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1183.50">&lt;alloc::boxed:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (24 samples, 9.72%)</title><rect x="0.8097%" y="1157" width="9.7166%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1167.50">core::ops::fun..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (24 samples, 9.72%)</title><rect x="0.8097%" y="1141" width="9.7166%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1151.50">std::thread::B..</text></g><g><title>std::panic::catch_unwind (24 samples, 9.72%)</title><rect x="0.8097%" y="1125" width="9.7166%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1135.50">std::panic::ca..</text></g><g><title>std::panicking::try (24 samples, 9.72%)</title><rect x="0.8097%" y="1109" width="9.7166%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1119.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (24 samples, 9.72%)</title><rect x="0.8097%" y="1093" width="9.7166%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1103.50">std::panicking..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 9.72%)</title><rect x="0.8097%" y="1077" width="9.7166%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1087.50">&lt;core::panic::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (24 samples, 9.72%)</title><rect x="0.8097%" y="1061" width="9.7166%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1071.50">std::thread::B..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 9.72%)</title><rect x="0.8097%" y="1045" width="9.7166%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1055.50">std::sys_commo..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (24 samples, 9.72%)</title><rect x="0.8097%" y="1029" width="9.7166%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1039.50">&lt;rayon_core::r..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (24 samples, 9.72%)</title><rect x="0.8097%" y="1013" width="9.7166%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1023.50">rayon_core::re..</text></g><g><title>rayon_core::registry::main_loop (24 samples, 9.72%)</title><rect x="0.8097%" y="997" width="9.7166%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="24"/><text x="1.0597%" y="1007.50">rayon_core::re..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (24 samples, 9.72%)</title><rect x="0.8097%" y="981" width="9.7166%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="24"/><text x="1.0597%" y="991.50">rayon_core::re..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (24 samples, 9.72%)</title><rect x="0.8097%" y="965" width="9.7166%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="24"/><text x="1.0597%" y="975.50">rayon_core::re..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (24 samples, 9.72%)</title><rect x="0.8097%" y="949" width="9.7166%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="24"/><text x="1.0597%" y="959.50">rayon_core::sl..</text></g><g><title>rayon_core::sleep::Sleep::sleep (24 samples, 9.72%)</title><rect x="0.8097%" y="933" width="9.7166%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="24"/><text x="1.0597%" y="943.50">rayon_core::sl..</text></g><g><title>std::sync::condvar::Condvar::wait (24 samples, 9.72%)</title><rect x="0.8097%" y="917" width="9.7166%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="24"/><text x="1.0597%" y="927.50">std::sync::con..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (24 samples, 9.72%)</title><rect x="0.8097%" y="901" width="9.7166%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="24"/><text x="1.0597%" y="911.50">std::sys::unix..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (24 samples, 9.72%)</title><rect x="0.8097%" y="885" width="9.7166%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="24"/><text x="1.0597%" y="895.50">std::sys::unix..</text></g><g><title>std::sys::unix::futex::futex_wait (24 samples, 9.72%)</title><rect x="0.8097%" y="869" width="9.7166%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="24"/><text x="1.0597%" y="879.50">std::sys::unix..</text></g><g><title>syscall (24 samples, 9.72%)</title><rect x="0.8097%" y="853" width="9.7166%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="24"/><text x="1.0597%" y="863.50">syscall</text></g><g><title>entry_SYSCALL_64_after_hwframe (24 samples, 9.72%)</title><rect x="0.8097%" y="837" width="9.7166%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="24"/><text x="1.0597%" y="847.50">entry_SYSCALL_..</text></g><g><title>do_syscall_64 (24 samples, 9.72%)</title><rect x="0.8097%" y="821" width="9.7166%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="24"/><text x="1.0597%" y="831.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (24 samples, 9.72%)</title><rect x="0.8097%" y="805" width="9.7166%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="24"/><text x="1.0597%" y="815.50">syscall_exit_t..</text></g><g><title>exit_to_user_mode_prepare (24 samples, 9.72%)</title><rect x="0.8097%" y="789" width="9.7166%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="24"/><text x="1.0597%" y="799.50">exit_to_user_m..</text></g><g><title>exit_to_user_mode_loop (24 samples, 9.72%)</title><rect x="0.8097%" y="773" width="9.7166%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="24"/><text x="1.0597%" y="783.50">exit_to_user_m..</text></g><g><title>arch_do_signal_or_restart (24 samples, 9.72%)</title><rect x="0.8097%" y="757" width="9.7166%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="24"/><text x="1.0597%" y="767.50">arch_do_signal..</text></g><g><title>get_signal (24 samples, 9.72%)</title><rect x="0.8097%" y="741" width="9.7166%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="24"/><text x="1.0597%" y="751.50">get_signal</text></g><g><title>uprobe_deny_signal (6 samples, 2.43%)</title><rect x="8.0972%" y="725" width="2.4291%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="6"/><text x="8.3472%" y="735.50">up..</text></g><g><title>do_mmap (2 samples, 0.81%)</title><rect x="10.5263%" y="1013" width="0.8097%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="2"/><text x="10.7763%" y="1023.50"></text></g><g><title>get_unmapped_area (2 samples, 0.81%)</title><rect x="10.5263%" y="997" width="0.8097%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="2"/><text x="10.7763%" y="1007.50"></text></g><g><title>arch_get_unmapped_area_topdown (1 samples, 0.40%)</title><rect x="10.9312%" y="981" width="0.4049%" height="15" fill="rgb(239,60,40)" fg:x="27" fg:w="1"/><text x="11.1812%" y="991.50"></text></g><g><title>vm_unmapped_area (1 samples, 0.40%)</title><rect x="10.9312%" y="965" width="0.4049%" height="15" fill="rgb(206,27,48)" fg:x="27" fg:w="1"/><text x="11.1812%" y="975.50"></text></g><g><title>unmapped_area_topdown (1 samples, 0.40%)</title><rect x="10.9312%" y="949" width="0.4049%" height="15" fill="rgb(225,35,8)" fg:x="27" fg:w="1"/><text x="11.1812%" y="959.50"></text></g><g><title>osq_lock (5 samples, 2.02%)</title><rect x="11.3360%" y="965" width="2.0243%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="5"/><text x="11.5860%" y="975.50">o..</text></g><g><title>rwsem_optimistic_spin (6 samples, 2.43%)</title><rect x="11.3360%" y="981" width="2.4291%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="6"/><text x="11.5860%" y="991.50">rw..</text></g><g><title>rwsem_spin_on_owner (1 samples, 0.40%)</title><rect x="13.3603%" y="965" width="0.4049%" height="15" fill="rgb(231,138,38)" fg:x="33" fg:w="1"/><text x="13.6103%" y="975.50"></text></g><g><title>__GI___mmap64 (9 samples, 3.64%)</title><rect x="10.5263%" y="1125" width="3.6437%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1135.50">__GI..</text></g><g><title>__GI___mmap64 (9 samples, 3.64%)</title><rect x="10.5263%" y="1109" width="3.6437%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1119.50">__GI..</text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 3.64%)</title><rect x="10.5263%" y="1093" width="3.6437%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1103.50">entr..</text></g><g><title>do_syscall_64 (9 samples, 3.64%)</title><rect x="10.5263%" y="1077" width="3.6437%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1087.50">do_s..</text></g><g><title>__x64_sys_mmap (9 samples, 3.64%)</title><rect x="10.5263%" y="1061" width="3.6437%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1071.50">__x6..</text></g><g><title>ksys_mmap_pgoff (9 samples, 3.64%)</title><rect x="10.5263%" y="1045" width="3.6437%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1055.50">ksys..</text></g><g><title>vm_mmap_pgoff (9 samples, 3.64%)</title><rect x="10.5263%" y="1029" width="3.6437%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="9"/><text x="10.7763%" y="1039.50">vm_m..</text></g><g><title>down_write_killable (7 samples, 2.83%)</title><rect x="11.3360%" y="1013" width="2.8340%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="7"/><text x="11.5860%" y="1023.50">do..</text></g><g><title>rwsem_down_write_slowpath (7 samples, 2.83%)</title><rect x="11.3360%" y="997" width="2.8340%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="7"/><text x="11.5860%" y="1007.50">rw..</text></g><g><title>schedule (1 samples, 0.40%)</title><rect x="13.7652%" y="981" width="0.4049%" height="15" fill="rgb(222,148,37)" fg:x="34" fg:w="1"/><text x="14.0152%" y="991.50"></text></g><g><title>__schedule (1 samples, 0.40%)</title><rect x="13.7652%" y="965" width="0.4049%" height="15" fill="rgb(234,67,33)" fg:x="34" fg:w="1"/><text x="14.0152%" y="975.50"></text></g><g><title>prepare_task_switch (1 samples, 0.40%)</title><rect x="13.7652%" y="949" width="0.4049%" height="15" fill="rgb(247,98,35)" fg:x="34" fg:w="1"/><text x="14.0152%" y="959.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.40%)</title><rect x="13.7652%" y="933" width="0.4049%" height="15" fill="rgb(247,138,52)" fg:x="34" fg:w="1"/><text x="14.0152%" y="943.50"></text></g><g><title>perf_event_context_sched_out (1 samples, 0.40%)</title><rect x="13.7652%" y="917" width="0.4049%" height="15" fill="rgb(213,79,30)" fg:x="34" fg:w="1"/><text x="14.0152%" y="927.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.40%)</title><rect x="13.7652%" y="901" width="0.4049%" height="15" fill="rgb(246,177,23)" fg:x="34" fg:w="1"/><text x="14.0152%" y="911.50"></text></g><g><title>amd_pmu_disable_all (1 samples, 0.40%)</title><rect x="13.7652%" y="885" width="0.4049%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="14.0152%" y="895.50"></text></g><g><title>native_write_msr (1 samples, 0.40%)</title><rect x="13.7652%" y="869" width="0.4049%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="1"/><text x="14.0152%" y="879.50"></text></g><g><title>__clone3 (35 samples, 14.17%)</title><rect x="0.8097%" y="1237" width="14.1700%" height="15" fill="rgb(244,35,45)" fg:x="2" fg:w="35"/><text x="1.0597%" y="1247.50">__clone3</text></g><g><title>start_thread (35 samples, 14.17%)</title><rect x="0.8097%" y="1221" width="14.1700%" height="15" fill="rgb(251,115,12)" fg:x="2" fg:w="35"/><text x="1.0597%" y="1231.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35 samples, 14.17%)</title><rect x="0.8097%" y="1205" width="14.1700%" height="15" fill="rgb(240,54,50)" fg:x="2" fg:w="35"/><text x="1.0597%" y="1215.50">std::sys::unix::thread..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (11 samples, 4.45%)</title><rect x="10.5263%" y="1189" width="4.4534%" height="15" fill="rgb(233,84,52)" fg:x="26" fg:w="11"/><text x="10.7763%" y="1199.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (11 samples, 4.45%)</title><rect x="10.5263%" y="1173" width="4.4534%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="11"/><text x="10.7763%" y="1183.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (11 samples, 4.45%)</title><rect x="10.5263%" y="1157" width="4.4534%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="11"/><text x="10.7763%" y="1167.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (11 samples, 4.45%)</title><rect x="10.5263%" y="1141" width="4.4534%" height="15" fill="rgb(209,38,44)" fg:x="26" fg:w="11"/><text x="10.7763%" y="1151.50">std::..</text></g><g><title>__GI___mprotect (2 samples, 0.81%)</title><rect x="14.1700%" y="1125" width="0.8097%" height="15" fill="rgb(236,212,23)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1135.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.81%)</title><rect x="14.1700%" y="1109" width="0.8097%" height="15" fill="rgb(242,79,21)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1119.50"></text></g><g><title>do_syscall_64 (2 samples, 0.81%)</title><rect x="14.1700%" y="1093" width="0.8097%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1103.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.81%)</title><rect x="14.1700%" y="1077" width="0.8097%" height="15" fill="rgb(253,215,40)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1087.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.81%)</title><rect x="14.1700%" y="1061" width="0.8097%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1071.50"></text></g><g><title>down_write_killable (2 samples, 0.81%)</title><rect x="14.1700%" y="1045" width="0.8097%" height="15" fill="rgb(208,190,38)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1055.50"></text></g><g><title>rwsem_down_write_slowpath (2 samples, 0.81%)</title><rect x="14.1700%" y="1029" width="0.8097%" height="15" fill="rgb(235,213,38)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1039.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.81%)</title><rect x="14.1700%" y="1013" width="0.8097%" height="15" fill="rgb(237,122,38)" fg:x="35" fg:w="2"/><text x="14.4200%" y="1023.50"></text></g><g><title>osq_lock (1 samples, 0.40%)</title><rect x="14.5749%" y="997" width="0.4049%" height="15" fill="rgb(244,218,35)" fg:x="36" fg:w="1"/><text x="14.8249%" y="1007.50"></text></g><g><title>__irqentry_text_end (5 samples, 2.02%)</title><rect x="14.9798%" y="1237" width="2.0243%" height="15" fill="rgb(240,68,47)" fg:x="37" fg:w="5"/><text x="15.2298%" y="1247.50">_..</text></g><g><title>tlb_finish_mmu (2 samples, 0.81%)</title><rect x="17.0040%" y="949" width="0.8097%" height="15" fill="rgb(210,16,53)" fg:x="42" fg:w="2"/><text x="17.2540%" y="959.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.81%)</title><rect x="17.0040%" y="933" width="0.8097%" height="15" fill="rgb(235,124,12)" fg:x="42" fg:w="2"/><text x="17.2540%" y="943.50"></text></g><g><title>release_pages (2 samples, 0.81%)</title><rect x="17.0040%" y="917" width="0.8097%" height="15" fill="rgb(224,169,11)" fg:x="42" fg:w="2"/><text x="17.2540%" y="927.50"></text></g><g><title>free_unref_page_list (2 samples, 0.81%)</title><rect x="17.0040%" y="901" width="0.8097%" height="15" fill="rgb(250,166,2)" fg:x="42" fg:w="2"/><text x="17.2540%" y="911.50"></text></g><g><title>free_unref_page_commit.constprop.0 (2 samples, 0.81%)</title><rect x="17.0040%" y="885" width="0.8097%" height="15" fill="rgb(242,216,29)" fg:x="42" fg:w="2"/><text x="17.2540%" y="895.50"></text></g><g><title>free_pcppages_bulk (2 samples, 0.81%)</title><rect x="17.0040%" y="869" width="0.8097%" height="15" fill="rgb(230,116,27)" fg:x="42" fg:w="2"/><text x="17.2540%" y="879.50"></text></g><g><title>__free_one_page (2 samples, 0.81%)</title><rect x="17.0040%" y="853" width="0.8097%" height="15" fill="rgb(228,99,48)" fg:x="42" fg:w="2"/><text x="17.2540%" y="863.50"></text></g><g><title>page_remove_rmap (1 samples, 0.40%)</title><rect x="18.6235%" y="885" width="0.4049%" height="15" fill="rgb(253,11,6)" fg:x="46" fg:w="1"/><text x="18.8735%" y="895.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.40%)</title><rect x="18.6235%" y="869" width="0.4049%" height="15" fill="rgb(247,143,39)" fg:x="46" fg:w="1"/><text x="18.8735%" y="879.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.40%)</title><rect x="18.6235%" y="853" width="0.4049%" height="15" fill="rgb(236,97,10)" fg:x="46" fg:w="1"/><text x="18.8735%" y="863.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.40%)</title><rect x="18.6235%" y="837" width="0.4049%" height="15" fill="rgb(233,208,19)" fg:x="46" fg:w="1"/><text x="18.8735%" y="847.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.40%)</title><rect x="19.0283%" y="837" width="0.4049%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="1"/><text x="19.2783%" y="847.50"></text></g><g><title>uncharge_page (1 samples, 0.40%)</title><rect x="19.0283%" y="821" width="0.4049%" height="15" fill="rgb(220,129,5)" fg:x="47" fg:w="1"/><text x="19.2783%" y="831.50"></text></g><g><title>__GI_exit (7 samples, 2.83%)</title><rect x="17.0040%" y="1189" width="2.8340%" height="15" fill="rgb(242,17,10)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1199.50">__..</text></g><g><title>__run_exit_handlers (7 samples, 2.83%)</title><rect x="17.0040%" y="1173" width="2.8340%" height="15" fill="rgb(242,107,0)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1183.50">__..</text></g><g><title>mi_process_done (7 samples, 2.83%)</title><rect x="17.0040%" y="1157" width="2.8340%" height="15" fill="rgb(251,28,31)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1167.50">mi..</text></g><g><title>mi_process_done (7 samples, 2.83%)</title><rect x="17.0040%" y="1141" width="2.8340%" height="15" fill="rgb(233,223,10)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1151.50">mi..</text></g><g><title>mi_heap_collect_ex (7 samples, 2.83%)</title><rect x="17.0040%" y="1125" width="2.8340%" height="15" fill="rgb(215,21,27)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1135.50">mi..</text></g><g><title>mi_segment_cache_purge (7 samples, 2.83%)</title><rect x="17.0040%" y="1109" width="2.8340%" height="15" fill="rgb(232,23,21)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1119.50">mi..</text></g><g><title>mi_commit_mask_decommit (7 samples, 2.83%)</title><rect x="17.0040%" y="1093" width="2.8340%" height="15" fill="rgb(244,5,23)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1103.50">mi..</text></g><g><title>_mi_os_decommit (7 samples, 2.83%)</title><rect x="17.0040%" y="1077" width="2.8340%" height="15" fill="rgb(226,81,46)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1087.50">_m..</text></g><g><title>mi_os_commitx (7 samples, 2.83%)</title><rect x="17.0040%" y="1061" width="2.8340%" height="15" fill="rgb(247,70,30)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1071.50">mi..</text></g><g><title>__GI_madvise (7 samples, 2.83%)</title><rect x="17.0040%" y="1045" width="2.8340%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1055.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 2.83%)</title><rect x="17.0040%" y="1029" width="2.8340%" height="15" fill="rgb(240,187,13)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1039.50">en..</text></g><g><title>do_syscall_64 (7 samples, 2.83%)</title><rect x="17.0040%" y="1013" width="2.8340%" height="15" fill="rgb(223,113,26)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1023.50">do..</text></g><g><title>__x64_sys_madvise (7 samples, 2.83%)</title><rect x="17.0040%" y="997" width="2.8340%" height="15" fill="rgb(206,192,2)" fg:x="42" fg:w="7"/><text x="17.2540%" y="1007.50">__..</text></g><g><title>do_madvise.part.0 (7 samples, 2.83%)</title><rect x="17.0040%" y="981" width="2.8340%" height="15" fill="rgb(241,108,4)" fg:x="42" fg:w="7"/><text x="17.2540%" y="991.50">do..</text></g><g><title>zap_page_range (7 samples, 2.83%)</title><rect x="17.0040%" y="965" width="2.8340%" height="15" fill="rgb(247,173,49)" fg:x="42" fg:w="7"/><text x="17.2540%" y="975.50">za..</text></g><g><title>unmap_single_vma (5 samples, 2.02%)</title><rect x="17.8138%" y="949" width="2.0243%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="5"/><text x="18.0638%" y="959.50">u..</text></g><g><title>unmap_page_range (5 samples, 2.02%)</title><rect x="17.8138%" y="933" width="2.0243%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="5"/><text x="18.0638%" y="943.50">u..</text></g><g><title>zap_pmd_range.isra.0 (5 samples, 2.02%)</title><rect x="17.8138%" y="917" width="2.0243%" height="15" fill="rgb(245,172,44)" fg:x="44" fg:w="5"/><text x="18.0638%" y="927.50">z..</text></g><g><title>zap_pte_range (5 samples, 2.02%)</title><rect x="17.8138%" y="901" width="2.0243%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="5"/><text x="18.0638%" y="911.50">z..</text></g><g><title>tlb_flush_mmu (2 samples, 0.81%)</title><rect x="19.0283%" y="885" width="0.8097%" height="15" fill="rgb(205,117,38)" fg:x="47" fg:w="2"/><text x="19.2783%" y="895.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.81%)</title><rect x="19.0283%" y="869" width="0.8097%" height="15" fill="rgb(237,72,25)" fg:x="47" fg:w="2"/><text x="19.2783%" y="879.50"></text></g><g><title>release_pages (2 samples, 0.81%)</title><rect x="19.0283%" y="853" width="0.8097%" height="15" fill="rgb(244,70,9)" fg:x="47" fg:w="2"/><text x="19.2783%" y="863.50"></text></g><g><title>free_unref_page_list (1 samples, 0.40%)</title><rect x="19.4332%" y="837" width="0.4049%" height="15" fill="rgb(217,125,39)" fg:x="48" fg:w="1"/><text x="19.6832%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;memmap2::Mmap&gt;&gt; (2 samples, 0.81%)</title><rect x="19.8381%" y="773" width="0.8097%" height="15" fill="rgb(235,36,10)" fg:x="49" fg:w="2"/><text x="20.0881%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.81%)</title><rect x="19.8381%" y="757" width="0.8097%" height="15" fill="rgb(251,123,47)" fg:x="49" fg:w="2"/><text x="20.0881%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.81%)</title><rect x="19.8381%" y="741" width="0.8097%" height="15" fill="rgb(221,13,13)" fg:x="49" fg:w="2"/><text x="20.0881%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (2 samples, 0.81%)</title><rect x="19.8381%" y="725" width="0.8097%" height="15" fill="rgb(238,131,9)" fg:x="49" fg:w="2"/><text x="20.0881%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (2 samples, 0.81%)</title><rect x="19.8381%" y="709" width="0.8097%" height="15" fill="rgb(211,50,8)" fg:x="49" fg:w="2"/><text x="20.0881%" y="719.50"></text></g><g><title>__GI___munmap (2 samples, 0.81%)</title><rect x="19.8381%" y="693" width="0.8097%" height="15" fill="rgb(245,182,24)" fg:x="49" fg:w="2"/><text x="20.0881%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.81%)</title><rect x="19.8381%" y="677" width="0.8097%" height="15" fill="rgb(242,14,37)" fg:x="49" fg:w="2"/><text x="20.0881%" y="687.50"></text></g><g><title>do_syscall_64 (2 samples, 0.81%)</title><rect x="19.8381%" y="661" width="0.8097%" height="15" fill="rgb(246,228,12)" fg:x="49" fg:w="2"/><text x="20.0881%" y="671.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.81%)</title><rect x="19.8381%" y="645" width="0.8097%" height="15" fill="rgb(213,55,15)" fg:x="49" fg:w="2"/><text x="20.0881%" y="655.50"></text></g><g><title>__vm_munmap (2 samples, 0.81%)</title><rect x="19.8381%" y="629" width="0.8097%" height="15" fill="rgb(209,9,3)" fg:x="49" fg:w="2"/><text x="20.0881%" y="639.50"></text></g><g><title>__do_munmap (2 samples, 0.81%)</title><rect x="19.8381%" y="613" width="0.8097%" height="15" fill="rgb(230,59,30)" fg:x="49" fg:w="2"/><text x="20.0881%" y="623.50"></text></g><g><title>unmap_region (2 samples, 0.81%)</title><rect x="19.8381%" y="597" width="0.8097%" height="15" fill="rgb(209,121,21)" fg:x="49" fg:w="2"/><text x="20.0881%" y="607.50"></text></g><g><title>unmap_vmas (2 samples, 0.81%)</title><rect x="19.8381%" y="581" width="0.8097%" height="15" fill="rgb(220,109,13)" fg:x="49" fg:w="2"/><text x="20.0881%" y="591.50"></text></g><g><title>unmap_single_vma (2 samples, 0.81%)</title><rect x="19.8381%" y="565" width="0.8097%" height="15" fill="rgb(232,18,1)" fg:x="49" fg:w="2"/><text x="20.0881%" y="575.50"></text></g><g><title>unmap_page_range (2 samples, 0.81%)</title><rect x="19.8381%" y="549" width="0.8097%" height="15" fill="rgb(215,41,42)" fg:x="49" fg:w="2"/><text x="20.0881%" y="559.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.81%)</title><rect x="19.8381%" y="533" width="0.8097%" height="15" fill="rgb(224,123,36)" fg:x="49" fg:w="2"/><text x="20.0881%" y="543.50"></text></g><g><title>zap_pte_range (2 samples, 0.81%)</title><rect x="19.8381%" y="517" width="0.8097%" height="15" fill="rgb(240,125,3)" fg:x="49" fg:w="2"/><text x="20.0881%" y="527.50"></text></g><g><title>page_remove_rmap (1 samples, 0.40%)</title><rect x="20.2429%" y="501" width="0.4049%" height="15" fill="rgb(205,98,50)" fg:x="50" fg:w="1"/><text x="20.4929%" y="511.50"></text></g><g><title>page_remove_file_rmap (1 samples, 0.40%)</title><rect x="20.2429%" y="485" width="0.4049%" height="15" fill="rgb(205,185,37)" fg:x="50" fg:w="1"/><text x="20.4929%" y="495.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.40%)</title><rect x="20.2429%" y="469" width="0.4049%" height="15" fill="rgb(238,207,15)" fg:x="50" fg:w="1"/><text x="20.4929%" y="479.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.40%)</title><rect x="20.2429%" y="453" width="0.4049%" height="15" fill="rgb(213,199,42)" fg:x="50" fg:w="1"/><text x="20.4929%" y="463.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.40%)</title><rect x="20.2429%" y="437" width="0.4049%" height="15" fill="rgb(235,201,11)" fg:x="50" fg:w="1"/><text x="20.4929%" y="447.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.40%)</title><rect x="20.2429%" y="421" width="0.4049%" height="15" fill="rgb(207,46,11)" fg:x="50" fg:w="1"/><text x="20.4929%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (3 samples, 1.21%)</title><rect x="19.8381%" y="789" width="1.2146%" height="15" fill="rgb(241,35,35)" fg:x="49" fg:w="3"/><text x="20.0881%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (1 samples, 0.40%)</title><rect x="20.6478%" y="773" width="0.4049%" height="15" fill="rgb(243,32,47)" fg:x="51" fg:w="1"/><text x="20.8978%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.40%)</title><rect x="20.6478%" y="757" width="0.4049%" height="15" fill="rgb(247,202,23)" fg:x="51" fg:w="1"/><text x="20.8978%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="20.6478%" y="741" width="0.4049%" height="15" fill="rgb(219,102,11)" fg:x="51" fg:w="1"/><text x="20.8978%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="20.6478%" y="725" width="0.4049%" height="15" fill="rgb(243,110,44)" fg:x="51" fg:w="1"/><text x="20.8978%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (1 samples, 0.40%)</title><rect x="20.6478%" y="709" width="0.4049%" height="15" fill="rgb(222,74,54)" fg:x="51" fg:w="1"/><text x="20.8978%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="20.6478%" y="693" width="0.4049%" height="15" fill="rgb(216,99,12)" fg:x="51" fg:w="1"/><text x="20.8978%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.40%)</title><rect x="20.6478%" y="677" width="0.4049%" height="15" fill="rgb(226,22,26)" fg:x="51" fg:w="1"/><text x="20.8978%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="20.6478%" y="661" width="0.4049%" height="15" fill="rgb(217,163,10)" fg:x="51" fg:w="1"/><text x="20.8978%" y="671.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.40%)</title><rect x="20.6478%" y="645" width="0.4049%" height="15" fill="rgb(213,25,53)" fg:x="51" fg:w="1"/><text x="20.8978%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.40%)</title><rect x="20.6478%" y="629" width="0.4049%" height="15" fill="rgb(252,105,26)" fg:x="51" fg:w="1"/><text x="20.8978%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.40%)</title><rect x="20.6478%" y="613" width="0.4049%" height="15" fill="rgb(220,39,43)" fg:x="51" fg:w="1"/><text x="20.8978%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.40%)</title><rect x="20.6478%" y="597" width="0.4049%" height="15" fill="rgb(229,68,48)" fg:x="51" fg:w="1"/><text x="20.8978%" y="607.50"></text></g><g><title>core::mem::drop (1 samples, 0.40%)</title><rect x="21.0526%" y="773" width="0.4049%" height="15" fill="rgb(252,8,32)" fg:x="52" fg:w="1"/><text x="21.3026%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::cache::cache_writer::WriteCache&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="757" width="0.4049%" height="15" fill="rgb(223,20,43)" fg:x="52" fg:w="1"/><text x="21.3026%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt;&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="741" width="0.4049%" height="15" fill="rgb(229,81,49)" fg:x="52" fg:w="1"/><text x="21.3026%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="21.0526%" y="725" width="0.4049%" height="15" fill="rgb(236,28,36)" fg:x="52" fg:w="1"/><text x="21.3026%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::GameEvent]&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="709" width="0.4049%" height="15" fill="rgb(249,185,26)" fg:x="52" fg:w="1"/><text x="21.3026%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="693" width="0.4049%" height="15" fill="rgb(249,174,33)" fg:x="52" fg:w="1"/><text x="21.3026%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt;&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="677" width="0.4049%" height="15" fill="rgb(233,201,37)" fg:x="52" fg:w="1"/><text x="21.3026%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="21.0526%" y="661" width="0.4049%" height="15" fill="rgb(221,78,26)" fg:x="52" fg:w="1"/><text x="21.3026%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::NameDataPair]&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="645" width="0.4049%" height="15" fill="rgb(250,127,30)" fg:x="52" fg:w="1"/><text x="21.3026%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="629" width="0.4049%" height="15" fill="rgb(230,49,44)" fg:x="52" fg:w="1"/><text x="21.3026%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="613" width="0.4049%" height="15" fill="rgb(229,67,23)" fg:x="52" fg:w="1"/><text x="21.3026%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="597" width="0.4049%" height="15" fill="rgb(249,83,47)" fg:x="52" fg:w="1"/><text x="21.3026%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="21.0526%" y="581" width="0.4049%" height="15" fill="rgb(215,43,3)" fg:x="52" fg:w="1"/><text x="21.3026%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="21.0526%" y="565" width="0.4049%" height="15" fill="rgb(238,154,13)" fg:x="52" fg:w="1"/><text x="21.3026%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.40%)</title><rect x="21.0526%" y="549" width="0.4049%" height="15" fill="rgb(219,56,2)" fg:x="52" fg:w="1"/><text x="21.3026%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.40%)</title><rect x="21.0526%" y="533" width="0.4049%" height="15" fill="rgb(233,0,4)" fg:x="52" fg:w="1"/><text x="21.3026%" y="543.50"></text></g><g><title>mi_free (1 samples, 0.40%)</title><rect x="21.0526%" y="517" width="0.4049%" height="15" fill="rgb(235,30,7)" fg:x="52" fg:w="1"/><text x="21.3026%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.40%)</title><rect x="21.4575%" y="741" width="0.4049%" height="15" fill="rgb(250,79,13)" fg:x="53" fg:w="1"/><text x="21.7075%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.40%)</title><rect x="21.4575%" y="725" width="0.4049%" height="15" fill="rgb(211,146,34)" fg:x="53" fg:w="1"/><text x="21.7075%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.40%)</title><rect x="21.4575%" y="709" width="0.4049%" height="15" fill="rgb(228,22,38)" fg:x="53" fg:w="1"/><text x="21.7075%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.40%)</title><rect x="21.4575%" y="693" width="0.4049%" height="15" fill="rgb(235,168,5)" fg:x="53" fg:w="1"/><text x="21.7075%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.40%)</title><rect x="21.4575%" y="677" width="0.4049%" height="15" fill="rgb(221,155,16)" fg:x="53" fg:w="1"/><text x="21.7075%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.40%)</title><rect x="21.4575%" y="661" width="0.4049%" height="15" fill="rgb(215,215,53)" fg:x="53" fg:w="1"/><text x="21.7075%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.40%)</title><rect x="21.4575%" y="645" width="0.4049%" height="15" fill="rgb(223,4,10)" fg:x="53" fg:w="1"/><text x="21.7075%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.40%)</title><rect x="21.4575%" y="629" width="0.4049%" height="15" fill="rgb(234,103,6)" fg:x="53" fg:w="1"/><text x="21.7075%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.40%)</title><rect x="21.4575%" y="613" width="0.4049%" height="15" fill="rgb(227,97,0)" fg:x="53" fg:w="1"/><text x="21.7075%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.40%)</title><rect x="21.4575%" y="597" width="0.4049%" height="15" fill="rgb(234,150,53)" fg:x="53" fg:w="1"/><text x="21.7075%" y="607.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.40%)</title><rect x="21.4575%" y="581" width="0.4049%" height="15" fill="rgb(228,201,54)" fg:x="53" fg:w="1"/><text x="21.7075%" y="591.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.40%)</title><rect x="21.4575%" y="565" width="0.4049%" height="15" fill="rgb(222,22,37)" fg:x="53" fg:w="1"/><text x="21.7075%" y="575.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.40%)</title><rect x="21.4575%" y="549" width="0.4049%" height="15" fill="rgb(237,53,32)" fg:x="53" fg:w="1"/><text x="21.7075%" y="559.50"></text></g><g><title>_mi_memcpy (1 samples, 0.40%)</title><rect x="21.4575%" y="533" width="0.4049%" height="15" fill="rgb(233,25,53)" fg:x="53" fg:w="1"/><text x="21.7075%" y="543.50"></text></g><g><title>memcpy (1 samples, 0.40%)</title><rect x="21.4575%" y="517" width="0.4049%" height="15" fill="rgb(210,40,34)" fg:x="53" fg:w="1"/><text x="21.7075%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="21.4575%" y="501" width="0.4049%" height="15" fill="rgb(241,220,44)" fg:x="53" fg:w="1"/><text x="21.7075%" y="511.50"></text></g><g><title>demoparser::parsing::cache::cache_writer::WriteCache::new (5 samples, 2.02%)</title><rect x="21.4575%" y="773" width="2.0243%" height="15" fill="rgb(235,28,35)" fg:x="53" fg:w="5"/><text x="21.7075%" y="783.50">d..</text></g><g><title>demoparser::parsing::cache::cache_writer::WriteCache::filter_per_result (5 samples, 2.02%)</title><rect x="21.4575%" y="757" width="2.0243%" height="15" fill="rgb(210,56,17)" fg:x="53" fg:w="5"/><text x="21.7075%" y="767.50">d..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::JobResult&gt; (4 samples, 1.62%)</title><rect x="21.8623%" y="741" width="1.6194%" height="15" fill="rgb(224,130,29)" fg:x="54" fg:w="4"/><text x="22.1123%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::entities_cache_only::EntityIndicies&gt;&gt; (4 samples, 1.62%)</title><rect x="21.8623%" y="725" width="1.6194%" height="15" fill="rgb(235,212,8)" fg:x="54" fg:w="4"/><text x="22.1123%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.62%)</title><rect x="21.8623%" y="709" width="1.6194%" height="15" fill="rgb(223,33,50)" fg:x="54" fg:w="4"/><text x="22.1123%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::entities_cache_only::EntityIndicies]&gt; (4 samples, 1.62%)</title><rect x="21.8623%" y="693" width="1.6194%" height="15" fill="rgb(219,149,13)" fg:x="54" fg:w="4"/><text x="22.1123%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::entities_cache_only::EntityIndicies&gt; (4 samples, 1.62%)</title><rect x="21.8623%" y="677" width="1.6194%" height="15" fill="rgb(250,156,29)" fg:x="54" fg:w="4"/><text x="22.1123%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[i32: 32]&gt;&gt; (4 samples, 1.62%)</title><rect x="21.8623%" y="661" width="1.6194%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="4"/><text x="22.1123%" y="671.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.62%)</title><rect x="21.8623%" y="645" width="1.6194%" height="15" fill="rgb(216,135,14)" fg:x="54" fg:w="4"/><text x="22.1123%" y="655.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (4 samples, 1.62%)</title><rect x="21.8623%" y="629" width="1.6194%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="4"/><text x="22.1123%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.40%)</title><rect x="23.4818%" y="741" width="0.4049%" height="15" fill="rgb(233,42,35)" fg:x="58" fg:w="1"/><text x="23.7318%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.40%)</title><rect x="23.4818%" y="725" width="0.4049%" height="15" fill="rgb(231,13,6)" fg:x="58" fg:w="1"/><text x="23.7318%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.40%)</title><rect x="23.4818%" y="709" width="0.4049%" height="15" fill="rgb(207,181,40)" fg:x="58" fg:w="1"/><text x="23.7318%" y="719.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.40%)</title><rect x="23.4818%" y="693" width="0.4049%" height="15" fill="rgb(254,173,49)" fg:x="58" fg:w="1"/><text x="23.7318%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.40%)</title><rect x="23.4818%" y="677" width="0.4049%" height="15" fill="rgb(221,1,38)" fg:x="58" fg:w="1"/><text x="23.7318%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.40%)</title><rect x="23.4818%" y="661" width="0.4049%" height="15" fill="rgb(206,124,46)" fg:x="58" fg:w="1"/><text x="23.7318%" y="671.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.40%)</title><rect x="23.4818%" y="645" width="0.4049%" height="15" fill="rgb(249,21,11)" fg:x="58" fg:w="1"/><text x="23.7318%" y="655.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.40%)</title><rect x="23.4818%" y="629" width="0.4049%" height="15" fill="rgb(222,201,40)" fg:x="58" fg:w="1"/><text x="23.7318%" y="639.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.40%)</title><rect x="23.4818%" y="613" width="0.4049%" height="15" fill="rgb(235,61,29)" fg:x="58" fg:w="1"/><text x="23.7318%" y="623.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.40%)</title><rect x="23.4818%" y="597" width="0.4049%" height="15" fill="rgb(219,207,3)" fg:x="58" fg:w="1"/><text x="23.7318%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.40%)</title><rect x="23.4818%" y="581" width="0.4049%" height="15" fill="rgb(222,56,46)" fg:x="58" fg:w="1"/><text x="23.7318%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (1 samples, 0.40%)</title><rect x="23.4818%" y="565" width="0.4049%" height="15" fill="rgb(239,76,54)" fg:x="58" fg:w="1"/><text x="23.7318%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="23.4818%" y="549" width="0.4049%" height="15" fill="rgb(231,124,27)" fg:x="58" fg:w="1"/><text x="23.7318%" y="559.50"></text></g><g><title>demoparser::parsing::cache::cache_writer::WriteCache::write_all_caches (2 samples, 0.81%)</title><rect x="23.4818%" y="773" width="0.8097%" height="15" fill="rgb(249,195,6)" fg:x="58" fg:w="2"/><text x="23.7318%" y="783.50"></text></g><g><title>demoparser::parsing::cache::cache_writer::WriteCache::write_game_events (2 samples, 0.81%)</title><rect x="23.4818%" y="757" width="0.8097%" height="15" fill="rgb(237,174,47)" fg:x="58" fg:w="2"/><text x="23.7318%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.40%)</title><rect x="23.8866%" y="741" width="0.4049%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="1"/><text x="24.1366%" y="751.50"></text></g><g><title>zip::write::&lt;impl std::io::Write for zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::write (1 samples, 0.40%)</title><rect x="23.8866%" y="725" width="0.4049%" height="15" fill="rgb(231,57,52)" fg:x="59" fg:w="1"/><text x="24.1366%" y="735.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (1 samples, 0.40%)</title><rect x="23.8866%" y="709" width="0.4049%" height="15" fill="rgb(248,177,22)" fg:x="59" fg:w="1"/><text x="24.1366%" y="719.50"></text></g><g><title>&lt;zstd::stream::write::Encoder&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.40%)</title><rect x="23.8866%" y="693" width="0.4049%" height="15" fill="rgb(215,211,37)" fg:x="59" fg:w="1"/><text x="24.1366%" y="703.50"></text></g><g><title>&lt;zstd::stream::zio::writer::Writer&lt;W,D&gt; as std::io::Write&gt;::write (1 samples, 0.40%)</title><rect x="23.8866%" y="677" width="0.4049%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="1"/><text x="24.1366%" y="687.50"></text></g><g><title>zstd::stream::zio::writer::Writer&lt;W,D&gt;::with_buffer (1 samples, 0.40%)</title><rect x="23.8866%" y="661" width="0.4049%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="1"/><text x="24.1366%" y="671.50"></text></g><g><title>&lt;zstd::stream::zio::writer::Writer&lt;W,D&gt; as std::io::Write&gt;::write::{{closure}} (1 samples, 0.40%)</title><rect x="23.8866%" y="645" width="0.4049%" height="15" fill="rgb(228,167,24)" fg:x="59" fg:w="1"/><text x="24.1366%" y="655.50"></text></g><g><title>&lt;zstd::stream::raw::Encoder as zstd::stream::raw::Operation&gt;::run (1 samples, 0.40%)</title><rect x="23.8866%" y="629" width="0.4049%" height="15" fill="rgb(228,143,12)" fg:x="59" fg:w="1"/><text x="24.1366%" y="639.50"></text></g><g><title>zstd_safe::CCtx::compress_stream (1 samples, 0.40%)</title><rect x="23.8866%" y="613" width="0.4049%" height="15" fill="rgb(249,149,8)" fg:x="59" fg:w="1"/><text x="24.1366%" y="623.50"></text></g><g><title>ZSTD_compressStream (1 samples, 0.40%)</title><rect x="23.8866%" y="597" width="0.4049%" height="15" fill="rgb(243,35,44)" fg:x="59" fg:w="1"/><text x="24.1366%" y="607.50"></text></g><g><title>ZSTD_compressStream2 (1 samples, 0.40%)</title><rect x="23.8866%" y="581" width="0.4049%" height="15" fill="rgb(246,89,9)" fg:x="59" fg:w="1"/><text x="24.1366%" y="591.50"></text></g><g><title>ZSTD_compressStream_generic (1 samples, 0.40%)</title><rect x="23.8866%" y="565" width="0.4049%" height="15" fill="rgb(233,213,13)" fg:x="59" fg:w="1"/><text x="24.1366%" y="575.50"></text></g><g><title>ZSTD_limitCopy (1 samples, 0.40%)</title><rect x="23.8866%" y="549" width="0.4049%" height="15" fill="rgb(233,141,41)" fg:x="59" fg:w="1"/><text x="24.1366%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="23.8866%" y="533" width="0.4049%" height="15" fill="rgb(239,167,4)" fg:x="59" fg:w="1"/><text x="24.1366%" y="543.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="517" width="0.4049%" height="15" fill="rgb(209,217,16)" fg:x="59" fg:w="1"/><text x="24.1366%" y="527.50"></text></g><g><title>exc_page_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="501" width="0.4049%" height="15" fill="rgb(219,88,35)" fg:x="59" fg:w="1"/><text x="24.1366%" y="511.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="485" width="0.4049%" height="15" fill="rgb(220,193,23)" fg:x="59" fg:w="1"/><text x="24.1366%" y="495.50"></text></g><g><title>handle_mm_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="469" width="0.4049%" height="15" fill="rgb(230,90,52)" fg:x="59" fg:w="1"/><text x="24.1366%" y="479.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="453" width="0.4049%" height="15" fill="rgb(252,106,19)" fg:x="59" fg:w="1"/><text x="24.1366%" y="463.50"></text></g><g><title>handle_pte_fault (1 samples, 0.40%)</title><rect x="23.8866%" y="437" width="0.4049%" height="15" fill="rgb(206,74,20)" fg:x="59" fg:w="1"/><text x="24.1366%" y="447.50"></text></g><g><title>do_anonymous_page (1 samples, 0.40%)</title><rect x="23.8866%" y="421" width="0.4049%" height="15" fill="rgb(230,138,44)" fg:x="59" fg:w="1"/><text x="24.1366%" y="431.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.40%)</title><rect x="23.8866%" y="405" width="0.4049%" height="15" fill="rgb(235,182,43)" fg:x="59" fg:w="1"/><text x="24.1366%" y="415.50"></text></g><g><title>__alloc_pages (1 samples, 0.40%)</title><rect x="23.8866%" y="389" width="0.4049%" height="15" fill="rgb(242,16,51)" fg:x="59" fg:w="1"/><text x="24.1366%" y="399.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.40%)</title><rect x="23.8866%" y="373" width="0.4049%" height="15" fill="rgb(248,9,4)" fg:x="59" fg:w="1"/><text x="24.1366%" y="383.50"></text></g><g><title>rmqueue (1 samples, 0.40%)</title><rect x="23.8866%" y="357" width="0.4049%" height="15" fill="rgb(210,31,22)" fg:x="59" fg:w="1"/><text x="24.1366%" y="367.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.40%)</title><rect x="23.8866%" y="341" width="0.4049%" height="15" fill="rgb(239,54,39)" fg:x="59" fg:w="1"/><text x="24.1366%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.40%)</title><rect x="25.1012%" y="549" width="0.4049%" height="15" fill="rgb(230,99,41)" fg:x="62" fg:w="1"/><text x="25.3512%" y="559.50"></text></g><g><title>__count_memcg_events (1 samples, 0.40%)</title><rect x="28.3401%" y="277" width="0.4049%" height="15" fill="rgb(253,106,12)" fg:x="70" fg:w="1"/><text x="28.5901%" y="287.50"></text></g><g><title>__cgroup_throttle_swaprate (1 samples, 0.40%)</title><rect x="29.5547%" y="229" width="0.4049%" height="15" fill="rgb(213,46,41)" fg:x="73" fg:w="1"/><text x="29.8047%" y="239.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.40%)</title><rect x="29.9595%" y="229" width="0.4049%" height="15" fill="rgb(215,133,35)" fg:x="74" fg:w="1"/><text x="30.2095%" y="239.50"></text></g><g><title>charge_memcg (1 samples, 0.40%)</title><rect x="29.9595%" y="213" width="0.4049%" height="15" fill="rgb(213,28,5)" fg:x="74" fg:w="1"/><text x="30.2095%" y="223.50"></text></g><g><title>_mi_memcpy_aligned (12 samples, 4.86%)</title><rect x="27.1255%" y="405" width="4.8583%" height="15" fill="rgb(215,77,49)" fg:x="67" fg:w="12"/><text x="27.3755%" y="415.50">_mi_me..</text></g><g><title>_mi_memcpy (12 samples, 4.86%)</title><rect x="27.1255%" y="389" width="4.8583%" height="15" fill="rgb(248,100,22)" fg:x="67" fg:w="12"/><text x="27.3755%" y="399.50">_mi_me..</text></g><g><title>memcpy (12 samples, 4.86%)</title><rect x="27.1255%" y="373" width="4.8583%" height="15" fill="rgb(208,67,9)" fg:x="67" fg:w="12"/><text x="27.3755%" y="383.50">memcpy</text></g><g><title>[libc.so.6] (12 samples, 4.86%)</title><rect x="27.1255%" y="357" width="4.8583%" height="15" fill="rgb(219,133,21)" fg:x="67" fg:w="12"/><text x="27.3755%" y="367.50">[libc...</text></g><g><title>asm_exc_page_fault (9 samples, 3.64%)</title><rect x="28.3401%" y="341" width="3.6437%" height="15" fill="rgb(246,46,29)" fg:x="70" fg:w="9"/><text x="28.5901%" y="351.50">asm_..</text></g><g><title>exc_page_fault (9 samples, 3.64%)</title><rect x="28.3401%" y="325" width="3.6437%" height="15" fill="rgb(246,185,52)" fg:x="70" fg:w="9"/><text x="28.5901%" y="335.50">exc_..</text></g><g><title>do_user_addr_fault (9 samples, 3.64%)</title><rect x="28.3401%" y="309" width="3.6437%" height="15" fill="rgb(252,136,11)" fg:x="70" fg:w="9"/><text x="28.5901%" y="319.50">do_u..</text></g><g><title>handle_mm_fault (9 samples, 3.64%)</title><rect x="28.3401%" y="293" width="3.6437%" height="15" fill="rgb(219,138,53)" fg:x="70" fg:w="9"/><text x="28.5901%" y="303.50">hand..</text></g><g><title>__handle_mm_fault (8 samples, 3.24%)</title><rect x="28.7449%" y="277" width="3.2389%" height="15" fill="rgb(211,51,23)" fg:x="71" fg:w="8"/><text x="28.9949%" y="287.50">__h..</text></g><g><title>handle_pte_fault (6 samples, 2.43%)</title><rect x="29.5547%" y="261" width="2.4291%" height="15" fill="rgb(247,221,28)" fg:x="73" fg:w="6"/><text x="29.8047%" y="271.50">ha..</text></g><g><title>do_anonymous_page (6 samples, 2.43%)</title><rect x="29.5547%" y="245" width="2.4291%" height="15" fill="rgb(251,222,45)" fg:x="73" fg:w="6"/><text x="29.8047%" y="255.50">do..</text></g><g><title>alloc_pages_vma (4 samples, 1.62%)</title><rect x="30.3644%" y="229" width="1.6194%" height="15" fill="rgb(217,162,53)" fg:x="75" fg:w="4"/><text x="30.6144%" y="239.50"></text></g><g><title>__alloc_pages (4 samples, 1.62%)</title><rect x="30.3644%" y="213" width="1.6194%" height="15" fill="rgb(229,93,14)" fg:x="75" fg:w="4"/><text x="30.6144%" y="223.50"></text></g><g><title>get_page_from_freelist (3 samples, 1.21%)</title><rect x="30.7692%" y="197" width="1.2146%" height="15" fill="rgb(209,67,49)" fg:x="76" fg:w="3"/><text x="31.0192%" y="207.50"></text></g><g><title>clear_page_erms (3 samples, 1.21%)</title><rect x="30.7692%" y="181" width="1.2146%" height="15" fill="rgb(213,87,29)" fg:x="76" fg:w="3"/><text x="31.0192%" y="191.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.40%)</title><rect x="31.9838%" y="341" width="0.4049%" height="15" fill="rgb(205,151,52)" fg:x="79" fg:w="1"/><text x="32.2338%" y="351.50"></text></g><g><title>mi_page_queue (1 samples, 0.40%)</title><rect x="32.3887%" y="341" width="0.4049%" height="15" fill="rgb(253,215,39)" fg:x="80" fg:w="1"/><text x="32.6387%" y="351.50"></text></g><g><title>_mi_bin (1 samples, 0.40%)</title><rect x="32.3887%" y="325" width="0.4049%" height="15" fill="rgb(221,220,41)" fg:x="80" fg:w="1"/><text x="32.6387%" y="335.50"></text></g><g><title>mi_bin (1 samples, 0.40%)</title><rect x="32.3887%" y="309" width="0.4049%" height="15" fill="rgb(218,133,21)" fg:x="80" fg:w="1"/><text x="32.6387%" y="319.50"></text></g><g><title>_mi_page_start (1 samples, 0.40%)</title><rect x="32.7935%" y="293" width="0.4049%" height="15" fill="rgb(221,193,43)" fg:x="81" fg:w="1"/><text x="33.0435%" y="303.50"></text></g><g><title>_mi_segment_page_start (1 samples, 0.40%)</title><rect x="32.7935%" y="277" width="0.4049%" height="15" fill="rgb(240,128,52)" fg:x="81" fg:w="1"/><text x="33.0435%" y="287.50"></text></g><g><title>_mi_segment_page_start_from_slice (1 samples, 0.40%)</title><rect x="32.7935%" y="261" width="0.4049%" height="15" fill="rgb(253,114,12)" fg:x="81" fg:w="1"/><text x="33.0435%" y="271.50"></text></g><g><title>clear_page_erms (3 samples, 1.21%)</title><rect x="34.0081%" y="85" width="1.2146%" height="15" fill="rgb(215,223,47)" fg:x="84" fg:w="3"/><text x="34.2581%" y="95.50"></text></g><g><title>alloc_pages_vma (4 samples, 1.62%)</title><rect x="34.0081%" y="133" width="1.6194%" height="15" fill="rgb(248,225,23)" fg:x="84" fg:w="4"/><text x="34.2581%" y="143.50"></text></g><g><title>__alloc_pages (4 samples, 1.62%)</title><rect x="34.0081%" y="117" width="1.6194%" height="15" fill="rgb(250,108,0)" fg:x="84" fg:w="4"/><text x="34.2581%" y="127.50"></text></g><g><title>get_page_from_freelist (4 samples, 1.62%)</title><rect x="34.0081%" y="101" width="1.6194%" height="15" fill="rgb(228,208,7)" fg:x="84" fg:w="4"/><text x="34.2581%" y="111.50"></text></g><g><title>kernel_init_free_pages.part.0 (1 samples, 0.40%)</title><rect x="35.2227%" y="85" width="0.4049%" height="15" fill="rgb(244,45,10)" fg:x="87" fg:w="1"/><text x="35.4727%" y="95.50"></text></g><g><title>mi_page_extend_free (8 samples, 3.24%)</title><rect x="32.7935%" y="325" width="3.2389%" height="15" fill="rgb(207,125,25)" fg:x="81" fg:w="8"/><text x="33.0435%" y="335.50">mi_..</text></g><g><title>mi_page_extend_free (8 samples, 3.24%)</title><rect x="32.7935%" y="309" width="3.2389%" height="15" fill="rgb(210,195,18)" fg:x="81" fg:w="8"/><text x="33.0435%" y="319.50">mi_..</text></g><g><title>mi_page_free_list_extend (7 samples, 2.83%)</title><rect x="33.1984%" y="293" width="2.8340%" height="15" fill="rgb(249,80,12)" fg:x="82" fg:w="7"/><text x="33.4484%" y="303.50">mi..</text></g><g><title>mi_block_set_next (7 samples, 2.83%)</title><rect x="33.1984%" y="277" width="2.8340%" height="15" fill="rgb(221,65,9)" fg:x="82" fg:w="7"/><text x="33.4484%" y="287.50">mi..</text></g><g><title>mi_block_set_nextx (7 samples, 2.83%)</title><rect x="33.1984%" y="261" width="2.8340%" height="15" fill="rgb(235,49,36)" fg:x="82" fg:w="7"/><text x="33.4484%" y="271.50">mi..</text></g><g><title>asm_exc_page_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="245" width="2.0243%" height="15" fill="rgb(225,32,20)" fg:x="84" fg:w="5"/><text x="34.2581%" y="255.50">a..</text></g><g><title>exc_page_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="229" width="2.0243%" height="15" fill="rgb(215,141,46)" fg:x="84" fg:w="5"/><text x="34.2581%" y="239.50">e..</text></g><g><title>do_user_addr_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="213" width="2.0243%" height="15" fill="rgb(250,160,47)" fg:x="84" fg:w="5"/><text x="34.2581%" y="223.50">d..</text></g><g><title>handle_mm_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="197" width="2.0243%" height="15" fill="rgb(216,222,40)" fg:x="84" fg:w="5"/><text x="34.2581%" y="207.50">h..</text></g><g><title>__handle_mm_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="181" width="2.0243%" height="15" fill="rgb(234,217,39)" fg:x="84" fg:w="5"/><text x="34.2581%" y="191.50">_..</text></g><g><title>handle_pte_fault (5 samples, 2.02%)</title><rect x="34.0081%" y="165" width="2.0243%" height="15" fill="rgb(207,178,40)" fg:x="84" fg:w="5"/><text x="34.2581%" y="175.50">h..</text></g><g><title>do_anonymous_page (5 samples, 2.02%)</title><rect x="34.0081%" y="149" width="2.0243%" height="15" fill="rgb(221,136,13)" fg:x="84" fg:w="5"/><text x="34.2581%" y="159.50">d..</text></g><g><title>lru_cache_add (1 samples, 0.40%)</title><rect x="35.6275%" y="133" width="0.4049%" height="15" fill="rgb(249,199,10)" fg:x="88" fg:w="1"/><text x="35.8775%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (26 samples, 10.53%)</title><rect x="26.7206%" y="469" width="10.5263%" height="15" fill="rgb(249,222,13)" fg:x="66" fg:w="26"/><text x="26.9706%" y="479.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::grow_impl (26 samples, 10.53%)</title><rect x="26.7206%" y="453" width="10.5263%" height="15" fill="rgb(244,185,38)" fg:x="66" fg:w="26"/><text x="26.9706%" y="463.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::realloc (26 samples, 10.53%)</title><rect x="26.7206%" y="437" width="10.5263%" height="15" fill="rgb(236,202,9)" fg:x="66" fg:w="26"/><text x="26.9706%" y="447.50">alloc::alloc::r..</text></g><g><title>_mi_heap_realloc_zero (26 samples, 10.53%)</title><rect x="26.7206%" y="421" width="10.5263%" height="15" fill="rgb(250,229,37)" fg:x="66" fg:w="26"/><text x="26.9706%" y="431.50">_mi_heap_reallo..</text></g><g><title>mi_heap_malloc (13 samples, 5.26%)</title><rect x="31.9838%" y="405" width="5.2632%" height="15" fill="rgb(206,174,23)" fg:x="79" fg:w="13"/><text x="32.2338%" y="415.50">mi_hea..</text></g><g><title>_mi_malloc_generic (13 samples, 5.26%)</title><rect x="31.9838%" y="389" width="5.2632%" height="15" fill="rgb(211,33,43)" fg:x="79" fg:w="13"/><text x="32.2338%" y="399.50">_mi_ma..</text></g><g><title>mi_find_page (13 samples, 5.26%)</title><rect x="31.9838%" y="373" width="5.2632%" height="15" fill="rgb(245,58,50)" fg:x="79" fg:w="13"/><text x="32.2338%" y="383.50">mi_fin..</text></g><g><title>mi_find_free_page (13 samples, 5.26%)</title><rect x="31.9838%" y="357" width="5.2632%" height="15" fill="rgb(244,68,36)" fg:x="79" fg:w="13"/><text x="32.2338%" y="367.50">mi_fin..</text></g><g><title>mi_page_queue_find_free_ex (11 samples, 4.45%)</title><rect x="32.7935%" y="341" width="4.4534%" height="15" fill="rgb(232,229,15)" fg:x="81" fg:w="11"/><text x="33.0435%" y="351.50">mi_pa..</text></g><g><title>mi_page_fresh (3 samples, 1.21%)</title><rect x="36.0324%" y="325" width="1.2146%" height="15" fill="rgb(254,30,23)" fg:x="89" fg:w="3"/><text x="36.2824%" y="335.50"></text></g><g><title>mi_page_fresh_alloc (3 samples, 1.21%)</title><rect x="36.0324%" y="309" width="1.2146%" height="15" fill="rgb(235,160,14)" fg:x="89" fg:w="3"/><text x="36.2824%" y="319.50"></text></g><g><title>mi_page_init (3 samples, 1.21%)</title><rect x="36.0324%" y="293" width="1.2146%" height="15" fill="rgb(212,155,44)" fg:x="89" fg:w="3"/><text x="36.2824%" y="303.50"></text></g><g><title>mi_page_extend_free (3 samples, 1.21%)</title><rect x="36.0324%" y="277" width="1.2146%" height="15" fill="rgb(226,2,50)" fg:x="89" fg:w="3"/><text x="36.2824%" y="287.50"></text></g><g><title>mi_page_extend_free (3 samples, 1.21%)</title><rect x="36.0324%" y="261" width="1.2146%" height="15" fill="rgb(234,177,6)" fg:x="89" fg:w="3"/><text x="36.2824%" y="271.50"></text></g><g><title>mi_page_free_list_extend (3 samples, 1.21%)</title><rect x="36.0324%" y="245" width="1.2146%" height="15" fill="rgb(217,24,9)" fg:x="89" fg:w="3"/><text x="36.2824%" y="255.50"></text></g><g><title>mi_block_set_next (3 samples, 1.21%)</title><rect x="36.0324%" y="229" width="1.2146%" height="15" fill="rgb(220,13,46)" fg:x="89" fg:w="3"/><text x="36.2824%" y="239.50"></text></g><g><title>mi_block_set_nextx (3 samples, 1.21%)</title><rect x="36.0324%" y="213" width="1.2146%" height="15" fill="rgb(239,221,27)" fg:x="89" fg:w="3"/><text x="36.2824%" y="223.50"></text></g><g><title>asm_exc_page_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="197" width="1.2146%" height="15" fill="rgb(222,198,25)" fg:x="89" fg:w="3"/><text x="36.2824%" y="207.50"></text></g><g><title>exc_page_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="181" width="1.2146%" height="15" fill="rgb(211,99,13)" fg:x="89" fg:w="3"/><text x="36.2824%" y="191.50"></text></g><g><title>do_user_addr_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="165" width="1.2146%" height="15" fill="rgb(232,111,31)" fg:x="89" fg:w="3"/><text x="36.2824%" y="175.50"></text></g><g><title>handle_mm_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="149" width="1.2146%" height="15" fill="rgb(245,82,37)" fg:x="89" fg:w="3"/><text x="36.2824%" y="159.50"></text></g><g><title>__handle_mm_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="133" width="1.2146%" height="15" fill="rgb(227,149,46)" fg:x="89" fg:w="3"/><text x="36.2824%" y="143.50"></text></g><g><title>handle_pte_fault (3 samples, 1.21%)</title><rect x="36.0324%" y="117" width="1.2146%" height="15" fill="rgb(218,36,50)" fg:x="89" fg:w="3"/><text x="36.2824%" y="127.50"></text></g><g><title>do_anonymous_page (3 samples, 1.21%)</title><rect x="36.0324%" y="101" width="1.2146%" height="15" fill="rgb(226,80,48)" fg:x="89" fg:w="3"/><text x="36.2824%" y="111.50"></text></g><g><title>alloc_pages_vma (3 samples, 1.21%)</title><rect x="36.0324%" y="85" width="1.2146%" height="15" fill="rgb(238,224,15)" fg:x="89" fg:w="3"/><text x="36.2824%" y="95.50"></text></g><g><title>__alloc_pages (3 samples, 1.21%)</title><rect x="36.0324%" y="69" width="1.2146%" height="15" fill="rgb(241,136,10)" fg:x="89" fg:w="3"/><text x="36.2824%" y="79.50"></text></g><g><title>get_page_from_freelist (3 samples, 1.21%)</title><rect x="36.0324%" y="53" width="1.2146%" height="15" fill="rgb(208,32,45)" fg:x="89" fg:w="3"/><text x="36.2824%" y="63.50"></text></g><g><title>clear_page_erms (3 samples, 1.21%)</title><rect x="36.0324%" y="37" width="1.2146%" height="15" fill="rgb(207,135,9)" fg:x="89" fg:w="3"/><text x="36.2824%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 10.93%)</title><rect x="26.7206%" y="533" width="10.9312%" height="15" fill="rgb(206,86,44)" fg:x="66" fg:w="27"/><text x="26.9706%" y="543.50">alloc::vec::Vec&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 10.93%)</title><rect x="26.7206%" y="517" width="10.9312%" height="15" fill="rgb(245,177,15)" fg:x="66" fg:w="27"/><text x="26.9706%" y="527.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 10.93%)</title><rect x="26.7206%" y="501" width="10.9312%" height="15" fill="rgb(206,64,50)" fg:x="66" fg:w="27"/><text x="26.9706%" y="511.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 10.93%)</title><rect x="26.7206%" y="485" width="10.9312%" height="15" fill="rgb(234,36,40)" fg:x="66" fg:w="27"/><text x="26.9706%" y="495.50">alloc::raw_vec::..</text></g><g><title>_mi_malloc_generic (1 samples, 0.40%)</title><rect x="37.2470%" y="469" width="0.4049%" height="15" fill="rgb(213,64,8)" fg:x="92" fg:w="1"/><text x="37.4970%" y="479.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="533" width="0.8097%" height="15" fill="rgb(210,75,36)" fg:x="93" fg:w="2"/><text x="37.9018%" y="543.50"></text></g><g><title>exc_page_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="517" width="0.8097%" height="15" fill="rgb(229,88,21)" fg:x="93" fg:w="2"/><text x="37.9018%" y="527.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="501" width="0.8097%" height="15" fill="rgb(252,204,47)" fg:x="93" fg:w="2"/><text x="37.9018%" y="511.50"></text></g><g><title>handle_mm_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="485" width="0.8097%" height="15" fill="rgb(208,77,27)" fg:x="93" fg:w="2"/><text x="37.9018%" y="495.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="469" width="0.8097%" height="15" fill="rgb(221,76,26)" fg:x="93" fg:w="2"/><text x="37.9018%" y="479.50"></text></g><g><title>handle_pte_fault (2 samples, 0.81%)</title><rect x="37.6518%" y="453" width="0.8097%" height="15" fill="rgb(225,139,18)" fg:x="93" fg:w="2"/><text x="37.9018%" y="463.50"></text></g><g><title>do_anonymous_page (2 samples, 0.81%)</title><rect x="37.6518%" y="437" width="0.8097%" height="15" fill="rgb(230,137,11)" fg:x="93" fg:w="2"/><text x="37.9018%" y="447.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.81%)</title><rect x="37.6518%" y="421" width="0.8097%" height="15" fill="rgb(212,28,1)" fg:x="93" fg:w="2"/><text x="37.9018%" y="431.50"></text></g><g><title>__alloc_pages (2 samples, 0.81%)</title><rect x="37.6518%" y="405" width="0.8097%" height="15" fill="rgb(248,164,17)" fg:x="93" fg:w="2"/><text x="37.9018%" y="415.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.81%)</title><rect x="37.6518%" y="389" width="0.8097%" height="15" fill="rgb(222,171,42)" fg:x="93" fg:w="2"/><text x="37.9018%" y="399.50"></text></g><g><title>clear_page_erms (2 samples, 0.81%)</title><rect x="37.6518%" y="373" width="0.8097%" height="15" fill="rgb(243,84,45)" fg:x="93" fg:w="2"/><text x="37.9018%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.40%)</title><rect x="39.2713%" y="517" width="0.4049%" height="15" fill="rgb(252,49,23)" fg:x="97" fg:w="1"/><text x="39.5213%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.40%)</title><rect x="39.2713%" y="501" width="0.4049%" height="15" fill="rgb(215,19,7)" fg:x="97" fg:w="1"/><text x="39.5213%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.40%)</title><rect x="39.2713%" y="485" width="0.4049%" height="15" fill="rgb(238,81,41)" fg:x="97" fg:w="1"/><text x="39.5213%" y="495.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.40%)</title><rect x="42.9150%" y="437" width="0.4049%" height="15" fill="rgb(210,199,37)" fg:x="106" fg:w="1"/><text x="43.1650%" y="447.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_boolie (3 samples, 1.21%)</title><rect x="42.5101%" y="485" width="1.2146%" height="15" fill="rgb(244,192,49)" fg:x="105" fg:w="3"/><text x="42.7601%" y="495.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (3 samples, 1.21%)</title><rect x="42.5101%" y="469" width="1.2146%" height="15" fill="rgb(226,211,11)" fg:x="105" fg:w="3"/><text x="42.7601%" y="479.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.21%)</title><rect x="42.5101%" y="453" width="1.2146%" height="15" fill="rgb(236,162,54)" fg:x="105" fg:w="3"/><text x="42.7601%" y="463.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.40%)</title><rect x="43.3198%" y="437" width="0.4049%" height="15" fill="rgb(220,229,9)" fg:x="107" fg:w="1"/><text x="43.5698%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.40%)</title><rect x="43.3198%" y="421" width="0.4049%" height="15" fill="rgb(250,87,22)" fg:x="107" fg:w="1"/><text x="43.5698%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.40%)</title><rect x="43.3198%" y="405" width="0.4049%" height="15" fill="rgb(239,43,17)" fg:x="107" fg:w="1"/><text x="43.5698%" y="415.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_inx (21 samples, 8.50%)</title><rect x="39.6761%" y="501" width="8.5020%" height="15" fill="rgb(231,177,25)" fg:x="98" fg:w="21"/><text x="39.9261%" y="511.50">demoparser::..</text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_nbits (11 samples, 4.45%)</title><rect x="43.7247%" y="485" width="4.4534%" height="15" fill="rgb(219,179,1)" fg:x="108" fg:w="11"/><text x="43.9747%" y="495.50">demop..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (11 samples, 4.45%)</title><rect x="43.7247%" y="469" width="4.4534%" height="15" fill="rgb(238,219,53)" fg:x="108" fg:w="11"/><text x="43.9747%" y="479.50">&lt;bitt..</text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.40%)</title><rect x="47.7733%" y="453" width="0.4049%" height="15" fill="rgb(232,167,36)" fg:x="118" fg:w="1"/><text x="48.0233%" y="463.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities_cache_only::parse_indicies (28 samples, 11.34%)</title><rect x="39.6761%" y="517" width="11.3360%" height="15" fill="rgb(244,19,51)" fg:x="98" fg:w="28"/><text x="39.9261%" y="527.50">demoparser::parsi..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (7 samples, 2.83%)</title><rect x="48.1781%" y="501" width="2.8340%" height="15" fill="rgb(224,6,22)" fg:x="119" fg:w="7"/><text x="48.4281%" y="511.50">sm..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.40%)</title><rect x="50.6073%" y="485" width="0.4049%" height="15" fill="rgb(224,145,5)" fg:x="125" fg:w="1"/><text x="50.8573%" y="495.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.40%)</title><rect x="50.6073%" y="469" width="0.4049%" height="15" fill="rgb(234,130,49)" fg:x="125" fg:w="1"/><text x="50.8573%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_float (1 samples, 0.40%)</title><rect x="57.8947%" y="501" width="0.4049%" height="15" fill="rgb(254,6,2)" fg:x="143" fg:w="1"/><text x="58.1447%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_special_float (1 samples, 0.40%)</title><rect x="57.8947%" y="485" width="0.4049%" height="15" fill="rgb(208,96,46)" fg:x="143" fg:w="1"/><text x="58.1447%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_string (1 samples, 0.40%)</title><rect x="58.2996%" y="501" width="0.4049%" height="15" fill="rgb(239,3,39)" fg:x="144" fg:w="1"/><text x="58.5496%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_string (1 samples, 0.40%)</title><rect x="58.2996%" y="485" width="0.4049%" height="15" fill="rgb(233,210,1)" fg:x="144" fg:w="1"/><text x="58.5496%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="58.2996%" y="469" width="0.4049%" height="15" fill="rgb(244,137,37)" fg:x="144" fg:w="1"/><text x="58.5496%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_vec (1 samples, 0.40%)</title><rect x="58.7045%" y="501" width="0.4049%" height="15" fill="rgb(240,136,2)" fg:x="145" fg:w="1"/><text x="58.9545%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_float (1 samples, 0.40%)</title><rect x="58.7045%" y="485" width="0.4049%" height="15" fill="rgb(239,18,37)" fg:x="145" fg:w="1"/><text x="58.9545%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_special_float (1 samples, 0.40%)</title><rect x="58.7045%" y="469" width="0.4049%" height="15" fill="rgb(218,185,22)" fg:x="145" fg:w="1"/><text x="58.9545%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode (22 samples, 8.91%)</title><rect x="51.0121%" y="517" width="8.9069%" height="15" fill="rgb(225,218,4)" fg:x="126" fg:w="22"/><text x="51.2621%" y="527.50">demoparser::p..</text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_vec_xy (2 samples, 0.81%)</title><rect x="59.1093%" y="501" width="0.8097%" height="15" fill="rgb(230,182,32)" fg:x="146" fg:w="2"/><text x="59.3593%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_float (1 samples, 0.40%)</title><rect x="59.5142%" y="485" width="0.4049%" height="15" fill="rgb(242,56,43)" fg:x="147" fg:w="1"/><text x="59.7642%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_special_float (1 samples, 0.40%)</title><rect x="59.5142%" y="469" width="0.4049%" height="15" fill="rgb(233,99,24)" fg:x="147" fg:w="1"/><text x="59.7642%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities_cache_only::parse_ent_props (58 samples, 23.48%)</title><rect x="38.4615%" y="533" width="23.4818%" height="15" fill="rgb(234,209,42)" fg:x="95" fg:w="58"/><text x="38.7115%" y="543.50">demoparser::parsing::demo_parsing::en..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 2.02%)</title><rect x="59.9190%" y="517" width="2.0243%" height="15" fill="rgb(227,7,12)" fg:x="148" fg:w="5"/><text x="60.1690%" y="527.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 2.02%)</title><rect x="59.9190%" y="501" width="2.0243%" height="15" fill="rgb(245,203,43)" fg:x="148" fg:w="5"/><text x="60.1690%" y="511.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 2.02%)</title><rect x="59.9190%" y="485" width="2.0243%" height="15" fill="rgb(238,205,33)" fg:x="148" fg:w="5"/><text x="60.1690%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 1.62%)</title><rect x="60.3239%" y="469" width="1.6194%" height="15" fill="rgb(231,56,7)" fg:x="149" fg:w="4"/><text x="60.5739%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 1.62%)</title><rect x="60.3239%" y="453" width="1.6194%" height="15" fill="rgb(244,186,29)" fg:x="149" fg:w="4"/><text x="60.5739%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 1.62%)</title><rect x="60.3239%" y="437" width="1.6194%" height="15" fill="rgb(234,111,31)" fg:x="149" fg:w="4"/><text x="60.5739%" y="447.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.40%)</title><rect x="61.5385%" y="421" width="0.4049%" height="15" fill="rgb(241,149,10)" fg:x="152" fg:w="1"/><text x="61.7885%" y="431.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_u_bit_var (2 samples, 0.81%)</title><rect x="61.9433%" y="533" width="0.8097%" height="15" fill="rgb(249,206,44)" fg:x="153" fg:w="2"/><text x="62.1933%" y="543.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_nbits (2 samples, 0.81%)</title><rect x="61.9433%" y="517" width="0.8097%" height="15" fill="rgb(251,153,30)" fg:x="153" fg:w="2"/><text x="62.1933%" y="527.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.81%)</title><rect x="61.9433%" y="501" width="0.8097%" height="15" fill="rgb(239,152,38)" fg:x="153" fg:w="2"/><text x="62.1933%" y="511.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.40%)</title><rect x="62.3482%" y="485" width="0.4049%" height="15" fill="rgb(249,139,47)" fg:x="154" fg:w="1"/><text x="62.5982%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities_cache_only::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities_indicies (93 samples, 37.65%)</title><rect x="25.5061%" y="549" width="37.6518%" height="15" fill="rgb(244,64,35)" fg:x="63" fg:w="93"/><text x="25.7561%" y="559.50">demoparser::parsing::demo_parsing::entities_cache_only::&lt;impl..</text></g><g><title>sync_regs (1 samples, 0.40%)</title><rect x="62.7530%" y="533" width="0.4049%" height="15" fill="rgb(216,46,15)" fg:x="155" fg:w="1"/><text x="63.0030%" y="543.50"></text></g><g><title>__rust_alloc (1 samples, 0.40%)</title><rect x="64.7773%" y="357" width="0.4049%" height="15" fill="rgb(250,74,19)" fg:x="160" fg:w="1"/><text x="65.0273%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (2 samples, 0.81%)</title><rect x="64.7773%" y="437" width="0.8097%" height="15" fill="rgb(249,42,33)" fg:x="160" fg:w="2"/><text x="65.0273%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (2 samples, 0.81%)</title><rect x="64.7773%" y="421" width="0.8097%" height="15" fill="rgb(242,149,17)" fg:x="160" fg:w="2"/><text x="65.0273%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (2 samples, 0.81%)</title><rect x="64.7773%" y="405" width="0.8097%" height="15" fill="rgb(244,29,21)" fg:x="160" fg:w="2"/><text x="65.0273%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (2 samples, 0.81%)</title><rect x="64.7773%" y="389" width="0.8097%" height="15" fill="rgb(220,130,37)" fg:x="160" fg:w="2"/><text x="65.0273%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.81%)</title><rect x="64.7773%" y="373" width="0.8097%" height="15" fill="rgb(211,67,2)" fg:x="160" fg:w="2"/><text x="65.0273%" y="383.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.40%)</title><rect x="65.1822%" y="357" width="0.4049%" height="15" fill="rgb(235,68,52)" fg:x="161" fg:w="1"/><text x="65.4322%" y="367.50"></text></g><g><title>mi_find_page (1 samples, 0.40%)</title><rect x="65.1822%" y="341" width="0.4049%" height="15" fill="rgb(246,142,3)" fg:x="161" fg:w="1"/><text x="65.4322%" y="351.50"></text></g><g><title>mi_find_free_page (1 samples, 0.40%)</title><rect x="65.1822%" y="325" width="0.4049%" height="15" fill="rgb(241,25,7)" fg:x="161" fg:w="1"/><text x="65.4322%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf_len (1 samples, 0.40%)</title><rect x="65.5870%" y="421" width="0.4049%" height="15" fill="rgb(242,119,39)" fg:x="162" fg:w="1"/><text x="65.8370%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.40%)</title><rect x="65.5870%" y="405" width="0.4049%" height="15" fill="rgb(241,98,45)" fg:x="162" fg:w="1"/><text x="65.8370%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::remaining_in_buf (1 samples, 0.40%)</title><rect x="65.5870%" y="389" width="0.4049%" height="15" fill="rgb(254,28,30)" fg:x="162" fg:w="1"/><text x="65.8370%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.40%)</title><rect x="65.5870%" y="373" width="0.4049%" height="15" fill="rgb(241,142,54)" fg:x="162" fg:w="1"/><text x="65.8370%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.40%)</title><rect x="65.5870%" y="357" width="0.4049%" height="15" fill="rgb(222,85,15)" fg:x="162" fg:w="1"/><text x="65.8370%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (9 samples, 3.64%)</title><rect x="64.7773%" y="501" width="3.6437%" height="15" fill="rgb(210,85,47)" fg:x="160" fg:w="9"/><text x="65.0273%" y="511.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (9 samples, 3.64%)</title><rect x="64.7773%" y="485" width="3.6437%" height="15" fill="rgb(224,206,25)" fg:x="160" fg:w="9"/><text x="65.0273%" y="495.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (9 samples, 3.64%)</title><rect x="64.7773%" y="469" width="3.6437%" height="15" fill="rgb(243,201,19)" fg:x="160" fg:w="9"/><text x="65.0273%" y="479.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (9 samples, 3.64%)</title><rect x="64.7773%" y="453" width="3.6437%" height="15" fill="rgb(236,59,4)" fg:x="160" fg:w="9"/><text x="65.0273%" y="463.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (7 samples, 2.83%)</title><rect x="65.5870%" y="437" width="2.8340%" height="15" fill="rgb(254,179,45)" fg:x="162" fg:w="7"/><text x="65.8370%" y="447.50">pr..</text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (6 samples, 2.43%)</title><rect x="65.9919%" y="421" width="2.4291%" height="15" fill="rgb(226,14,10)" fg:x="163" fg:w="6"/><text x="66.2419%" y="431.50">pr..</text></g><g><title>protobuf::misc::maybe_uninit_write_slice (6 samples, 2.43%)</title><rect x="65.9919%" y="405" width="2.4291%" height="15" fill="rgb(244,27,41)" fg:x="163" fg:w="6"/><text x="66.2419%" y="415.50">pr..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 2.43%)</title><rect x="65.9919%" y="389" width="2.4291%" height="15" fill="rgb(235,35,32)" fg:x="163" fg:w="6"/><text x="66.2419%" y="399.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 2.43%)</title><rect x="65.9919%" y="373" width="2.4291%" height="15" fill="rgb(218,68,31)" fg:x="163" fg:w="6"/><text x="66.2419%" y="383.50">co..</text></g><g><title>[libc.so.6] (6 samples, 2.43%)</title><rect x="65.9919%" y="357" width="2.4291%" height="15" fill="rgb(207,120,37)" fg:x="163" fg:w="6"/><text x="66.2419%" y="367.50">[l..</text></g><g><title>demoparser::parsing::demo_parsing::entities_cache_only::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_packet_entities_indicies (115 samples, 46.56%)</title><rect x="25.1012%" y="565" width="46.5587%" height="15" fill="rgb(227,98,0)" fg:x="62" fg:w="115"/><text x="25.3512%" y="575.50">demoparser::parsing::demo_parsing::entities_cache_only::&lt;impl demoparser::pa..</text></g><g><title>protobuf::message::Message::parse_from_bytes (21 samples, 8.50%)</title><rect x="63.1579%" y="549" width="8.5020%" height="15" fill="rgb(207,7,3)" fg:x="156" fg:w="21"/><text x="63.4079%" y="559.50">protobuf::me..</text></g><g><title>protobuf::message::Message::parse_from (20 samples, 8.10%)</title><rect x="63.5628%" y="533" width="8.0972%" height="15" fill="rgb(206,98,19)" fg:x="157" fg:w="20"/><text x="63.8128%" y="543.50">protobuf::m..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (19 samples, 7.69%)</title><rect x="63.9676%" y="517" width="7.6923%" height="15" fill="rgb(217,5,26)" fg:x="158" fg:w="19"/><text x="64.2176%" y="527.50">&lt;csgoproto:..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (8 samples, 3.24%)</title><rect x="68.4211%" y="501" width="3.2389%" height="15" fill="rgb(235,190,38)" fg:x="169" fg:w="8"/><text x="68.6711%" y="511.50">pro..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (8 samples, 3.24%)</title><rect x="68.4211%" y="485" width="3.2389%" height="15" fill="rgb(247,86,24)" fg:x="169" fg:w="8"/><text x="68.6711%" y="495.50">pro..</text></g><g><title>protobuf::varint::decode::decode_varint32 (6 samples, 2.43%)</title><rect x="69.2308%" y="469" width="2.4291%" height="15" fill="rgb(205,101,16)" fg:x="171" fg:w="6"/><text x="69.4808%" y="479.50">pr..</text></g><g><title>protobuf::varint::decode::decode_varint_impl (6 samples, 2.43%)</title><rect x="69.2308%" y="453" width="2.4291%" height="15" fill="rgb(246,168,33)" fg:x="171" fg:w="6"/><text x="69.4808%" y="463.50">pr..</text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_GameEvent&gt; (1 samples, 0.40%)</title><rect x="71.6599%" y="549" width="0.4049%" height="15" fill="rgb(231,114,1)" fg:x="177" fg:w="1"/><text x="71.9099%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt;&gt; (1 samples, 0.40%)</title><rect x="71.6599%" y="533" width="0.4049%" height="15" fill="rgb(207,184,53)" fg:x="177" fg:w="1"/><text x="71.9099%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="71.6599%" y="517" width="0.4049%" height="15" fill="rgb(224,95,51)" fg:x="177" fg:w="1"/><text x="71.9099%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_game_event::Key_t]&gt; (1 samples, 0.40%)</title><rect x="71.6599%" y="501" width="0.4049%" height="15" fill="rgb(212,188,45)" fg:x="177" fg:w="1"/><text x="71.9099%" y="511.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.40%)</title><rect x="72.0648%" y="533" width="0.4049%" height="15" fill="rgb(223,154,38)" fg:x="178" fg:w="1"/><text x="72.3148%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.40%)</title><rect x="72.0648%" y="517" width="0.4049%" height="15" fill="rgb(251,22,52)" fg:x="178" fg:w="1"/><text x="72.3148%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.40%)</title><rect x="72.0648%" y="501" width="0.4049%" height="15" fill="rgb(229,209,22)" fg:x="178" fg:w="1"/><text x="72.3148%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.40%)</title><rect x="72.0648%" y="485" width="0.4049%" height="15" fill="rgb(234,138,34)" fg:x="178" fg:w="1"/><text x="72.3148%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.40%)</title><rect x="72.0648%" y="469" width="0.4049%" height="15" fill="rgb(212,95,11)" fg:x="178" fg:w="1"/><text x="72.3148%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.40%)</title><rect x="72.0648%" y="453" width="0.4049%" height="15" fill="rgb(240,179,47)" fg:x="178" fg:w="1"/><text x="72.3148%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="72.0648%" y="437" width="0.4049%" height="15" fill="rgb(240,163,11)" fg:x="178" fg:w="1"/><text x="72.3148%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="72.0648%" y="421" width="0.4049%" height="15" fill="rgb(236,37,12)" fg:x="178" fg:w="1"/><text x="72.3148%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.40%)</title><rect x="72.0648%" y="405" width="0.4049%" height="15" fill="rgb(232,164,16)" fg:x="178" fg:w="1"/><text x="72.3148%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.40%)</title><rect x="72.0648%" y="389" width="0.4049%" height="15" fill="rgb(244,205,15)" fg:x="178" fg:w="1"/><text x="72.3148%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.40%)</title><rect x="72.0648%" y="373" width="0.4049%" height="15" fill="rgb(223,117,47)" fg:x="178" fg:w="1"/><text x="72.3148%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.40%)</title><rect x="72.0648%" y="357" width="0.4049%" height="15" fill="rgb(244,107,35)" fg:x="178" fg:w="1"/><text x="72.3148%" y="367.50"></text></g><g><title>mi_malloc (1 samples, 0.40%)</title><rect x="72.0648%" y="341" width="0.4049%" height="15" fill="rgb(205,140,8)" fg:x="178" fg:w="1"/><text x="72.3148%" y="351.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.40%)</title><rect x="72.0648%" y="325" width="0.4049%" height="15" fill="rgb(228,84,46)" fg:x="178" fg:w="1"/><text x="72.3148%" y="335.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.40%)</title><rect x="72.0648%" y="309" width="0.4049%" height="15" fill="rgb(254,188,9)" fg:x="178" fg:w="1"/><text x="72.3148%" y="319.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.40%)</title><rect x="72.0648%" y="293" width="0.4049%" height="15" fill="rgb(206,112,54)" fg:x="178" fg:w="1"/><text x="72.3148%" y="303.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.40%)</title><rect x="72.4696%" y="325" width="0.4049%" height="15" fill="rgb(216,84,49)" fg:x="179" fg:w="1"/><text x="72.7196%" y="335.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.40%)</title><rect x="72.4696%" y="309" width="0.4049%" height="15" fill="rgb(214,194,35)" fg:x="179" fg:w="1"/><text x="72.7196%" y="319.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.40%)</title><rect x="72.4696%" y="293" width="0.4049%" height="15" fill="rgb(249,28,3)" fg:x="179" fg:w="1"/><text x="72.7196%" y="303.50"></text></g><g><title>mi_block_set_next (1 samples, 0.40%)</title><rect x="72.4696%" y="277" width="0.4049%" height="15" fill="rgb(222,56,52)" fg:x="179" fg:w="1"/><text x="72.7196%" y="287.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.40%)</title><rect x="72.4696%" y="261" width="0.4049%" height="15" fill="rgb(245,217,50)" fg:x="179" fg:w="1"/><text x="72.7196%" y="271.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="245" width="0.4049%" height="15" fill="rgb(213,201,24)" fg:x="179" fg:w="1"/><text x="72.7196%" y="255.50"></text></g><g><title>exc_page_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="229" width="0.4049%" height="15" fill="rgb(248,116,28)" fg:x="179" fg:w="1"/><text x="72.7196%" y="239.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="213" width="0.4049%" height="15" fill="rgb(219,72,43)" fg:x="179" fg:w="1"/><text x="72.7196%" y="223.50"></text></g><g><title>handle_mm_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="197" width="0.4049%" height="15" fill="rgb(209,138,14)" fg:x="179" fg:w="1"/><text x="72.7196%" y="207.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="181" width="0.4049%" height="15" fill="rgb(222,18,33)" fg:x="179" fg:w="1"/><text x="72.7196%" y="191.50"></text></g><g><title>handle_pte_fault (1 samples, 0.40%)</title><rect x="72.4696%" y="165" width="0.4049%" height="15" fill="rgb(213,199,7)" fg:x="179" fg:w="1"/><text x="72.7196%" y="175.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.40%)</title><rect x="72.4696%" y="149" width="0.4049%" height="15" fill="rgb(250,110,10)" fg:x="179" fg:w="1"/><text x="72.7196%" y="159.50"></text></g><g><title>__count_memcg_events (1 samples, 0.40%)</title><rect x="72.8745%" y="133" width="0.4049%" height="15" fill="rgb(248,123,6)" fg:x="180" fg:w="1"/><text x="73.1245%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 1.21%)</title><rect x="72.4696%" y="485" width="1.2146%" height="15" fill="rgb(206,91,31)" fg:x="179" fg:w="3"/><text x="72.7196%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 1.21%)</title><rect x="72.4696%" y="469" width="1.2146%" height="15" fill="rgb(211,154,13)" fg:x="179" fg:w="3"/><text x="72.7196%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 1.21%)</title><rect x="72.4696%" y="453" width="1.2146%" height="15" fill="rgb(225,148,7)" fg:x="179" fg:w="3"/><text x="72.7196%" y="463.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 1.21%)</title><rect x="72.4696%" y="437" width="1.2146%" height="15" fill="rgb(220,160,43)" fg:x="179" fg:w="3"/><text x="72.7196%" y="447.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 1.21%)</title><rect x="72.4696%" y="421" width="1.2146%" height="15" fill="rgb(213,52,39)" fg:x="179" fg:w="3"/><text x="72.7196%" y="431.50"></text></g><g><title>mi_heap_malloc (3 samples, 1.21%)</title><rect x="72.4696%" y="405" width="1.2146%" height="15" fill="rgb(243,137,7)" fg:x="179" fg:w="3"/><text x="72.7196%" y="415.50"></text></g><g><title>_mi_malloc_generic (3 samples, 1.21%)</title><rect x="72.4696%" y="389" width="1.2146%" height="15" fill="rgb(230,79,13)" fg:x="179" fg:w="3"/><text x="72.7196%" y="399.50"></text></g><g><title>mi_find_page (3 samples, 1.21%)</title><rect x="72.4696%" y="373" width="1.2146%" height="15" fill="rgb(247,105,23)" fg:x="179" fg:w="3"/><text x="72.7196%" y="383.50"></text></g><g><title>mi_find_free_page (3 samples, 1.21%)</title><rect x="72.4696%" y="357" width="1.2146%" height="15" fill="rgb(223,179,41)" fg:x="179" fg:w="3"/><text x="72.7196%" y="367.50"></text></g><g><title>mi_page_queue_find_free_ex (3 samples, 1.21%)</title><rect x="72.4696%" y="341" width="1.2146%" height="15" fill="rgb(218,9,34)" fg:x="179" fg:w="3"/><text x="72.7196%" y="351.50"></text></g><g><title>mi_page_fresh (2 samples, 0.81%)</title><rect x="72.8745%" y="325" width="0.8097%" height="15" fill="rgb(222,106,8)" fg:x="180" fg:w="2"/><text x="73.1245%" y="335.50"></text></g><g><title>mi_page_fresh_alloc (2 samples, 0.81%)</title><rect x="72.8745%" y="309" width="0.8097%" height="15" fill="rgb(211,220,0)" fg:x="180" fg:w="2"/><text x="73.1245%" y="319.50"></text></g><g><title>mi_page_init (2 samples, 0.81%)</title><rect x="72.8745%" y="293" width="0.8097%" height="15" fill="rgb(229,52,16)" fg:x="180" fg:w="2"/><text x="73.1245%" y="303.50"></text></g><g><title>mi_page_extend_free (2 samples, 0.81%)</title><rect x="72.8745%" y="277" width="0.8097%" height="15" fill="rgb(212,155,18)" fg:x="180" fg:w="2"/><text x="73.1245%" y="287.50"></text></g><g><title>mi_page_extend_free (2 samples, 0.81%)</title><rect x="72.8745%" y="261" width="0.8097%" height="15" fill="rgb(242,21,14)" fg:x="180" fg:w="2"/><text x="73.1245%" y="271.50"></text></g><g><title>mi_page_free_list_extend (2 samples, 0.81%)</title><rect x="72.8745%" y="245" width="0.8097%" height="15" fill="rgb(222,19,48)" fg:x="180" fg:w="2"/><text x="73.1245%" y="255.50"></text></g><g><title>mi_block_set_next (2 samples, 0.81%)</title><rect x="72.8745%" y="229" width="0.8097%" height="15" fill="rgb(232,45,27)" fg:x="180" fg:w="2"/><text x="73.1245%" y="239.50"></text></g><g><title>mi_block_set_nextx (2 samples, 0.81%)</title><rect x="72.8745%" y="213" width="0.8097%" height="15" fill="rgb(249,103,42)" fg:x="180" fg:w="2"/><text x="73.1245%" y="223.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.81%)</title><rect x="72.8745%" y="197" width="0.8097%" height="15" fill="rgb(246,81,33)" fg:x="180" fg:w="2"/><text x="73.1245%" y="207.50"></text></g><g><title>exc_page_fault (2 samples, 0.81%)</title><rect x="72.8745%" y="181" width="0.8097%" height="15" fill="rgb(252,33,42)" fg:x="180" fg:w="2"/><text x="73.1245%" y="191.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.81%)</title><rect x="72.8745%" y="165" width="0.8097%" height="15" fill="rgb(209,212,41)" fg:x="180" fg:w="2"/><text x="73.1245%" y="175.50"></text></g><g><title>handle_mm_fault (2 samples, 0.81%)</title><rect x="72.8745%" y="149" width="0.8097%" height="15" fill="rgb(207,154,6)" fg:x="180" fg:w="2"/><text x="73.1245%" y="159.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="73.2794%" y="133" width="0.4049%" height="15" fill="rgb(223,64,47)" fg:x="181" fg:w="1"/><text x="73.5294%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 1.62%)</title><rect x="72.4696%" y="533" width="1.6194%" height="15" fill="rgb(211,161,38)" fg:x="179" fg:w="4"/><text x="72.7196%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 1.62%)</title><rect x="72.4696%" y="517" width="1.6194%" height="15" fill="rgb(219,138,40)" fg:x="179" fg:w="4"/><text x="72.7196%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 1.62%)</title><rect x="72.4696%" y="501" width="1.6194%" height="15" fill="rgb(241,228,46)" fg:x="179" fg:w="4"/><text x="72.7196%" y="511.50"></text></g><g><title>core::cmp::max (1 samples, 0.40%)</title><rect x="73.6842%" y="485" width="0.4049%" height="15" fill="rgb(223,209,38)" fg:x="182" fg:w="1"/><text x="73.9342%" y="495.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.40%)</title><rect x="73.6842%" y="469" width="0.4049%" height="15" fill="rgb(236,164,45)" fg:x="182" fg:w="1"/><text x="73.9342%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::game_events::gen_name_val_pairs (6 samples, 2.43%)</title><rect x="72.0648%" y="549" width="2.4291%" height="15" fill="rgb(231,15,5)" fg:x="178" fg:w="6"/><text x="72.3148%" y="559.50">de..</text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 0.40%)</title><rect x="74.0891%" y="533" width="0.4049%" height="15" fill="rgb(252,35,15)" fg:x="183" fg:w="1"/><text x="74.3391%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.40%)</title><rect x="74.0891%" y="517" width="0.4049%" height="15" fill="rgb(248,181,18)" fg:x="183" fg:w="1"/><text x="74.3391%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (1 samples, 0.40%)</title><rect x="74.4939%" y="533" width="0.4049%" height="15" fill="rgb(233,39,42)" fg:x="184" fg:w="1"/><text x="74.7439%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.40%)</title><rect x="74.4939%" y="517" width="0.4049%" height="15" fill="rgb(238,110,33)" fg:x="184" fg:w="1"/><text x="74.7439%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.40%)</title><rect x="74.4939%" y="501" width="0.4049%" height="15" fill="rgb(233,195,10)" fg:x="184" fg:w="1"/><text x="74.7439%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf_len (1 samples, 0.40%)</title><rect x="74.4939%" y="485" width="0.4049%" height="15" fill="rgb(254,105,3)" fg:x="184" fg:w="1"/><text x="74.7439%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.40%)</title><rect x="74.4939%" y="469" width="0.4049%" height="15" fill="rgb(221,225,9)" fg:x="184" fg:w="1"/><text x="74.7439%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::remaining_in_buf (1 samples, 0.40%)</title><rect x="74.4939%" y="453" width="0.4049%" height="15" fill="rgb(224,227,45)" fg:x="184" fg:w="1"/><text x="74.7439%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.40%)</title><rect x="74.8988%" y="501" width="0.4049%" height="15" fill="rgb(229,198,43)" fg:x="185" fg:w="1"/><text x="75.1488%" y="511.50"></text></g><g><title>demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_no_cache (127 samples, 51.42%)</title><rect x="24.2915%" y="773" width="51.4170%" height="15" fill="rgb(206,209,35)" fg:x="60" fg:w="127"/><text x="24.5415%" y="783.50">demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compu..</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints (127 samples, 51.42%)</title><rect x="24.2915%" y="757" width="51.4170%" height="15" fill="rgb(245,195,53)" fg:x="60" fg:w="127"/><text x="24.5415%" y="767.50">demoparser::parsing::parser::Parser::parse_blueprints</text></g><g><title>core::iter::traits::iterator::Iterator::collect (127 samples, 51.42%)</title><rect x="24.2915%" y="741" width="51.4170%" height="15" fill="rgb(240,92,26)" fg:x="60" fg:w="127"/><text x="24.5415%" y="751.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (127 samples, 51.42%)</title><rect x="24.2915%" y="725" width="51.4170%" height="15" fill="rgb(207,40,23)" fg:x="60" fg:w="127"/><text x="24.5415%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (127 samples, 51.42%)</title><rect x="24.2915%" y="709" width="51.4170%" height="15" fill="rgb(223,111,35)" fg:x="60" fg:w="127"/><text x="24.5415%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (127 samples, 51.42%)</title><rect x="24.2915%" y="693" width="51.4170%" height="15" fill="rgb(229,147,28)" fg:x="60" fg:w="127"/><text x="24.5415%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (127 samples, 51.42%)</title><rect x="24.2915%" y="677" width="51.4170%" height="15" fill="rgb(211,29,28)" fg:x="60" fg:w="127"/><text x="24.5415%" y="687.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (127 samples, 51.42%)</title><rect x="24.2915%" y="661" width="51.4170%" height="15" fill="rgb(228,72,33)" fg:x="60" fg:w="127"/><text x="24.5415%" y="671.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (127 samples, 51.42%)</title><rect x="24.2915%" y="645" width="51.4170%" height="15" fill="rgb(205,214,31)" fg:x="60" fg:w="127"/><text x="24.5415%" y="655.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (127 samples, 51.42%)</title><rect x="24.2915%" y="629" width="51.4170%" height="15" fill="rgb(224,111,15)" fg:x="60" fg:w="127"/><text x="24.5415%" y="639.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (127 samples, 51.42%)</title><rect x="24.2915%" y="613" width="51.4170%" height="15" fill="rgb(253,21,26)" fg:x="60" fg:w="127"/><text x="24.5415%" y="623.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints::{{closure}} (127 samples, 51.42%)</title><rect x="24.2915%" y="597" width="51.4170%" height="15" fill="rgb(245,139,43)" fg:x="60" fg:w="127"/><text x="24.5415%" y="607.50">demoparser::parsing::parser::Parser::parse_blueprints::{{closure}}</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (127 samples, 51.42%)</title><rect x="24.2915%" y="581" width="51.4170%" height="15" fill="rgb(252,170,7)" fg:x="60" fg:w="127"/><text x="24.5415%" y="591.50">demoparser::parsing::parser::Parser::msg_handler</text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_events (10 samples, 4.05%)</title><rect x="71.6599%" y="565" width="4.0486%" height="15" fill="rgb(231,118,14)" fg:x="177" fg:w="10"/><text x="71.9099%" y="575.50">demo..</text></g><g><title>protobuf::message::Message::parse_from_bytes (3 samples, 1.21%)</title><rect x="74.4939%" y="549" width="1.2146%" height="15" fill="rgb(238,83,0)" fg:x="184" fg:w="3"/><text x="74.7439%" y="559.50"></text></g><g><title>protobuf::message::Message::parse_from (2 samples, 0.81%)</title><rect x="74.8988%" y="533" width="0.8097%" height="15" fill="rgb(221,39,39)" fg:x="185" fg:w="2"/><text x="75.1488%" y="543.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (2 samples, 0.81%)</title><rect x="74.8988%" y="517" width="0.8097%" height="15" fill="rgb(222,119,46)" fg:x="185" fg:w="2"/><text x="75.1488%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="75.3036%" y="501" width="0.4049%" height="15" fill="rgb(222,165,49)" fg:x="186" fg:w="1"/><text x="75.5536%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="75.3036%" y="485" width="0.4049%" height="15" fill="rgb(219,113,52)" fg:x="186" fg:w="1"/><text x="75.5536%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.81%)</title><rect x="75.7085%" y="725" width="0.8097%" height="15" fill="rgb(214,7,15)" fg:x="187" fg:w="2"/><text x="75.9585%" y="735.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="76.1134%" y="709" width="0.4049%" height="15" fill="rgb(235,32,4)" fg:x="188" fg:w="1"/><text x="76.3634%" y="719.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="693" width="0.4049%" height="15" fill="rgb(238,90,54)" fg:x="188" fg:w="1"/><text x="76.3634%" y="703.50"></text></g><g><title>exc_page_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="677" width="0.4049%" height="15" fill="rgb(213,208,19)" fg:x="188" fg:w="1"/><text x="76.3634%" y="687.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="661" width="0.4049%" height="15" fill="rgb(233,156,4)" fg:x="188" fg:w="1"/><text x="76.3634%" y="671.50"></text></g><g><title>handle_mm_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="645" width="0.4049%" height="15" fill="rgb(207,194,5)" fg:x="188" fg:w="1"/><text x="76.3634%" y="655.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="629" width="0.4049%" height="15" fill="rgb(206,111,30)" fg:x="188" fg:w="1"/><text x="76.3634%" y="639.50"></text></g><g><title>handle_pte_fault (1 samples, 0.40%)</title><rect x="76.1134%" y="613" width="0.4049%" height="15" fill="rgb(243,70,54)" fg:x="188" fg:w="1"/><text x="76.3634%" y="623.50"></text></g><g><title>do_anonymous_page (1 samples, 0.40%)</title><rect x="76.1134%" y="597" width="0.4049%" height="15" fill="rgb(242,28,8)" fg:x="188" fg:w="1"/><text x="76.3634%" y="607.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.40%)</title><rect x="76.1134%" y="581" width="0.4049%" height="15" fill="rgb(219,106,18)" fg:x="188" fg:w="1"/><text x="76.3634%" y="591.50"></text></g><g><title>__alloc_pages (1 samples, 0.40%)</title><rect x="76.1134%" y="565" width="0.4049%" height="15" fill="rgb(244,222,10)" fg:x="188" fg:w="1"/><text x="76.3634%" y="575.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.40%)</title><rect x="76.1134%" y="549" width="0.4049%" height="15" fill="rgb(236,179,52)" fg:x="188" fg:w="1"/><text x="76.3634%" y="559.50"></text></g><g><title>kernel_init_free_pages.part.0 (1 samples, 0.40%)</title><rect x="76.1134%" y="533" width="0.4049%" height="15" fill="rgb(213,23,39)" fg:x="188" fg:w="1"/><text x="76.3634%" y="543.50"></text></g><g><title>std::panic::catch_unwind (142 samples, 57.49%)</title><rect x="19.8381%" y="1093" width="57.4899%" height="15" fill="rgb(238,48,10)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (142 samples, 57.49%)</title><rect x="19.8381%" y="1077" width="57.4899%" height="15" fill="rgb(251,196,23)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (142 samples, 57.49%)</title><rect x="19.8381%" y="1061" width="57.4899%" height="15" fill="rgb(250,152,24)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1071.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (142 samples, 57.49%)</title><rect x="19.8381%" y="1045" width="57.4899%" height="15" fill="rgb(209,150,17)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1055.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (142 samples, 57.49%)</title><rect x="19.8381%" y="1029" width="57.4899%" height="15" fill="rgb(234,202,34)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1039.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (142 samples, 57.49%)</title><rect x="19.8381%" y="1013" width="57.4899%" height="15" fill="rgb(253,148,53)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1023.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (142 samples, 57.49%)</title><rect x="19.8381%" y="997" width="57.4899%" height="15" fill="rgb(218,129,16)" fg:x="49" fg:w="142"/><text x="20.0881%" y="1007.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (142 samples, 57.49%)</title><rect x="19.8381%" y="981" width="57.4899%" height="15" fill="rgb(216,85,19)" fg:x="49" fg:w="142"/><text x="20.0881%" y="991.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (142 samples, 57.49%)</title><rect x="19.8381%" y="965" width="57.4899%" height="15" fill="rgb(235,228,7)" fg:x="49" fg:w="142"/><text x="20.0881%" y="975.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (142 samples, 57.49%)</title><rect x="19.8381%" y="949" width="57.4899%" height="15" fill="rgb(245,175,0)" fg:x="49" fg:w="142"/><text x="20.0881%" y="959.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (142 samples, 57.49%)</title><rect x="19.8381%" y="933" width="57.4899%" height="15" fill="rgb(208,168,36)" fg:x="49" fg:w="142"/><text x="20.0881%" y="943.50">alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (142 samples, 57.49%)</title><rect x="19.8381%" y="917" width="57.4899%" height="15" fill="rgb(246,171,24)" fg:x="49" fg:w="142"/><text x="20.0881%" y="927.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (142 samples, 57.49%)</title><rect x="19.8381%" y="901" width="57.4899%" height="15" fill="rgb(215,142,24)" fg:x="49" fg:w="142"/><text x="20.0881%" y="911.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (142 samples, 57.49%)</title><rect x="19.8381%" y="885" width="57.4899%" height="15" fill="rgb(250,187,7)" fg:x="49" fg:w="142"/><text x="20.0881%" y="895.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (142 samples, 57.49%)</title><rect x="19.8381%" y="869" width="57.4899%" height="15" fill="rgb(228,66,33)" fg:x="49" fg:w="142"/><text x="20.0881%" y="879.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (142 samples, 57.49%)</title><rect x="19.8381%" y="853" width="57.4899%" height="15" fill="rgb(234,215,21)" fg:x="49" fg:w="142"/><text x="20.0881%" y="863.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (142 samples, 57.49%)</title><rect x="19.8381%" y="837" width="57.4899%" height="15" fill="rgb(222,191,20)" fg:x="49" fg:w="142"/><text x="20.0881%" y="847.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (142 samples, 57.49%)</title><rect x="19.8381%" y="821" width="57.4899%" height="15" fill="rgb(245,79,54)" fg:x="49" fg:w="142"/><text x="20.0881%" y="831.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (142 samples, 57.49%)</title><rect x="19.8381%" y="805" width="57.4899%" height="15" fill="rgb(240,10,37)" fg:x="49" fg:w="142"/><text x="20.0881%" y="815.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (139 samples, 56.28%)</title><rect x="21.0526%" y="789" width="56.2753%" height="15" fill="rgb(214,192,32)" fg:x="52" fg:w="139"/><text x="21.3026%" y="799.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (4 samples, 1.62%)</title><rect x="75.7085%" y="773" width="1.6194%" height="15" fill="rgb(209,36,54)" fg:x="187" fg:w="4"/><text x="75.9585%" y="783.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (4 samples, 1.62%)</title><rect x="75.7085%" y="757" width="1.6194%" height="15" fill="rgb(220,10,11)" fg:x="187" fg:w="4"/><text x="75.9585%" y="767.50"></text></g><g><title>demoparser::parsing::parser::Parser::messages_from_packet (4 samples, 1.62%)</title><rect x="75.7085%" y="741" width="1.6194%" height="15" fill="rgb(221,106,17)" fg:x="187" fg:w="4"/><text x="75.9585%" y="751.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_varint (2 samples, 0.81%)</title><rect x="76.5182%" y="725" width="0.8097%" height="15" fill="rgb(251,142,44)" fg:x="189" fg:w="2"/><text x="76.7682%" y="735.50"></text></g><g><title>_start (150 samples, 60.73%)</title><rect x="17.0040%" y="1237" width="60.7287%" height="15" fill="rgb(238,13,15)" fg:x="42" fg:w="150"/><text x="17.2540%" y="1247.50">_start</text></g><g><title>__libc_start_main_impl (150 samples, 60.73%)</title><rect x="17.0040%" y="1221" width="60.7287%" height="15" fill="rgb(208,107,27)" fg:x="42" fg:w="150"/><text x="17.2540%" y="1231.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (150 samples, 60.73%)</title><rect x="17.0040%" y="1205" width="60.7287%" height="15" fill="rgb(205,136,37)" fg:x="42" fg:w="150"/><text x="17.2540%" y="1215.50">__libc_start_call_main</text></g><g><title>main (143 samples, 57.89%)</title><rect x="19.8381%" y="1189" width="57.8947%" height="15" fill="rgb(250,205,27)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1199.50">main</text></g><g><title>std::rt::lang_start_internal (143 samples, 57.89%)</title><rect x="19.8381%" y="1173" width="57.8947%" height="15" fill="rgb(210,80,43)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1183.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (143 samples, 57.89%)</title><rect x="19.8381%" y="1157" width="57.8947%" height="15" fill="rgb(247,160,36)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1167.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (143 samples, 57.89%)</title><rect x="19.8381%" y="1141" width="57.8947%" height="15" fill="rgb(234,13,49)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1151.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (143 samples, 57.89%)</title><rect x="19.8381%" y="1125" width="57.8947%" height="15" fill="rgb(234,122,0)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1135.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (143 samples, 57.89%)</title><rect x="19.8381%" y="1109" width="57.8947%" height="15" fill="rgb(207,146,38)" fg:x="49" fg:w="143"/><text x="20.0881%" y="1119.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.40%)</title><rect x="77.3279%" y="1093" width="0.4049%" height="15" fill="rgb(207,177,25)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1103.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.40%)</title><rect x="77.3279%" y="1077" width="0.4049%" height="15" fill="rgb(211,178,42)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1087.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.40%)</title><rect x="77.3279%" y="1061" width="0.4049%" height="15" fill="rgb(230,69,54)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1071.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.40%)</title><rect x="77.3279%" y="1045" width="0.4049%" height="15" fill="rgb(214,135,41)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1055.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.40%)</title><rect x="77.3279%" y="1029" width="0.4049%" height="15" fill="rgb(237,67,25)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1039.50"></text></g><g><title>_IO_new_fopen (1 samples, 0.40%)</title><rect x="77.3279%" y="1013" width="0.4049%" height="15" fill="rgb(222,189,50)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1023.50"></text></g><g><title>__fopen_internal (1 samples, 0.40%)</title><rect x="77.3279%" y="997" width="0.4049%" height="15" fill="rgb(245,148,34)" fg:x="191" fg:w="1"/><text x="77.5779%" y="1007.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.40%)</title><rect x="77.3279%" y="981" width="0.4049%" height="15" fill="rgb(222,29,6)" fg:x="191" fg:w="1"/><text x="77.5779%" y="991.50"></text></g><g><title>ptmalloc_init (1 samples, 0.40%)</title><rect x="77.3279%" y="965" width="0.4049%" height="15" fill="rgb(221,189,43)" fg:x="191" fg:w="1"/><text x="77.5779%" y="975.50"></text></g><g><title>ptmalloc_init (1 samples, 0.40%)</title><rect x="77.3279%" y="949" width="0.4049%" height="15" fill="rgb(207,36,27)" fg:x="191" fg:w="1"/><text x="77.5779%" y="959.50"></text></g><g><title>malloc_init_state (1 samples, 0.40%)</title><rect x="77.3279%" y="933" width="0.4049%" height="15" fill="rgb(217,90,24)" fg:x="191" fg:w="1"/><text x="77.5779%" y="943.50"></text></g><g><title>down_read_trylock (10 samples, 4.05%)</title><rect x="81.7814%" y="1189" width="4.0486%" height="15" fill="rgb(224,66,35)" fg:x="202" fg:w="10"/><text x="82.0314%" y="1199.50">down..</text></g><g><title>asm_exc_page_fault (21 samples, 8.50%)</title><rect x="77.7328%" y="1237" width="8.5020%" height="15" fill="rgb(221,13,50)" fg:x="192" fg:w="21"/><text x="77.9828%" y="1247.50">asm_exc_page..</text></g><g><title>exc_page_fault (11 samples, 4.45%)</title><rect x="81.7814%" y="1221" width="4.4534%" height="15" fill="rgb(236,68,49)" fg:x="202" fg:w="11"/><text x="82.0314%" y="1231.50">exc_p..</text></g><g><title>do_user_addr_fault (11 samples, 4.45%)</title><rect x="81.7814%" y="1205" width="4.4534%" height="15" fill="rgb(229,146,28)" fg:x="202" fg:w="11"/><text x="82.0314%" y="1215.50">do_us..</text></g><g><title>handle_mm_fault (1 samples, 0.40%)</title><rect x="85.8300%" y="1189" width="0.4049%" height="15" fill="rgb(225,31,38)" fg:x="212" fg:w="1"/><text x="86.0800%" y="1199.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="85.8300%" y="1173" width="0.4049%" height="15" fill="rgb(250,208,3)" fg:x="212" fg:w="1"/><text x="86.0800%" y="1183.50"></text></g><g><title>handle_pte_fault (1 samples, 0.40%)</title><rect x="85.8300%" y="1157" width="0.4049%" height="15" fill="rgb(246,54,23)" fg:x="212" fg:w="1"/><text x="86.0800%" y="1167.50"></text></g><g><title>do_anonymous_page (1 samples, 0.40%)</title><rect x="85.8300%" y="1141" width="0.4049%" height="15" fill="rgb(243,76,11)" fg:x="212" fg:w="1"/><text x="86.0800%" y="1151.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.40%)</title><rect x="85.8300%" y="1125" width="0.4049%" height="15" fill="rgb(245,21,50)" fg:x="212" fg:w="1"/><text x="86.0800%" y="1135.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.40%)</title><rect x="86.2348%" y="1205" width="0.4049%" height="15" fill="rgb(228,9,43)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1215.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.40%)</title><rect x="86.2348%" y="1189" width="0.4049%" height="15" fill="rgb(208,100,47)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1199.50"></text></g><g><title>bprm_execve (1 samples, 0.40%)</title><rect x="86.2348%" y="1173" width="0.4049%" height="15" fill="rgb(232,26,8)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1183.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.40%)</title><rect x="86.2348%" y="1157" width="0.4049%" height="15" fill="rgb(216,166,38)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1167.50"></text></g><g><title>exec_binprm (1 samples, 0.40%)</title><rect x="86.2348%" y="1141" width="0.4049%" height="15" fill="rgb(251,202,51)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1151.50"></text></g><g><title>search_binary_handler (1 samples, 0.40%)</title><rect x="86.2348%" y="1125" width="0.4049%" height="15" fill="rgb(254,216,34)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1135.50"></text></g><g><title>load_elf_binary (1 samples, 0.40%)</title><rect x="86.2348%" y="1109" width="0.4049%" height="15" fill="rgb(251,32,27)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1119.50"></text></g><g><title>setup_arg_pages (1 samples, 0.40%)</title><rect x="86.2348%" y="1093" width="0.4049%" height="15" fill="rgb(208,127,28)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1103.50"></text></g><g><title>shift_arg_pages (1 samples, 0.40%)</title><rect x="86.2348%" y="1077" width="0.4049%" height="15" fill="rgb(224,137,22)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1087.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.40%)</title><rect x="86.2348%" y="1061" width="0.4049%" height="15" fill="rgb(254,70,32)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1071.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.40%)</title><rect x="86.2348%" y="1045" width="0.4049%" height="15" fill="rgb(229,75,37)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1055.50"></text></g><g><title>release_pages (1 samples, 0.40%)</title><rect x="86.2348%" y="1029" width="0.4049%" height="15" fill="rgb(252,64,23)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1039.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.40%)</title><rect x="86.2348%" y="1013" width="0.4049%" height="15" fill="rgb(232,162,48)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1023.50"></text></g><g><title>uncharge_batch (1 samples, 0.40%)</title><rect x="86.2348%" y="997" width="0.4049%" height="15" fill="rgb(246,160,12)" fg:x="213" fg:w="1"/><text x="86.4848%" y="1007.50"></text></g><g><title>page_counter_uncharge (1 samples, 0.40%)</title><rect x="86.2348%" y="981" width="0.4049%" height="15" fill="rgb(247,166,0)" fg:x="213" fg:w="1"/><text x="86.4848%" y="991.50"></text></g><g><title>page_counter_cancel (1 samples, 0.40%)</title><rect x="86.2348%" y="965" width="0.4049%" height="15" fill="rgb(249,219,21)" fg:x="213" fg:w="1"/><text x="86.4848%" y="975.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.40%)</title><rect x="86.6397%" y="1109" width="0.4049%" height="15" fill="rgb(205,209,3)" fg:x="214" fg:w="1"/><text x="86.8897%" y="1119.50"></text></g><g><title>free_swap_cache (1 samples, 0.40%)</title><rect x="86.6397%" y="1093" width="0.4049%" height="15" fill="rgb(243,44,1)" fg:x="214" fg:w="1"/><text x="86.8897%" y="1103.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 1.62%)</title><rect x="86.2348%" y="1237" width="1.6194%" height="15" fill="rgb(206,159,16)" fg:x="213" fg:w="4"/><text x="86.4848%" y="1247.50"></text></g><g><title>do_syscall_64 (4 samples, 1.62%)</title><rect x="86.2348%" y="1221" width="1.6194%" height="15" fill="rgb(244,77,30)" fg:x="213" fg:w="4"/><text x="86.4848%" y="1231.50"></text></g><g><title>__x64_sys_exit_group (3 samples, 1.21%)</title><rect x="86.6397%" y="1205" width="1.2146%" height="15" fill="rgb(218,69,12)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1215.50"></text></g><g><title>do_group_exit (3 samples, 1.21%)</title><rect x="86.6397%" y="1189" width="1.2146%" height="15" fill="rgb(212,87,7)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1199.50"></text></g><g><title>do_exit (3 samples, 1.21%)</title><rect x="86.6397%" y="1173" width="1.2146%" height="15" fill="rgb(245,114,25)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1183.50"></text></g><g><title>exit_mm (3 samples, 1.21%)</title><rect x="86.6397%" y="1157" width="1.2146%" height="15" fill="rgb(210,61,42)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1167.50"></text></g><g><title>mmput (3 samples, 1.21%)</title><rect x="86.6397%" y="1141" width="1.2146%" height="15" fill="rgb(211,52,33)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1151.50"></text></g><g><title>exit_mmap (3 samples, 1.21%)</title><rect x="86.6397%" y="1125" width="1.2146%" height="15" fill="rgb(234,58,33)" fg:x="214" fg:w="3"/><text x="86.8897%" y="1135.50"></text></g><g><title>unmap_vmas (2 samples, 0.81%)</title><rect x="87.0445%" y="1109" width="0.8097%" height="15" fill="rgb(220,115,36)" fg:x="215" fg:w="2"/><text x="87.2945%" y="1119.50"></text></g><g><title>unmap_single_vma (2 samples, 0.81%)</title><rect x="87.0445%" y="1093" width="0.8097%" height="15" fill="rgb(243,153,54)" fg:x="215" fg:w="2"/><text x="87.2945%" y="1103.50"></text></g><g><title>unmap_page_range (2 samples, 0.81%)</title><rect x="87.0445%" y="1077" width="0.8097%" height="15" fill="rgb(251,47,18)" fg:x="215" fg:w="2"/><text x="87.2945%" y="1087.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.81%)</title><rect x="87.0445%" y="1061" width="0.8097%" height="15" fill="rgb(242,102,42)" fg:x="215" fg:w="2"/><text x="87.2945%" y="1071.50"></text></g><g><title>zap_pte_range (2 samples, 0.81%)</title><rect x="87.0445%" y="1045" width="0.8097%" height="15" fill="rgb(234,31,38)" fg:x="215" fg:w="2"/><text x="87.2945%" y="1055.50"></text></g><g><title>ret_from_fork (20 samples, 8.10%)</title><rect x="87.8543%" y="1237" width="8.0972%" height="15" fill="rgb(221,117,51)" fg:x="217" fg:w="20"/><text x="88.1043%" y="1247.50">ret_from_fo..</text></g><g><title>syscall_exit_to_user_mode (20 samples, 8.10%)</title><rect x="87.8543%" y="1221" width="8.0972%" height="15" fill="rgb(212,20,18)" fg:x="217" fg:w="20"/><text x="88.1043%" y="1231.50">syscall_exi..</text></g><g><title>exit_to_user_mode_prepare (20 samples, 8.10%)</title><rect x="87.8543%" y="1205" width="8.0972%" height="15" fill="rgb(245,133,36)" fg:x="217" fg:w="20"/><text x="88.1043%" y="1215.50">exit_to_use..</text></g><g><title>exit_to_user_mode_loop (5 samples, 2.02%)</title><rect x="93.9271%" y="1189" width="2.0243%" height="15" fill="rgb(212,6,19)" fg:x="232" fg:w="5"/><text x="94.1771%" y="1199.50">e..</text></g><g><title>demoparser (242 samples, 97.98%)</title><rect x="0.0000%" y="1253" width="97.9757%" height="15" fill="rgb(218,1,36)" fg:x="0" fg:w="242"/><text x="0.2500%" y="1263.50">demoparser</text></g><g><title>sync_regs (5 samples, 2.02%)</title><rect x="95.9514%" y="1237" width="2.0243%" height="15" fill="rgb(246,84,54)" fg:x="237" fg:w="5"/><text x="96.2014%" y="1247.50">s..</text></g><g><title>all (247 samples, 100%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(242,110,6)" fg:x="0" fg:w="247"/><text x="0.2500%" y="1279.50"></text></g><g><title>perf-exec (5 samples, 2.02%)</title><rect x="97.9757%" y="1253" width="2.0243%" height="15" fill="rgb(214,47,5)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1263.50">p..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 2.02%)</title><rect x="97.9757%" y="1237" width="2.0243%" height="15" fill="rgb(218,159,25)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1247.50">e..</text></g><g><title>do_syscall_64 (5 samples, 2.02%)</title><rect x="97.9757%" y="1221" width="2.0243%" height="15" fill="rgb(215,211,28)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1231.50">d..</text></g><g><title>__x64_sys_execve (5 samples, 2.02%)</title><rect x="97.9757%" y="1205" width="2.0243%" height="15" fill="rgb(238,59,32)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1215.50">_..</text></g><g><title>do_execveat_common.isra.0 (5 samples, 2.02%)</title><rect x="97.9757%" y="1189" width="2.0243%" height="15" fill="rgb(226,82,3)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1199.50">d..</text></g><g><title>bprm_execve (5 samples, 2.02%)</title><rect x="97.9757%" y="1173" width="2.0243%" height="15" fill="rgb(240,164,32)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1183.50">b..</text></g><g><title>bprm_execve.part.0 (5 samples, 2.02%)</title><rect x="97.9757%" y="1157" width="2.0243%" height="15" fill="rgb(232,46,7)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1167.50">b..</text></g><g><title>exec_binprm (5 samples, 2.02%)</title><rect x="97.9757%" y="1141" width="2.0243%" height="15" fill="rgb(229,129,53)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1151.50">e..</text></g><g><title>search_binary_handler (5 samples, 2.02%)</title><rect x="97.9757%" y="1125" width="2.0243%" height="15" fill="rgb(234,188,29)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1135.50">s..</text></g><g><title>load_elf_binary (5 samples, 2.02%)</title><rect x="97.9757%" y="1109" width="2.0243%" height="15" fill="rgb(246,141,4)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1119.50">l..</text></g><g><title>strrchr (5 samples, 2.02%)</title><rect x="97.9757%" y="1093" width="2.0243%" height="15" fill="rgb(229,23,39)" fg:x="242" fg:w="5"/><text x="98.2257%" y="1103.50">s..</text></g></svg></svg>