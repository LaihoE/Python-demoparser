<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1253.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="232"><g><title>[unknown] (55 samples, 23.71%)</title><rect x="2.5862%" y="1173" width="23.7069%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="55"/><text x="2.8362%" y="1183.50">[unknown]</text></g><g><title>[unknown] (55 samples, 23.71%)</title><rect x="2.5862%" y="1157" width="23.7069%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="55"/><text x="2.8362%" y="1167.50">[unknown]</text></g><g><title>[unknown] (55 samples, 23.71%)</title><rect x="2.5862%" y="1141" width="23.7069%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="55"/><text x="2.8362%" y="1151.50">[unknown]</text></g><g><title>[unknown] (46 samples, 19.83%)</title><rect x="6.4655%" y="1125" width="19.8276%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="46"/><text x="6.7155%" y="1135.50">[unknown]</text></g><g><title>[unknown] (30 samples, 12.93%)</title><rect x="13.3621%" y="1109" width="12.9310%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="30"/><text x="13.6121%" y="1119.50">[unknown]</text></g><g><title>[unknown] (27 samples, 11.64%)</title><rect x="14.6552%" y="1093" width="11.6379%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="27"/><text x="14.9052%" y="1103.50">[unknown]</text></g><g><title>[unknown] (25 samples, 10.78%)</title><rect x="15.5172%" y="1077" width="10.7759%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="25"/><text x="15.7672%" y="1087.50">[unknown]</text></g><g><title>[unknown] (23 samples, 9.91%)</title><rect x="16.3793%" y="1061" width="9.9138%" height="15" fill="rgb(228,23,34)" fg:x="38" fg:w="23"/><text x="16.6293%" y="1071.50">[unknown]</text></g><g><title>[unknown] (18 samples, 7.76%)</title><rect x="18.5345%" y="1045" width="7.7586%" height="15" fill="rgb(218,30,26)" fg:x="43" fg:w="18"/><text x="18.7845%" y="1055.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.90%)</title><rect x="19.3966%" y="1029" width="6.8966%" height="15" fill="rgb(220,122,19)" fg:x="45" fg:w="16"/><text x="19.6466%" y="1039.50">[unknown]</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="21.1207%" y="1013" width="5.1724%" height="15" fill="rgb(250,228,42)" fg:x="49" fg:w="12"/><text x="21.3707%" y="1023.50">[unkno..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="23.7069%" y="997" width="2.5862%" height="15" fill="rgb(240,193,28)" fg:x="55" fg:w="6"/><text x="23.9569%" y="1007.50">[u..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="24.1379%" y="981" width="2.1552%" height="15" fill="rgb(216,20,37)" fg:x="56" fg:w="5"/><text x="24.3879%" y="991.50">[..</text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="25.4310%" y="965" width="0.8621%" height="15" fill="rgb(206,188,39)" fg:x="59" fg:w="2"/><text x="25.6810%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="25.4310%" y="949" width="0.8621%" height="15" fill="rgb(217,207,13)" fg:x="59" fg:w="2"/><text x="25.6810%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="25.4310%" y="933" width="0.8621%" height="15" fill="rgb(231,73,38)" fg:x="59" fg:w="2"/><text x="25.6810%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="25.8621%" y="917" width="0.4310%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="1"/><text x="26.1121%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="25.8621%" y="901" width="0.4310%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="1"/><text x="26.1121%" y="911.50"></text></g><g><title>[unknown] (62 samples, 26.72%)</title><rect x="0.0000%" y="1189" width="26.7241%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="62"/><text x="0.2500%" y="1199.50">[unknown]</text></g><g><title>mi_page_free_list_extend (1 samples, 0.43%)</title><rect x="26.2931%" y="1173" width="0.4310%" height="15" fill="rgb(226,26,5)" fg:x="61" fg:w="1"/><text x="26.5431%" y="1183.50"></text></g><g><title>mi_block_set_next (1 samples, 0.43%)</title><rect x="26.2931%" y="1157" width="0.4310%" height="15" fill="rgb(249,33,26)" fg:x="61" fg:w="1"/><text x="26.5431%" y="1167.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.43%)</title><rect x="26.2931%" y="1141" width="0.4310%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="1"/><text x="26.5431%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="26.2931%" y="1125" width="0.4310%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="1"/><text x="26.5431%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1173" width="0.4310%" height="15" fill="rgb(247,18,42)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1157" width="0.4310%" height="15" fill="rgb(241,131,45)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1141" width="0.4310%" height="15" fill="rgb(249,31,29)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1125" width="0.4310%" height="15" fill="rgb(225,111,53)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1109" width="0.4310%" height="15" fill="rgb(238,160,17)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.1552%" y="1093" width="0.4310%" height="15" fill="rgb(214,148,48)" fg:x="63" fg:w="1"/><text x="27.4052%" y="1103.50"></text></g><g><title>rseq_register_current_thread (1 samples, 0.43%)</title><rect x="27.5862%" y="1157" width="0.4310%" height="15" fill="rgb(232,36,49)" fg:x="64" fg:w="1"/><text x="27.8362%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.5862%" y="1141" width="0.4310%" height="15" fill="rgb(209,103,24)" fg:x="64" fg:w="1"/><text x="27.8362%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="27.5862%" y="1125" width="0.4310%" height="15" fill="rgb(229,88,8)" fg:x="64" fg:w="1"/><text x="27.8362%" y="1135.50"></text></g><g><title>_mi_os_commit (1 samples, 0.43%)</title><rect x="28.0172%" y="645" width="0.4310%" height="15" fill="rgb(213,181,19)" fg:x="65" fg:w="1"/><text x="28.2672%" y="655.50"></text></g><g><title>mi_os_commitx (1 samples, 0.43%)</title><rect x="28.0172%" y="629" width="0.4310%" height="15" fill="rgb(254,191,54)" fg:x="65" fg:w="1"/><text x="28.2672%" y="639.50"></text></g><g><title>__GI___mprotect (1 samples, 0.43%)</title><rect x="28.0172%" y="613" width="0.4310%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="1"/><text x="28.2672%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="597" width="0.4310%" height="15" fill="rgb(233,36,39)" fg:x="65" fg:w="1"/><text x="28.2672%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="581" width="0.4310%" height="15" fill="rgb(226,3,54)" fg:x="65" fg:w="1"/><text x="28.2672%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="565" width="0.4310%" height="15" fill="rgb(245,192,40)" fg:x="65" fg:w="1"/><text x="28.2672%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="549" width="0.4310%" height="15" fill="rgb(238,167,29)" fg:x="65" fg:w="1"/><text x="28.2672%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="533" width="0.4310%" height="15" fill="rgb(232,182,51)" fg:x="65" fg:w="1"/><text x="28.2672%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="517" width="0.4310%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="1"/><text x="28.2672%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="501" width="0.4310%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="1"/><text x="28.2672%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="485" width="0.4310%" height="15" fill="rgb(235,93,37)" fg:x="65" fg:w="1"/><text x="28.2672%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="469" width="0.4310%" height="15" fill="rgb(213,116,39)" fg:x="65" fg:w="1"/><text x="28.2672%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="453" width="0.4310%" height="15" fill="rgb(222,207,29)" fg:x="65" fg:w="1"/><text x="28.2672%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="437" width="0.4310%" height="15" fill="rgb(206,96,30)" fg:x="65" fg:w="1"/><text x="28.2672%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="421" width="0.4310%" height="15" fill="rgb(218,138,4)" fg:x="65" fg:w="1"/><text x="28.2672%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="405" width="0.4310%" height="15" fill="rgb(250,191,14)" fg:x="65" fg:w="1"/><text x="28.2672%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="389" width="0.4310%" height="15" fill="rgb(239,60,40)" fg:x="65" fg:w="1"/><text x="28.2672%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="373" width="0.4310%" height="15" fill="rgb(206,27,48)" fg:x="65" fg:w="1"/><text x="28.2672%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="357" width="0.4310%" height="15" fill="rgb(225,35,8)" fg:x="65" fg:w="1"/><text x="28.2672%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="341" width="0.4310%" height="15" fill="rgb(250,213,24)" fg:x="65" fg:w="1"/><text x="28.2672%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="28.0172%" y="325" width="0.4310%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="1"/><text x="28.2672%" y="335.50"></text></g><g><title>mi_find_page (13 samples, 5.60%)</title><rect x="28.0172%" y="789" width="5.6034%" height="15" fill="rgb(231,138,38)" fg:x="65" fg:w="13"/><text x="28.2672%" y="799.50">mi_find..</text></g><g><title>mi_find_free_page (13 samples, 5.60%)</title><rect x="28.0172%" y="773" width="5.6034%" height="15" fill="rgb(231,145,46)" fg:x="65" fg:w="13"/><text x="28.2672%" y="783.50">mi_find..</text></g><g><title>mi_page_queue_find_free_ex (13 samples, 5.60%)</title><rect x="28.0172%" y="757" width="5.6034%" height="15" fill="rgb(251,118,11)" fg:x="65" fg:w="13"/><text x="28.2672%" y="767.50">mi_page..</text></g><g><title>mi_page_fresh (13 samples, 5.60%)</title><rect x="28.0172%" y="741" width="5.6034%" height="15" fill="rgb(217,147,25)" fg:x="65" fg:w="13"/><text x="28.2672%" y="751.50">mi_page..</text></g><g><title>mi_page_fresh_alloc (13 samples, 5.60%)</title><rect x="28.0172%" y="725" width="5.6034%" height="15" fill="rgb(247,81,37)" fg:x="65" fg:w="13"/><text x="28.2672%" y="735.50">mi_page..</text></g><g><title>mi_segments_page_alloc (13 samples, 5.60%)</title><rect x="28.0172%" y="709" width="5.6034%" height="15" fill="rgb(209,12,38)" fg:x="65" fg:w="13"/><text x="28.2672%" y="719.50">mi_segm..</text></g><g><title>mi_segment_reclaim_or_alloc (13 samples, 5.60%)</title><rect x="28.0172%" y="693" width="5.6034%" height="15" fill="rgb(227,1,9)" fg:x="65" fg:w="13"/><text x="28.2672%" y="703.50">mi_segm..</text></g><g><title>mi_segment_alloc (13 samples, 5.60%)</title><rect x="28.0172%" y="677" width="5.6034%" height="15" fill="rgb(248,47,43)" fg:x="65" fg:w="13"/><text x="28.2672%" y="687.50">mi_segm..</text></g><g><title>mi_segment_init (13 samples, 5.60%)</title><rect x="28.0172%" y="661" width="5.6034%" height="15" fill="rgb(221,10,30)" fg:x="65" fg:w="13"/><text x="28.2672%" y="671.50">mi_segm..</text></g><g><title>memset (12 samples, 5.17%)</title><rect x="28.4483%" y="645" width="5.1724%" height="15" fill="rgb(210,229,1)" fg:x="66" fg:w="12"/><text x="28.6983%" y="655.50">memset</text></g><g><title>[libc.so.6] (12 samples, 5.17%)</title><rect x="28.4483%" y="629" width="5.1724%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="12"/><text x="28.6983%" y="639.50">[libc...</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="28.4483%" y="613" width="5.1724%" height="15" fill="rgb(234,67,33)" fg:x="66" fg:w="12"/><text x="28.6983%" y="623.50">[unkno..</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="28.4483%" y="597" width="5.1724%" height="15" fill="rgb(247,98,35)" fg:x="66" fg:w="12"/><text x="28.6983%" y="607.50">[unkno..</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="28.4483%" y="581" width="5.1724%" height="15" fill="rgb(247,138,52)" fg:x="66" fg:w="12"/><text x="28.6983%" y="591.50">[unkno..</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="28.4483%" y="565" width="5.1724%" height="15" fill="rgb(213,79,30)" fg:x="66" fg:w="12"/><text x="28.6983%" y="575.50">[unkno..</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="28.4483%" y="549" width="5.1724%" height="15" fill="rgb(246,177,23)" fg:x="66" fg:w="12"/><text x="28.6983%" y="559.50">[unkno..</text></g><g><title>[unknown] (9 samples, 3.88%)</title><rect x="29.7414%" y="533" width="3.8793%" height="15" fill="rgb(230,62,27)" fg:x="69" fg:w="9"/><text x="29.9914%" y="543.50">[unk..</text></g><g><title>[unknown] (9 samples, 3.88%)</title><rect x="29.7414%" y="517" width="3.8793%" height="15" fill="rgb(216,154,8)" fg:x="69" fg:w="9"/><text x="29.9914%" y="527.50">[unk..</text></g><g><title>[unknown] (8 samples, 3.45%)</title><rect x="30.1724%" y="501" width="3.4483%" height="15" fill="rgb(244,35,45)" fg:x="70" fg:w="8"/><text x="30.4224%" y="511.50">[un..</text></g><g><title>[unknown] (7 samples, 3.02%)</title><rect x="30.6034%" y="485" width="3.0172%" height="15" fill="rgb(251,115,12)" fg:x="71" fg:w="7"/><text x="30.8534%" y="495.50">[un..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="31.0345%" y="469" width="2.5862%" height="15" fill="rgb(240,54,50)" fg:x="72" fg:w="6"/><text x="31.2845%" y="479.50">[u..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="31.4655%" y="453" width="2.1552%" height="15" fill="rgb(233,84,52)" fg:x="73" fg:w="5"/><text x="31.7155%" y="463.50">[..</text></g><g><title>[unknown] (4 samples, 1.72%)</title><rect x="31.8966%" y="437" width="1.7241%" height="15" fill="rgb(207,117,47)" fg:x="74" fg:w="4"/><text x="32.1466%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="32.3276%" y="421" width="1.2931%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="3"/><text x="32.5776%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="32.3276%" y="405" width="1.2931%" height="15" fill="rgb(209,38,44)" fg:x="75" fg:w="3"/><text x="32.5776%" y="415.50"></text></g><g><title>rayon_core::job::JobFifo::new (14 samples, 6.03%)</title><rect x="28.0172%" y="933" width="6.0345%" height="15" fill="rgb(236,212,23)" fg:x="65" fg:w="14"/><text x="28.2672%" y="943.50">rayon_co..</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (14 samples, 6.03%)</title><rect x="28.0172%" y="917" width="6.0345%" height="15" fill="rgb(242,79,21)" fg:x="65" fg:w="14"/><text x="28.2672%" y="927.50">crossbea..</text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (14 samples, 6.03%)</title><rect x="28.0172%" y="901" width="6.0345%" height="15" fill="rgb(211,96,35)" fg:x="65" fg:w="14"/><text x="28.2672%" y="911.50">&lt;crossbe..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 6.03%)</title><rect x="28.0172%" y="885" width="6.0345%" height="15" fill="rgb(253,215,40)" fg:x="65" fg:w="14"/><text x="28.2672%" y="895.50">alloc::b..</text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 6.03%)</title><rect x="28.0172%" y="869" width="6.0345%" height="15" fill="rgb(211,81,21)" fg:x="65" fg:w="14"/><text x="28.2672%" y="879.50">alloc::a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 6.03%)</title><rect x="28.0172%" y="853" width="6.0345%" height="15" fill="rgb(208,190,38)" fg:x="65" fg:w="14"/><text x="28.2672%" y="863.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 6.03%)</title><rect x="28.0172%" y="837" width="6.0345%" height="15" fill="rgb(235,213,38)" fg:x="65" fg:w="14"/><text x="28.2672%" y="847.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (14 samples, 6.03%)</title><rect x="28.0172%" y="821" width="6.0345%" height="15" fill="rgb(237,122,38)" fg:x="65" fg:w="14"/><text x="28.2672%" y="831.50">alloc::a..</text></g><g><title>_mi_malloc_generic (14 samples, 6.03%)</title><rect x="28.0172%" y="805" width="6.0345%" height="15" fill="rgb(244,218,35)" fg:x="65" fg:w="14"/><text x="28.2672%" y="815.50">_mi_mall..</text></g><g><title>mi_thread_init (1 samples, 0.43%)</title><rect x="33.6207%" y="789" width="0.4310%" height="15" fill="rgb(240,68,47)" fg:x="78" fg:w="1"/><text x="33.8707%" y="799.50"></text></g><g><title>_mi_heap_init (1 samples, 0.43%)</title><rect x="33.6207%" y="773" width="0.4310%" height="15" fill="rgb(210,16,53)" fg:x="78" fg:w="1"/><text x="33.8707%" y="783.50"></text></g><g><title>mi_thread_data_alloc (1 samples, 0.43%)</title><rect x="33.6207%" y="757" width="0.4310%" height="15" fill="rgb(235,124,12)" fg:x="78" fg:w="1"/><text x="33.8707%" y="767.50"></text></g><g><title>_mi_os_alloc (1 samples, 0.43%)</title><rect x="33.6207%" y="741" width="0.4310%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="33.8707%" y="751.50"></text></g><g><title>mi_os_mem_alloc (1 samples, 0.43%)</title><rect x="33.6207%" y="725" width="0.4310%" height="15" fill="rgb(250,166,2)" fg:x="78" fg:w="1"/><text x="33.8707%" y="735.50"></text></g><g><title>mi_unix_mmap (1 samples, 0.43%)</title><rect x="33.6207%" y="709" width="0.4310%" height="15" fill="rgb(242,216,29)" fg:x="78" fg:w="1"/><text x="33.8707%" y="719.50"></text></g><g><title>mi_unix_mmapx (1 samples, 0.43%)</title><rect x="33.6207%" y="693" width="0.4310%" height="15" fill="rgb(230,116,27)" fg:x="78" fg:w="1"/><text x="33.8707%" y="703.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.43%)</title><rect x="33.6207%" y="677" width="0.4310%" height="15" fill="rgb(228,99,48)" fg:x="78" fg:w="1"/><text x="33.8707%" y="687.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.43%)</title><rect x="33.6207%" y="661" width="0.4310%" height="15" fill="rgb(253,11,6)" fg:x="78" fg:w="1"/><text x="33.8707%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="645" width="0.4310%" height="15" fill="rgb(247,143,39)" fg:x="78" fg:w="1"/><text x="33.8707%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="629" width="0.4310%" height="15" fill="rgb(236,97,10)" fg:x="78" fg:w="1"/><text x="33.8707%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="613" width="0.4310%" height="15" fill="rgb(233,208,19)" fg:x="78" fg:w="1"/><text x="33.8707%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="597" width="0.4310%" height="15" fill="rgb(216,164,2)" fg:x="78" fg:w="1"/><text x="33.8707%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="581" width="0.4310%" height="15" fill="rgb(220,129,5)" fg:x="78" fg:w="1"/><text x="33.8707%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="565" width="0.4310%" height="15" fill="rgb(242,17,10)" fg:x="78" fg:w="1"/><text x="33.8707%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="549" width="0.4310%" height="15" fill="rgb(242,107,0)" fg:x="78" fg:w="1"/><text x="33.8707%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="533" width="0.4310%" height="15" fill="rgb(251,28,31)" fg:x="78" fg:w="1"/><text x="33.8707%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="33.6207%" y="517" width="0.4310%" height="15" fill="rgb(233,223,10)" fg:x="78" fg:w="1"/><text x="33.8707%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.43%)</title><rect x="34.0517%" y="901" width="0.4310%" height="15" fill="rgb(215,21,27)" fg:x="79" fg:w="1"/><text x="34.3017%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (1 samples, 0.43%)</title><rect x="34.0517%" y="885" width="0.4310%" height="15" fill="rgb(232,23,21)" fg:x="79" fg:w="1"/><text x="34.3017%" y="895.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (1 samples, 0.43%)</title><rect x="34.0517%" y="869" width="0.4310%" height="15" fill="rgb(244,5,23)" fg:x="79" fg:w="1"/><text x="34.3017%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.43%)</title><rect x="34.0517%" y="853" width="0.4310%" height="15" fill="rgb(226,81,46)" fg:x="79" fg:w="1"/><text x="34.3017%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.43%)</title><rect x="34.0517%" y="837" width="0.4310%" height="15" fill="rgb(247,70,30)" fg:x="79" fg:w="1"/><text x="34.3017%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.43%)</title><rect x="34.0517%" y="821" width="0.4310%" height="15" fill="rgb(212,68,19)" fg:x="79" fg:w="1"/><text x="34.3017%" y="831.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.43%)</title><rect x="34.4828%" y="853" width="0.4310%" height="15" fill="rgb(240,187,13)" fg:x="80" fg:w="1"/><text x="34.7328%" y="863.50"></text></g><g><title>[libc.so.6] (6 samples, 2.59%)</title><rect x="34.9138%" y="661" width="2.5862%" height="15" fill="rgb(223,113,26)" fg:x="81" fg:w="6"/><text x="35.1638%" y="671.50">[l..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="34.9138%" y="645" width="2.5862%" height="15" fill="rgb(206,192,2)" fg:x="81" fg:w="6"/><text x="35.1638%" y="655.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="34.9138%" y="629" width="2.5862%" height="15" fill="rgb(241,108,4)" fg:x="81" fg:w="6"/><text x="35.1638%" y="639.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="34.9138%" y="613" width="2.5862%" height="15" fill="rgb(247,173,49)" fg:x="81" fg:w="6"/><text x="35.1638%" y="623.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="34.9138%" y="597" width="2.5862%" height="15" fill="rgb(224,114,35)" fg:x="81" fg:w="6"/><text x="35.1638%" y="607.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="34.9138%" y="581" width="2.5862%" height="15" fill="rgb(245,159,27)" fg:x="81" fg:w="6"/><text x="35.1638%" y="591.50">[u..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="35.3448%" y="565" width="2.1552%" height="15" fill="rgb(245,172,44)" fg:x="82" fg:w="5"/><text x="35.5948%" y="575.50">[..</text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="36.2069%" y="549" width="1.2931%" height="15" fill="rgb(236,23,11)" fg:x="84" fg:w="3"/><text x="36.4569%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="533" width="0.4310%" height="15" fill="rgb(205,117,38)" fg:x="86" fg:w="1"/><text x="37.3190%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="517" width="0.4310%" height="15" fill="rgb(237,72,25)" fg:x="86" fg:w="1"/><text x="37.3190%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="501" width="0.4310%" height="15" fill="rgb(244,70,9)" fg:x="86" fg:w="1"/><text x="37.3190%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="485" width="0.4310%" height="15" fill="rgb(217,125,39)" fg:x="86" fg:w="1"/><text x="37.3190%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="469" width="0.4310%" height="15" fill="rgb(235,36,10)" fg:x="86" fg:w="1"/><text x="37.3190%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="37.0690%" y="453" width="0.4310%" height="15" fill="rgb(251,123,47)" fg:x="86" fg:w="1"/><text x="37.3190%" y="463.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (13 samples, 5.60%)</title><rect x="34.4828%" y="901" width="5.6034%" height="15" fill="rgb(221,13,13)" fg:x="80" fg:w="13"/><text x="34.7328%" y="911.50">rayon_c..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (13 samples, 5.60%)</title><rect x="34.4828%" y="885" width="5.6034%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="13"/><text x="34.7328%" y="895.50">crossbe..</text></g><g><title>crossbeam_epoch::default::is_pinned (13 samples, 5.60%)</title><rect x="34.4828%" y="869" width="5.6034%" height="15" fill="rgb(211,50,8)" fg:x="80" fg:w="13"/><text x="34.7328%" y="879.50">crossbe..</text></g><g><title>crossbeam_epoch::default::with_handle (12 samples, 5.17%)</title><rect x="34.9138%" y="853" width="5.1724%" height="15" fill="rgb(245,182,24)" fg:x="81" fg:w="12"/><text x="35.1638%" y="863.50">crossb..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12 samples, 5.17%)</title><rect x="34.9138%" y="837" width="5.1724%" height="15" fill="rgb(242,14,37)" fg:x="81" fg:w="12"/><text x="35.1638%" y="847.50">std::t..</text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (12 samples, 5.17%)</title><rect x="34.9138%" y="821" width="5.1724%" height="15" fill="rgb(246,228,12)" fg:x="81" fg:w="12"/><text x="35.1638%" y="831.50">crossb..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (12 samples, 5.17%)</title><rect x="34.9138%" y="805" width="5.1724%" height="15" fill="rgb(213,55,15)" fg:x="81" fg:w="12"/><text x="35.1638%" y="815.50">std::t..</text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (12 samples, 5.17%)</title><rect x="34.9138%" y="789" width="5.1724%" height="15" fill="rgb(209,9,3)" fg:x="81" fg:w="12"/><text x="35.1638%" y="799.50">std::t..</text></g><g><title>crossbeam_epoch::default::HANDLE::__getit::{{closure}} (12 samples, 5.17%)</title><rect x="34.9138%" y="773" width="5.1724%" height="15" fill="rgb(230,59,30)" fg:x="81" fg:w="12"/><text x="35.1638%" y="783.50">crossb..</text></g><g><title>crossbeam_epoch::default::HANDLE::__init (12 samples, 5.17%)</title><rect x="34.9138%" y="757" width="5.1724%" height="15" fill="rgb(209,121,21)" fg:x="81" fg:w="12"/><text x="35.1638%" y="767.50">crossb..</text></g><g><title>crossbeam_epoch::internal::Local::register (12 samples, 5.17%)</title><rect x="34.9138%" y="741" width="5.1724%" height="15" fill="rgb(220,109,13)" fg:x="81" fg:w="12"/><text x="35.1638%" y="751.50">crossb..</text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::new (12 samples, 5.17%)</title><rect x="34.9138%" y="725" width="5.1724%" height="15" fill="rgb(232,18,1)" fg:x="81" fg:w="12"/><text x="35.1638%" y="735.50">crossb..</text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::init (12 samples, 5.17%)</title><rect x="34.9138%" y="709" width="5.1724%" height="15" fill="rgb(215,41,42)" fg:x="81" fg:w="12"/><text x="35.1638%" y="719.50">crossb..</text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::init (12 samples, 5.17%)</title><rect x="34.9138%" y="693" width="5.1724%" height="15" fill="rgb(224,123,36)" fg:x="81" fg:w="12"/><text x="35.1638%" y="703.50">&lt;T as ..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 5.17%)</title><rect x="34.9138%" y="677" width="5.1724%" height="15" fill="rgb(240,125,3)" fg:x="81" fg:w="12"/><text x="35.1638%" y="687.50">alloc:..</text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 2.59%)</title><rect x="37.5000%" y="661" width="2.5862%" height="15" fill="rgb(205,98,50)" fg:x="87" fg:w="6"/><text x="37.7500%" y="671.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 2.59%)</title><rect x="37.5000%" y="645" width="2.5862%" height="15" fill="rgb(205,185,37)" fg:x="87" fg:w="6"/><text x="37.7500%" y="655.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 2.59%)</title><rect x="37.5000%" y="629" width="2.5862%" height="15" fill="rgb(238,207,15)" fg:x="87" fg:w="6"/><text x="37.7500%" y="639.50">al..</text></g><g><title>alloc::alloc::alloc (6 samples, 2.59%)</title><rect x="37.5000%" y="613" width="2.5862%" height="15" fill="rgb(213,199,42)" fg:x="87" fg:w="6"/><text x="37.7500%" y="623.50">al..</text></g><g><title>_mi_malloc_generic (6 samples, 2.59%)</title><rect x="37.5000%" y="597" width="2.5862%" height="15" fill="rgb(235,201,11)" fg:x="87" fg:w="6"/><text x="37.7500%" y="607.50">_m..</text></g><g><title>mi_find_page (6 samples, 2.59%)</title><rect x="37.5000%" y="581" width="2.5862%" height="15" fill="rgb(207,46,11)" fg:x="87" fg:w="6"/><text x="37.7500%" y="591.50">mi..</text></g><g><title>mi_find_free_page (6 samples, 2.59%)</title><rect x="37.5000%" y="565" width="2.5862%" height="15" fill="rgb(241,35,35)" fg:x="87" fg:w="6"/><text x="37.7500%" y="575.50">mi..</text></g><g><title>mi_page_queue_find_free_ex (6 samples, 2.59%)</title><rect x="37.5000%" y="549" width="2.5862%" height="15" fill="rgb(243,32,47)" fg:x="87" fg:w="6"/><text x="37.7500%" y="559.50">mi..</text></g><g><title>mi_page_fresh (6 samples, 2.59%)</title><rect x="37.5000%" y="533" width="2.5862%" height="15" fill="rgb(247,202,23)" fg:x="87" fg:w="6"/><text x="37.7500%" y="543.50">mi..</text></g><g><title>mi_page_fresh_alloc (6 samples, 2.59%)</title><rect x="37.5000%" y="517" width="2.5862%" height="15" fill="rgb(219,102,11)" fg:x="87" fg:w="6"/><text x="37.7500%" y="527.50">mi..</text></g><g><title>mi_page_init (6 samples, 2.59%)</title><rect x="37.5000%" y="501" width="2.5862%" height="15" fill="rgb(243,110,44)" fg:x="87" fg:w="6"/><text x="37.7500%" y="511.50">mi..</text></g><g><title>mi_page_extend_free (6 samples, 2.59%)</title><rect x="37.5000%" y="485" width="2.5862%" height="15" fill="rgb(222,74,54)" fg:x="87" fg:w="6"/><text x="37.7500%" y="495.50">mi..</text></g><g><title>mi_page_extend_free (6 samples, 2.59%)</title><rect x="37.5000%" y="469" width="2.5862%" height="15" fill="rgb(216,99,12)" fg:x="87" fg:w="6"/><text x="37.7500%" y="479.50">mi..</text></g><g><title>mi_page_free_list_extend (6 samples, 2.59%)</title><rect x="37.5000%" y="453" width="2.5862%" height="15" fill="rgb(226,22,26)" fg:x="87" fg:w="6"/><text x="37.7500%" y="463.50">mi..</text></g><g><title>mi_block_set_next (6 samples, 2.59%)</title><rect x="37.5000%" y="437" width="2.5862%" height="15" fill="rgb(217,163,10)" fg:x="87" fg:w="6"/><text x="37.7500%" y="447.50">mi..</text></g><g><title>mi_block_set_nextx (6 samples, 2.59%)</title><rect x="37.5000%" y="421" width="2.5862%" height="15" fill="rgb(213,25,53)" fg:x="87" fg:w="6"/><text x="37.7500%" y="431.50">mi..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="37.5000%" y="405" width="2.5862%" height="15" fill="rgb(252,105,26)" fg:x="87" fg:w="6"/><text x="37.7500%" y="415.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="37.5000%" y="389" width="2.5862%" height="15" fill="rgb(220,39,43)" fg:x="87" fg:w="6"/><text x="37.7500%" y="399.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="37.5000%" y="373" width="2.5862%" height="15" fill="rgb(229,68,48)" fg:x="87" fg:w="6"/><text x="37.7500%" y="383.50">[u..</text></g><g><title>[unknown] (6 samples, 2.59%)</title><rect x="37.5000%" y="357" width="2.5862%" height="15" fill="rgb(252,8,32)" fg:x="87" fg:w="6"/><text x="37.7500%" y="367.50">[u..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="37.9310%" y="341" width="2.1552%" height="15" fill="rgb(223,20,43)" fg:x="88" fg:w="5"/><text x="38.1810%" y="351.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="37.9310%" y="325" width="2.1552%" height="15" fill="rgb(229,81,49)" fg:x="88" fg:w="5"/><text x="38.1810%" y="335.50">[..</text></g><g><title>[unknown] (4 samples, 1.72%)</title><rect x="38.3621%" y="309" width="1.7241%" height="15" fill="rgb(236,28,36)" fg:x="89" fg:w="4"/><text x="38.6121%" y="319.50"></text></g><g><title>[unknown] (4 samples, 1.72%)</title><rect x="38.3621%" y="293" width="1.7241%" height="15" fill="rgb(249,185,26)" fg:x="89" fg:w="4"/><text x="38.6121%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="38.7931%" y="277" width="1.2931%" height="15" fill="rgb(249,174,33)" fg:x="90" fg:w="3"/><text x="39.0431%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="39.2241%" y="261" width="0.8621%" height="15" fill="rgb(233,201,37)" fg:x="91" fg:w="2"/><text x="39.4741%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="39.2241%" y="245" width="0.8621%" height="15" fill="rgb(221,78,26)" fg:x="91" fg:w="2"/><text x="39.4741%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="39.2241%" y="229" width="0.8621%" height="15" fill="rgb(250,127,30)" fg:x="91" fg:w="2"/><text x="39.4741%" y="239.50"></text></g><g><title>std::panic::catch_unwind (45 samples, 19.40%)</title><rect x="28.0172%" y="1077" width="19.3966%" height="15" fill="rgb(230,49,44)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (45 samples, 19.40%)</title><rect x="28.0172%" y="1061" width="19.3966%" height="15" fill="rgb(229,67,23)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (45 samples, 19.40%)</title><rect x="28.0172%" y="1045" width="19.3966%" height="15" fill="rgb(249,83,47)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (45 samples, 19.40%)</title><rect x="28.0172%" y="1029" width="19.3966%" height="15" fill="rgb(215,43,3)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1039.50">&lt;core::panic::unwind_safe::Ass..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (45 samples, 19.40%)</title><rect x="28.0172%" y="1013" width="19.3966%" height="15" fill="rgb(238,154,13)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1023.50">std::thread::Builder::spawn_un..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 19.40%)</title><rect x="28.0172%" y="997" width="19.3966%" height="15" fill="rgb(219,56,2)" fg:x="65" fg:w="45"/><text x="28.2672%" y="1007.50">std::sys_common::backtrace::__..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (45 samples, 19.40%)</title><rect x="28.0172%" y="981" width="19.3966%" height="15" fill="rgb(233,0,4)" fg:x="65" fg:w="45"/><text x="28.2672%" y="991.50">&lt;rayon_core::registry::Default..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (45 samples, 19.40%)</title><rect x="28.0172%" y="965" width="19.3966%" height="15" fill="rgb(235,30,7)" fg:x="65" fg:w="45"/><text x="28.2672%" y="975.50">rayon_core::registry::ThreadBu..</text></g><g><title>rayon_core::registry::main_loop (45 samples, 19.40%)</title><rect x="28.0172%" y="949" width="19.3966%" height="15" fill="rgb(250,79,13)" fg:x="65" fg:w="45"/><text x="28.2672%" y="959.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (31 samples, 13.36%)</title><rect x="34.0517%" y="933" width="13.3621%" height="15" fill="rgb(211,146,34)" fg:x="79" fg:w="31"/><text x="34.3017%" y="943.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (31 samples, 13.36%)</title><rect x="34.0517%" y="917" width="13.3621%" height="15" fill="rgb(228,22,38)" fg:x="79" fg:w="31"/><text x="34.3017%" y="927.50">rayon_core::registry..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (17 samples, 7.33%)</title><rect x="40.0862%" y="901" width="7.3276%" height="15" fill="rgb(235,168,5)" fg:x="93" fg:w="17"/><text x="40.3362%" y="911.50">rayon_core..</text></g><g><title>rayon_core::sleep::Sleep::sleep (17 samples, 7.33%)</title><rect x="40.0862%" y="885" width="7.3276%" height="15" fill="rgb(221,155,16)" fg:x="93" fg:w="17"/><text x="40.3362%" y="895.50">rayon_core..</text></g><g><title>std::sync::condvar::Condvar::wait (17 samples, 7.33%)</title><rect x="40.0862%" y="869" width="7.3276%" height="15" fill="rgb(215,215,53)" fg:x="93" fg:w="17"/><text x="40.3362%" y="879.50">std::sync:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (17 samples, 7.33%)</title><rect x="40.0862%" y="853" width="7.3276%" height="15" fill="rgb(223,4,10)" fg:x="93" fg:w="17"/><text x="40.3362%" y="863.50">std::sys::..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (17 samples, 7.33%)</title><rect x="40.0862%" y="837" width="7.3276%" height="15" fill="rgb(234,103,6)" fg:x="93" fg:w="17"/><text x="40.3362%" y="847.50">std::sys::..</text></g><g><title>std::sys::unix::futex::futex_wait (17 samples, 7.33%)</title><rect x="40.0862%" y="821" width="7.3276%" height="15" fill="rgb(227,97,0)" fg:x="93" fg:w="17"/><text x="40.3362%" y="831.50">std::sys::..</text></g><g><title>syscall (17 samples, 7.33%)</title><rect x="40.0862%" y="805" width="7.3276%" height="15" fill="rgb(234,150,53)" fg:x="93" fg:w="17"/><text x="40.3362%" y="815.50">syscall</text></g><g><title>[unknown] (17 samples, 7.33%)</title><rect x="40.0862%" y="789" width="7.3276%" height="15" fill="rgb(228,201,54)" fg:x="93" fg:w="17"/><text x="40.3362%" y="799.50">[unknown]</text></g><g><title>[unknown] (17 samples, 7.33%)</title><rect x="40.0862%" y="773" width="7.3276%" height="15" fill="rgb(222,22,37)" fg:x="93" fg:w="17"/><text x="40.3362%" y="783.50">[unknown]</text></g><g><title>[unknown] (17 samples, 7.33%)</title><rect x="40.0862%" y="757" width="7.3276%" height="15" fill="rgb(237,53,32)" fg:x="93" fg:w="17"/><text x="40.3362%" y="767.50">[unknown]</text></g><g><title>[unknown] (17 samples, 7.33%)</title><rect x="40.0862%" y="741" width="7.3276%" height="15" fill="rgb(233,25,53)" fg:x="93" fg:w="17"/><text x="40.3362%" y="751.50">[unknown]</text></g><g><title>[unknown] (17 samples, 7.33%)</title><rect x="40.0862%" y="725" width="7.3276%" height="15" fill="rgb(210,40,34)" fg:x="93" fg:w="17"/><text x="40.3362%" y="735.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.90%)</title><rect x="40.5172%" y="709" width="6.8966%" height="15" fill="rgb(241,220,44)" fg:x="94" fg:w="16"/><text x="40.7672%" y="719.50">[unknown]</text></g><g><title>[unknown] (14 samples, 6.03%)</title><rect x="41.3793%" y="693" width="6.0345%" height="15" fill="rgb(235,28,35)" fg:x="96" fg:w="14"/><text x="41.6293%" y="703.50">[unknown]</text></g><g><title>[unknown] (12 samples, 5.17%)</title><rect x="42.2414%" y="677" width="5.1724%" height="15" fill="rgb(210,56,17)" fg:x="98" fg:w="12"/><text x="42.4914%" y="687.50">[unkno..</text></g><g><title>[unknown] (10 samples, 4.31%)</title><rect x="43.1034%" y="661" width="4.3103%" height="15" fill="rgb(224,130,29)" fg:x="100" fg:w="10"/><text x="43.3534%" y="671.50">[unkn..</text></g><g><title>[unknown] (7 samples, 3.02%)</title><rect x="44.3966%" y="645" width="3.0172%" height="15" fill="rgb(235,212,8)" fg:x="103" fg:w="7"/><text x="44.6466%" y="655.50">[un..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="45.2586%" y="629" width="2.1552%" height="15" fill="rgb(223,33,50)" fg:x="105" fg:w="5"/><text x="45.5086%" y="639.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="45.2586%" y="613" width="2.1552%" height="15" fill="rgb(219,149,13)" fg:x="105" fg:w="5"/><text x="45.5086%" y="623.50">[..</text></g><g><title>[unknown] (4 samples, 1.72%)</title><rect x="45.6897%" y="597" width="1.7241%" height="15" fill="rgb(250,156,29)" fg:x="106" fg:w="4"/><text x="45.9397%" y="607.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="46.1207%" y="581" width="1.2931%" height="15" fill="rgb(216,193,19)" fg:x="107" fg:w="3"/><text x="46.3707%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="46.5517%" y="565" width="0.8621%" height="15" fill="rgb(216,135,14)" fg:x="108" fg:w="2"/><text x="46.8017%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="46.5517%" y="549" width="0.8621%" height="15" fill="rgb(241,47,5)" fg:x="108" fg:w="2"/><text x="46.8017%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="46.9828%" y="533" width="0.4310%" height="15" fill="rgb(233,42,35)" fg:x="109" fg:w="1"/><text x="47.2328%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="46.9828%" y="517" width="0.4310%" height="15" fill="rgb(231,13,6)" fg:x="109" fg:w="1"/><text x="47.2328%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="46.9828%" y="501" width="0.4310%" height="15" fill="rgb(207,181,40)" fg:x="109" fg:w="1"/><text x="47.2328%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="46.9828%" y="485" width="0.4310%" height="15" fill="rgb(254,173,49)" fg:x="109" fg:w="1"/><text x="47.2328%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="46.9828%" y="469" width="0.4310%" height="15" fill="rgb(221,1,38)" fg:x="109" fg:w="1"/><text x="47.2328%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 19.83%)</title><rect x="28.0172%" y="1141" width="19.8276%" height="15" fill="rgb(206,124,46)" fg:x="65" fg:w="46"/><text x="28.2672%" y="1151.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 19.83%)</title><rect x="28.0172%" y="1125" width="19.8276%" height="15" fill="rgb(249,21,11)" fg:x="65" fg:w="46"/><text x="28.2672%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (46 samples, 19.83%)</title><rect x="28.0172%" y="1109" width="19.8276%" height="15" fill="rgb(222,201,40)" fg:x="65" fg:w="46"/><text x="28.2672%" y="1119.50">core::ops::function::FnOnce::ca..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 19.83%)</title><rect x="28.0172%" y="1093" width="19.8276%" height="15" fill="rgb(235,61,29)" fg:x="65" fg:w="46"/><text x="28.2672%" y="1103.50">std::thread::Builder::spawn_unc..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.43%)</title><rect x="47.4138%" y="1077" width="0.4310%" height="15" fill="rgb(219,207,3)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1087.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.43%)</title><rect x="47.4138%" y="1061" width="0.4310%" height="15" fill="rgb(222,56,46)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1071.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.43%)</title><rect x="47.4138%" y="1045" width="0.4310%" height="15" fill="rgb(239,76,54)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1055.50"></text></g><g><title>tcache_init (1 samples, 0.43%)</title><rect x="47.4138%" y="1029" width="0.4310%" height="15" fill="rgb(231,124,27)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1039.50"></text></g><g><title>tcache_init (1 samples, 0.43%)</title><rect x="47.4138%" y="1013" width="0.4310%" height="15" fill="rgb(249,195,6)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1023.50"></text></g><g><title>arena_get2 (1 samples, 0.43%)</title><rect x="47.4138%" y="997" width="0.4310%" height="15" fill="rgb(237,174,47)" fg:x="110" fg:w="1"/><text x="47.6638%" y="1007.50"></text></g><g><title>arena_get2 (1 samples, 0.43%)</title><rect x="47.4138%" y="981" width="0.4310%" height="15" fill="rgb(206,201,31)" fg:x="110" fg:w="1"/><text x="47.6638%" y="991.50"></text></g><g><title>__GI___mmap64 (5 samples, 2.16%)</title><rect x="47.8448%" y="1077" width="2.1552%" height="15" fill="rgb(231,57,52)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1087.50">_..</text></g><g><title>__GI___mmap64 (5 samples, 2.16%)</title><rect x="47.8448%" y="1061" width="2.1552%" height="15" fill="rgb(248,177,22)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1071.50">_..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="1045" width="2.1552%" height="15" fill="rgb(215,211,37)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1055.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="1029" width="2.1552%" height="15" fill="rgb(241,128,51)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1039.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="1013" width="2.1552%" height="15" fill="rgb(227,165,31)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1023.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="997" width="2.1552%" height="15" fill="rgb(228,167,24)" fg:x="111" fg:w="5"/><text x="48.0948%" y="1007.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="981" width="2.1552%" height="15" fill="rgb(228,143,12)" fg:x="111" fg:w="5"/><text x="48.0948%" y="991.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="965" width="2.1552%" height="15" fill="rgb(249,149,8)" fg:x="111" fg:w="5"/><text x="48.0948%" y="975.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="949" width="2.1552%" height="15" fill="rgb(243,35,44)" fg:x="111" fg:w="5"/><text x="48.0948%" y="959.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="47.8448%" y="933" width="2.1552%" height="15" fill="rgb(246,89,9)" fg:x="111" fg:w="5"/><text x="48.0948%" y="943.50">[..</text></g><g><title>[unknown] (4 samples, 1.72%)</title><rect x="48.2759%" y="917" width="1.7241%" height="15" fill="rgb(233,213,13)" fg:x="112" fg:w="4"/><text x="48.5259%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="49.1379%" y="901" width="0.8621%" height="15" fill="rgb(233,141,41)" fg:x="114" fg:w="2"/><text x="49.3879%" y="911.50"></text></g><g><title>__clone3 (55 samples, 23.71%)</title><rect x="26.7241%" y="1189" width="23.7069%" height="15" fill="rgb(239,167,4)" fg:x="62" fg:w="55"/><text x="26.9741%" y="1199.50">__clone3</text></g><g><title>start_thread (53 samples, 22.84%)</title><rect x="27.5862%" y="1173" width="22.8448%" height="15" fill="rgb(209,217,16)" fg:x="64" fg:w="53"/><text x="27.8362%" y="1183.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (52 samples, 22.41%)</title><rect x="28.0172%" y="1157" width="22.4138%" height="15" fill="rgb(219,88,35)" fg:x="65" fg:w="52"/><text x="28.2672%" y="1167.50">std::sys::unix::thread::Thread::new..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (6 samples, 2.59%)</title><rect x="47.8448%" y="1141" width="2.5862%" height="15" fill="rgb(220,193,23)" fg:x="111" fg:w="6"/><text x="48.0948%" y="1151.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (6 samples, 2.59%)</title><rect x="47.8448%" y="1125" width="2.5862%" height="15" fill="rgb(230,90,52)" fg:x="111" fg:w="6"/><text x="48.0948%" y="1135.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (6 samples, 2.59%)</title><rect x="47.8448%" y="1109" width="2.5862%" height="15" fill="rgb(252,106,19)" fg:x="111" fg:w="6"/><text x="48.0948%" y="1119.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (6 samples, 2.59%)</title><rect x="47.8448%" y="1093" width="2.5862%" height="15" fill="rgb(206,74,20)" fg:x="111" fg:w="6"/><text x="48.0948%" y="1103.50">st..</text></g><g><title>__GI___mprotect (1 samples, 0.43%)</title><rect x="50.0000%" y="1077" width="0.4310%" height="15" fill="rgb(230,138,44)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="1061" width="0.4310%" height="15" fill="rgb(235,182,43)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="1045" width="0.4310%" height="15" fill="rgb(242,16,51)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="1029" width="0.4310%" height="15" fill="rgb(248,9,4)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="1013" width="0.4310%" height="15" fill="rgb(210,31,22)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="997" width="0.4310%" height="15" fill="rgb(239,54,39)" fg:x="116" fg:w="1"/><text x="50.2500%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="981" width="0.4310%" height="15" fill="rgb(230,99,41)" fg:x="116" fg:w="1"/><text x="50.2500%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="965" width="0.4310%" height="15" fill="rgb(253,106,12)" fg:x="116" fg:w="1"/><text x="50.2500%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="949" width="0.4310%" height="15" fill="rgb(213,46,41)" fg:x="116" fg:w="1"/><text x="50.2500%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="933" width="0.4310%" height="15" fill="rgb(215,133,35)" fg:x="116" fg:w="1"/><text x="50.2500%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="917" width="0.4310%" height="15" fill="rgb(213,28,5)" fg:x="116" fg:w="1"/><text x="50.2500%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="50.0000%" y="901" width="0.4310%" height="15" fill="rgb(215,77,49)" fg:x="116" fg:w="1"/><text x="50.2500%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 2.16%)</title><rect x="50.4310%" y="741" width="2.1552%" height="15" fill="rgb(248,100,22)" fg:x="117" fg:w="5"/><text x="50.6810%" y="751.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (5 samples, 2.16%)</title><rect x="50.4310%" y="725" width="2.1552%" height="15" fill="rgb(208,67,9)" fg:x="117" fg:w="5"/><text x="50.6810%" y="735.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (5 samples, 2.16%)</title><rect x="50.4310%" y="709" width="2.1552%" height="15" fill="rgb(219,133,21)" fg:x="117" fg:w="5"/><text x="50.6810%" y="719.50">c..</text></g><g><title>__GI___munmap (5 samples, 2.16%)</title><rect x="50.4310%" y="693" width="2.1552%" height="15" fill="rgb(246,46,29)" fg:x="117" fg:w="5"/><text x="50.6810%" y="703.50">_..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="677" width="2.1552%" height="15" fill="rgb(246,185,52)" fg:x="117" fg:w="5"/><text x="50.6810%" y="687.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="661" width="2.1552%" height="15" fill="rgb(252,136,11)" fg:x="117" fg:w="5"/><text x="50.6810%" y="671.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="645" width="2.1552%" height="15" fill="rgb(219,138,53)" fg:x="117" fg:w="5"/><text x="50.6810%" y="655.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="629" width="2.1552%" height="15" fill="rgb(211,51,23)" fg:x="117" fg:w="5"/><text x="50.6810%" y="639.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="613" width="2.1552%" height="15" fill="rgb(247,221,28)" fg:x="117" fg:w="5"/><text x="50.6810%" y="623.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="597" width="2.1552%" height="15" fill="rgb(251,222,45)" fg:x="117" fg:w="5"/><text x="50.6810%" y="607.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="581" width="2.1552%" height="15" fill="rgb(217,162,53)" fg:x="117" fg:w="5"/><text x="50.6810%" y="591.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="565" width="2.1552%" height="15" fill="rgb(229,93,14)" fg:x="117" fg:w="5"/><text x="50.6810%" y="575.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="549" width="2.1552%" height="15" fill="rgb(209,67,49)" fg:x="117" fg:w="5"/><text x="50.6810%" y="559.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="533" width="2.1552%" height="15" fill="rgb(213,87,29)" fg:x="117" fg:w="5"/><text x="50.6810%" y="543.50">[..</text></g><g><title>[unknown] (5 samples, 2.16%)</title><rect x="50.4310%" y="517" width="2.1552%" height="15" fill="rgb(205,151,52)" fg:x="117" fg:w="5"/><text x="50.6810%" y="527.50">[..</text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="51.2931%" y="501" width="1.2931%" height="15" fill="rgb(253,215,39)" fg:x="119" fg:w="3"/><text x="51.5431%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="51.7241%" y="485" width="0.8621%" height="15" fill="rgb(221,220,41)" fg:x="120" fg:w="2"/><text x="51.9741%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="51.7241%" y="469" width="0.8621%" height="15" fill="rgb(218,133,21)" fg:x="120" fg:w="2"/><text x="51.9741%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="52.1552%" y="453" width="0.4310%" height="15" fill="rgb(221,193,43)" fg:x="121" fg:w="1"/><text x="52.4052%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="52.1552%" y="437" width="0.4310%" height="15" fill="rgb(240,128,52)" fg:x="121" fg:w="1"/><text x="52.4052%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="52.1552%" y="421" width="0.4310%" height="15" fill="rgb(253,114,12)" fg:x="121" fg:w="1"/><text x="52.4052%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 1.29%)</title><rect x="52.5862%" y="517" width="1.2931%" height="15" fill="rgb(215,223,47)" fg:x="122" fg:w="3"/><text x="52.8362%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 1.29%)</title><rect x="52.5862%" y="501" width="1.2931%" height="15" fill="rgb(248,225,23)" fg:x="122" fg:w="3"/><text x="52.8362%" y="511.50"></text></g><g><title>mi_free (3 samples, 1.29%)</title><rect x="52.5862%" y="485" width="1.2931%" height="15" fill="rgb(250,108,0)" fg:x="122" fg:w="3"/><text x="52.8362%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="741" width="2.1552%" height="15" fill="rgb(228,208,7)" fg:x="122" fg:w="5"/><text x="52.8362%" y="751.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::ParserState&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="725" width="2.1552%" height="15" fill="rgb(244,45,10)" fg:x="122" fg:w="5"/><text x="52.8362%" y="735.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt;&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="709" width="2.1552%" height="15" fill="rgb(207,125,25)" fg:x="122" fg:w="5"/><text x="52.8362%" y="719.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 2.16%)</title><rect x="52.5862%" y="693" width="2.1552%" height="15" fill="rgb(210,195,18)" fg:x="122" fg:w="5"/><text x="52.8362%" y="703.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::GameEvent]&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="677" width="2.1552%" height="15" fill="rgb(249,80,12)" fg:x="122" fg:w="5"/><text x="52.8362%" y="687.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::GameEvent&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="661" width="2.1552%" height="15" fill="rgb(221,65,9)" fg:x="122" fg:w="5"/><text x="52.8362%" y="671.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt;&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="645" width="2.1552%" height="15" fill="rgb(235,49,36)" fg:x="122" fg:w="5"/><text x="52.8362%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 2.16%)</title><rect x="52.5862%" y="629" width="2.1552%" height="15" fill="rgb(225,32,20)" fg:x="122" fg:w="5"/><text x="52.8362%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::game_events::NameDataPair]&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="613" width="2.1552%" height="15" fill="rgb(215,141,46)" fg:x="122" fg:w="5"/><text x="52.8362%" y="623.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::game_events::NameDataPair&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="597" width="2.1552%" height="15" fill="rgb(250,160,47)" fg:x="122" fg:w="5"/><text x="52.8362%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="581" width="2.1552%" height="15" fill="rgb(216,222,40)" fg:x="122" fg:w="5"/><text x="52.8362%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="565" width="2.1552%" height="15" fill="rgb(234,217,39)" fg:x="122" fg:w="5"/><text x="52.8362%" y="575.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 2.16%)</title><rect x="52.5862%" y="549" width="2.1552%" height="15" fill="rgb(207,178,40)" fg:x="122" fg:w="5"/><text x="52.8362%" y="559.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 2.16%)</title><rect x="52.5862%" y="533" width="2.1552%" height="15" fill="rgb(221,136,13)" fg:x="122" fg:w="5"/><text x="52.8362%" y="543.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.86%)</title><rect x="53.8793%" y="517" width="0.8621%" height="15" fill="rgb(249,199,10)" fg:x="125" fg:w="2"/><text x="54.1293%" y="527.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_frame (22 samples, 9.48%)</title><rect x="54.7414%" y="693" width="9.4828%" height="15" fill="rgb(249,222,13)" fg:x="127" fg:w="22"/><text x="54.9914%" y="703.50">demoparser::pa..</text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_byte (22 samples, 9.48%)</title><rect x="54.7414%" y="677" width="9.4828%" height="15" fill="rgb(244,185,38)" fg:x="127" fg:w="22"/><text x="54.9914%" y="687.50">demoparser::pa..</text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_i32 (4 samples, 1.72%)</title><rect x="64.2241%" y="661" width="1.7241%" height="15" fill="rgb(236,202,9)" fg:x="149" fg:w="4"/><text x="64.4741%" y="671.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.43%)</title><rect x="65.5172%" y="645" width="0.4310%" height="15" fill="rgb(250,229,37)" fg:x="152" fg:w="1"/><text x="65.7672%" y="655.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.43%)</title><rect x="65.5172%" y="629" width="0.4310%" height="15" fill="rgb(206,174,23)" fg:x="152" fg:w="1"/><text x="65.7672%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.43%)</title><rect x="65.5172%" y="613" width="0.4310%" height="15" fill="rgb(211,33,43)" fg:x="152" fg:w="1"/><text x="65.7672%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="597" width="0.4310%" height="15" fill="rgb(245,58,50)" fg:x="152" fg:w="1"/><text x="65.7672%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="581" width="0.4310%" height="15" fill="rgb(244,68,36)" fg:x="152" fg:w="1"/><text x="65.7672%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="565" width="0.4310%" height="15" fill="rgb(232,229,15)" fg:x="152" fg:w="1"/><text x="65.7672%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="549" width="0.4310%" height="15" fill="rgb(254,30,23)" fg:x="152" fg:w="1"/><text x="65.7672%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="533" width="0.4310%" height="15" fill="rgb(235,160,14)" fg:x="152" fg:w="1"/><text x="65.7672%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="517" width="0.4310%" height="15" fill="rgb(212,155,44)" fg:x="152" fg:w="1"/><text x="65.7672%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="501" width="0.4310%" height="15" fill="rgb(226,2,50)" fg:x="152" fg:w="1"/><text x="65.7672%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="485" width="0.4310%" height="15" fill="rgb(234,177,6)" fg:x="152" fg:w="1"/><text x="65.7672%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="469" width="0.4310%" height="15" fill="rgb(217,24,9)" fg:x="152" fg:w="1"/><text x="65.7672%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="453" width="0.4310%" height="15" fill="rgb(220,13,46)" fg:x="152" fg:w="1"/><text x="65.7672%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="65.5172%" y="437" width="0.4310%" height="15" fill="rgb(239,221,27)" fg:x="152" fg:w="1"/><text x="65.7672%" y="447.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_varint (19 samples, 8.19%)</title><rect x="65.9483%" y="661" width="8.1897%" height="15" fill="rgb(222,198,25)" fg:x="153" fg:w="19"/><text x="66.1983%" y="671.50">demoparser:..</text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="645" width="1.2931%" height="15" fill="rgb(211,99,13)" fg:x="169" fg:w="3"/><text x="73.0948%" y="655.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="629" width="1.2931%" height="15" fill="rgb(232,111,31)" fg:x="169" fg:w="3"/><text x="73.0948%" y="639.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="613" width="1.2931%" height="15" fill="rgb(245,82,37)" fg:x="169" fg:w="3"/><text x="73.0948%" y="623.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="597" width="1.2931%" height="15" fill="rgb(227,149,46)" fg:x="169" fg:w="3"/><text x="73.0948%" y="607.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="581" width="1.2931%" height="15" fill="rgb(218,36,50)" fg:x="169" fg:w="3"/><text x="73.0948%" y="591.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="565" width="1.2931%" height="15" fill="rgb(226,80,48)" fg:x="169" fg:w="3"/><text x="73.0948%" y="575.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="549" width="1.2931%" height="15" fill="rgb(238,224,15)" fg:x="169" fg:w="3"/><text x="73.0948%" y="559.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="533" width="1.2931%" height="15" fill="rgb(241,136,10)" fg:x="169" fg:w="3"/><text x="73.0948%" y="543.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="72.8448%" y="517" width="1.2931%" height="15" fill="rgb(208,32,45)" fg:x="169" fg:w="3"/><text x="73.0948%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="73.2759%" y="501" width="0.8621%" height="15" fill="rgb(207,135,9)" fg:x="170" fg:w="2"/><text x="73.5259%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="73.7069%" y="485" width="0.4310%" height="15" fill="rgb(206,86,44)" fg:x="171" fg:w="1"/><text x="73.9569%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="73.7069%" y="469" width="0.4310%" height="15" fill="rgb(245,177,15)" fg:x="171" fg:w="1"/><text x="73.9569%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="73.7069%" y="453" width="0.4310%" height="15" fill="rgb(206,64,50)" fg:x="171" fg:w="1"/><text x="73.9569%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.43%)</title><rect x="74.5690%" y="565" width="0.4310%" height="15" fill="rgb(234,36,40)" fg:x="173" fg:w="1"/><text x="74.8190%" y="575.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (1 samples, 0.43%)</title><rect x="74.5690%" y="549" width="0.4310%" height="15" fill="rgb(213,64,8)" fg:x="173" fg:w="1"/><text x="74.8190%" y="559.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.43%)</title><rect x="74.5690%" y="533" width="0.4310%" height="15" fill="rgb(210,75,36)" fg:x="173" fg:w="1"/><text x="74.8190%" y="543.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (1 samples, 0.43%)</title><rect x="74.5690%" y="517" width="0.4310%" height="15" fill="rgb(229,88,21)" fg:x="173" fg:w="1"/><text x="74.8190%" y="527.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.43%)</title><rect x="74.5690%" y="501" width="0.4310%" height="15" fill="rgb(252,204,47)" fg:x="173" fg:w="1"/><text x="74.8190%" y="511.50"></text></g><g><title>&lt;u128 as ahash::convert::Convert&lt;[u64: 2]&gt;&gt;::convert (1 samples, 0.43%)</title><rect x="74.5690%" y="485" width="0.4310%" height="15" fill="rgb(208,77,27)" fg:x="173" fg:w="1"/><text x="74.8190%" y="495.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (1 samples, 0.43%)</title><rect x="75.8621%" y="517" width="0.4310%" height="15" fill="rgb(221,76,26)" fg:x="176" fg:w="1"/><text x="76.1121%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (5 samples, 2.16%)</title><rect x="74.5690%" y="629" width="2.1552%" height="15" fill="rgb(225,139,18)" fg:x="173" fg:w="5"/><text x="74.8190%" y="639.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 2.16%)</title><rect x="74.5690%" y="613" width="2.1552%" height="15" fill="rgb(230,137,11)" fg:x="173" fg:w="5"/><text x="74.8190%" y="623.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 2.16%)</title><rect x="74.5690%" y="597" width="2.1552%" height="15" fill="rgb(212,28,1)" fg:x="173" fg:w="5"/><text x="74.8190%" y="607.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 2.16%)</title><rect x="74.5690%" y="581" width="2.1552%" height="15" fill="rgb(248,164,17)" fg:x="173" fg:w="5"/><text x="74.8190%" y="591.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 1.72%)</title><rect x="75.0000%" y="565" width="1.7241%" height="15" fill="rgb(222,171,42)" fg:x="174" fg:w="4"/><text x="75.2500%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 1.72%)</title><rect x="75.0000%" y="549" width="1.7241%" height="15" fill="rgb(243,84,45)" fg:x="174" fg:w="4"/><text x="75.2500%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 1.72%)</title><rect x="75.0000%" y="533" width="1.7241%" height="15" fill="rgb(252,49,23)" fg:x="174" fg:w="4"/><text x="75.2500%" y="543.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.43%)</title><rect x="76.2931%" y="517" width="0.4310%" height="15" fill="rgb(215,19,7)" fg:x="177" fg:w="1"/><text x="76.5431%" y="527.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.43%)</title><rect x="76.7241%" y="629" width="0.4310%" height="15" fill="rgb(238,81,41)" fg:x="178" fg:w="1"/><text x="76.9741%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.43%)</title><rect x="76.7241%" y="613" width="0.4310%" height="15" fill="rgb(210,199,37)" fg:x="178" fg:w="1"/><text x="76.9741%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.43%)</title><rect x="76.7241%" y="597" width="0.4310%" height="15" fill="rgb(244,192,49)" fg:x="178" fg:w="1"/><text x="76.9741%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.43%)</title><rect x="76.7241%" y="581" width="0.4310%" height="15" fill="rgb(226,211,11)" fg:x="178" fg:w="1"/><text x="76.9741%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.43%)</title><rect x="76.7241%" y="565" width="0.4310%" height="15" fill="rgb(236,162,54)" fg:x="178" fg:w="1"/><text x="76.9741%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.43%)</title><rect x="76.7241%" y="549" width="0.4310%" height="15" fill="rgb(220,229,9)" fg:x="178" fg:w="1"/><text x="76.9741%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.43%)</title><rect x="76.7241%" y="533" width="0.4310%" height="15" fill="rgb(250,87,22)" fg:x="178" fg:w="1"/><text x="76.9741%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.43%)</title><rect x="76.7241%" y="517" width="0.4310%" height="15" fill="rgb(239,43,17)" fg:x="178" fg:w="1"/><text x="76.9741%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.43%)</title><rect x="76.7241%" y="501" width="0.4310%" height="15" fill="rgb(231,177,25)" fg:x="178" fg:w="1"/><text x="76.9741%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.43%)</title><rect x="76.7241%" y="485" width="0.4310%" height="15" fill="rgb(219,179,1)" fg:x="178" fg:w="1"/><text x="76.9741%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.43%)</title><rect x="76.7241%" y="469" width="0.4310%" height="15" fill="rgb(238,219,53)" fg:x="178" fg:w="1"/><text x="76.9741%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.43%)</title><rect x="76.7241%" y="453" width="0.4310%" height="15" fill="rgb(232,167,36)" fg:x="178" fg:w="1"/><text x="76.9741%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.43%)</title><rect x="76.7241%" y="437" width="0.4310%" height="15" fill="rgb(244,19,51)" fg:x="178" fg:w="1"/><text x="76.9741%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.43%)</title><rect x="76.7241%" y="421" width="0.4310%" height="15" fill="rgb(224,6,22)" fg:x="178" fg:w="1"/><text x="76.9741%" y="431.50"></text></g><g><title>mi_malloc (1 samples, 0.43%)</title><rect x="76.7241%" y="405" width="0.4310%" height="15" fill="rgb(224,145,5)" fg:x="178" fg:w="1"/><text x="76.9741%" y="415.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.43%)</title><rect x="76.7241%" y="389" width="0.4310%" height="15" fill="rgb(234,130,49)" fg:x="178" fg:w="1"/><text x="76.9741%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.43%)</title><rect x="77.1552%" y="613" width="0.4310%" height="15" fill="rgb(254,6,2)" fg:x="179" fg:w="1"/><text x="77.4052%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.43%)</title><rect x="77.1552%" y="597" width="0.4310%" height="15" fill="rgb(208,96,46)" fg:x="179" fg:w="1"/><text x="77.4052%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.43%)</title><rect x="77.1552%" y="581" width="0.4310%" height="15" fill="rgb(239,3,39)" fg:x="179" fg:w="1"/><text x="77.4052%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.43%)</title><rect x="77.1552%" y="565" width="0.4310%" height="15" fill="rgb(233,210,1)" fg:x="179" fg:w="1"/><text x="77.4052%" y="575.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.43%)</title><rect x="77.1552%" y="549" width="0.4310%" height="15" fill="rgb(244,137,37)" fg:x="179" fg:w="1"/><text x="77.4052%" y="559.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.43%)</title><rect x="77.1552%" y="533" width="0.4310%" height="15" fill="rgb(240,136,2)" fg:x="179" fg:w="1"/><text x="77.4052%" y="543.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.43%)</title><rect x="77.1552%" y="517" width="0.4310%" height="15" fill="rgb(239,18,37)" fg:x="179" fg:w="1"/><text x="77.4052%" y="527.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.43%)</title><rect x="77.1552%" y="501" width="0.4310%" height="15" fill="rgb(218,185,22)" fg:x="179" fg:w="1"/><text x="77.4052%" y="511.50"></text></g><g><title>_mi_memcpy (1 samples, 0.43%)</title><rect x="77.1552%" y="485" width="0.4310%" height="15" fill="rgb(225,218,4)" fg:x="179" fg:w="1"/><text x="77.4052%" y="495.50"></text></g><g><title>memcpy (1 samples, 0.43%)</title><rect x="77.1552%" y="469" width="0.4310%" height="15" fill="rgb(230,182,32)" fg:x="179" fg:w="1"/><text x="77.4052%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.43%)</title><rect x="77.1552%" y="453" width="0.4310%" height="15" fill="rgb(242,56,43)" fg:x="179" fg:w="1"/><text x="77.4052%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="77.1552%" y="437" width="0.4310%" height="15" fill="rgb(233,99,24)" fg:x="179" fg:w="1"/><text x="77.4052%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.86%)</title><rect x="77.1552%" y="629" width="0.8621%" height="15" fill="rgb(234,209,42)" fg:x="179" fg:w="2"/><text x="77.4052%" y="639.50"></text></g><g><title>core::ptr::write (1 samples, 0.43%)</title><rect x="77.5862%" y="613" width="0.4310%" height="15" fill="rgb(227,7,12)" fg:x="180" fg:w="1"/><text x="77.8362%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.43%)</title><rect x="78.0172%" y="597" width="0.4310%" height="15" fill="rgb(245,203,43)" fg:x="181" fg:w="1"/><text x="78.2672%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_game_event::Key_t]&gt; (1 samples, 0.43%)</title><rect x="78.0172%" y="581" width="0.4310%" height="15" fill="rgb(238,205,33)" fg:x="181" fg:w="1"/><text x="78.2672%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt; (1 samples, 0.43%)</title><rect x="78.0172%" y="565" width="0.4310%" height="15" fill="rgb(231,56,7)" fg:x="181" fg:w="1"/><text x="78.2672%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_GameEvent&gt; (2 samples, 0.86%)</title><rect x="78.0172%" y="629" width="0.8621%" height="15" fill="rgb(244,186,29)" fg:x="181" fg:w="2"/><text x="78.2672%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt;&gt; (2 samples, 0.86%)</title><rect x="78.0172%" y="613" width="0.8621%" height="15" fill="rgb(234,111,31)" fg:x="181" fg:w="2"/><text x="78.2672%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt;&gt; (1 samples, 0.43%)</title><rect x="78.4483%" y="597" width="0.4310%" height="15" fill="rgb(241,149,10)" fg:x="182" fg:w="1"/><text x="78.6983%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.43%)</title><rect x="78.4483%" y="581" width="0.4310%" height="15" fill="rgb(249,206,44)" fg:x="182" fg:w="1"/><text x="78.6983%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.43%)</title><rect x="78.4483%" y="565" width="0.4310%" height="15" fill="rgb(251,153,30)" fg:x="182" fg:w="1"/><text x="78.6983%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.43%)</title><rect x="78.4483%" y="549" width="0.4310%" height="15" fill="rgb(239,152,38)" fg:x="182" fg:w="1"/><text x="78.6983%" y="559.50"></text></g><g><title>mi_free (1 samples, 0.43%)</title><rect x="78.4483%" y="533" width="0.4310%" height="15" fill="rgb(249,139,47)" fg:x="182" fg:w="1"/><text x="78.6983%" y="543.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 0.43%)</title><rect x="78.8793%" y="629" width="0.4310%" height="15" fill="rgb(244,64,35)" fg:x="183" fg:w="1"/><text x="79.1293%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.43%)</title><rect x="78.8793%" y="613" width="0.4310%" height="15" fill="rgb(216,46,15)" fg:x="183" fg:w="1"/><text x="79.1293%" y="623.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.43%)</title><rect x="81.0345%" y="421" width="0.4310%" height="15" fill="rgb(250,74,19)" fg:x="188" fg:w="1"/><text x="81.2845%" y="431.50"></text></g><g><title>mi_find_page (1 samples, 0.43%)</title><rect x="81.0345%" y="405" width="0.4310%" height="15" fill="rgb(249,42,33)" fg:x="188" fg:w="1"/><text x="81.2845%" y="415.50"></text></g><g><title>mi_find_free_page (1 samples, 0.43%)</title><rect x="81.0345%" y="389" width="0.4310%" height="15" fill="rgb(242,149,17)" fg:x="188" fg:w="1"/><text x="81.2845%" y="399.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.43%)</title><rect x="81.0345%" y="373" width="0.4310%" height="15" fill="rgb(244,29,21)" fg:x="188" fg:w="1"/><text x="81.2845%" y="383.50"></text></g><g><title>mi_page_fresh (1 samples, 0.43%)</title><rect x="81.0345%" y="357" width="0.4310%" height="15" fill="rgb(220,130,37)" fg:x="188" fg:w="1"/><text x="81.2845%" y="367.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.43%)</title><rect x="81.0345%" y="341" width="0.4310%" height="15" fill="rgb(211,67,2)" fg:x="188" fg:w="1"/><text x="81.2845%" y="351.50"></text></g><g><title>mi_segments_page_alloc (1 samples, 0.43%)</title><rect x="81.0345%" y="325" width="0.4310%" height="15" fill="rgb(235,68,52)" fg:x="188" fg:w="1"/><text x="81.2845%" y="335.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.43%)</title><rect x="81.0345%" y="309" width="0.4310%" height="15" fill="rgb(246,142,3)" fg:x="188" fg:w="1"/><text x="81.2845%" y="319.50"></text></g><g><title>mi_segment_slice_split (1 samples, 0.43%)</title><rect x="81.0345%" y="293" width="0.4310%" height="15" fill="rgb(241,25,7)" fg:x="188" fg:w="1"/><text x="81.2845%" y="303.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.43%)</title><rect x="81.0345%" y="277" width="0.4310%" height="15" fill="rgb(242,119,39)" fg:x="188" fg:w="1"/><text x="81.2845%" y="287.50"></text></g><g><title>mi_segment_perhaps_decommit (1 samples, 0.43%)</title><rect x="81.0345%" y="261" width="0.4310%" height="15" fill="rgb(241,98,45)" fg:x="188" fg:w="1"/><text x="81.2845%" y="271.50"></text></g><g><title>mi_option_get (1 samples, 0.43%)</title><rect x="81.0345%" y="245" width="0.4310%" height="15" fill="rgb(254,28,30)" fg:x="188" fg:w="1"/><text x="81.2845%" y="255.50"></text></g><g><title>mi_option_get (1 samples, 0.43%)</title><rect x="81.0345%" y="229" width="0.4310%" height="15" fill="rgb(241,142,54)" fg:x="188" fg:w="1"/><text x="81.2845%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.86%)</title><rect x="81.0345%" y="597" width="0.8621%" height="15" fill="rgb(222,85,15)" fg:x="188" fg:w="2"/><text x="81.2845%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.86%)</title><rect x="81.0345%" y="581" width="0.8621%" height="15" fill="rgb(210,85,47)" fg:x="188" fg:w="2"/><text x="81.2845%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.86%)</title><rect x="81.0345%" y="565" width="0.8621%" height="15" fill="rgb(224,206,25)" fg:x="188" fg:w="2"/><text x="81.2845%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.86%)</title><rect x="81.0345%" y="549" width="0.8621%" height="15" fill="rgb(243,201,19)" fg:x="188" fg:w="2"/><text x="81.2845%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.86%)</title><rect x="81.0345%" y="533" width="0.8621%" height="15" fill="rgb(236,59,4)" fg:x="188" fg:w="2"/><text x="81.2845%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.86%)</title><rect x="81.0345%" y="517" width="0.8621%" height="15" fill="rgb(254,179,45)" fg:x="188" fg:w="2"/><text x="81.2845%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.86%)</title><rect x="81.0345%" y="501" width="0.8621%" height="15" fill="rgb(226,14,10)" fg:x="188" fg:w="2"/><text x="81.2845%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.86%)</title><rect x="81.0345%" y="485" width="0.8621%" height="15" fill="rgb(244,27,41)" fg:x="188" fg:w="2"/><text x="81.2845%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.86%)</title><rect x="81.0345%" y="469" width="0.8621%" height="15" fill="rgb(235,35,32)" fg:x="188" fg:w="2"/><text x="81.2845%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.86%)</title><rect x="81.0345%" y="453" width="0.8621%" height="15" fill="rgb(218,68,31)" fg:x="188" fg:w="2"/><text x="81.2845%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.86%)</title><rect x="81.0345%" y="437" width="0.8621%" height="15" fill="rgb(207,120,37)" fg:x="188" fg:w="2"/><text x="81.2845%" y="447.50"></text></g><g><title>mi_malloc (1 samples, 0.43%)</title><rect x="81.4655%" y="421" width="0.4310%" height="15" fill="rgb(227,98,0)" fg:x="189" fg:w="1"/><text x="81.7155%" y="431.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.43%)</title><rect x="81.4655%" y="405" width="0.4310%" height="15" fill="rgb(207,7,3)" fg:x="189" fg:w="1"/><text x="81.7155%" y="415.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.43%)</title><rect x="81.4655%" y="389" width="0.4310%" height="15" fill="rgb(206,98,19)" fg:x="189" fg:w="1"/><text x="81.7155%" y="399.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.43%)</title><rect x="81.4655%" y="373" width="0.4310%" height="15" fill="rgb(217,5,26)" fg:x="189" fg:w="1"/><text x="81.7155%" y="383.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 1.29%)</title><rect x="81.0345%" y="613" width="1.2931%" height="15" fill="rgb(235,190,38)" fg:x="188" fg:w="3"/><text x="81.2845%" y="623.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (1 samples, 0.43%)</title><rect x="81.8966%" y="597" width="0.4310%" height="15" fill="rgb(247,86,24)" fg:x="190" fg:w="1"/><text x="82.1466%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.43%)</title><rect x="82.3276%" y="549" width="0.4310%" height="15" fill="rgb(205,101,16)" fg:x="191" fg:w="1"/><text x="82.5776%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.43%)</title><rect x="82.3276%" y="533" width="0.4310%" height="15" fill="rgb(246,168,33)" fg:x="191" fg:w="1"/><text x="82.5776%" y="543.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.43%)</title><rect x="82.3276%" y="517" width="0.4310%" height="15" fill="rgb(231,114,1)" fg:x="191" fg:w="1"/><text x="82.5776%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.43%)</title><rect x="82.3276%" y="501" width="0.4310%" height="15" fill="rgb(207,184,53)" fg:x="191" fg:w="1"/><text x="82.5776%" y="511.50"></text></g><g><title>mi_free (1 samples, 0.43%)</title><rect x="82.3276%" y="485" width="0.4310%" height="15" fill="rgb(224,95,51)" fg:x="191" fg:w="1"/><text x="82.5776%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.86%)</title><rect x="82.3276%" y="597" width="0.8621%" height="15" fill="rgb(212,188,45)" fg:x="191" fg:w="2"/><text x="82.5776%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.86%)</title><rect x="82.3276%" y="581" width="0.8621%" height="15" fill="rgb(223,154,38)" fg:x="191" fg:w="2"/><text x="82.5776%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.86%)</title><rect x="82.3276%" y="565" width="0.8621%" height="15" fill="rgb(251,22,52)" fg:x="191" fg:w="2"/><text x="82.5776%" y="575.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.43%)</title><rect x="82.7586%" y="549" width="0.4310%" height="15" fill="rgb(229,209,22)" fg:x="192" fg:w="1"/><text x="83.0086%" y="559.50"></text></g><g><title>mi_find_page (1 samples, 0.43%)</title><rect x="82.7586%" y="533" width="0.4310%" height="15" fill="rgb(234,138,34)" fg:x="192" fg:w="1"/><text x="83.0086%" y="543.50"></text></g><g><title>mi_find_free_page (1 samples, 0.43%)</title><rect x="82.7586%" y="517" width="0.4310%" height="15" fill="rgb(212,95,11)" fg:x="192" fg:w="1"/><text x="83.0086%" y="527.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.43%)</title><rect x="82.7586%" y="501" width="0.4310%" height="15" fill="rgb(240,179,47)" fg:x="192" fg:w="1"/><text x="83.0086%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 3.45%)</title><rect x="82.3276%" y="613" width="3.4483%" height="15" fill="rgb(240,163,11)" fg:x="191" fg:w="8"/><text x="82.5776%" y="623.50">all..</text></g><g><title>core::ptr::write (6 samples, 2.59%)</title><rect x="83.1897%" y="597" width="2.5862%" height="15" fill="rgb(236,37,12)" fg:x="193" fg:w="6"/><text x="83.4397%" y="607.50">co..</text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="581" width="0.8621%" height="15" fill="rgb(232,164,16)" fg:x="197" fg:w="2"/><text x="85.1638%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="565" width="0.8621%" height="15" fill="rgb(244,205,15)" fg:x="197" fg:w="2"/><text x="85.1638%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="549" width="0.8621%" height="15" fill="rgb(223,117,47)" fg:x="197" fg:w="2"/><text x="85.1638%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="533" width="0.8621%" height="15" fill="rgb(244,107,35)" fg:x="197" fg:w="2"/><text x="85.1638%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="517" width="0.8621%" height="15" fill="rgb(205,140,8)" fg:x="197" fg:w="2"/><text x="85.1638%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="501" width="0.8621%" height="15" fill="rgb(228,84,46)" fg:x="197" fg:w="2"/><text x="85.1638%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="485" width="0.8621%" height="15" fill="rgb(254,188,9)" fg:x="197" fg:w="2"/><text x="85.1638%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="469" width="0.8621%" height="15" fill="rgb(206,112,54)" fg:x="197" fg:w="2"/><text x="85.1638%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="453" width="0.8621%" height="15" fill="rgb(216,84,49)" fg:x="197" fg:w="2"/><text x="85.1638%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="437" width="0.8621%" height="15" fill="rgb(214,194,35)" fg:x="197" fg:w="2"/><text x="85.1638%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="421" width="0.8621%" height="15" fill="rgb(249,28,3)" fg:x="197" fg:w="2"/><text x="85.1638%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="405" width="0.8621%" height="15" fill="rgb(222,56,52)" fg:x="197" fg:w="2"/><text x="85.1638%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.86%)</title><rect x="84.9138%" y="389" width="0.8621%" height="15" fill="rgb(245,217,50)" fg:x="197" fg:w="2"/><text x="85.1638%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="85.3448%" y="373" width="0.4310%" height="15" fill="rgb(213,201,24)" fg:x="198" fg:w="1"/><text x="85.5948%" y="383.50"></text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_key_steamid (1 samples, 0.43%)</title><rect x="85.7759%" y="613" width="0.4310%" height="15" fill="rgb(248,116,28)" fg:x="199" fg:w="1"/><text x="86.0259%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.43%)</title><rect x="85.7759%" y="597" width="0.4310%" height="15" fill="rgb(219,72,43)" fg:x="199" fg:w="1"/><text x="86.0259%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.43%)</title><rect x="85.7759%" y="581" width="0.4310%" height="15" fill="rgb(209,138,14)" fg:x="199" fg:w="1"/><text x="86.0259%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.43%)</title><rect x="85.7759%" y="565" width="0.4310%" height="15" fill="rgb(222,18,33)" fg:x="199" fg:w="1"/><text x="86.0259%" y="575.50"></text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::gen_name_val_pairs (17 samples, 7.33%)</title><rect x="79.3103%" y="629" width="7.3276%" height="15" fill="rgb(213,199,7)" fg:x="184" fg:w="17"/><text x="79.5603%" y="639.50">demoparser..</text></g><g><title>demoparser::parsing::demo_parsing::game_events::parse_key (1 samples, 0.43%)</title><rect x="86.2069%" y="613" width="0.4310%" height="15" fill="rgb(250,110,10)" fg:x="200" fg:w="1"/><text x="86.4569%" y="623.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_bool (1 samples, 0.43%)</title><rect x="86.2069%" y="597" width="0.4310%" height="15" fill="rgb(248,123,6)" fg:x="200" fg:w="1"/><text x="86.4569%" y="607.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (1 samples, 0.43%)</title><rect x="86.6379%" y="629" width="0.4310%" height="15" fill="rgb(206,91,31)" fg:x="201" fg:w="1"/><text x="86.8879%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.43%)</title><rect x="87.5000%" y="613" width="0.4310%" height="15" fill="rgb(211,154,13)" fg:x="203" fg:w="1"/><text x="87.7500%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.43%)</title><rect x="87.9310%" y="581" width="0.4310%" height="15" fill="rgb(225,148,7)" fg:x="204" fg:w="1"/><text x="88.1810%" y="591.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.43%)</title><rect x="88.3621%" y="453" width="0.4310%" height="15" fill="rgb(220,160,43)" fg:x="205" fg:w="1"/><text x="88.6121%" y="463.50"></text></g><g><title>_mi_memcpy (1 samples, 0.43%)</title><rect x="88.3621%" y="437" width="0.4310%" height="15" fill="rgb(213,52,39)" fg:x="205" fg:w="1"/><text x="88.6121%" y="447.50"></text></g><g><title>memcpy (1 samples, 0.43%)</title><rect x="88.3621%" y="421" width="0.4310%" height="15" fill="rgb(243,137,7)" fg:x="205" fg:w="1"/><text x="88.6121%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.43%)</title><rect x="88.3621%" y="405" width="0.4310%" height="15" fill="rgb(230,79,13)" fg:x="205" fg:w="1"/><text x="88.6121%" y="415.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.43%)</title><rect x="88.7931%" y="389" width="0.4310%" height="15" fill="rgb(247,105,23)" fg:x="206" fg:w="1"/><text x="89.0431%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.29%)</title><rect x="88.3621%" y="565" width="1.2931%" height="15" fill="rgb(223,179,41)" fg:x="205" fg:w="3"/><text x="88.6121%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 1.29%)</title><rect x="88.3621%" y="549" width="1.2931%" height="15" fill="rgb(218,9,34)" fg:x="205" fg:w="3"/><text x="88.6121%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 1.29%)</title><rect x="88.3621%" y="533" width="1.2931%" height="15" fill="rgb(222,106,8)" fg:x="205" fg:w="3"/><text x="88.6121%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 1.29%)</title><rect x="88.3621%" y="517" width="1.2931%" height="15" fill="rgb(211,220,0)" fg:x="205" fg:w="3"/><text x="88.6121%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 1.29%)</title><rect x="88.3621%" y="501" width="1.2931%" height="15" fill="rgb(229,52,16)" fg:x="205" fg:w="3"/><text x="88.6121%" y="511.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 1.29%)</title><rect x="88.3621%" y="485" width="1.2931%" height="15" fill="rgb(212,155,18)" fg:x="205" fg:w="3"/><text x="88.6121%" y="495.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 1.29%)</title><rect x="88.3621%" y="469" width="1.2931%" height="15" fill="rgb(242,21,14)" fg:x="205" fg:w="3"/><text x="88.6121%" y="479.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.86%)</title><rect x="88.7931%" y="453" width="0.8621%" height="15" fill="rgb(222,19,48)" fg:x="206" fg:w="2"/><text x="89.0431%" y="463.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.86%)</title><rect x="88.7931%" y="437" width="0.8621%" height="15" fill="rgb(232,45,27)" fg:x="206" fg:w="2"/><text x="89.0431%" y="447.50"></text></g><g><title>mi_find_page (2 samples, 0.86%)</title><rect x="88.7931%" y="421" width="0.8621%" height="15" fill="rgb(249,103,42)" fg:x="206" fg:w="2"/><text x="89.0431%" y="431.50"></text></g><g><title>mi_find_free_page (2 samples, 0.86%)</title><rect x="88.7931%" y="405" width="0.8621%" height="15" fill="rgb(246,81,33)" fg:x="206" fg:w="2"/><text x="89.0431%" y="415.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.43%)</title><rect x="89.2241%" y="389" width="0.4310%" height="15" fill="rgb(252,33,42)" fg:x="207" fg:w="1"/><text x="89.4741%" y="399.50"></text></g><g><title>mi_page_fresh (1 samples, 0.43%)</title><rect x="89.2241%" y="373" width="0.4310%" height="15" fill="rgb(209,212,41)" fg:x="207" fg:w="1"/><text x="89.4741%" y="383.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.43%)</title><rect x="89.2241%" y="357" width="0.4310%" height="15" fill="rgb(207,154,6)" fg:x="207" fg:w="1"/><text x="89.4741%" y="367.50"></text></g><g><title>mi_page_init (1 samples, 0.43%)</title><rect x="89.2241%" y="341" width="0.4310%" height="15" fill="rgb(223,64,47)" fg:x="207" fg:w="1"/><text x="89.4741%" y="351.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.43%)</title><rect x="89.2241%" y="325" width="0.4310%" height="15" fill="rgb(211,161,38)" fg:x="207" fg:w="1"/><text x="89.4741%" y="335.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.43%)</title><rect x="89.2241%" y="309" width="0.4310%" height="15" fill="rgb(219,138,40)" fg:x="207" fg:w="1"/><text x="89.4741%" y="319.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.43%)</title><rect x="89.2241%" y="293" width="0.4310%" height="15" fill="rgb(241,228,46)" fg:x="207" fg:w="1"/><text x="89.4741%" y="303.50"></text></g><g><title>mi_block_set_next (1 samples, 0.43%)</title><rect x="89.2241%" y="277" width="0.4310%" height="15" fill="rgb(223,209,38)" fg:x="207" fg:w="1"/><text x="89.4741%" y="287.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.43%)</title><rect x="89.2241%" y="261" width="0.4310%" height="15" fill="rgb(236,164,45)" fg:x="207" fg:w="1"/><text x="89.4741%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="245" width="0.4310%" height="15" fill="rgb(231,15,5)" fg:x="207" fg:w="1"/><text x="89.4741%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="229" width="0.4310%" height="15" fill="rgb(252,35,15)" fg:x="207" fg:w="1"/><text x="89.4741%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="213" width="0.4310%" height="15" fill="rgb(248,181,18)" fg:x="207" fg:w="1"/><text x="89.4741%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="197" width="0.4310%" height="15" fill="rgb(233,39,42)" fg:x="207" fg:w="1"/><text x="89.4741%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="181" width="0.4310%" height="15" fill="rgb(238,110,33)" fg:x="207" fg:w="1"/><text x="89.4741%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="165" width="0.4310%" height="15" fill="rgb(233,195,10)" fg:x="207" fg:w="1"/><text x="89.4741%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="149" width="0.4310%" height="15" fill="rgb(254,105,3)" fg:x="207" fg:w="1"/><text x="89.4741%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="133" width="0.4310%" height="15" fill="rgb(221,225,9)" fg:x="207" fg:w="1"/><text x="89.4741%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="117" width="0.4310%" height="15" fill="rgb(224,227,45)" fg:x="207" fg:w="1"/><text x="89.4741%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="101" width="0.4310%" height="15" fill="rgb(229,198,43)" fg:x="207" fg:w="1"/><text x="89.4741%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="85" width="0.4310%" height="15" fill="rgb(206,209,35)" fg:x="207" fg:w="1"/><text x="89.4741%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="69" width="0.4310%" height="15" fill="rgb(245,195,53)" fg:x="207" fg:w="1"/><text x="89.4741%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="53" width="0.4310%" height="15" fill="rgb(240,92,26)" fg:x="207" fg:w="1"/><text x="89.4741%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="89.2241%" y="37" width="0.4310%" height="15" fill="rgb(207,40,23)" fg:x="207" fg:w="1"/><text x="89.4741%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 1.72%)</title><rect x="88.3621%" y="581" width="1.7241%" height="15" fill="rgb(223,111,35)" fg:x="205" fg:w="4"/><text x="88.6121%" y="591.50"></text></g><g><title>core::ptr::write (1 samples, 0.43%)</title><rect x="89.6552%" y="565" width="0.4310%" height="15" fill="rgb(229,147,28)" fg:x="208" fg:w="1"/><text x="89.9052%" y="575.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (2 samples, 0.86%)</title><rect x="93.1034%" y="533" width="0.8621%" height="15" fill="rgb(211,29,28)" fg:x="216" fg:w="2"/><text x="93.3534%" y="543.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (1 samples, 0.43%)</title><rect x="93.5345%" y="517" width="0.4310%" height="15" fill="rgb(228,72,33)" fg:x="217" fg:w="1"/><text x="93.7845%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::consume (1 samples, 0.43%)</title><rect x="93.9655%" y="501" width="0.4310%" height="15" fill="rgb(205,214,31)" fg:x="218" fg:w="1"/><text x="94.2155%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::consume (1 samples, 0.43%)</title><rect x="93.9655%" y="485" width="0.4310%" height="15" fill="rgb(224,111,15)" fg:x="218" fg:w="1"/><text x="94.2155%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (2 samples, 0.86%)</title><rect x="93.9655%" y="533" width="0.8621%" height="15" fill="rgb(253,21,26)" fg:x="218" fg:w="2"/><text x="94.2155%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (2 samples, 0.86%)</title><rect x="93.9655%" y="517" width="0.8621%" height="15" fill="rgb(245,139,43)" fg:x="218" fg:w="2"/><text x="94.2155%" y="527.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.43%)</title><rect x="94.3966%" y="501" width="0.4310%" height="15" fill="rgb(252,170,7)" fg:x="219" fg:w="1"/><text x="94.6466%" y="511.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.43%)</title><rect x="94.3966%" y="485" width="0.4310%" height="15" fill="rgb(231,118,14)" fg:x="219" fg:w="1"/><text x="94.6466%" y="495.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (11 samples, 4.74%)</title><rect x="90.5172%" y="549" width="4.7414%" height="15" fill="rgb(238,83,0)" fg:x="210" fg:w="11"/><text x="90.7672%" y="559.50">&lt;csgop..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (1 samples, 0.43%)</title><rect x="94.8276%" y="533" width="0.4310%" height="15" fill="rgb(221,39,39)" fg:x="220" fg:w="1"/><text x="95.0776%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (1 samples, 0.43%)</title><rect x="94.8276%" y="517" width="0.4310%" height="15" fill="rgb(222,119,46)" fg:x="220" fg:w="1"/><text x="95.0776%" y="527.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.43%)</title><rect x="94.8276%" y="501" width="0.4310%" height="15" fill="rgb(222,165,49)" fg:x="220" fg:w="1"/><text x="95.0776%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::consume (1 samples, 0.43%)</title><rect x="95.2586%" y="533" width="0.4310%" height="15" fill="rgb(219,113,52)" fg:x="221" fg:w="1"/><text x="95.5086%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::consume (1 samples, 0.43%)</title><rect x="95.2586%" y="517" width="0.4310%" height="15" fill="rgb(214,7,15)" fg:x="221" fg:w="1"/><text x="95.5086%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (14 samples, 6.03%)</title><rect x="90.0862%" y="581" width="6.0345%" height="15" fill="rgb(235,32,4)" fg:x="209" fg:w="14"/><text x="90.3362%" y="591.50">protobuf..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (13 samples, 5.60%)</title><rect x="90.5172%" y="565" width="5.6034%" height="15" fill="rgb(238,90,54)" fg:x="210" fg:w="13"/><text x="90.7672%" y="575.50">protobu..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (2 samples, 0.86%)</title><rect x="95.2586%" y="549" width="0.8621%" height="15" fill="rgb(213,208,19)" fg:x="221" fg:w="2"/><text x="95.5086%" y="559.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (1 samples, 0.43%)</title><rect x="95.6897%" y="533" width="0.4310%" height="15" fill="rgb(233,156,4)" fg:x="222" fg:w="1"/><text x="95.9397%" y="543.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.43%)</title><rect x="95.6897%" y="517" width="0.4310%" height="15" fill="rgb(207,194,5)" fg:x="222" fg:w="1"/><text x="95.9397%" y="527.50"></text></g><g><title>demoparser::parsing::parser::Parser::messages_from_packet (75 samples, 32.33%)</title><rect x="64.2241%" y="677" width="32.3276%" height="15" fill="rgb(206,111,30)" fg:x="149" fg:w="75"/><text x="64.4741%" y="687.50">demoparser::parsing::parser::Parser::messages_from_p..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (52 samples, 22.41%)</title><rect x="74.1379%" y="661" width="22.4138%" height="15" fill="rgb(243,70,54)" fg:x="172" fg:w="52"/><text x="74.3879%" y="671.50">demoparser::parsing::parser::Parser..</text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_event (51 samples, 21.98%)</title><rect x="74.5690%" y="645" width="21.9828%" height="15" fill="rgb(242,28,8)" fg:x="173" fg:w="51"/><text x="74.8190%" y="655.50">demoparser::parsing::demo_parsing::..</text></g><g><title>protobuf::message::Message::parse_from_bytes (22 samples, 9.48%)</title><rect x="87.0690%" y="629" width="9.4828%" height="15" fill="rgb(219,106,18)" fg:x="202" fg:w="22"/><text x="87.3190%" y="639.50">protobuf::mess..</text></g><g><title>protobuf::message::Message::parse_from (20 samples, 8.62%)</title><rect x="87.9310%" y="613" width="8.6207%" height="15" fill="rgb(244,222,10)" fg:x="204" fg:w="20"/><text x="88.1810%" y="623.50">protobuf::me..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (20 samples, 8.62%)</title><rect x="87.9310%" y="597" width="8.6207%" height="15" fill="rgb(236,179,52)" fg:x="204" fg:w="20"/><text x="88.1810%" y="607.50">&lt;csgoproto::..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.43%)</title><rect x="96.1207%" y="581" width="0.4310%" height="15" fill="rgb(213,23,39)" fg:x="223" fg:w="1"/><text x="96.3707%" y="591.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.43%)</title><rect x="96.1207%" y="565" width="0.4310%" height="15" fill="rgb(238,48,10)" fg:x="223" fg:w="1"/><text x="96.3707%" y="575.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::consume (1 samples, 0.43%)</title><rect x="96.1207%" y="549" width="0.4310%" height="15" fill="rgb(251,196,23)" fg:x="223" fg:w="1"/><text x="96.3707%" y="559.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::consume (1 samples, 0.43%)</title><rect x="96.1207%" y="533" width="0.4310%" height="15" fill="rgb(250,152,24)" fg:x="223" fg:w="1"/><text x="96.3707%" y="543.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (99 samples, 42.67%)</title><rect x="54.7414%" y="709" width="42.6724%" height="15" fill="rgb(209,150,17)" fg:x="127" fg:w="99"/><text x="54.9914%" y="719.50">demoparser::parsing::parser::Parser::parse_bytes</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (77 samples, 33.19%)</title><rect x="64.2241%" y="693" width="33.1897%" height="15" fill="rgb(234,202,34)" fg:x="149" fg:w="77"/><text x="64.4741%" y="703.50">demoparser::parsing::parser::Parser::parse_cmd</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (2 samples, 0.86%)</title><rect x="96.5517%" y="677" width="0.8621%" height="15" fill="rgb(253,148,53)" fg:x="224" fg:w="2"/><text x="96.8017%" y="687.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_eid_cls_map (1 samples, 0.43%)</title><rect x="97.4138%" y="693" width="0.4310%" height="15" fill="rgb(218,129,16)" fg:x="226" fg:w="1"/><text x="97.6638%" y="703.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (1 samples, 0.43%)</title><rect x="97.4138%" y="677" width="0.4310%" height="15" fill="rgb(216,85,19)" fg:x="226" fg:w="1"/><text x="97.6638%" y="687.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::decompress_bytes (1 samples, 0.43%)</title><rect x="97.4138%" y="661" width="0.4310%" height="15" fill="rgb(235,228,7)" fg:x="226" fg:w="1"/><text x="97.6638%" y="671.50"></text></g><g><title>std::io::Read::read_to_end (1 samples, 0.43%)</title><rect x="97.4138%" y="645" width="0.4310%" height="15" fill="rgb(245,175,0)" fg:x="226" fg:w="1"/><text x="97.6638%" y="655.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.43%)</title><rect x="97.4138%" y="629" width="0.4310%" height="15" fill="rgb(208,168,36)" fg:x="226" fg:w="1"/><text x="97.6638%" y="639.50"></text></g><g><title>std::io::Read::read_buf (1 samples, 0.43%)</title><rect x="97.4138%" y="613" width="0.4310%" height="15" fill="rgb(246,171,24)" fg:x="226" fg:w="1"/><text x="97.6638%" y="623.50"></text></g><g><title>std::io::default_read_buf (1 samples, 0.43%)</title><rect x="97.4138%" y="597" width="0.4310%" height="15" fill="rgb(215,142,24)" fg:x="226" fg:w="1"/><text x="97.6638%" y="607.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (1 samples, 0.43%)</title><rect x="97.4138%" y="581" width="0.4310%" height="15" fill="rgb(250,187,7)" fg:x="226" fg:w="1"/><text x="97.6638%" y="591.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.43%)</title><rect x="97.4138%" y="565" width="0.4310%" height="15" fill="rgb(228,66,33)" fg:x="226" fg:w="1"/><text x="97.6638%" y="575.50"></text></g><g><title>flate2::zio::read (1 samples, 0.43%)</title><rect x="97.4138%" y="549" width="0.4310%" height="15" fill="rgb(234,215,21)" fg:x="226" fg:w="1"/><text x="97.6638%" y="559.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.43%)</title><rect x="97.4138%" y="533" width="0.4310%" height="15" fill="rgb(222,191,20)" fg:x="226" fg:w="1"/><text x="97.6638%" y="543.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (1 samples, 0.43%)</title><rect x="97.4138%" y="517" width="0.4310%" height="15" fill="rgb(245,79,54)" fg:x="226" fg:w="1"/><text x="97.6638%" y="527.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (1 samples, 0.43%)</title><rect x="97.4138%" y="501" width="0.4310%" height="15" fill="rgb(240,10,37)" fg:x="226" fg:w="1"/><text x="97.6638%" y="511.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.43%)</title><rect x="97.4138%" y="485" width="0.4310%" height="15" fill="rgb(214,192,32)" fg:x="226" fg:w="1"/><text x="97.6638%" y="495.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (1 samples, 0.43%)</title><rect x="97.4138%" y="469" width="0.4310%" height="15" fill="rgb(209,36,54)" fg:x="226" fg:w="1"/><text x="97.6638%" y="479.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (1 samples, 0.43%)</title><rect x="97.4138%" y="453" width="0.4310%" height="15" fill="rgb(220,10,11)" fg:x="226" fg:w="1"/><text x="97.6638%" y="463.50"></text></g><g><title>__libc_start_main_impl (111 samples, 47.84%)</title><rect x="50.4310%" y="1173" width="47.8448%" height="15" fill="rgb(221,106,17)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1183.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (111 samples, 47.84%)</title><rect x="50.4310%" y="1157" width="47.8448%" height="15" fill="rgb(251,142,44)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1167.50">__libc_start_call_main</text></g><g><title>main (111 samples, 47.84%)</title><rect x="50.4310%" y="1141" width="47.8448%" height="15" fill="rgb(238,13,15)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1151.50">main</text></g><g><title>std::rt::lang_start_internal (111 samples, 47.84%)</title><rect x="50.4310%" y="1125" width="47.8448%" height="15" fill="rgb(208,107,27)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1135.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (111 samples, 47.84%)</title><rect x="50.4310%" y="1109" width="47.8448%" height="15" fill="rgb(205,136,37)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1119.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (111 samples, 47.84%)</title><rect x="50.4310%" y="1093" width="47.8448%" height="15" fill="rgb(250,205,27)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (111 samples, 47.84%)</title><rect x="50.4310%" y="1077" width="47.8448%" height="15" fill="rgb(210,80,43)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1087.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (111 samples, 47.84%)</title><rect x="50.4310%" y="1061" width="47.8448%" height="15" fill="rgb(247,160,36)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1071.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (111 samples, 47.84%)</title><rect x="50.4310%" y="1045" width="47.8448%" height="15" fill="rgb(234,13,49)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (111 samples, 47.84%)</title><rect x="50.4310%" y="1029" width="47.8448%" height="15" fill="rgb(234,122,0)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (111 samples, 47.84%)</title><rect x="50.4310%" y="1013" width="47.8448%" height="15" fill="rgb(207,146,38)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1023.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (111 samples, 47.84%)</title><rect x="50.4310%" y="997" width="47.8448%" height="15" fill="rgb(207,177,25)" fg:x="117" fg:w="111"/><text x="50.6810%" y="1007.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_..</text></g><g><title>std::rt::lang_start::{{closure}} (111 samples, 47.84%)</title><rect x="50.4310%" y="981" width="47.8448%" height="15" fill="rgb(211,178,42)" fg:x="117" fg:w="111"/><text x="50.6810%" y="991.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (111 samples, 47.84%)</title><rect x="50.4310%" y="965" width="47.8448%" height="15" fill="rgb(230,69,54)" fg:x="117" fg:w="111"/><text x="50.6810%" y="975.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (111 samples, 47.84%)</title><rect x="50.4310%" y="949" width="47.8448%" height="15" fill="rgb(214,135,41)" fg:x="117" fg:w="111"/><text x="50.6810%" y="959.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (111 samples, 47.84%)</title><rect x="50.4310%" y="933" width="47.8448%" height="15" fill="rgb(237,67,25)" fg:x="117" fg:w="111"/><text x="50.6810%" y="943.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (111 samples, 47.84%)</title><rect x="50.4310%" y="917" width="47.8448%" height="15" fill="rgb(222,189,50)" fg:x="117" fg:w="111"/><text x="50.6810%" y="927.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (111 samples, 47.84%)</title><rect x="50.4310%" y="901" width="47.8448%" height="15" fill="rgb(245,148,34)" fg:x="117" fg:w="111"/><text x="50.6810%" y="911.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (111 samples, 47.84%)</title><rect x="50.4310%" y="885" width="47.8448%" height="15" fill="rgb(222,29,6)" fg:x="117" fg:w="111"/><text x="50.6810%" y="895.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (111 samples, 47.84%)</title><rect x="50.4310%" y="869" width="47.8448%" height="15" fill="rgb(221,189,43)" fg:x="117" fg:w="111"/><text x="50.6810%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (111 samples, 47.84%)</title><rect x="50.4310%" y="853" width="47.8448%" height="15" fill="rgb(207,36,27)" fg:x="117" fg:w="111"/><text x="50.6810%" y="863.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (111 samples, 47.84%)</title><rect x="50.4310%" y="837" width="47.8448%" height="15" fill="rgb(217,90,24)" fg:x="117" fg:w="111"/><text x="50.6810%" y="847.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111 samples, 47.84%)</title><rect x="50.4310%" y="821" width="47.8448%" height="15" fill="rgb(224,66,35)" fg:x="117" fg:w="111"/><text x="50.6810%" y="831.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (111 samples, 47.84%)</title><rect x="50.4310%" y="805" width="47.8448%" height="15" fill="rgb(221,13,50)" fg:x="117" fg:w="111"/><text x="50.6810%" y="815.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (111 samples, 47.84%)</title><rect x="50.4310%" y="789" width="47.8448%" height="15" fill="rgb(236,68,49)" fg:x="117" fg:w="111"/><text x="50.6810%" y="799.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (111 samples, 47.84%)</title><rect x="50.4310%" y="773" width="47.8448%" height="15" fill="rgb(229,146,28)" fg:x="117" fg:w="111"/><text x="50.6810%" y="783.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (111 samples, 47.84%)</title><rect x="50.4310%" y="757" width="47.8448%" height="15" fill="rgb(225,31,38)" fg:x="117" fg:w="111"/><text x="50.6810%" y="767.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (101 samples, 43.53%)</title><rect x="54.7414%" y="741" width="43.5345%" height="15" fill="rgb(250,208,3)" fg:x="127" fg:w="101"/><text x="54.9914%" y="751.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::speed (101 samples, 43.53%)</title><rect x="54.7414%" y="725" width="43.5345%" height="15" fill="rgb(246,54,23)" fg:x="127" fg:w="101"/><text x="54.9914%" y="735.50">demoparser::parsing::parser::Parser::speed</text></g><g><title>demoparser::parsing::parser::Parser::parse_mandatory_ticks (2 samples, 0.86%)</title><rect x="97.4138%" y="709" width="0.8621%" height="15" fill="rgb(243,76,11)" fg:x="226" fg:w="2"/><text x="97.6638%" y="719.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (1 samples, 0.43%)</title><rect x="97.8448%" y="693" width="0.4310%" height="15" fill="rgb(245,21,50)" fg:x="227" fg:w="1"/><text x="98.0948%" y="703.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (1 samples, 0.43%)</title><rect x="97.8448%" y="677" width="0.4310%" height="15" fill="rgb(228,9,43)" fg:x="227" fg:w="1"/><text x="98.0948%" y="687.50"></text></g><g><title>demoparser::parsing::parser::Parser::messages_from_packet (1 samples, 0.43%)</title><rect x="97.8448%" y="661" width="0.4310%" height="15" fill="rgb(208,100,47)" fg:x="227" fg:w="1"/><text x="98.0948%" y="671.50"></text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (1 samples, 0.43%)</title><rect x="97.8448%" y="645" width="0.4310%" height="15" fill="rgb(232,26,8)" fg:x="227" fg:w="1"/><text x="98.0948%" y="655.50"></text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_event (1 samples, 0.43%)</title><rect x="97.8448%" y="629" width="0.4310%" height="15" fill="rgb(216,166,38)" fg:x="227" fg:w="1"/><text x="98.0948%" y="639.50"></text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::gen_name_val_pairs (1 samples, 0.43%)</title><rect x="97.8448%" y="613" width="0.4310%" height="15" fill="rgb(251,202,51)" fg:x="227" fg:w="1"/><text x="98.0948%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.43%)</title><rect x="97.8448%" y="597" width="0.4310%" height="15" fill="rgb(254,216,34)" fg:x="227" fg:w="1"/><text x="98.0948%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.43%)</title><rect x="97.8448%" y="581" width="0.4310%" height="15" fill="rgb(251,32,27)" fg:x="227" fg:w="1"/><text x="98.0948%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.43%)</title><rect x="97.8448%" y="565" width="0.4310%" height="15" fill="rgb(208,127,28)" fg:x="227" fg:w="1"/><text x="98.0948%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.43%)</title><rect x="97.8448%" y="549" width="0.4310%" height="15" fill="rgb(224,137,22)" fg:x="227" fg:w="1"/><text x="98.0948%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.43%)</title><rect x="97.8448%" y="533" width="0.4310%" height="15" fill="rgb(254,70,32)" fg:x="227" fg:w="1"/><text x="98.0948%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.43%)</title><rect x="97.8448%" y="517" width="0.4310%" height="15" fill="rgb(229,75,37)" fg:x="227" fg:w="1"/><text x="98.0948%" y="527.50"></text></g><g><title>demoparser (229 samples, 98.71%)</title><rect x="0.0000%" y="1205" width="98.7069%" height="15" fill="rgb(252,64,23)" fg:x="0" fg:w="229"/><text x="0.2500%" y="1215.50">demoparser</text></g><g><title>_start (112 samples, 48.28%)</title><rect x="50.4310%" y="1189" width="48.2759%" height="15" fill="rgb(232,162,48)" fg:x="117" fg:w="112"/><text x="50.6810%" y="1199.50">_start</text></g><g><title>_dl_start (1 samples, 0.43%)</title><rect x="98.2759%" y="1173" width="0.4310%" height="15" fill="rgb(246,160,12)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1183.50"></text></g><g><title>_dl_start_final (1 samples, 0.43%)</title><rect x="98.2759%" y="1157" width="0.4310%" height="15" fill="rgb(247,166,0)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1167.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.43%)</title><rect x="98.2759%" y="1141" width="0.4310%" height="15" fill="rgb(249,219,21)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1151.50"></text></g><g><title>dl_main (1 samples, 0.43%)</title><rect x="98.2759%" y="1125" width="0.4310%" height="15" fill="rgb(205,209,3)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1135.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.43%)</title><rect x="98.2759%" y="1109" width="0.4310%" height="15" fill="rgb(243,44,1)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1119.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.43%)</title><rect x="98.2759%" y="1093" width="0.4310%" height="15" fill="rgb(206,159,16)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1103.50"></text></g><g><title>openaux (1 samples, 0.43%)</title><rect x="98.2759%" y="1077" width="0.4310%" height="15" fill="rgb(244,77,30)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1087.50"></text></g><g><title>_dl_map_object (1 samples, 0.43%)</title><rect x="98.2759%" y="1061" width="0.4310%" height="15" fill="rgb(218,69,12)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1071.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.43%)</title><rect x="98.2759%" y="1045" width="0.4310%" height="15" fill="rgb(212,87,7)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1055.50"></text></g><g><title>_dl_get_file_id (1 samples, 0.43%)</title><rect x="98.2759%" y="1029" width="0.4310%" height="15" fill="rgb(245,114,25)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1039.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.43%)</title><rect x="98.2759%" y="1013" width="0.4310%" height="15" fill="rgb(210,61,42)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="997" width="0.4310%" height="15" fill="rgb(211,52,33)" fg:x="228" fg:w="1"/><text x="98.5259%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="981" width="0.4310%" height="15" fill="rgb(234,58,33)" fg:x="228" fg:w="1"/><text x="98.5259%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="965" width="0.4310%" height="15" fill="rgb(220,115,36)" fg:x="228" fg:w="1"/><text x="98.5259%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="949" width="0.4310%" height="15" fill="rgb(243,153,54)" fg:x="228" fg:w="1"/><text x="98.5259%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="933" width="0.4310%" height="15" fill="rgb(251,47,18)" fg:x="228" fg:w="1"/><text x="98.5259%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="98.2759%" y="917" width="0.4310%" height="15" fill="rgb(242,102,42)" fg:x="228" fg:w="1"/><text x="98.5259%" y="927.50"></text></g><g><title>all (232 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="232"/><text x="0.2500%" y="1231.50"></text></g><g><title>perf-exec (3 samples, 1.29%)</title><rect x="98.7069%" y="1205" width="1.2931%" height="15" fill="rgb(221,117,51)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1189" width="1.2931%" height="15" fill="rgb(212,20,18)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1173" width="1.2931%" height="15" fill="rgb(245,133,36)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1157" width="1.2931%" height="15" fill="rgb(212,6,19)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1141" width="1.2931%" height="15" fill="rgb(218,1,36)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1125" width="1.2931%" height="15" fill="rgb(246,84,54)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1109" width="1.2931%" height="15" fill="rgb(242,110,6)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1093" width="1.2931%" height="15" fill="rgb(214,47,5)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1077" width="1.2931%" height="15" fill="rgb(218,159,25)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1061" width="1.2931%" height="15" fill="rgb(215,211,28)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 1.29%)</title><rect x="98.7069%" y="1045" width="1.2931%" height="15" fill="rgb(238,59,32)" fg:x="229" fg:w="3"/><text x="98.9569%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="99.5690%" y="1029" width="0.4310%" height="15" fill="rgb(226,82,3)" fg:x="231" fg:w="1"/><text x="99.8190%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="99.5690%" y="1013" width="0.4310%" height="15" fill="rgb(240,164,32)" fg:x="231" fg:w="1"/><text x="99.8190%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="99.5690%" y="997" width="0.4310%" height="15" fill="rgb(232,46,7)" fg:x="231" fg:w="1"/><text x="99.8190%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="99.5690%" y="981" width="0.4310%" height="15" fill="rgb(229,129,53)" fg:x="231" fg:w="1"/><text x="99.8190%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.43%)</title><rect x="99.5690%" y="965" width="0.4310%" height="15" fill="rgb(234,188,29)" fg:x="231" fg:w="1"/><text x="99.8190%" y="975.50"></text></g></svg></svg>