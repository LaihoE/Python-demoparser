<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="148"><g><title>[unknown] (49 samples, 33.11%)</title><rect x="6.7568%" y="933" width="33.1081%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="49"/><text x="7.0068%" y="943.50">[unknown]</text></g><g><title>[unknown] (49 samples, 33.11%)</title><rect x="6.7568%" y="917" width="33.1081%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="49"/><text x="7.0068%" y="927.50">[unknown]</text></g><g><title>[unknown] (39 samples, 26.35%)</title><rect x="13.5135%" y="901" width="26.3514%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="39"/><text x="13.7635%" y="911.50">[unknown]</text></g><g><title>[unknown] (39 samples, 26.35%)</title><rect x="13.5135%" y="885" width="26.3514%" height="15" fill="rgb(248,212,6)" fg:x="20" fg:w="39"/><text x="13.7635%" y="895.50">[unknown]</text></g><g><title>[unknown] (4 samples, 2.70%)</title><rect x="37.1622%" y="869" width="2.7027%" height="15" fill="rgb(208,68,35)" fg:x="55" fg:w="4"/><text x="37.4122%" y="879.50">[u..</text></g><g><title>[unknown] (4 samples, 2.70%)</title><rect x="37.1622%" y="853" width="2.7027%" height="15" fill="rgb(232,128,0)" fg:x="55" fg:w="4"/><text x="37.4122%" y="863.50">[u..</text></g><g><title>[unknown] (4 samples, 2.70%)</title><rect x="37.1622%" y="837" width="2.7027%" height="15" fill="rgb(207,160,47)" fg:x="55" fg:w="4"/><text x="37.4122%" y="847.50">[u..</text></g><g><title>[unknown] (4 samples, 2.70%)</title><rect x="37.1622%" y="821" width="2.7027%" height="15" fill="rgb(228,23,34)" fg:x="55" fg:w="4"/><text x="37.4122%" y="831.50">[u..</text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="38.5135%" y="805" width="1.3514%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="2"/><text x="38.7635%" y="815.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="38.5135%" y="789" width="1.3514%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="2"/><text x="38.7635%" y="799.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="38.5135%" y="773" width="1.3514%" height="15" fill="rgb(250,228,42)" fg:x="57" fg:w="2"/><text x="38.7635%" y="783.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="38.5135%" y="757" width="1.3514%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="2"/><text x="38.7635%" y="767.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="38.5135%" y="741" width="1.3514%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="2"/><text x="38.7635%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="39.1892%" y="725" width="0.6757%" height="15" fill="rgb(206,188,39)" fg:x="58" fg:w="1"/><text x="39.4392%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="39.1892%" y="709" width="0.6757%" height="15" fill="rgb(217,207,13)" fg:x="58" fg:w="1"/><text x="39.4392%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="39.1892%" y="693" width="0.6757%" height="15" fill="rgb(231,73,38)" fg:x="58" fg:w="1"/><text x="39.4392%" y="703.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.68%)</title><rect x="39.8649%" y="933" width="0.6757%" height="15" fill="rgb(225,20,46)" fg:x="59" fg:w="1"/><text x="40.1149%" y="943.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.68%)</title><rect x="39.8649%" y="917" width="0.6757%" height="15" fill="rgb(210,31,41)" fg:x="59" fg:w="1"/><text x="40.1149%" y="927.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.68%)</title><rect x="39.8649%" y="901" width="0.6757%" height="15" fill="rgb(221,200,47)" fg:x="59" fg:w="1"/><text x="40.1149%" y="911.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.68%)</title><rect x="39.8649%" y="885" width="0.6757%" height="15" fill="rgb(226,26,5)" fg:x="59" fg:w="1"/><text x="40.1149%" y="895.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="39.8649%" y="869" width="0.6757%" height="15" fill="rgb(249,33,26)" fg:x="59" fg:w="1"/><text x="40.1149%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="39.8649%" y="853" width="0.6757%" height="15" fill="rgb(235,183,28)" fg:x="59" fg:w="1"/><text x="40.1149%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.68%)</title><rect x="39.8649%" y="837" width="0.6757%" height="15" fill="rgb(221,5,38)" fg:x="59" fg:w="1"/><text x="40.1149%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.68%)</title><rect x="39.8649%" y="821" width="0.6757%" height="15" fill="rgb(247,18,42)" fg:x="59" fg:w="1"/><text x="40.1149%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.68%)</title><rect x="39.8649%" y="805" width="0.6757%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="1"/><text x="40.1149%" y="815.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.68%)</title><rect x="39.8649%" y="789" width="0.6757%" height="15" fill="rgb(249,31,29)" fg:x="59" fg:w="1"/><text x="40.1149%" y="799.50"></text></g><g><title>[unknown] (61 samples, 41.22%)</title><rect x="0.0000%" y="949" width="41.2162%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="61"/><text x="0.2500%" y="959.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.68%)</title><rect x="40.5405%" y="933" width="0.6757%" height="15" fill="rgb(238,160,17)" fg:x="60" fg:w="1"/><text x="40.7905%" y="943.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (1 samples, 0.68%)</title><rect x="40.5405%" y="917" width="0.6757%" height="15" fill="rgb(214,148,48)" fg:x="60" fg:w="1"/><text x="40.7905%" y="927.50"></text></g><g><title>crossbeam_epoch::default::default_collector (1 samples, 0.68%)</title><rect x="40.5405%" y="901" width="0.6757%" height="15" fill="rgb(232,36,49)" fg:x="60" fg:w="1"/><text x="40.7905%" y="911.50"></text></g><g><title>crossbeam_epoch::default::collector (1 samples, 0.68%)</title><rect x="40.5405%" y="885" width="0.6757%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="1"/><text x="40.7905%" y="895.50"></text></g><g><title>crossbeam_epoch::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1 samples, 0.68%)</title><rect x="40.5405%" y="869" width="0.6757%" height="15" fill="rgb(229,88,8)" fg:x="60" fg:w="1"/><text x="40.7905%" y="879.50"></text></g><g><title>crossbeam_epoch::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.68%)</title><rect x="40.5405%" y="853" width="0.6757%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="1"/><text x="40.7905%" y="863.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.68%)</title><rect x="40.5405%" y="837" width="0.6757%" height="15" fill="rgb(254,191,54)" fg:x="60" fg:w="1"/><text x="40.7905%" y="847.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.68%)</title><rect x="40.5405%" y="821" width="0.6757%" height="15" fill="rgb(241,83,37)" fg:x="60" fg:w="1"/><text x="40.7905%" y="831.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.68%)</title><rect x="40.5405%" y="805" width="0.6757%" height="15" fill="rgb(233,36,39)" fg:x="60" fg:w="1"/><text x="40.7905%" y="815.50"></text></g><g><title>crossbeam_epoch::sync::once_lock::OnceLock&lt;T&gt;::initialize::{{closure}} (1 samples, 0.68%)</title><rect x="40.5405%" y="789" width="0.6757%" height="15" fill="rgb(226,3,54)" fg:x="60" fg:w="1"/><text x="40.7905%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.68%)</title><rect x="40.5405%" y="773" width="0.6757%" height="15" fill="rgb(245,192,40)" fg:x="60" fg:w="1"/><text x="40.7905%" y="783.50"></text></g><g><title>crossbeam_epoch::collector::Collector::new (1 samples, 0.68%)</title><rect x="40.5405%" y="757" width="0.6757%" height="15" fill="rgb(238,167,29)" fg:x="60" fg:w="1"/><text x="40.7905%" y="767.50"></text></g><g><title>crossbeam_epoch::collector::Collector::new (1 samples, 0.68%)</title><rect x="40.5405%" y="741" width="0.6757%" height="15" fill="rgb(232,182,51)" fg:x="60" fg:w="1"/><text x="40.7905%" y="751.50"></text></g><g><title>&lt;crossbeam_epoch::collector::Collector as core::default::Default&gt;::default (1 samples, 0.68%)</title><rect x="40.5405%" y="725" width="0.6757%" height="15" fill="rgb(231,60,39)" fg:x="60" fg:w="1"/><text x="40.7905%" y="735.50"></text></g><g><title>crossbeam_epoch::internal::Global::new (1 samples, 0.68%)</title><rect x="40.5405%" y="709" width="0.6757%" height="15" fill="rgb(208,69,12)" fg:x="60" fg:w="1"/><text x="40.7905%" y="719.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::new (1 samples, 0.68%)</title><rect x="40.5405%" y="693" width="0.6757%" height="15" fill="rgb(235,93,37)" fg:x="60" fg:w="1"/><text x="40.7905%" y="703.50"></text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::new (1 samples, 0.68%)</title><rect x="40.5405%" y="677" width="0.6757%" height="15" fill="rgb(213,116,39)" fg:x="60" fg:w="1"/><text x="40.7905%" y="687.50"></text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::init (1 samples, 0.68%)</title><rect x="40.5405%" y="661" width="0.6757%" height="15" fill="rgb(222,207,29)" fg:x="60" fg:w="1"/><text x="40.7905%" y="671.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::init (1 samples, 0.68%)</title><rect x="40.5405%" y="645" width="0.6757%" height="15" fill="rgb(206,96,30)" fg:x="60" fg:w="1"/><text x="40.7905%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.68%)</title><rect x="40.5405%" y="629" width="0.6757%" height="15" fill="rgb(218,138,4)" fg:x="60" fg:w="1"/><text x="40.7905%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.68%)</title><rect x="40.5405%" y="613" width="0.6757%" height="15" fill="rgb(250,191,14)" fg:x="60" fg:w="1"/><text x="40.7905%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.68%)</title><rect x="40.5405%" y="597" width="0.6757%" height="15" fill="rgb(239,60,40)" fg:x="60" fg:w="1"/><text x="40.7905%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.68%)</title><rect x="40.5405%" y="581" width="0.6757%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="1"/><text x="40.7905%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.68%)</title><rect x="40.5405%" y="565" width="0.6757%" height="15" fill="rgb(225,35,8)" fg:x="60" fg:w="1"/><text x="40.7905%" y="575.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.68%)</title><rect x="40.5405%" y="549" width="0.6757%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="1"/><text x="40.7905%" y="559.50"></text></g><g><title>mi_find_page (1 samples, 0.68%)</title><rect x="40.5405%" y="533" width="0.6757%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="1"/><text x="40.7905%" y="543.50"></text></g><g><title>mi_find_free_page (1 samples, 0.68%)</title><rect x="40.5405%" y="517" width="0.6757%" height="15" fill="rgb(231,138,38)" fg:x="60" fg:w="1"/><text x="40.7905%" y="527.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.68%)</title><rect x="40.5405%" y="501" width="0.6757%" height="15" fill="rgb(231,145,46)" fg:x="60" fg:w="1"/><text x="40.7905%" y="511.50"></text></g><g><title>mi_page_fresh (1 samples, 0.68%)</title><rect x="40.5405%" y="485" width="0.6757%" height="15" fill="rgb(251,118,11)" fg:x="60" fg:w="1"/><text x="40.7905%" y="495.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.68%)</title><rect x="40.5405%" y="469" width="0.6757%" height="15" fill="rgb(217,147,25)" fg:x="60" fg:w="1"/><text x="40.7905%" y="479.50"></text></g><g><title>mi_segments_page_alloc (1 samples, 0.68%)</title><rect x="40.5405%" y="453" width="0.6757%" height="15" fill="rgb(247,81,37)" fg:x="60" fg:w="1"/><text x="40.7905%" y="463.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.68%)</title><rect x="40.5405%" y="437" width="0.6757%" height="15" fill="rgb(209,12,38)" fg:x="60" fg:w="1"/><text x="40.7905%" y="447.50"></text></g><g><title>mi_page_init (5 samples, 3.38%)</title><rect x="41.2162%" y="469" width="3.3784%" height="15" fill="rgb(227,1,9)" fg:x="61" fg:w="5"/><text x="41.4662%" y="479.50">mi_..</text></g><g><title>mi_page_extend_free (5 samples, 3.38%)</title><rect x="41.2162%" y="453" width="3.3784%" height="15" fill="rgb(248,47,43)" fg:x="61" fg:w="5"/><text x="41.4662%" y="463.50">mi_..</text></g><g><title>mi_page_extend_free (5 samples, 3.38%)</title><rect x="41.2162%" y="437" width="3.3784%" height="15" fill="rgb(221,10,30)" fg:x="61" fg:w="5"/><text x="41.4662%" y="447.50">mi_..</text></g><g><title>mi_page_free_list_extend (5 samples, 3.38%)</title><rect x="41.2162%" y="421" width="3.3784%" height="15" fill="rgb(210,229,1)" fg:x="61" fg:w="5"/><text x="41.4662%" y="431.50">mi_..</text></g><g><title>mi_block_set_next (5 samples, 3.38%)</title><rect x="41.2162%" y="405" width="3.3784%" height="15" fill="rgb(222,148,37)" fg:x="61" fg:w="5"/><text x="41.4662%" y="415.50">mi_..</text></g><g><title>mi_block_set_nextx (5 samples, 3.38%)</title><rect x="41.2162%" y="389" width="3.3784%" height="15" fill="rgb(234,67,33)" fg:x="61" fg:w="5"/><text x="41.4662%" y="399.50">mi_..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="41.2162%" y="373" width="3.3784%" height="15" fill="rgb(247,98,35)" fg:x="61" fg:w="5"/><text x="41.4662%" y="383.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="41.2162%" y="357" width="3.3784%" height="15" fill="rgb(247,138,52)" fg:x="61" fg:w="5"/><text x="41.4662%" y="367.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="41.2162%" y="341" width="3.3784%" height="15" fill="rgb(213,79,30)" fg:x="61" fg:w="5"/><text x="41.4662%" y="351.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="41.2162%" y="325" width="3.3784%" height="15" fill="rgb(246,177,23)" fg:x="61" fg:w="5"/><text x="41.4662%" y="335.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="41.2162%" y="309" width="3.3784%" height="15" fill="rgb(230,62,27)" fg:x="61" fg:w="5"/><text x="41.4662%" y="319.50">[un..</text></g><g><title>mi_find_page (11 samples, 7.43%)</title><rect x="41.2162%" y="549" width="7.4324%" height="15" fill="rgb(216,154,8)" fg:x="61" fg:w="11"/><text x="41.4662%" y="559.50">mi_find_pa..</text></g><g><title>mi_find_free_page (11 samples, 7.43%)</title><rect x="41.2162%" y="533" width="7.4324%" height="15" fill="rgb(244,35,45)" fg:x="61" fg:w="11"/><text x="41.4662%" y="543.50">mi_find_fr..</text></g><g><title>mi_page_queue_find_free_ex (11 samples, 7.43%)</title><rect x="41.2162%" y="517" width="7.4324%" height="15" fill="rgb(251,115,12)" fg:x="61" fg:w="11"/><text x="41.4662%" y="527.50">mi_page_qu..</text></g><g><title>mi_page_fresh (11 samples, 7.43%)</title><rect x="41.2162%" y="501" width="7.4324%" height="15" fill="rgb(240,54,50)" fg:x="61" fg:w="11"/><text x="41.4662%" y="511.50">mi_page_fr..</text></g><g><title>mi_page_fresh_alloc (11 samples, 7.43%)</title><rect x="41.2162%" y="485" width="7.4324%" height="15" fill="rgb(233,84,52)" fg:x="61" fg:w="11"/><text x="41.4662%" y="495.50">mi_page_fr..</text></g><g><title>mi_segments_page_alloc (6 samples, 4.05%)</title><rect x="44.5946%" y="469" width="4.0541%" height="15" fill="rgb(207,117,47)" fg:x="66" fg:w="6"/><text x="44.8446%" y="479.50">mi_s..</text></g><g><title>mi_segment_reclaim_or_alloc (6 samples, 4.05%)</title><rect x="44.5946%" y="453" width="4.0541%" height="15" fill="rgb(249,43,39)" fg:x="66" fg:w="6"/><text x="44.8446%" y="463.50">mi_s..</text></g><g><title>mi_segment_alloc (6 samples, 4.05%)</title><rect x="44.5946%" y="437" width="4.0541%" height="15" fill="rgb(209,38,44)" fg:x="66" fg:w="6"/><text x="44.8446%" y="447.50">mi_s..</text></g><g><title>mi_segment_init (6 samples, 4.05%)</title><rect x="44.5946%" y="421" width="4.0541%" height="15" fill="rgb(236,212,23)" fg:x="66" fg:w="6"/><text x="44.8446%" y="431.50">mi_s..</text></g><g><title>memset (6 samples, 4.05%)</title><rect x="44.5946%" y="405" width="4.0541%" height="15" fill="rgb(242,79,21)" fg:x="66" fg:w="6"/><text x="44.8446%" y="415.50">mems..</text></g><g><title>[libc.so.6] (6 samples, 4.05%)</title><rect x="44.5946%" y="389" width="4.0541%" height="15" fill="rgb(211,96,35)" fg:x="66" fg:w="6"/><text x="44.8446%" y="399.50">[lib..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="373" width="3.3784%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="5"/><text x="45.5203%" y="383.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="357" width="3.3784%" height="15" fill="rgb(211,81,21)" fg:x="67" fg:w="5"/><text x="45.5203%" y="367.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="341" width="3.3784%" height="15" fill="rgb(208,190,38)" fg:x="67" fg:w="5"/><text x="45.5203%" y="351.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="325" width="3.3784%" height="15" fill="rgb(235,213,38)" fg:x="67" fg:w="5"/><text x="45.5203%" y="335.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="309" width="3.3784%" height="15" fill="rgb(237,122,38)" fg:x="67" fg:w="5"/><text x="45.5203%" y="319.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="45.2703%" y="293" width="3.3784%" height="15" fill="rgb(244,218,35)" fg:x="67" fg:w="5"/><text x="45.5203%" y="303.50">[un..</text></g><g><title>_mi_memcpy_aligned (5 samples, 3.38%)</title><rect x="48.6486%" y="517" width="3.3784%" height="15" fill="rgb(240,68,47)" fg:x="72" fg:w="5"/><text x="48.8986%" y="527.50">_mi..</text></g><g><title>_mi_memcpy (5 samples, 3.38%)</title><rect x="48.6486%" y="501" width="3.3784%" height="15" fill="rgb(210,16,53)" fg:x="72" fg:w="5"/><text x="48.8986%" y="511.50">_mi..</text></g><g><title>memcpy (5 samples, 3.38%)</title><rect x="48.6486%" y="485" width="3.3784%" height="15" fill="rgb(235,124,12)" fg:x="72" fg:w="5"/><text x="48.8986%" y="495.50">mem..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="48.6486%" y="469" width="3.3784%" height="15" fill="rgb(224,169,11)" fg:x="72" fg:w="5"/><text x="48.8986%" y="479.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="48.6486%" y="453" width="3.3784%" height="15" fill="rgb(250,166,2)" fg:x="72" fg:w="5"/><text x="48.8986%" y="463.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="48.6486%" y="437" width="3.3784%" height="15" fill="rgb(242,216,29)" fg:x="72" fg:w="5"/><text x="48.8986%" y="447.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="48.6486%" y="421" width="3.3784%" height="15" fill="rgb(230,116,27)" fg:x="72" fg:w="5"/><text x="48.8986%" y="431.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="48.6486%" y="405" width="3.3784%" height="15" fill="rgb(228,99,48)" fg:x="72" fg:w="5"/><text x="48.8986%" y="415.50">[un..</text></g><g><title>_mi_random_next (1 samples, 0.68%)</title><rect x="52.0270%" y="517" width="0.6757%" height="15" fill="rgb(253,11,6)" fg:x="77" fg:w="1"/><text x="52.2770%" y="527.50"></text></g><g><title>chacha_next32 (1 samples, 0.68%)</title><rect x="52.0270%" y="501" width="0.6757%" height="15" fill="rgb(247,143,39)" fg:x="77" fg:w="1"/><text x="52.2770%" y="511.50"></text></g><g><title>chacha_block (1 samples, 0.68%)</title><rect x="52.0270%" y="485" width="0.6757%" height="15" fill="rgb(236,97,10)" fg:x="77" fg:w="1"/><text x="52.2770%" y="495.50"></text></g><g><title>qround (1 samples, 0.68%)</title><rect x="52.0270%" y="469" width="0.6757%" height="15" fill="rgb(233,208,19)" fg:x="77" fg:w="1"/><text x="52.2770%" y="479.50"></text></g><g><title>rotl (1 samples, 0.68%)</title><rect x="52.0270%" y="453" width="0.6757%" height="15" fill="rgb(216,164,2)" fg:x="77" fg:w="1"/><text x="52.2770%" y="463.50"></text></g><g><title>rayon_core::job::JobFifo::new (18 samples, 12.16%)</title><rect x="41.2162%" y="693" width="12.1622%" height="15" fill="rgb(220,129,5)" fg:x="61" fg:w="18"/><text x="41.4662%" y="703.50">rayon_core::job::J..</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (18 samples, 12.16%)</title><rect x="41.2162%" y="677" width="12.1622%" height="15" fill="rgb(242,17,10)" fg:x="61" fg:w="18"/><text x="41.4662%" y="687.50">crossbeam_deque::d..</text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (18 samples, 12.16%)</title><rect x="41.2162%" y="661" width="12.1622%" height="15" fill="rgb(242,107,0)" fg:x="61" fg:w="18"/><text x="41.4662%" y="671.50">&lt;crossbeam_deque::..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 12.16%)</title><rect x="41.2162%" y="645" width="12.1622%" height="15" fill="rgb(251,28,31)" fg:x="61" fg:w="18"/><text x="41.4662%" y="655.50">alloc::boxed::Box&lt;..</text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 12.16%)</title><rect x="41.2162%" y="629" width="12.1622%" height="15" fill="rgb(233,223,10)" fg:x="61" fg:w="18"/><text x="41.4662%" y="639.50">alloc::alloc::exch..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 12.16%)</title><rect x="41.2162%" y="613" width="12.1622%" height="15" fill="rgb(215,21,27)" fg:x="61" fg:w="18"/><text x="41.4662%" y="623.50">&lt;alloc::alloc::Glo..</text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 12.16%)</title><rect x="41.2162%" y="597" width="12.1622%" height="15" fill="rgb(232,23,21)" fg:x="61" fg:w="18"/><text x="41.4662%" y="607.50">alloc::alloc::Glob..</text></g><g><title>alloc::alloc::alloc (18 samples, 12.16%)</title><rect x="41.2162%" y="581" width="12.1622%" height="15" fill="rgb(244,5,23)" fg:x="61" fg:w="18"/><text x="41.4662%" y="591.50">alloc::alloc::alloc</text></g><g><title>_mi_malloc_generic (18 samples, 12.16%)</title><rect x="41.2162%" y="565" width="12.1622%" height="15" fill="rgb(226,81,46)" fg:x="61" fg:w="18"/><text x="41.4662%" y="575.50">_mi_malloc_generic</text></g><g><title>mi_thread_init (7 samples, 4.73%)</title><rect x="48.6486%" y="549" width="4.7297%" height="15" fill="rgb(247,70,30)" fg:x="72" fg:w="7"/><text x="48.8986%" y="559.50">mi_thr..</text></g><g><title>_mi_heap_init (7 samples, 4.73%)</title><rect x="48.6486%" y="533" width="4.7297%" height="15" fill="rgb(212,68,19)" fg:x="72" fg:w="7"/><text x="48.8986%" y="543.50">_mi_he..</text></g><g><title>mi_thread_data_alloc (1 samples, 0.68%)</title><rect x="52.7027%" y="517" width="0.6757%" height="15" fill="rgb(240,187,13)" fg:x="78" fg:w="1"/><text x="52.9527%" y="527.50"></text></g><g><title>_mi_os_alloc (1 samples, 0.68%)</title><rect x="52.7027%" y="501" width="0.6757%" height="15" fill="rgb(223,113,26)" fg:x="78" fg:w="1"/><text x="52.9527%" y="511.50"></text></g><g><title>mi_os_mem_alloc (1 samples, 0.68%)</title><rect x="52.7027%" y="485" width="0.6757%" height="15" fill="rgb(206,192,2)" fg:x="78" fg:w="1"/><text x="52.9527%" y="495.50"></text></g><g><title>mi_unix_mmap (1 samples, 0.68%)</title><rect x="52.7027%" y="469" width="0.6757%" height="15" fill="rgb(241,108,4)" fg:x="78" fg:w="1"/><text x="52.9527%" y="479.50"></text></g><g><title>mi_unix_mmapx (1 samples, 0.68%)</title><rect x="52.7027%" y="453" width="0.6757%" height="15" fill="rgb(247,173,49)" fg:x="78" fg:w="1"/><text x="52.9527%" y="463.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.68%)</title><rect x="52.7027%" y="437" width="0.6757%" height="15" fill="rgb(224,114,35)" fg:x="78" fg:w="1"/><text x="52.9527%" y="447.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.68%)</title><rect x="52.7027%" y="421" width="0.6757%" height="15" fill="rgb(245,159,27)" fg:x="78" fg:w="1"/><text x="52.9527%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="405" width="0.6757%" height="15" fill="rgb(245,172,44)" fg:x="78" fg:w="1"/><text x="52.9527%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="389" width="0.6757%" height="15" fill="rgb(236,23,11)" fg:x="78" fg:w="1"/><text x="52.9527%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="373" width="0.6757%" height="15" fill="rgb(205,117,38)" fg:x="78" fg:w="1"/><text x="52.9527%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="357" width="0.6757%" height="15" fill="rgb(237,72,25)" fg:x="78" fg:w="1"/><text x="52.9527%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="341" width="0.6757%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="1"/><text x="52.9527%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="325" width="0.6757%" height="15" fill="rgb(217,125,39)" fg:x="78" fg:w="1"/><text x="52.9527%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="309" width="0.6757%" height="15" fill="rgb(235,36,10)" fg:x="78" fg:w="1"/><text x="52.9527%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="293" width="0.6757%" height="15" fill="rgb(251,123,47)" fg:x="78" fg:w="1"/><text x="52.9527%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="277" width="0.6757%" height="15" fill="rgb(221,13,13)" fg:x="78" fg:w="1"/><text x="52.9527%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="52.7027%" y="261" width="0.6757%" height="15" fill="rgb(238,131,9)" fg:x="78" fg:w="1"/><text x="52.9527%" y="271.50"></text></g><g><title>std::panic::catch_unwind (42 samples, 28.38%)</title><rect x="41.2162%" y="837" width="28.3784%" height="15" fill="rgb(211,50,8)" fg:x="61" fg:w="42"/><text x="41.4662%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (42 samples, 28.38%)</title><rect x="41.2162%" y="821" width="28.3784%" height="15" fill="rgb(245,182,24)" fg:x="61" fg:w="42"/><text x="41.4662%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (42 samples, 28.38%)</title><rect x="41.2162%" y="805" width="28.3784%" height="15" fill="rgb(242,14,37)" fg:x="61" fg:w="42"/><text x="41.4662%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (42 samples, 28.38%)</title><rect x="41.2162%" y="789" width="28.3784%" height="15" fill="rgb(246,228,12)" fg:x="61" fg:w="42"/><text x="41.4662%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (42 samples, 28.38%)</title><rect x="41.2162%" y="773" width="28.3784%" height="15" fill="rgb(213,55,15)" fg:x="61" fg:w="42"/><text x="41.4662%" y="783.50">std::thread::Builder::spawn_unchecked_::{{clos..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 28.38%)</title><rect x="41.2162%" y="757" width="28.3784%" height="15" fill="rgb(209,9,3)" fg:x="61" fg:w="42"/><text x="41.4662%" y="767.50">std::sys_common::backtrace::__rust_begin_short..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (42 samples, 28.38%)</title><rect x="41.2162%" y="741" width="28.3784%" height="15" fill="rgb(230,59,30)" fg:x="61" fg:w="42"/><text x="41.4662%" y="751.50">&lt;rayon_core::registry::DefaultSpawn as rayon_c..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (42 samples, 28.38%)</title><rect x="41.2162%" y="725" width="28.3784%" height="15" fill="rgb(209,121,21)" fg:x="61" fg:w="42"/><text x="41.4662%" y="735.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (42 samples, 28.38%)</title><rect x="41.2162%" y="709" width="28.3784%" height="15" fill="rgb(220,109,13)" fg:x="61" fg:w="42"/><text x="41.4662%" y="719.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (24 samples, 16.22%)</title><rect x="53.3784%" y="693" width="16.2162%" height="15" fill="rgb(232,18,1)" fg:x="79" fg:w="24"/><text x="53.6284%" y="703.50">rayon_core::registry::Wor..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (24 samples, 16.22%)</title><rect x="53.3784%" y="677" width="16.2162%" height="15" fill="rgb(215,41,42)" fg:x="79" fg:w="24"/><text x="53.6284%" y="687.50">rayon_core::registry::Wor..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (24 samples, 16.22%)</title><rect x="53.3784%" y="661" width="16.2162%" height="15" fill="rgb(224,123,36)" fg:x="79" fg:w="24"/><text x="53.6284%" y="671.50">rayon_core::sleep::Sleep:..</text></g><g><title>rayon_core::sleep::Sleep::sleep (24 samples, 16.22%)</title><rect x="53.3784%" y="645" width="16.2162%" height="15" fill="rgb(240,125,3)" fg:x="79" fg:w="24"/><text x="53.6284%" y="655.50">rayon_core::sleep::Sleep:..</text></g><g><title>std::sync::condvar::Condvar::wait (24 samples, 16.22%)</title><rect x="53.3784%" y="629" width="16.2162%" height="15" fill="rgb(205,98,50)" fg:x="79" fg:w="24"/><text x="53.6284%" y="639.50">std::sync::condvar::Condv..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (24 samples, 16.22%)</title><rect x="53.3784%" y="613" width="16.2162%" height="15" fill="rgb(205,185,37)" fg:x="79" fg:w="24"/><text x="53.6284%" y="623.50">std::sys::unix::locks::fu..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (24 samples, 16.22%)</title><rect x="53.3784%" y="597" width="16.2162%" height="15" fill="rgb(238,207,15)" fg:x="79" fg:w="24"/><text x="53.6284%" y="607.50">std::sys::unix::locks::fu..</text></g><g><title>std::sys::unix::futex::futex_wait (24 samples, 16.22%)</title><rect x="53.3784%" y="581" width="16.2162%" height="15" fill="rgb(213,199,42)" fg:x="79" fg:w="24"/><text x="53.6284%" y="591.50">std::sys::unix::futex::fu..</text></g><g><title>syscall (24 samples, 16.22%)</title><rect x="53.3784%" y="565" width="16.2162%" height="15" fill="rgb(235,201,11)" fg:x="79" fg:w="24"/><text x="53.6284%" y="575.50">syscall</text></g><g><title>[unknown] (24 samples, 16.22%)</title><rect x="53.3784%" y="549" width="16.2162%" height="15" fill="rgb(207,46,11)" fg:x="79" fg:w="24"/><text x="53.6284%" y="559.50">[unknown]</text></g><g><title>[unknown] (24 samples, 16.22%)</title><rect x="53.3784%" y="533" width="16.2162%" height="15" fill="rgb(241,35,35)" fg:x="79" fg:w="24"/><text x="53.6284%" y="543.50">[unknown]</text></g><g><title>[unknown] (24 samples, 16.22%)</title><rect x="53.3784%" y="517" width="16.2162%" height="15" fill="rgb(243,32,47)" fg:x="79" fg:w="24"/><text x="53.6284%" y="527.50">[unknown]</text></g><g><title>[unknown] (24 samples, 16.22%)</title><rect x="53.3784%" y="501" width="16.2162%" height="15" fill="rgb(247,202,23)" fg:x="79" fg:w="24"/><text x="53.6284%" y="511.50">[unknown]</text></g><g><title>[unknown] (24 samples, 16.22%)</title><rect x="53.3784%" y="485" width="16.2162%" height="15" fill="rgb(219,102,11)" fg:x="79" fg:w="24"/><text x="53.6284%" y="495.50">[unknown]</text></g><g><title>[unknown] (19 samples, 12.84%)</title><rect x="56.7568%" y="469" width="12.8378%" height="15" fill="rgb(243,110,44)" fg:x="84" fg:w="19"/><text x="57.0068%" y="479.50">[unknown]</text></g><g><title>[unknown] (19 samples, 12.84%)</title><rect x="56.7568%" y="453" width="12.8378%" height="15" fill="rgb(222,74,54)" fg:x="84" fg:w="19"/><text x="57.0068%" y="463.50">[unknown]</text></g><g><title>[unknown] (13 samples, 8.78%)</title><rect x="60.8108%" y="437" width="8.7838%" height="15" fill="rgb(216,99,12)" fg:x="90" fg:w="13"/><text x="61.0608%" y="447.50">[unknown]</text></g><g><title>[unknown] (7 samples, 4.73%)</title><rect x="64.8649%" y="421" width="4.7297%" height="15" fill="rgb(226,22,26)" fg:x="96" fg:w="7"/><text x="65.1149%" y="431.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.73%)</title><rect x="64.8649%" y="405" width="4.7297%" height="15" fill="rgb(217,163,10)" fg:x="96" fg:w="7"/><text x="65.1149%" y="415.50">[unkno..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="389" width="4.0541%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="6"/><text x="65.7905%" y="399.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="373" width="4.0541%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="6"/><text x="65.7905%" y="383.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="357" width="4.0541%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="6"/><text x="65.7905%" y="367.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="341" width="4.0541%" height="15" fill="rgb(229,68,48)" fg:x="97" fg:w="6"/><text x="65.7905%" y="351.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="325" width="4.0541%" height="15" fill="rgb(252,8,32)" fg:x="97" fg:w="6"/><text x="65.7905%" y="335.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="65.5405%" y="309" width="4.0541%" height="15" fill="rgb(223,20,43)" fg:x="97" fg:w="6"/><text x="65.7905%" y="319.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="677" width="3.3784%" height="15" fill="rgb(229,81,49)" fg:x="103" fg:w="5"/><text x="69.8446%" y="687.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="661" width="3.3784%" height="15" fill="rgb(236,28,36)" fg:x="103" fg:w="5"/><text x="69.8446%" y="671.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="645" width="3.3784%" height="15" fill="rgb(249,185,26)" fg:x="103" fg:w="5"/><text x="69.8446%" y="655.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="629" width="3.3784%" height="15" fill="rgb(249,174,33)" fg:x="103" fg:w="5"/><text x="69.8446%" y="639.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="613" width="3.3784%" height="15" fill="rgb(233,201,37)" fg:x="103" fg:w="5"/><text x="69.8446%" y="623.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="597" width="3.3784%" height="15" fill="rgb(221,78,26)" fg:x="103" fg:w="5"/><text x="69.8446%" y="607.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="581" width="3.3784%" height="15" fill="rgb(250,127,30)" fg:x="103" fg:w="5"/><text x="69.8446%" y="591.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="565" width="3.3784%" height="15" fill="rgb(230,49,44)" fg:x="103" fg:w="5"/><text x="69.8446%" y="575.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="549" width="3.3784%" height="15" fill="rgb(229,67,23)" fg:x="103" fg:w="5"/><text x="69.8446%" y="559.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="533" width="3.3784%" height="15" fill="rgb(249,83,47)" fg:x="103" fg:w="5"/><text x="69.8446%" y="543.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="517" width="3.3784%" height="15" fill="rgb(215,43,3)" fg:x="103" fg:w="5"/><text x="69.8446%" y="527.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="501" width="3.3784%" height="15" fill="rgb(238,154,13)" fg:x="103" fg:w="5"/><text x="69.8446%" y="511.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="69.5946%" y="485" width="3.3784%" height="15" fill="rgb(219,56,2)" fg:x="103" fg:w="5"/><text x="69.8446%" y="495.50">[un..</text></g><g><title>std::sys::unix::thread::guard::current (6 samples, 4.05%)</title><rect x="69.5946%" y="837" width="4.0541%" height="15" fill="rgb(233,0,4)" fg:x="103" fg:w="6"/><text x="69.8446%" y="847.50">std:..</text></g><g><title>__pthread_getattr_np (6 samples, 4.05%)</title><rect x="69.5946%" y="821" width="4.0541%" height="15" fill="rgb(235,30,7)" fg:x="103" fg:w="6"/><text x="69.8446%" y="831.50">__pt..</text></g><g><title>__GI___libc_malloc (6 samples, 4.05%)</title><rect x="69.5946%" y="805" width="4.0541%" height="15" fill="rgb(250,79,13)" fg:x="103" fg:w="6"/><text x="69.8446%" y="815.50">__GI..</text></g><g><title>tcache_init (6 samples, 4.05%)</title><rect x="69.5946%" y="789" width="4.0541%" height="15" fill="rgb(211,146,34)" fg:x="103" fg:w="6"/><text x="69.8446%" y="799.50">tcac..</text></g><g><title>tcache_init (6 samples, 4.05%)</title><rect x="69.5946%" y="773" width="4.0541%" height="15" fill="rgb(228,22,38)" fg:x="103" fg:w="6"/><text x="69.8446%" y="783.50">tcac..</text></g><g><title>arena_get2 (6 samples, 4.05%)</title><rect x="69.5946%" y="757" width="4.0541%" height="15" fill="rgb(235,168,5)" fg:x="103" fg:w="6"/><text x="69.8446%" y="767.50">aren..</text></g><g><title>arena_get2 (6 samples, 4.05%)</title><rect x="69.5946%" y="741" width="4.0541%" height="15" fill="rgb(221,155,16)" fg:x="103" fg:w="6"/><text x="69.8446%" y="751.50">aren..</text></g><g><title>_int_new_arena (6 samples, 4.05%)</title><rect x="69.5946%" y="725" width="4.0541%" height="15" fill="rgb(215,215,53)" fg:x="103" fg:w="6"/><text x="69.8446%" y="735.50">_int..</text></g><g><title>new_heap (6 samples, 4.05%)</title><rect x="69.5946%" y="709" width="4.0541%" height="15" fill="rgb(223,4,10)" fg:x="103" fg:w="6"/><text x="69.8446%" y="719.50">new_..</text></g><g><title>alloc_new_heap (6 samples, 4.05%)</title><rect x="69.5946%" y="693" width="4.0541%" height="15" fill="rgb(234,103,6)" fg:x="103" fg:w="6"/><text x="69.8446%" y="703.50">allo..</text></g><g><title>__GI___munmap (1 samples, 0.68%)</title><rect x="72.9730%" y="677" width="0.6757%" height="15" fill="rgb(227,97,0)" fg:x="108" fg:w="1"/><text x="73.2230%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="661" width="0.6757%" height="15" fill="rgb(234,150,53)" fg:x="108" fg:w="1"/><text x="73.2230%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="645" width="0.6757%" height="15" fill="rgb(228,201,54)" fg:x="108" fg:w="1"/><text x="73.2230%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="629" width="0.6757%" height="15" fill="rgb(222,22,37)" fg:x="108" fg:w="1"/><text x="73.2230%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="613" width="0.6757%" height="15" fill="rgb(237,53,32)" fg:x="108" fg:w="1"/><text x="73.2230%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="597" width="0.6757%" height="15" fill="rgb(233,25,53)" fg:x="108" fg:w="1"/><text x="73.2230%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="581" width="0.6757%" height="15" fill="rgb(210,40,34)" fg:x="108" fg:w="1"/><text x="73.2230%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="565" width="0.6757%" height="15" fill="rgb(241,220,44)" fg:x="108" fg:w="1"/><text x="73.2230%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="72.9730%" y="549" width="0.6757%" height="15" fill="rgb(235,28,35)" fg:x="108" fg:w="1"/><text x="73.2230%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 33.11%)</title><rect x="41.2162%" y="901" width="33.1081%" height="15" fill="rgb(210,56,17)" fg:x="61" fg:w="49"/><text x="41.4662%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 33.11%)</title><rect x="41.2162%" y="885" width="33.1081%" height="15" fill="rgb(224,130,29)" fg:x="61" fg:w="49"/><text x="41.4662%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49 samples, 33.11%)</title><rect x="41.2162%" y="869" width="33.1081%" height="15" fill="rgb(235,212,8)" fg:x="61" fg:w="49"/><text x="41.4662%" y="879.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (49 samples, 33.11%)</title><rect x="41.2162%" y="853" width="33.1081%" height="15" fill="rgb(223,33,50)" fg:x="61" fg:w="49"/><text x="41.4662%" y="863.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::thread::Thread::cname (1 samples, 0.68%)</title><rect x="73.6486%" y="837" width="0.6757%" height="15" fill="rgb(219,149,13)" fg:x="109" fg:w="1"/><text x="73.8986%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_deref (1 samples, 0.68%)</title><rect x="73.6486%" y="821" width="0.6757%" height="15" fill="rgb(250,156,29)" fg:x="109" fg:w="1"/><text x="73.8986%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.68%)</title><rect x="73.6486%" y="805" width="0.6757%" height="15" fill="rgb(216,193,19)" fg:x="109" fg:w="1"/><text x="73.8986%" y="815.50"></text></g><g><title>__GI___mmap64 (6 samples, 4.05%)</title><rect x="74.3243%" y="837" width="4.0541%" height="15" fill="rgb(216,135,14)" fg:x="110" fg:w="6"/><text x="74.5743%" y="847.50">__GI..</text></g><g><title>__GI___mmap64 (6 samples, 4.05%)</title><rect x="74.3243%" y="821" width="4.0541%" height="15" fill="rgb(241,47,5)" fg:x="110" fg:w="6"/><text x="74.5743%" y="831.50">__GI..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="74.3243%" y="805" width="4.0541%" height="15" fill="rgb(233,42,35)" fg:x="110" fg:w="6"/><text x="74.5743%" y="815.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="74.3243%" y="789" width="4.0541%" height="15" fill="rgb(231,13,6)" fg:x="110" fg:w="6"/><text x="74.5743%" y="799.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="74.3243%" y="773" width="4.0541%" height="15" fill="rgb(207,181,40)" fg:x="110" fg:w="6"/><text x="74.5743%" y="783.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="74.3243%" y="757" width="4.0541%" height="15" fill="rgb(254,173,49)" fg:x="110" fg:w="6"/><text x="74.5743%" y="767.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.05%)</title><rect x="74.3243%" y="741" width="4.0541%" height="15" fill="rgb(221,1,38)" fg:x="110" fg:w="6"/><text x="74.5743%" y="751.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="75.0000%" y="725" width="3.3784%" height="15" fill="rgb(206,124,46)" fg:x="111" fg:w="5"/><text x="75.2500%" y="735.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="75.0000%" y="709" width="3.3784%" height="15" fill="rgb(249,21,11)" fg:x="111" fg:w="5"/><text x="75.2500%" y="719.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="75.0000%" y="693" width="3.3784%" height="15" fill="rgb(222,201,40)" fg:x="111" fg:w="5"/><text x="75.2500%" y="703.50">[un..</text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="77.0270%" y="677" width="1.3514%" height="15" fill="rgb(235,61,29)" fg:x="114" fg:w="2"/><text x="77.2770%" y="687.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="77.0270%" y="661" width="1.3514%" height="15" fill="rgb(219,207,3)" fg:x="114" fg:w="2"/><text x="77.2770%" y="671.50"></text></g><g><title>__clone3 (57 samples, 38.51%)</title><rect x="41.2162%" y="949" width="38.5135%" height="15" fill="rgb(222,56,46)" fg:x="61" fg:w="57"/><text x="41.4662%" y="959.50">__clone3</text></g><g><title>start_thread (57 samples, 38.51%)</title><rect x="41.2162%" y="933" width="38.5135%" height="15" fill="rgb(239,76,54)" fg:x="61" fg:w="57"/><text x="41.4662%" y="943.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (57 samples, 38.51%)</title><rect x="41.2162%" y="917" width="38.5135%" height="15" fill="rgb(231,124,27)" fg:x="61" fg:w="57"/><text x="41.4662%" y="927.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (8 samples, 5.41%)</title><rect x="74.3243%" y="901" width="5.4054%" height="15" fill="rgb(249,195,6)" fg:x="110" fg:w="8"/><text x="74.5743%" y="911.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (8 samples, 5.41%)</title><rect x="74.3243%" y="885" width="5.4054%" height="15" fill="rgb(237,174,47)" fg:x="110" fg:w="8"/><text x="74.5743%" y="895.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (8 samples, 5.41%)</title><rect x="74.3243%" y="869" width="5.4054%" height="15" fill="rgb(206,201,31)" fg:x="110" fg:w="8"/><text x="74.5743%" y="879.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (8 samples, 5.41%)</title><rect x="74.3243%" y="853" width="5.4054%" height="15" fill="rgb(231,57,52)" fg:x="110" fg:w="8"/><text x="74.5743%" y="863.50">std::sy..</text></g><g><title>__GI___mprotect (2 samples, 1.35%)</title><rect x="78.3784%" y="837" width="1.3514%" height="15" fill="rgb(248,177,22)" fg:x="116" fg:w="2"/><text x="78.6284%" y="847.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="821" width="1.3514%" height="15" fill="rgb(215,211,37)" fg:x="116" fg:w="2"/><text x="78.6284%" y="831.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="805" width="1.3514%" height="15" fill="rgb(241,128,51)" fg:x="116" fg:w="2"/><text x="78.6284%" y="815.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="789" width="1.3514%" height="15" fill="rgb(227,165,31)" fg:x="116" fg:w="2"/><text x="78.6284%" y="799.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="773" width="1.3514%" height="15" fill="rgb(228,167,24)" fg:x="116" fg:w="2"/><text x="78.6284%" y="783.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="757" width="1.3514%" height="15" fill="rgb(228,143,12)" fg:x="116" fg:w="2"/><text x="78.6284%" y="767.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="741" width="1.3514%" height="15" fill="rgb(249,149,8)" fg:x="116" fg:w="2"/><text x="78.6284%" y="751.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="725" width="1.3514%" height="15" fill="rgb(243,35,44)" fg:x="116" fg:w="2"/><text x="78.6284%" y="735.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="78.3784%" y="709" width="1.3514%" height="15" fill="rgb(246,89,9)" fg:x="116" fg:w="2"/><text x="78.6284%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;memmap2::Mmap&gt;&gt; (1 samples, 0.68%)</title><rect x="79.7297%" y="485" width="0.6757%" height="15" fill="rgb(233,213,13)" fg:x="118" fg:w="1"/><text x="79.9797%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="79.7297%" y="469" width="0.6757%" height="15" fill="rgb(233,141,41)" fg:x="118" fg:w="1"/><text x="79.9797%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.68%)</title><rect x="79.7297%" y="453" width="0.6757%" height="15" fill="rgb(239,167,4)" fg:x="118" fg:w="1"/><text x="79.9797%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (1 samples, 0.68%)</title><rect x="79.7297%" y="437" width="0.6757%" height="15" fill="rgb(209,217,16)" fg:x="118" fg:w="1"/><text x="79.9797%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (1 samples, 0.68%)</title><rect x="79.7297%" y="421" width="0.6757%" height="15" fill="rgb(219,88,35)" fg:x="118" fg:w="1"/><text x="79.9797%" y="431.50"></text></g><g><title>__GI___munmap (1 samples, 0.68%)</title><rect x="79.7297%" y="405" width="0.6757%" height="15" fill="rgb(220,193,23)" fg:x="118" fg:w="1"/><text x="79.9797%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="389" width="0.6757%" height="15" fill="rgb(230,90,52)" fg:x="118" fg:w="1"/><text x="79.9797%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="373" width="0.6757%" height="15" fill="rgb(252,106,19)" fg:x="118" fg:w="1"/><text x="79.9797%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="357" width="0.6757%" height="15" fill="rgb(206,74,20)" fg:x="118" fg:w="1"/><text x="79.9797%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="341" width="0.6757%" height="15" fill="rgb(230,138,44)" fg:x="118" fg:w="1"/><text x="79.9797%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="325" width="0.6757%" height="15" fill="rgb(235,182,43)" fg:x="118" fg:w="1"/><text x="79.9797%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="309" width="0.6757%" height="15" fill="rgb(242,16,51)" fg:x="118" fg:w="1"/><text x="79.9797%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="293" width="0.6757%" height="15" fill="rgb(248,9,4)" fg:x="118" fg:w="1"/><text x="79.9797%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="277" width="0.6757%" height="15" fill="rgb(210,31,22)" fg:x="118" fg:w="1"/><text x="79.9797%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="261" width="0.6757%" height="15" fill="rgb(239,54,39)" fg:x="118" fg:w="1"/><text x="79.9797%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="245" width="0.6757%" height="15" fill="rgb(230,99,41)" fg:x="118" fg:w="1"/><text x="79.9797%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="229" width="0.6757%" height="15" fill="rgb(253,106,12)" fg:x="118" fg:w="1"/><text x="79.9797%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="213" width="0.6757%" height="15" fill="rgb(213,46,41)" fg:x="118" fg:w="1"/><text x="79.9797%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="79.7297%" y="197" width="0.6757%" height="15" fill="rgb(215,133,35)" fg:x="118" fg:w="1"/><text x="79.9797%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (2 samples, 1.35%)</title><rect x="79.7297%" y="501" width="1.3514%" height="15" fill="rgb(213,28,5)" fg:x="118" fg:w="2"/><text x="79.9797%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="485" width="0.6757%" height="15" fill="rgb(215,77,49)" fg:x="119" fg:w="1"/><text x="80.6554%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="469" width="0.6757%" height="15" fill="rgb(248,100,22)" fg:x="119" fg:w="1"/><text x="80.6554%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="453" width="0.6757%" height="15" fill="rgb(208,67,9)" fg:x="119" fg:w="1"/><text x="80.6554%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="437" width="0.6757%" height="15" fill="rgb(219,133,21)" fg:x="119" fg:w="1"/><text x="80.6554%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="80.4054%" y="421" width="0.6757%" height="15" fill="rgb(246,46,29)" fg:x="119" fg:w="1"/><text x="80.6554%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.68%)</title><rect x="80.4054%" y="405" width="0.6757%" height="15" fill="rgb(246,185,52)" fg:x="119" fg:w="1"/><text x="80.6554%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.68%)</title><rect x="80.4054%" y="389" width="0.6757%" height="15" fill="rgb(252,136,11)" fg:x="119" fg:w="1"/><text x="80.6554%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.68%)</title><rect x="80.4054%" y="373" width="0.6757%" height="15" fill="rgb(219,138,53)" fg:x="119" fg:w="1"/><text x="80.6554%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="357" width="0.6757%" height="15" fill="rgb(211,51,23)" fg:x="119" fg:w="1"/><text x="80.6554%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="341" width="0.6757%" height="15" fill="rgb(247,221,28)" fg:x="119" fg:w="1"/><text x="80.6554%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="325" width="0.6757%" height="15" fill="rgb(251,222,45)" fg:x="119" fg:w="1"/><text x="80.6554%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="80.4054%" y="309" width="0.6757%" height="15" fill="rgb(217,162,53)" fg:x="119" fg:w="1"/><text x="80.6554%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="293" width="0.6757%" height="15" fill="rgb(229,93,14)" fg:x="119" fg:w="1"/><text x="80.6554%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="277" width="0.6757%" height="15" fill="rgb(209,67,49)" fg:x="119" fg:w="1"/><text x="80.6554%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;demoparser::parsing::variants::PropData&gt;&gt; (1 samples, 0.68%)</title><rect x="80.4054%" y="261" width="0.6757%" height="15" fill="rgb(213,87,29)" fg:x="119" fg:w="1"/><text x="80.6554%" y="271.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.68%)</title><rect x="81.7568%" y="245" width="0.6757%" height="15" fill="rgb(205,151,52)" fg:x="121" fg:w="1"/><text x="82.0068%" y="255.50"></text></g><g><title>demoparser::parsing::entities::parse_packet_entities (3 samples, 2.03%)</title><rect x="81.0811%" y="293" width="2.0270%" height="15" fill="rgb(253,215,39)" fg:x="120" fg:w="3"/><text x="81.3311%" y="303.50">d..</text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (3 samples, 2.03%)</title><rect x="81.0811%" y="277" width="2.0270%" height="15" fill="rgb(221,220,41)" fg:x="120" fg:w="3"/><text x="81.3311%" y="287.50">d..</text></g><g><title>demoparser::parsing::entities::parse_ent_props (3 samples, 2.03%)</title><rect x="81.0811%" y="261" width="2.0270%" height="15" fill="rgb(218,133,21)" fg:x="120" fg:w="3"/><text x="81.3311%" y="271.50">d..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.68%)</title><rect x="82.4324%" y="245" width="0.6757%" height="15" fill="rgb(221,193,43)" fg:x="122" fg:w="1"/><text x="82.6824%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="82.4324%" y="229" width="0.6757%" height="15" fill="rgb(240,128,52)" fg:x="122" fg:w="1"/><text x="82.6824%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.68%)</title><rect x="82.4324%" y="213" width="0.6757%" height="15" fill="rgb(253,114,12)" fg:x="122" fg:w="1"/><text x="82.6824%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="82.4324%" y="197" width="0.6757%" height="15" fill="rgb(215,223,47)" fg:x="122" fg:w="1"/><text x="82.6824%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.68%)</title><rect x="82.4324%" y="181" width="0.6757%" height="15" fill="rgb(248,225,23)" fg:x="122" fg:w="1"/><text x="82.6824%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.68%)</title><rect x="82.4324%" y="165" width="0.6757%" height="15" fill="rgb(250,108,0)" fg:x="122" fg:w="1"/><text x="82.6824%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.68%)</title><rect x="82.4324%" y="149" width="0.6757%" height="15" fill="rgb(228,208,7)" fg:x="122" fg:w="1"/><text x="82.6824%" y="159.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.68%)</title><rect x="82.4324%" y="133" width="0.6757%" height="15" fill="rgb(244,45,10)" fg:x="122" fg:w="1"/><text x="82.6824%" y="143.50"></text></g><g><title>_mi_usable_size (1 samples, 0.68%)</title><rect x="82.4324%" y="117" width="0.6757%" height="15" fill="rgb(207,125,25)" fg:x="122" fg:w="1"/><text x="82.6824%" y="127.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.68%)</title><rect x="82.4324%" y="101" width="0.6757%" height="15" fill="rgb(210,195,18)" fg:x="122" fg:w="1"/><text x="82.6824%" y="111.50"></text></g><g><title>mi_slice_first (1 samples, 0.68%)</title><rect x="82.4324%" y="85" width="0.6757%" height="15" fill="rgb(249,80,12)" fg:x="122" fg:w="1"/><text x="82.6824%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 4.05%)</title><rect x="81.0811%" y="469" width="4.0541%" height="15" fill="rgb(221,65,9)" fg:x="120" fg:w="6"/><text x="81.3311%" y="479.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 4.05%)</title><rect x="81.0811%" y="453" width="4.0541%" height="15" fill="rgb(235,49,36)" fg:x="120" fg:w="6"/><text x="81.3311%" y="463.50">&lt;all..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 4.05%)</title><rect x="81.0811%" y="437" width="4.0541%" height="15" fill="rgb(225,32,20)" fg:x="120" fg:w="6"/><text x="81.3311%" y="447.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 4.05%)</title><rect x="81.0811%" y="421" width="4.0541%" height="15" fill="rgb(215,141,46)" fg:x="120" fg:w="6"/><text x="81.3311%" y="431.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 4.05%)</title><rect x="81.0811%" y="405" width="4.0541%" height="15" fill="rgb(250,160,47)" fg:x="120" fg:w="6"/><text x="81.3311%" y="415.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 4.05%)</title><rect x="81.0811%" y="389" width="4.0541%" height="15" fill="rgb(216,222,40)" fg:x="120" fg:w="6"/><text x="81.3311%" y="399.50">core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 4.05%)</title><rect x="81.0811%" y="373" width="4.0541%" height="15" fill="rgb(234,217,39)" fg:x="120" fg:w="6"/><text x="81.3311%" y="383.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 4.05%)</title><rect x="81.0811%" y="357" width="4.0541%" height="15" fill="rgb(207,178,40)" fg:x="120" fg:w="6"/><text x="81.3311%" y="367.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 4.05%)</title><rect x="81.0811%" y="341" width="4.0541%" height="15" fill="rgb(221,136,13)" fg:x="120" fg:w="6"/><text x="81.3311%" y="351.50">core..</text></g><g><title>demoparser::parsing::parser::Parser::compute_jobs::{{closure}} (6 samples, 4.05%)</title><rect x="81.0811%" y="325" width="4.0541%" height="15" fill="rgb(249,199,10)" fg:x="120" fg:w="6"/><text x="81.3311%" y="335.50">demo..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (6 samples, 4.05%)</title><rect x="81.0811%" y="309" width="4.0541%" height="15" fill="rgb(249,222,13)" fg:x="120" fg:w="6"/><text x="81.3311%" y="319.50">demo..</text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (3 samples, 2.03%)</title><rect x="83.1081%" y="293" width="2.0270%" height="15" fill="rgb(244,185,38)" fg:x="123" fg:w="3"/><text x="83.3581%" y="303.50">d..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 2.03%)</title><rect x="83.1081%" y="277" width="2.0270%" height="15" fill="rgb(236,202,9)" fg:x="123" fg:w="3"/><text x="83.3581%" y="287.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="84.4595%" y="261" width="0.6757%" height="15" fill="rgb(250,229,37)" fg:x="125" fg:w="1"/><text x="84.7095%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.68%)</title><rect x="84.4595%" y="245" width="0.6757%" height="15" fill="rgb(206,174,23)" fg:x="125" fg:w="1"/><text x="84.7095%" y="255.50"></text></g><g><title>demoparser::parsing::cache::ReadCache::find_delta_tick (1 samples, 0.68%)</title><rect x="85.1351%" y="453" width="0.6757%" height="15" fill="rgb(211,33,43)" fg:x="126" fg:w="1"/><text x="85.3851%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.68%)</title><rect x="85.1351%" y="437" width="0.6757%" height="15" fill="rgb(245,58,50)" fg:x="126" fg:w="1"/><text x="85.3851%" y="447.50"></text></g><g><title>demoparser::parsing::cache::ReadCache::find_delta_tick::{{closure}} (1 samples, 0.68%)</title><rect x="85.1351%" y="421" width="0.6757%" height="15" fill="rgb(244,68,36)" fg:x="126" fg:w="1"/><text x="85.3851%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (1 samples, 0.68%)</title><rect x="85.1351%" y="405" width="0.6757%" height="15" fill="rgb(232,229,15)" fg:x="126" fg:w="1"/><text x="85.3851%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.68%)</title><rect x="85.1351%" y="389" width="0.6757%" height="15" fill="rgb(254,30,23)" fg:x="126" fg:w="1"/><text x="85.3851%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 2.03%)</title><rect x="86.4865%" y="421" width="2.0270%" height="15" fill="rgb(235,160,14)" fg:x="128" fg:w="3"/><text x="86.7365%" y="431.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 2.03%)</title><rect x="86.4865%" y="405" width="2.0270%" height="15" fill="rgb(212,155,44)" fg:x="128" fg:w="3"/><text x="86.7365%" y="415.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 2.03%)</title><rect x="86.4865%" y="389" width="2.0270%" height="15" fill="rgb(226,2,50)" fg:x="128" fg:w="3"/><text x="86.7365%" y="399.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 2.03%)</title><rect x="86.4865%" y="373" width="2.0270%" height="15" fill="rgb(234,177,6)" fg:x="128" fg:w="3"/><text x="86.7365%" y="383.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 2.03%)</title><rect x="86.4865%" y="357" width="2.0270%" height="15" fill="rgb(217,24,9)" fg:x="128" fg:w="3"/><text x="86.7365%" y="367.50">a..</text></g><g><title>alloc::alloc::realloc (3 samples, 2.03%)</title><rect x="86.4865%" y="341" width="2.0270%" height="15" fill="rgb(220,13,46)" fg:x="128" fg:w="3"/><text x="86.7365%" y="351.50">a..</text></g><g><title>_mi_heap_realloc_zero (3 samples, 2.03%)</title><rect x="86.4865%" y="325" width="2.0270%" height="15" fill="rgb(239,221,27)" fg:x="128" fg:w="3"/><text x="86.7365%" y="335.50">_..</text></g><g><title>_mi_memcpy_aligned (3 samples, 2.03%)</title><rect x="86.4865%" y="309" width="2.0270%" height="15" fill="rgb(222,198,25)" fg:x="128" fg:w="3"/><text x="86.7365%" y="319.50">_..</text></g><g><title>_mi_memcpy (3 samples, 2.03%)</title><rect x="86.4865%" y="293" width="2.0270%" height="15" fill="rgb(211,99,13)" fg:x="128" fg:w="3"/><text x="86.7365%" y="303.50">_..</text></g><g><title>memcpy (3 samples, 2.03%)</title><rect x="86.4865%" y="277" width="2.0270%" height="15" fill="rgb(232,111,31)" fg:x="128" fg:w="3"/><text x="86.7365%" y="287.50">m..</text></g><g><title>[libc.so.6] (3 samples, 2.03%)</title><rect x="86.4865%" y="261" width="2.0270%" height="15" fill="rgb(245,82,37)" fg:x="128" fg:w="3"/><text x="86.7365%" y="271.50">[..</text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="87.1622%" y="245" width="1.3514%" height="15" fill="rgb(227,149,46)" fg:x="129" fg:w="2"/><text x="87.4122%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="229" width="0.6757%" height="15" fill="rgb(218,36,50)" fg:x="130" fg:w="1"/><text x="88.0878%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="213" width="0.6757%" height="15" fill="rgb(226,80,48)" fg:x="130" fg:w="1"/><text x="88.0878%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="197" width="0.6757%" height="15" fill="rgb(238,224,15)" fg:x="130" fg:w="1"/><text x="88.0878%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="181" width="0.6757%" height="15" fill="rgb(241,136,10)" fg:x="130" fg:w="1"/><text x="88.0878%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="165" width="0.6757%" height="15" fill="rgb(208,32,45)" fg:x="130" fg:w="1"/><text x="88.0878%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="149" width="0.6757%" height="15" fill="rgb(207,135,9)" fg:x="130" fg:w="1"/><text x="88.0878%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="133" width="0.6757%" height="15" fill="rgb(206,86,44)" fg:x="130" fg:w="1"/><text x="88.0878%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="117" width="0.6757%" height="15" fill="rgb(245,177,15)" fg:x="130" fg:w="1"/><text x="88.0878%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="101" width="0.6757%" height="15" fill="rgb(206,64,50)" fg:x="130" fg:w="1"/><text x="88.0878%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="87.8378%" y="85" width="0.6757%" height="15" fill="rgb(234,36,40)" fg:x="130" fg:w="1"/><text x="88.0878%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 3.38%)</title><rect x="85.8108%" y="437" width="3.3784%" height="15" fill="rgb(213,64,8)" fg:x="127" fg:w="5"/><text x="86.0608%" y="447.50">all..</text></g><g><title>core::ptr::write (1 samples, 0.68%)</title><rect x="88.5135%" y="421" width="0.6757%" height="15" fill="rgb(210,75,36)" fg:x="131" fg:w="1"/><text x="88.7635%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="405" width="0.6757%" height="15" fill="rgb(229,88,21)" fg:x="131" fg:w="1"/><text x="88.7635%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="389" width="0.6757%" height="15" fill="rgb(252,204,47)" fg:x="131" fg:w="1"/><text x="88.7635%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="373" width="0.6757%" height="15" fill="rgb(208,77,27)" fg:x="131" fg:w="1"/><text x="88.7635%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="357" width="0.6757%" height="15" fill="rgb(221,76,26)" fg:x="131" fg:w="1"/><text x="88.7635%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="341" width="0.6757%" height="15" fill="rgb(225,139,18)" fg:x="131" fg:w="1"/><text x="88.7635%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="325" width="0.6757%" height="15" fill="rgb(230,137,11)" fg:x="131" fg:w="1"/><text x="88.7635%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="309" width="0.6757%" height="15" fill="rgb(212,28,1)" fg:x="131" fg:w="1"/><text x="88.7635%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="293" width="0.6757%" height="15" fill="rgb(248,164,17)" fg:x="131" fg:w="1"/><text x="88.7635%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="277" width="0.6757%" height="15" fill="rgb(222,171,42)" fg:x="131" fg:w="1"/><text x="88.7635%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="261" width="0.6757%" height="15" fill="rgb(243,84,45)" fg:x="131" fg:w="1"/><text x="88.7635%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="245" width="0.6757%" height="15" fill="rgb(252,49,23)" fg:x="131" fg:w="1"/><text x="88.7635%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="88.5135%" y="229" width="0.6757%" height="15" fill="rgb(215,19,7)" fg:x="131" fg:w="1"/><text x="88.7635%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 2.03%)</title><rect x="89.1892%" y="405" width="2.0270%" height="15" fill="rgb(238,81,41)" fg:x="132" fg:w="3"/><text x="89.4392%" y="415.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 2.03%)</title><rect x="89.1892%" y="389" width="2.0270%" height="15" fill="rgb(210,199,37)" fg:x="132" fg:w="3"/><text x="89.4392%" y="399.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 2.03%)</title><rect x="89.1892%" y="373" width="2.0270%" height="15" fill="rgb(244,192,49)" fg:x="132" fg:w="3"/><text x="89.4392%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 2.03%)</title><rect x="89.1892%" y="357" width="2.0270%" height="15" fill="rgb(226,211,11)" fg:x="132" fg:w="3"/><text x="89.4392%" y="367.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 2.03%)</title><rect x="89.1892%" y="341" width="2.0270%" height="15" fill="rgb(236,162,54)" fg:x="132" fg:w="3"/><text x="89.4392%" y="351.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 2.03%)</title><rect x="89.1892%" y="325" width="2.0270%" height="15" fill="rgb(220,229,9)" fg:x="132" fg:w="3"/><text x="89.4392%" y="335.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 2.03%)</title><rect x="89.1892%" y="309" width="2.0270%" height="15" fill="rgb(250,87,22)" fg:x="132" fg:w="3"/><text x="89.4392%" y="319.50">a..</text></g><g><title>alloc::alloc::realloc (3 samples, 2.03%)</title><rect x="89.1892%" y="293" width="2.0270%" height="15" fill="rgb(239,43,17)" fg:x="132" fg:w="3"/><text x="89.4392%" y="303.50">a..</text></g><g><title>_mi_heap_realloc_zero (3 samples, 2.03%)</title><rect x="89.1892%" y="277" width="2.0270%" height="15" fill="rgb(231,177,25)" fg:x="132" fg:w="3"/><text x="89.4392%" y="287.50">_..</text></g><g><title>_mi_memcpy_aligned (3 samples, 2.03%)</title><rect x="89.1892%" y="261" width="2.0270%" height="15" fill="rgb(219,179,1)" fg:x="132" fg:w="3"/><text x="89.4392%" y="271.50">_..</text></g><g><title>_mi_memcpy (3 samples, 2.03%)</title><rect x="89.1892%" y="245" width="2.0270%" height="15" fill="rgb(238,219,53)" fg:x="132" fg:w="3"/><text x="89.4392%" y="255.50">_..</text></g><g><title>memcpy (3 samples, 2.03%)</title><rect x="89.1892%" y="229" width="2.0270%" height="15" fill="rgb(232,167,36)" fg:x="132" fg:w="3"/><text x="89.4392%" y="239.50">m..</text></g><g><title>[libc.so.6] (3 samples, 2.03%)</title><rect x="89.1892%" y="213" width="2.0270%" height="15" fill="rgb(244,19,51)" fg:x="132" fg:w="3"/><text x="89.4392%" y="223.50">[..</text></g><g><title>[unknown] (3 samples, 2.03%)</title><rect x="89.1892%" y="197" width="2.0270%" height="15" fill="rgb(224,6,22)" fg:x="132" fg:w="3"/><text x="89.4392%" y="207.50">[..</text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="181" width="1.3514%" height="15" fill="rgb(224,145,5)" fg:x="133" fg:w="2"/><text x="90.1149%" y="191.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="165" width="1.3514%" height="15" fill="rgb(234,130,49)" fg:x="133" fg:w="2"/><text x="90.1149%" y="175.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="149" width="1.3514%" height="15" fill="rgb(254,6,2)" fg:x="133" fg:w="2"/><text x="90.1149%" y="159.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="133" width="1.3514%" height="15" fill="rgb(208,96,46)" fg:x="133" fg:w="2"/><text x="90.1149%" y="143.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="117" width="1.3514%" height="15" fill="rgb(239,3,39)" fg:x="133" fg:w="2"/><text x="90.1149%" y="127.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="101" width="1.3514%" height="15" fill="rgb(233,210,1)" fg:x="133" fg:w="2"/><text x="90.1149%" y="111.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="85" width="1.3514%" height="15" fill="rgb(244,137,37)" fg:x="133" fg:w="2"/><text x="90.1149%" y="95.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="69" width="1.3514%" height="15" fill="rgb(240,136,2)" fg:x="133" fg:w="2"/><text x="90.1149%" y="79.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="53" width="1.3514%" height="15" fill="rgb(239,18,37)" fg:x="133" fg:w="2"/><text x="90.1149%" y="63.50"></text></g><g><title>[unknown] (2 samples, 1.35%)</title><rect x="89.8649%" y="37" width="1.3514%" height="15" fill="rgb(218,185,22)" fg:x="133" fg:w="2"/><text x="90.1149%" y="47.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (1 samples, 0.68%)</title><rect x="91.2162%" y="373" width="0.6757%" height="15" fill="rgb(225,218,4)" fg:x="135" fg:w="1"/><text x="91.4662%" y="383.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (1 samples, 0.68%)</title><rect x="91.2162%" y="357" width="0.6757%" height="15" fill="rgb(230,182,32)" fg:x="135" fg:w="1"/><text x="91.4662%" y="367.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (1 samples, 0.68%)</title><rect x="91.2162%" y="341" width="0.6757%" height="15" fill="rgb(242,56,43)" fg:x="135" fg:w="1"/><text x="91.4662%" y="351.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.68%)</title><rect x="91.2162%" y="325" width="0.6757%" height="15" fill="rgb(233,99,24)" fg:x="135" fg:w="1"/><text x="91.4662%" y="335.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.68%)</title><rect x="91.2162%" y="309" width="0.6757%" height="15" fill="rgb(234,209,42)" fg:x="135" fg:w="1"/><text x="91.4662%" y="319.50"></text></g><g><title>&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (1 samples, 0.68%)</title><rect x="91.2162%" y="293" width="0.6757%" height="15" fill="rgb(227,7,12)" fg:x="135" fg:w="1"/><text x="91.4662%" y="303.50"></text></g><g><title>&lt;zstd::stream::raw::Decoder as zstd::stream::raw::Operation&gt;::run (1 samples, 0.68%)</title><rect x="91.2162%" y="277" width="0.6757%" height="15" fill="rgb(245,203,43)" fg:x="135" fg:w="1"/><text x="91.4662%" y="287.50"></text></g><g><title>zstd_safe::DCtx::decompress_stream (1 samples, 0.68%)</title><rect x="91.2162%" y="261" width="0.6757%" height="15" fill="rgb(238,205,33)" fg:x="135" fg:w="1"/><text x="91.4662%" y="271.50"></text></g><g><title>ZSTD_decompressStream (1 samples, 0.68%)</title><rect x="91.2162%" y="245" width="0.6757%" height="15" fill="rgb(231,56,7)" fg:x="135" fg:w="1"/><text x="91.4662%" y="255.50"></text></g><g><title>ZSTD_decompressContinueStream (1 samples, 0.68%)</title><rect x="91.2162%" y="229" width="0.6757%" height="15" fill="rgb(244,186,29)" fg:x="135" fg:w="1"/><text x="91.4662%" y="239.50"></text></g><g><title>ZSTD_decompressContinue (1 samples, 0.68%)</title><rect x="91.2162%" y="213" width="0.6757%" height="15" fill="rgb(234,111,31)" fg:x="135" fg:w="1"/><text x="91.4662%" y="223.50"></text></g><g><title>ZSTD_decompressContinue (1 samples, 0.68%)</title><rect x="91.2162%" y="197" width="0.6757%" height="15" fill="rgb(241,149,10)" fg:x="135" fg:w="1"/><text x="91.4662%" y="207.50"></text></g><g><title>ZSTD_decompressBlock_internal (1 samples, 0.68%)</title><rect x="91.2162%" y="181" width="0.6757%" height="15" fill="rgb(249,206,44)" fg:x="135" fg:w="1"/><text x="91.4662%" y="191.50"></text></g><g><title>ZSTD_decompressBlock_internal (1 samples, 0.68%)</title><rect x="91.2162%" y="165" width="0.6757%" height="15" fill="rgb(251,153,30)" fg:x="135" fg:w="1"/><text x="91.4662%" y="175.50"></text></g><g><title>ZSTD_decompressSequences (1 samples, 0.68%)</title><rect x="91.2162%" y="149" width="0.6757%" height="15" fill="rgb(239,152,38)" fg:x="135" fg:w="1"/><text x="91.4662%" y="159.50"></text></g><g><title>ZSTD_decompressSequences_bmi2 (1 samples, 0.68%)</title><rect x="91.2162%" y="133" width="0.6757%" height="15" fill="rgb(249,139,47)" fg:x="135" fg:w="1"/><text x="91.4662%" y="143.50"></text></g><g><title>ZSTD_decompressSequences_body (1 samples, 0.68%)</title><rect x="91.2162%" y="117" width="0.6757%" height="15" fill="rgb(244,64,35)" fg:x="135" fg:w="1"/><text x="91.4662%" y="127.50"></text></g><g><title>ZSTD_execSequence (1 samples, 0.68%)</title><rect x="91.2162%" y="101" width="0.6757%" height="15" fill="rgb(216,46,15)" fg:x="135" fg:w="1"/><text x="91.4662%" y="111.50"></text></g><g><title>ZSTD_wildcopy (1 samples, 0.68%)</title><rect x="91.2162%" y="85" width="0.6757%" height="15" fill="rgb(250,74,19)" fg:x="135" fg:w="1"/><text x="91.4662%" y="95.50"></text></g><g><title>demoparser::parsing::cache::ReadCache::get_event_deltas2 (11 samples, 7.43%)</title><rect x="85.1351%" y="469" width="7.4324%" height="15" fill="rgb(249,42,33)" fg:x="126" fg:w="11"/><text x="85.3851%" y="479.50">demoparser..</text></g><g><title>demoparser::parsing::cache::ReadCache::read_deltas_by_pidx (10 samples, 6.76%)</title><rect x="85.8108%" y="453" width="6.7568%" height="15" fill="rgb(242,149,17)" fg:x="127" fg:w="10"/><text x="86.0608%" y="463.50">demoparse..</text></g><g><title>std::io::Read::read_to_end (5 samples, 3.38%)</title><rect x="89.1892%" y="437" width="3.3784%" height="15" fill="rgb(244,29,21)" fg:x="132" fg:w="5"/><text x="89.4392%" y="447.50">std..</text></g><g><title>std::io::default_read_to_end (5 samples, 3.38%)</title><rect x="89.1892%" y="421" width="3.3784%" height="15" fill="rgb(220,130,37)" fg:x="132" fg:w="5"/><text x="89.4392%" y="431.50">std..</text></g><g><title>std::io::Read::read_buf (2 samples, 1.35%)</title><rect x="91.2162%" y="405" width="1.3514%" height="15" fill="rgb(211,67,2)" fg:x="135" fg:w="2"/><text x="91.4662%" y="415.50"></text></g><g><title>std::io::default_read_buf (2 samples, 1.35%)</title><rect x="91.2162%" y="389" width="1.3514%" height="15" fill="rgb(235,68,52)" fg:x="135" fg:w="2"/><text x="91.4662%" y="399.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (1 samples, 0.68%)</title><rect x="91.8919%" y="373" width="0.6757%" height="15" fill="rgb(246,142,3)" fg:x="136" fg:w="1"/><text x="92.1419%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.68%)</title><rect x="91.8919%" y="357" width="0.6757%" height="15" fill="rgb(241,25,7)" fg:x="136" fg:w="1"/><text x="92.1419%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.68%)</title><rect x="91.8919%" y="341" width="0.6757%" height="15" fill="rgb(242,119,39)" fg:x="136" fg:w="1"/><text x="92.1419%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="91.8919%" y="325" width="0.6757%" height="15" fill="rgb(241,98,45)" fg:x="136" fg:w="1"/><text x="92.1419%" y="335.50"></text></g><g><title>demoparser::parsing::parser::Parser::compute_jobs (18 samples, 12.16%)</title><rect x="81.0811%" y="485" width="12.1622%" height="15" fill="rgb(254,28,30)" fg:x="120" fg:w="18"/><text x="81.3311%" y="495.50">demoparser::parsin..</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (1 samples, 0.68%)</title><rect x="92.5676%" y="469" width="0.6757%" height="15" fill="rgb(241,142,54)" fg:x="137" fg:w="1"/><text x="92.8176%" y="479.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (1 samples, 0.68%)</title><rect x="92.5676%" y="453" width="0.6757%" height="15" fill="rgb(222,85,15)" fg:x="137" fg:w="1"/><text x="92.8176%" y="463.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.68%)</title><rect x="92.5676%" y="437" width="0.6757%" height="15" fill="rgb(210,85,47)" fg:x="137" fg:w="1"/><text x="92.8176%" y="447.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.68%)</title><rect x="92.5676%" y="421" width="0.6757%" height="15" fill="rgb(224,206,25)" fg:x="137" fg:w="1"/><text x="92.8176%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.68%)</title><rect x="92.5676%" y="405" width="0.6757%" height="15" fill="rgb(243,201,19)" fg:x="137" fg:w="1"/><text x="92.8176%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.68%)</title><rect x="92.5676%" y="389" width="0.6757%" height="15" fill="rgb(236,59,4)" fg:x="137" fg:w="1"/><text x="92.8176%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.68%)</title><rect x="92.5676%" y="373" width="0.6757%" height="15" fill="rgb(254,179,45)" fg:x="137" fg:w="1"/><text x="92.8176%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.68%)</title><rect x="92.5676%" y="357" width="0.6757%" height="15" fill="rgb(226,14,10)" fg:x="137" fg:w="1"/><text x="92.8176%" y="367.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.68%)</title><rect x="92.5676%" y="341" width="0.6757%" height="15" fill="rgb(244,27,41)" fg:x="137" fg:w="1"/><text x="92.8176%" y="351.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.68%)</title><rect x="92.5676%" y="325" width="0.6757%" height="15" fill="rgb(235,35,32)" fg:x="137" fg:w="1"/><text x="92.8176%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.68%)</title><rect x="92.5676%" y="309" width="0.6757%" height="15" fill="rgb(218,68,31)" fg:x="137" fg:w="1"/><text x="92.8176%" y="319.50"></text></g><g><title>_mi_page_unfull (1 samples, 0.68%)</title><rect x="93.2432%" y="421" width="0.6757%" height="15" fill="rgb(207,120,37)" fg:x="138" fg:w="1"/><text x="93.4932%" y="431.50"></text></g><g><title>_mi_page_unfull (1 samples, 0.68%)</title><rect x="93.2432%" y="405" width="0.6757%" height="15" fill="rgb(227,98,0)" fg:x="138" fg:w="1"/><text x="93.4932%" y="415.50"></text></g><g><title>mi_heap_page_queue_of (1 samples, 0.68%)</title><rect x="93.2432%" y="389" width="0.6757%" height="15" fill="rgb(207,7,3)" fg:x="138" fg:w="1"/><text x="93.4932%" y="399.50"></text></g><g><title>mi_bin (1 samples, 0.68%)</title><rect x="93.2432%" y="373" width="0.6757%" height="15" fill="rgb(206,98,19)" fg:x="138" fg:w="1"/><text x="93.4932%" y="383.50"></text></g><g><title>mi_bsr (1 samples, 0.68%)</title><rect x="93.2432%" y="357" width="0.6757%" height="15" fill="rgb(217,5,26)" fg:x="138" fg:w="1"/><text x="93.4932%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.68%)</title><rect x="93.9189%" y="389" width="0.6757%" height="15" fill="rgb(235,190,38)" fg:x="139" fg:w="1"/><text x="94.1689%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.68%)</title><rect x="93.9189%" y="373" width="0.6757%" height="15" fill="rgb(247,86,24)" fg:x="139" fg:w="1"/><text x="94.1689%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.68%)</title><rect x="94.5946%" y="373" width="0.6757%" height="15" fill="rgb(205,101,16)" fg:x="140" fg:w="1"/><text x="94.8446%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="94.5946%" y="357" width="0.6757%" height="15" fill="rgb(246,168,33)" fg:x="140" fg:w="1"/><text x="94.8446%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.68%)</title><rect x="94.5946%" y="341" width="0.6757%" height="15" fill="rgb(231,114,1)" fg:x="140" fg:w="1"/><text x="94.8446%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="94.5946%" y="325" width="0.6757%" height="15" fill="rgb(207,184,53)" fg:x="140" fg:w="1"/><text x="94.8446%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.68%)</title><rect x="94.5946%" y="309" width="0.6757%" height="15" fill="rgb(224,95,51)" fg:x="140" fg:w="1"/><text x="94.8446%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.68%)</title><rect x="94.5946%" y="293" width="0.6757%" height="15" fill="rgb(212,188,45)" fg:x="140" fg:w="1"/><text x="94.8446%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.68%)</title><rect x="94.5946%" y="277" width="0.6757%" height="15" fill="rgb(223,154,38)" fg:x="140" fg:w="1"/><text x="94.8446%" y="287.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.68%)</title><rect x="94.5946%" y="261" width="0.6757%" height="15" fill="rgb(251,22,52)" fg:x="140" fg:w="1"/><text x="94.8446%" y="271.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.68%)</title><rect x="94.5946%" y="245" width="0.6757%" height="15" fill="rgb(229,209,22)" fg:x="140" fg:w="1"/><text x="94.8446%" y="255.50"></text></g><g><title>_mi_memcpy (1 samples, 0.68%)</title><rect x="94.5946%" y="229" width="0.6757%" height="15" fill="rgb(234,138,34)" fg:x="140" fg:w="1"/><text x="94.8446%" y="239.50"></text></g><g><title>memcpy (1 samples, 0.68%)</title><rect x="94.5946%" y="213" width="0.6757%" height="15" fill="rgb(212,95,11)" fg:x="140" fg:w="1"/><text x="94.8446%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.68%)</title><rect x="94.5946%" y="197" width="0.6757%" height="15" fill="rgb(240,179,47)" fg:x="140" fg:w="1"/><text x="94.8446%" y="207.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 16.22%)</title><rect x="79.7297%" y="805" width="16.2162%" height="15" fill="rgb(240,163,11)" fg:x="118" fg:w="24"/><text x="79.9797%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24 samples, 16.22%)</title><rect x="79.7297%" y="789" width="16.2162%" height="15" fill="rgb(236,37,12)" fg:x="118" fg:w="24"/><text x="79.9797%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24 samples, 16.22%)</title><rect x="79.7297%" y="773" width="16.2162%" height="15" fill="rgb(232,164,16)" fg:x="118" fg:w="24"/><text x="79.9797%" y="783.50">std::panicking::try::do_c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (24 samples, 16.22%)</title><rect x="79.7297%" y="757" width="16.2162%" height="15" fill="rgb(244,205,15)" fg:x="118" fg:w="24"/><text x="79.9797%" y="767.50">core::ops::function::impl..</text></g><g><title>std::rt::lang_start::{{closure}} (24 samples, 16.22%)</title><rect x="79.7297%" y="741" width="16.2162%" height="15" fill="rgb(223,117,47)" fg:x="118" fg:w="24"/><text x="79.9797%" y="751.50">std::rt::lang_start::{{cl..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 16.22%)</title><rect x="79.7297%" y="725" width="16.2162%" height="15" fill="rgb(244,107,35)" fg:x="118" fg:w="24"/><text x="79.9797%" y="735.50">std::sys_common::backtrac..</text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 16.22%)</title><rect x="79.7297%" y="709" width="16.2162%" height="15" fill="rgb(205,140,8)" fg:x="118" fg:w="24"/><text x="79.9797%" y="719.50">core::ops::function::FnOn..</text></g><g><title>demoparser::main (24 samples, 16.22%)</title><rect x="79.7297%" y="693" width="16.2162%" height="15" fill="rgb(228,84,46)" fg:x="118" fg:w="24"/><text x="79.9797%" y="703.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 16.22%)</title><rect x="79.7297%" y="677" width="16.2162%" height="15" fill="rgb(254,188,9)" fg:x="118" fg:w="24"/><text x="79.9797%" y="687.50">core::iter::traits::itera..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (24 samples, 16.22%)</title><rect x="79.7297%" y="661" width="16.2162%" height="15" fill="rgb(206,112,54)" fg:x="118" fg:w="24"/><text x="79.9797%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (24 samples, 16.22%)</title><rect x="79.7297%" y="645" width="16.2162%" height="15" fill="rgb(216,84,49)" fg:x="118" fg:w="24"/><text x="79.9797%" y="655.50">alloc::vec::in_place_coll..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (24 samples, 16.22%)</title><rect x="79.7297%" y="629" width="16.2162%" height="15" fill="rgb(214,194,35)" fg:x="118" fg:w="24"/><text x="79.9797%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (24 samples, 16.22%)</title><rect x="79.7297%" y="613" width="16.2162%" height="15" fill="rgb(249,28,3)" fg:x="118" fg:w="24"/><text x="79.9797%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 16.22%)</title><rect x="79.7297%" y="597" width="16.2162%" height="15" fill="rgb(222,56,52)" fg:x="118" fg:w="24"/><text x="79.9797%" y="607.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 16.22%)</title><rect x="79.7297%" y="581" width="16.2162%" height="15" fill="rgb(245,217,50)" fg:x="118" fg:w="24"/><text x="79.9797%" y="591.50">&lt;core::iter::adapters::ma..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 16.22%)</title><rect x="79.7297%" y="565" width="16.2162%" height="15" fill="rgb(213,201,24)" fg:x="118" fg:w="24"/><text x="79.9797%" y="575.50">core::iter::traits::itera..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (24 samples, 16.22%)</title><rect x="79.7297%" y="549" width="16.2162%" height="15" fill="rgb(248,116,28)" fg:x="118" fg:w="24"/><text x="79.9797%" y="559.50">core::iter::adapters::map..</text></g><g><title>demoparser::main::{{closure}} (24 samples, 16.22%)</title><rect x="79.7297%" y="533" width="16.2162%" height="15" fill="rgb(219,72,43)" fg:x="118" fg:w="24"/><text x="79.9797%" y="543.50">demoparser::main::{{closu..</text></g><g><title>demoparser::parse_demo (24 samples, 16.22%)</title><rect x="79.7297%" y="517" width="16.2162%" height="15" fill="rgb(209,138,14)" fg:x="118" fg:w="24"/><text x="79.9797%" y="527.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (22 samples, 14.86%)</title><rect x="81.0811%" y="501" width="14.8649%" height="15" fill="rgb(222,18,33)" fg:x="120" fg:w="22"/><text x="81.3311%" y="511.50">demoparser::parsing::pa..</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (4 samples, 2.70%)</title><rect x="93.2432%" y="485" width="2.7027%" height="15" fill="rgb(213,199,7)" fg:x="138" fg:w="4"/><text x="93.4932%" y="495.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (4 samples, 2.70%)</title><rect x="93.2432%" y="469" width="2.7027%" height="15" fill="rgb(250,110,10)" fg:x="138" fg:w="4"/><text x="93.4932%" y="479.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (4 samples, 2.70%)</title><rect x="93.2432%" y="453" width="2.7027%" height="15" fill="rgb(248,123,6)" fg:x="138" fg:w="4"/><text x="93.4932%" y="463.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 2.70%)</title><rect x="93.2432%" y="437" width="2.7027%" height="15" fill="rgb(206,91,31)" fg:x="138" fg:w="4"/><text x="93.4932%" y="447.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 2.03%)</title><rect x="93.9189%" y="421" width="2.0270%" height="15" fill="rgb(211,154,13)" fg:x="139" fg:w="3"/><text x="94.1689%" y="431.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 2.03%)</title><rect x="93.9189%" y="405" width="2.0270%" height="15" fill="rgb(225,148,7)" fg:x="139" fg:w="3"/><text x="94.1689%" y="415.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 1.35%)</title><rect x="94.5946%" y="389" width="1.3514%" height="15" fill="rgb(220,160,43)" fg:x="140" fg:w="2"/><text x="94.8446%" y="399.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.68%)</title><rect x="95.2703%" y="373" width="0.6757%" height="15" fill="rgb(213,52,39)" fg:x="141" fg:w="1"/><text x="95.5203%" y="383.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.68%)</title><rect x="95.2703%" y="357" width="0.6757%" height="15" fill="rgb(243,137,7)" fg:x="141" fg:w="1"/><text x="95.5203%" y="367.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.68%)</title><rect x="95.2703%" y="341" width="0.6757%" height="15" fill="rgb(230,79,13)" fg:x="141" fg:w="1"/><text x="95.5203%" y="351.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.68%)</title><rect x="95.2703%" y="325" width="0.6757%" height="15" fill="rgb(247,105,23)" fg:x="141" fg:w="1"/><text x="95.5203%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.68%)</title><rect x="95.2703%" y="309" width="0.6757%" height="15" fill="rgb(223,179,41)" fg:x="141" fg:w="1"/><text x="95.5203%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="95.2703%" y="293" width="0.6757%" height="15" fill="rgb(218,9,34)" fg:x="141" fg:w="1"/><text x="95.5203%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.68%)</title><rect x="95.2703%" y="277" width="0.6757%" height="15" fill="rgb(222,106,8)" fg:x="141" fg:w="1"/><text x="95.5203%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="95.2703%" y="261" width="0.6757%" height="15" fill="rgb(211,220,0)" fg:x="141" fg:w="1"/><text x="95.5203%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.68%)</title><rect x="95.2703%" y="245" width="0.6757%" height="15" fill="rgb(229,52,16)" fg:x="141" fg:w="1"/><text x="95.5203%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.68%)</title><rect x="95.2703%" y="229" width="0.6757%" height="15" fill="rgb(212,155,18)" fg:x="141" fg:w="1"/><text x="95.5203%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.68%)</title><rect x="95.2703%" y="213" width="0.6757%" height="15" fill="rgb(242,21,14)" fg:x="141" fg:w="1"/><text x="95.5203%" y="223.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.68%)</title><rect x="95.2703%" y="197" width="0.6757%" height="15" fill="rgb(222,19,48)" fg:x="141" fg:w="1"/><text x="95.5203%" y="207.50"></text></g><g><title>_mi_usable_size (1 samples, 0.68%)</title><rect x="95.2703%" y="181" width="0.6757%" height="15" fill="rgb(232,45,27)" fg:x="141" fg:w="1"/><text x="95.5203%" y="191.50"></text></g><g><title>demoparser (143 samples, 96.62%)</title><rect x="0.0000%" y="965" width="96.6216%" height="15" fill="rgb(249,103,42)" fg:x="0" fg:w="143"/><text x="0.2500%" y="975.50">demoparser</text></g><g><title>_start (25 samples, 16.89%)</title><rect x="79.7297%" y="949" width="16.8919%" height="15" fill="rgb(246,81,33)" fg:x="118" fg:w="25"/><text x="79.9797%" y="959.50">_start</text></g><g><title>__libc_start_main_impl (25 samples, 16.89%)</title><rect x="79.7297%" y="933" width="16.8919%" height="15" fill="rgb(252,33,42)" fg:x="118" fg:w="25"/><text x="79.9797%" y="943.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (25 samples, 16.89%)</title><rect x="79.7297%" y="917" width="16.8919%" height="15" fill="rgb(209,212,41)" fg:x="118" fg:w="25"/><text x="79.9797%" y="927.50">__libc_start_call_main</text></g><g><title>main (25 samples, 16.89%)</title><rect x="79.7297%" y="901" width="16.8919%" height="15" fill="rgb(207,154,6)" fg:x="118" fg:w="25"/><text x="79.9797%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (25 samples, 16.89%)</title><rect x="79.7297%" y="885" width="16.8919%" height="15" fill="rgb(223,64,47)" fg:x="118" fg:w="25"/><text x="79.9797%" y="895.50">std::rt::lang_start_intern..</text></g><g><title>std::panic::catch_unwind (25 samples, 16.89%)</title><rect x="79.7297%" y="869" width="16.8919%" height="15" fill="rgb(211,161,38)" fg:x="118" fg:w="25"/><text x="79.9797%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (25 samples, 16.89%)</title><rect x="79.7297%" y="853" width="16.8919%" height="15" fill="rgb(219,138,40)" fg:x="118" fg:w="25"/><text x="79.9797%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (25 samples, 16.89%)</title><rect x="79.7297%" y="837" width="16.8919%" height="15" fill="rgb(241,228,46)" fg:x="118" fg:w="25"/><text x="79.9797%" y="847.50">std::panicking::try::do_ca..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (25 samples, 16.89%)</title><rect x="79.7297%" y="821" width="16.8919%" height="15" fill="rgb(223,209,38)" fg:x="118" fg:w="25"/><text x="79.9797%" y="831.50">std::rt::lang_start_intern..</text></g><g><title>std::rt::init (1 samples, 0.68%)</title><rect x="95.9459%" y="805" width="0.6757%" height="15" fill="rgb(236,164,45)" fg:x="142" fg:w="1"/><text x="96.1959%" y="815.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.68%)</title><rect x="95.9459%" y="789" width="0.6757%" height="15" fill="rgb(231,15,5)" fg:x="142" fg:w="1"/><text x="96.1959%" y="799.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.68%)</title><rect x="95.9459%" y="773" width="0.6757%" height="15" fill="rgb(252,35,15)" fg:x="142" fg:w="1"/><text x="96.1959%" y="783.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.68%)</title><rect x="95.9459%" y="757" width="0.6757%" height="15" fill="rgb(248,181,18)" fg:x="142" fg:w="1"/><text x="96.1959%" y="767.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.68%)</title><rect x="95.9459%" y="741" width="0.6757%" height="15" fill="rgb(233,39,42)" fg:x="142" fg:w="1"/><text x="96.1959%" y="751.50"></text></g><g><title>__GI___getdelim (1 samples, 0.68%)</title><rect x="95.9459%" y="725" width="0.6757%" height="15" fill="rgb(238,110,33)" fg:x="142" fg:w="1"/><text x="96.1959%" y="735.50"></text></g><g><title>_IO_new_file_underflow (1 samples, 0.68%)</title><rect x="95.9459%" y="709" width="0.6757%" height="15" fill="rgb(233,195,10)" fg:x="142" fg:w="1"/><text x="96.1959%" y="719.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.68%)</title><rect x="95.9459%" y="693" width="0.6757%" height="15" fill="rgb(254,105,3)" fg:x="142" fg:w="1"/><text x="96.1959%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="677" width="0.6757%" height="15" fill="rgb(221,225,9)" fg:x="142" fg:w="1"/><text x="96.1959%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="661" width="0.6757%" height="15" fill="rgb(224,227,45)" fg:x="142" fg:w="1"/><text x="96.1959%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="645" width="0.6757%" height="15" fill="rgb(229,198,43)" fg:x="142" fg:w="1"/><text x="96.1959%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="629" width="0.6757%" height="15" fill="rgb(206,209,35)" fg:x="142" fg:w="1"/><text x="96.1959%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="613" width="0.6757%" height="15" fill="rgb(245,195,53)" fg:x="142" fg:w="1"/><text x="96.1959%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="597" width="0.6757%" height="15" fill="rgb(240,92,26)" fg:x="142" fg:w="1"/><text x="96.1959%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="581" width="0.6757%" height="15" fill="rgb(207,40,23)" fg:x="142" fg:w="1"/><text x="96.1959%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="565" width="0.6757%" height="15" fill="rgb(223,111,35)" fg:x="142" fg:w="1"/><text x="96.1959%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="549" width="0.6757%" height="15" fill="rgb(229,147,28)" fg:x="142" fg:w="1"/><text x="96.1959%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="533" width="0.6757%" height="15" fill="rgb(211,29,28)" fg:x="142" fg:w="1"/><text x="96.1959%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="517" width="0.6757%" height="15" fill="rgb(228,72,33)" fg:x="142" fg:w="1"/><text x="96.1959%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.68%)</title><rect x="95.9459%" y="501" width="0.6757%" height="15" fill="rgb(205,214,31)" fg:x="142" fg:w="1"/><text x="96.1959%" y="511.50"></text></g><g><title>all (148 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,111,15)" fg:x="0" fg:w="148"/><text x="0.2500%" y="991.50"></text></g><g><title>perf-exec (5 samples, 3.38%)</title><rect x="96.6216%" y="965" width="3.3784%" height="15" fill="rgb(253,21,26)" fg:x="143" fg:w="5"/><text x="96.8716%" y="975.50">per..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="949" width="3.3784%" height="15" fill="rgb(245,139,43)" fg:x="143" fg:w="5"/><text x="96.8716%" y="959.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="933" width="3.3784%" height="15" fill="rgb(252,170,7)" fg:x="143" fg:w="5"/><text x="96.8716%" y="943.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="917" width="3.3784%" height="15" fill="rgb(231,118,14)" fg:x="143" fg:w="5"/><text x="96.8716%" y="927.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="901" width="3.3784%" height="15" fill="rgb(238,83,0)" fg:x="143" fg:w="5"/><text x="96.8716%" y="911.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="885" width="3.3784%" height="15" fill="rgb(221,39,39)" fg:x="143" fg:w="5"/><text x="96.8716%" y="895.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="869" width="3.3784%" height="15" fill="rgb(222,119,46)" fg:x="143" fg:w="5"/><text x="96.8716%" y="879.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="853" width="3.3784%" height="15" fill="rgb(222,165,49)" fg:x="143" fg:w="5"/><text x="96.8716%" y="863.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="837" width="3.3784%" height="15" fill="rgb(219,113,52)" fg:x="143" fg:w="5"/><text x="96.8716%" y="847.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="821" width="3.3784%" height="15" fill="rgb(214,7,15)" fg:x="143" fg:w="5"/><text x="96.8716%" y="831.50">[un..</text></g><g><title>[unknown] (5 samples, 3.38%)</title><rect x="96.6216%" y="805" width="3.3784%" height="15" fill="rgb(235,32,4)" fg:x="143" fg:w="5"/><text x="96.8716%" y="815.50">[un..</text></g></svg></svg>