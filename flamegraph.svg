<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="1106"><g><title>[unknown] (70 samples, 6.33%)</title><rect x="0.0000%" y="885" width="6.3291%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="70"/><text x="0.2500%" y="895.50">[unknown]</text></g><g><title>[unknown] (50 samples, 4.52%)</title><rect x="1.8083%" y="869" width="4.5208%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="50"/><text x="2.0583%" y="879.50">[unkn..</text></g><g><title>[unknown] (50 samples, 4.52%)</title><rect x="1.8083%" y="853" width="4.5208%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="50"/><text x="2.0583%" y="863.50">[unkn..</text></g><g><title>[unknown] (45 samples, 4.07%)</title><rect x="2.2604%" y="837" width="4.0687%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="45"/><text x="2.5104%" y="847.50">[unk..</text></g><g><title>[unknown] (45 samples, 4.07%)</title><rect x="2.2604%" y="821" width="4.0687%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="45"/><text x="2.5104%" y="831.50">[unk..</text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="5.4250%" y="805" width="0.9042%" height="15" fill="rgb(232,128,0)" fg:x="60" fg:w="10"/><text x="5.6750%" y="815.50"></text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="5.4250%" y="789" width="0.9042%" height="15" fill="rgb(207,160,47)" fg:x="60" fg:w="10"/><text x="5.6750%" y="799.50"></text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="5.4250%" y="773" width="0.9042%" height="15" fill="rgb(228,23,34)" fg:x="60" fg:w="10"/><text x="5.6750%" y="783.50"></text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="5.4250%" y="757" width="0.9042%" height="15" fill="rgb(218,30,26)" fg:x="60" fg:w="10"/><text x="5.6750%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="5.4250%" y="741" width="0.9042%" height="15" fill="rgb(220,122,19)" fg:x="60" fg:w="10"/><text x="5.6750%" y="751.50"></text></g><g><title>[unknown] (9 samples, 0.81%)</title><rect x="5.5154%" y="725" width="0.8137%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="9"/><text x="5.7654%" y="735.50"></text></g><g><title>[unknown] (8 samples, 0.72%)</title><rect x="5.6058%" y="709" width="0.7233%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="8"/><text x="5.8558%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.63%)</title><rect x="5.6962%" y="693" width="0.6329%" height="15" fill="rgb(216,20,37)" fg:x="63" fg:w="7"/><text x="5.9462%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="5.8770%" y="677" width="0.4521%" height="15" fill="rgb(206,188,39)" fg:x="65" fg:w="5"/><text x="6.1270%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="5.8770%" y="661" width="0.4521%" height="15" fill="rgb(217,207,13)" fg:x="65" fg:w="5"/><text x="6.1270%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="6.0579%" y="645" width="0.2712%" height="15" fill="rgb(231,73,38)" fg:x="67" fg:w="3"/><text x="6.3079%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="6.1483%" y="629" width="0.1808%" height="15" fill="rgb(225,20,46)" fg:x="68" fg:w="2"/><text x="6.3983%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="6.1483%" y="613" width="0.1808%" height="15" fill="rgb(210,31,41)" fg:x="68" fg:w="2"/><text x="6.3983%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.2387%" y="597" width="0.0904%" height="15" fill="rgb(221,200,47)" fg:x="69" fg:w="1"/><text x="6.4887%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.2387%" y="581" width="0.0904%" height="15" fill="rgb(226,26,5)" fg:x="69" fg:w="1"/><text x="6.4887%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.2387%" y="565" width="0.0904%" height="15" fill="rgb(249,33,26)" fg:x="69" fg:w="1"/><text x="6.4887%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="869" width="0.0904%" height="15" fill="rgb(235,183,28)" fg:x="70" fg:w="1"/><text x="6.5791%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="853" width="0.0904%" height="15" fill="rgb(221,5,38)" fg:x="70" fg:w="1"/><text x="6.5791%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="837" width="0.0904%" height="15" fill="rgb(247,18,42)" fg:x="70" fg:w="1"/><text x="6.5791%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="821" width="0.0904%" height="15" fill="rgb(241,131,45)" fg:x="70" fg:w="1"/><text x="6.5791%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="805" width="0.0904%" height="15" fill="rgb(249,31,29)" fg:x="70" fg:w="1"/><text x="6.5791%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="789" width="0.0904%" height="15" fill="rgb(225,111,53)" fg:x="70" fg:w="1"/><text x="6.5791%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="773" width="0.0904%" height="15" fill="rgb(238,160,17)" fg:x="70" fg:w="1"/><text x="6.5791%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.3291%" y="757" width="0.0904%" height="15" fill="rgb(214,148,48)" fg:x="70" fg:w="1"/><text x="6.5791%" y="767.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.09%)</title><rect x="6.4195%" y="789" width="0.0904%" height="15" fill="rgb(232,36,49)" fg:x="71" fg:w="1"/><text x="6.6695%" y="799.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.09%)</title><rect x="6.4195%" y="773" width="0.0904%" height="15" fill="rgb(209,103,24)" fg:x="71" fg:w="1"/><text x="6.6695%" y="783.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="6.4195%" y="757" width="0.0904%" height="15" fill="rgb(229,88,8)" fg:x="71" fg:w="1"/><text x="6.6695%" y="767.50"></text></g><g><title>tcache_init (1 samples, 0.09%)</title><rect x="6.4195%" y="741" width="0.0904%" height="15" fill="rgb(213,181,19)" fg:x="71" fg:w="1"/><text x="6.6695%" y="751.50"></text></g><g><title>tcache_init (1 samples, 0.09%)</title><rect x="6.4195%" y="725" width="0.0904%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="6.6695%" y="735.50"></text></g><g><title>arena_get2 (1 samples, 0.09%)</title><rect x="6.4195%" y="709" width="0.0904%" height="15" fill="rgb(241,83,37)" fg:x="71" fg:w="1"/><text x="6.6695%" y="719.50"></text></g><g><title>arena_get2 (1 samples, 0.09%)</title><rect x="6.4195%" y="693" width="0.0904%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="1"/><text x="6.6695%" y="703.50"></text></g><g><title>_int_new_arena (1 samples, 0.09%)</title><rect x="6.4195%" y="677" width="0.0904%" height="15" fill="rgb(226,3,54)" fg:x="71" fg:w="1"/><text x="6.6695%" y="687.50"></text></g><g><title>new_heap (1 samples, 0.09%)</title><rect x="6.4195%" y="661" width="0.0904%" height="15" fill="rgb(245,192,40)" fg:x="71" fg:w="1"/><text x="6.6695%" y="671.50"></text></g><g><title>alloc_new_heap (1 samples, 0.09%)</title><rect x="6.4195%" y="645" width="0.0904%" height="15" fill="rgb(238,167,29)" fg:x="71" fg:w="1"/><text x="6.6695%" y="655.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.09%)</title><rect x="6.4195%" y="629" width="0.0904%" height="15" fill="rgb(232,182,51)" fg:x="71" fg:w="1"/><text x="6.6695%" y="639.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.09%)</title><rect x="6.4195%" y="613" width="0.0904%" height="15" fill="rgb(231,60,39)" fg:x="71" fg:w="1"/><text x="6.6695%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="597" width="0.0904%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="1"/><text x="6.6695%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="581" width="0.0904%" height="15" fill="rgb(235,93,37)" fg:x="71" fg:w="1"/><text x="6.6695%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="565" width="0.0904%" height="15" fill="rgb(213,116,39)" fg:x="71" fg:w="1"/><text x="6.6695%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="549" width="0.0904%" height="15" fill="rgb(222,207,29)" fg:x="71" fg:w="1"/><text x="6.6695%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="533" width="0.0904%" height="15" fill="rgb(206,96,30)" fg:x="71" fg:w="1"/><text x="6.6695%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="517" width="0.0904%" height="15" fill="rgb(218,138,4)" fg:x="71" fg:w="1"/><text x="6.6695%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="501" width="0.0904%" height="15" fill="rgb(250,191,14)" fg:x="71" fg:w="1"/><text x="6.6695%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="485" width="0.0904%" height="15" fill="rgb(239,60,40)" fg:x="71" fg:w="1"/><text x="6.6695%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="469" width="0.0904%" height="15" fill="rgb(206,27,48)" fg:x="71" fg:w="1"/><text x="6.6695%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="453" width="0.0904%" height="15" fill="rgb(225,35,8)" fg:x="71" fg:w="1"/><text x="6.6695%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="437" width="0.0904%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="1"/><text x="6.6695%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="421" width="0.0904%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="1"/><text x="6.6695%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="405" width="0.0904%" height="15" fill="rgb(231,138,38)" fg:x="71" fg:w="1"/><text x="6.6695%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="389" width="0.0904%" height="15" fill="rgb(231,145,46)" fg:x="71" fg:w="1"/><text x="6.6695%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="6.4195%" y="373" width="0.0904%" height="15" fill="rgb(251,118,11)" fg:x="71" fg:w="1"/><text x="6.6695%" y="383.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.45%)</title><rect x="6.5099%" y="757" width="0.4521%" height="15" fill="rgb(217,147,25)" fg:x="72" fg:w="5"/><text x="6.7599%" y="767.50"></text></g><g><title>mi_page_queue_find_free_ex (5 samples, 0.45%)</title><rect x="6.5099%" y="741" width="0.4521%" height="15" fill="rgb(247,81,37)" fg:x="72" fg:w="5"/><text x="6.7599%" y="751.50"></text></g><g><title>mi_page_fresh_alloc (5 samples, 0.45%)</title><rect x="6.5099%" y="725" width="0.4521%" height="15" fill="rgb(209,12,38)" fg:x="72" fg:w="5"/><text x="6.7599%" y="735.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (5 samples, 0.45%)</title><rect x="6.5099%" y="709" width="0.4521%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="5"/><text x="6.7599%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="693" width="0.4521%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="5"/><text x="6.7599%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="677" width="0.4521%" height="15" fill="rgb(221,10,30)" fg:x="72" fg:w="5"/><text x="6.7599%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="661" width="0.4521%" height="15" fill="rgb(210,229,1)" fg:x="72" fg:w="5"/><text x="6.7599%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="645" width="0.4521%" height="15" fill="rgb(222,148,37)" fg:x="72" fg:w="5"/><text x="6.7599%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="629" width="0.4521%" height="15" fill="rgb(234,67,33)" fg:x="72" fg:w="5"/><text x="6.7599%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="613" width="0.4521%" height="15" fill="rgb(247,98,35)" fg:x="72" fg:w="5"/><text x="6.7599%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="597" width="0.4521%" height="15" fill="rgb(247,138,52)" fg:x="72" fg:w="5"/><text x="6.7599%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="581" width="0.4521%" height="15" fill="rgb(213,79,30)" fg:x="72" fg:w="5"/><text x="6.7599%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="565" width="0.4521%" height="15" fill="rgb(246,177,23)" fg:x="72" fg:w="5"/><text x="6.7599%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.5099%" y="549" width="0.4521%" height="15" fill="rgb(230,62,27)" fg:x="72" fg:w="5"/><text x="6.7599%" y="559.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (5 samples, 0.45%)</title><rect x="6.9620%" y="741" width="0.4521%" height="15" fill="rgb(216,154,8)" fg:x="77" fg:w="5"/><text x="7.2120%" y="751.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (5 samples, 0.45%)</title><rect x="6.9620%" y="725" width="0.4521%" height="15" fill="rgb(244,35,45)" fg:x="77" fg:w="5"/><text x="7.2120%" y="735.50"></text></g><g><title>crossbeam_epoch::internal::Local::register (5 samples, 0.45%)</title><rect x="6.9620%" y="709" width="0.4521%" height="15" fill="rgb(251,115,12)" fg:x="77" fg:w="5"/><text x="7.2120%" y="719.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.45%)</title><rect x="6.9620%" y="693" width="0.4521%" height="15" fill="rgb(240,54,50)" fg:x="77" fg:w="5"/><text x="7.2120%" y="703.50"></text></g><g><title>mi_page_queue_find_free_ex (5 samples, 0.45%)</title><rect x="6.9620%" y="677" width="0.4521%" height="15" fill="rgb(233,84,52)" fg:x="77" fg:w="5"/><text x="7.2120%" y="687.50"></text></g><g><title>mi_page_fresh_alloc (5 samples, 0.45%)</title><rect x="6.9620%" y="661" width="0.4521%" height="15" fill="rgb(207,117,47)" fg:x="77" fg:w="5"/><text x="7.2120%" y="671.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (5 samples, 0.45%)</title><rect x="6.9620%" y="645" width="0.4521%" height="15" fill="rgb(249,43,39)" fg:x="77" fg:w="5"/><text x="7.2120%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.9620%" y="629" width="0.4521%" height="15" fill="rgb(209,38,44)" fg:x="77" fg:w="5"/><text x="7.2120%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.9620%" y="613" width="0.4521%" height="15" fill="rgb(236,212,23)" fg:x="77" fg:w="5"/><text x="7.2120%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.9620%" y="597" width="0.4521%" height="15" fill="rgb(242,79,21)" fg:x="77" fg:w="5"/><text x="7.2120%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.9620%" y="581" width="0.4521%" height="15" fill="rgb(211,96,35)" fg:x="77" fg:w="5"/><text x="7.2120%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="6.9620%" y="565" width="0.4521%" height="15" fill="rgb(253,215,40)" fg:x="77" fg:w="5"/><text x="7.2120%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 2.17%)</title><rect x="6.4195%" y="837" width="2.1700%" height="15" fill="rgb(211,81,21)" fg:x="71" fg:w="24"/><text x="6.6695%" y="847.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 2.17%)</title><rect x="6.4195%" y="821" width="2.1700%" height="15" fill="rgb(208,190,38)" fg:x="71" fg:w="24"/><text x="6.6695%" y="831.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (24 samples, 2.17%)</title><rect x="6.4195%" y="805" width="2.1700%" height="15" fill="rgb(235,213,38)" fg:x="71" fg:w="24"/><text x="6.6695%" y="815.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 2.08%)</title><rect x="6.5099%" y="789" width="2.0796%" height="15" fill="rgb(237,122,38)" fg:x="72" fg:w="23"/><text x="6.7599%" y="799.50">s..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (23 samples, 2.08%)</title><rect x="6.5099%" y="773" width="2.0796%" height="15" fill="rgb(244,218,35)" fg:x="72" fg:w="23"/><text x="6.7599%" y="783.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (18 samples, 1.63%)</title><rect x="6.9620%" y="757" width="1.6275%" height="15" fill="rgb(240,68,47)" fg:x="77" fg:w="18"/><text x="7.2120%" y="767.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (13 samples, 1.18%)</title><rect x="7.4141%" y="741" width="1.1754%" height="15" fill="rgb(210,16,53)" fg:x="82" fg:w="13"/><text x="7.6641%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (13 samples, 1.18%)</title><rect x="7.4141%" y="725" width="1.1754%" height="15" fill="rgb(235,124,12)" fg:x="82" fg:w="13"/><text x="7.6641%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (13 samples, 1.18%)</title><rect x="7.4141%" y="709" width="1.1754%" height="15" fill="rgb(224,169,11)" fg:x="82" fg:w="13"/><text x="7.6641%" y="719.50"></text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 1.18%)</title><rect x="7.4141%" y="693" width="1.1754%" height="15" fill="rgb(250,166,2)" fg:x="82" fg:w="13"/><text x="7.6641%" y="703.50"></text></g><g><title>syscall (13 samples, 1.18%)</title><rect x="7.4141%" y="677" width="1.1754%" height="15" fill="rgb(242,216,29)" fg:x="82" fg:w="13"/><text x="7.6641%" y="687.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="661" width="1.1754%" height="15" fill="rgb(230,116,27)" fg:x="82" fg:w="13"/><text x="7.6641%" y="671.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="645" width="1.1754%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="13"/><text x="7.6641%" y="655.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="629" width="1.1754%" height="15" fill="rgb(253,11,6)" fg:x="82" fg:w="13"/><text x="7.6641%" y="639.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="613" width="1.1754%" height="15" fill="rgb(247,143,39)" fg:x="82" fg:w="13"/><text x="7.6641%" y="623.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="597" width="1.1754%" height="15" fill="rgb(236,97,10)" fg:x="82" fg:w="13"/><text x="7.6641%" y="607.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="581" width="1.1754%" height="15" fill="rgb(233,208,19)" fg:x="82" fg:w="13"/><text x="7.6641%" y="591.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="565" width="1.1754%" height="15" fill="rgb(216,164,2)" fg:x="82" fg:w="13"/><text x="7.6641%" y="575.50"></text></g><g><title>[unknown] (13 samples, 1.18%)</title><rect x="7.4141%" y="549" width="1.1754%" height="15" fill="rgb(220,129,5)" fg:x="82" fg:w="13"/><text x="7.6641%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.63%)</title><rect x="7.9566%" y="533" width="0.6329%" height="15" fill="rgb(242,17,10)" fg:x="88" fg:w="7"/><text x="8.2066%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.63%)</title><rect x="7.9566%" y="517" width="0.6329%" height="15" fill="rgb(242,107,0)" fg:x="88" fg:w="7"/><text x="8.2066%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.54%)</title><rect x="8.0470%" y="501" width="0.5425%" height="15" fill="rgb(251,28,31)" fg:x="89" fg:w="6"/><text x="8.2970%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="8.4991%" y="485" width="0.0904%" height="15" fill="rgb(233,223,10)" fg:x="94" fg:w="1"/><text x="8.7491%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="8.4991%" y="469" width="0.0904%" height="15" fill="rgb(215,21,27)" fg:x="94" fg:w="1"/><text x="8.7491%" y="479.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.45%)</title><rect x="8.5895%" y="773" width="0.4521%" height="15" fill="rgb(232,23,21)" fg:x="95" fg:w="5"/><text x="8.8395%" y="783.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.45%)</title><rect x="8.5895%" y="757" width="0.4521%" height="15" fill="rgb(244,5,23)" fg:x="95" fg:w="5"/><text x="8.8395%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="741" width="0.4521%" height="15" fill="rgb(226,81,46)" fg:x="95" fg:w="5"/><text x="8.8395%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="725" width="0.4521%" height="15" fill="rgb(247,70,30)" fg:x="95" fg:w="5"/><text x="8.8395%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="709" width="0.4521%" height="15" fill="rgb(212,68,19)" fg:x="95" fg:w="5"/><text x="8.8395%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="693" width="0.4521%" height="15" fill="rgb(240,187,13)" fg:x="95" fg:w="5"/><text x="8.8395%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="677" width="0.4521%" height="15" fill="rgb(223,113,26)" fg:x="95" fg:w="5"/><text x="8.8395%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="661" width="0.4521%" height="15" fill="rgb(206,192,2)" fg:x="95" fg:w="5"/><text x="8.8395%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="8.5895%" y="645" width="0.4521%" height="15" fill="rgb(241,108,4)" fg:x="95" fg:w="5"/><text x="8.8395%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.36%)</title><rect x="8.6799%" y="629" width="0.3617%" height="15" fill="rgb(247,173,49)" fg:x="96" fg:w="4"/><text x="8.9299%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="8.7703%" y="613" width="0.2712%" height="15" fill="rgb(224,114,35)" fg:x="97" fg:w="3"/><text x="9.0203%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="8.8608%" y="597" width="0.1808%" height="15" fill="rgb(245,159,27)" fg:x="98" fg:w="2"/><text x="9.1108%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="8.8608%" y="581" width="0.1808%" height="15" fill="rgb(245,172,44)" fg:x="98" fg:w="2"/><text x="9.1108%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="8.9512%" y="565" width="0.0904%" height="15" fill="rgb(236,23,11)" fg:x="99" fg:w="1"/><text x="9.2012%" y="575.50"></text></g><g><title>__clone3 (32 samples, 2.89%)</title><rect x="6.3291%" y="885" width="2.8933%" height="15" fill="rgb(205,117,38)" fg:x="70" fg:w="32"/><text x="6.5791%" y="895.50">__..</text></g><g><title>start_thread (31 samples, 2.80%)</title><rect x="6.4195%" y="869" width="2.8029%" height="15" fill="rgb(237,72,25)" fg:x="71" fg:w="31"/><text x="6.6695%" y="879.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (31 samples, 2.80%)</title><rect x="6.4195%" y="853" width="2.8029%" height="15" fill="rgb(244,70,9)" fg:x="71" fg:w="31"/><text x="6.6695%" y="863.50">st..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (7 samples, 0.63%)</title><rect x="8.5895%" y="837" width="0.6329%" height="15" fill="rgb(217,125,39)" fg:x="95" fg:w="7"/><text x="8.8395%" y="847.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (7 samples, 0.63%)</title><rect x="8.5895%" y="821" width="0.6329%" height="15" fill="rgb(235,36,10)" fg:x="95" fg:w="7"/><text x="8.8395%" y="831.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (7 samples, 0.63%)</title><rect x="8.5895%" y="805" width="0.6329%" height="15" fill="rgb(251,123,47)" fg:x="95" fg:w="7"/><text x="8.8395%" y="815.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (7 samples, 0.63%)</title><rect x="8.5895%" y="789" width="0.6329%" height="15" fill="rgb(221,13,13)" fg:x="95" fg:w="7"/><text x="8.8395%" y="799.50"></text></g><g><title>__GI___mprotect (2 samples, 0.18%)</title><rect x="9.0416%" y="773" width="0.1808%" height="15" fill="rgb(238,131,9)" fg:x="100" fg:w="2"/><text x="9.2916%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="757" width="0.1808%" height="15" fill="rgb(211,50,8)" fg:x="100" fg:w="2"/><text x="9.2916%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="741" width="0.1808%" height="15" fill="rgb(245,182,24)" fg:x="100" fg:w="2"/><text x="9.2916%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="725" width="0.1808%" height="15" fill="rgb(242,14,37)" fg:x="100" fg:w="2"/><text x="9.2916%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="709" width="0.1808%" height="15" fill="rgb(246,228,12)" fg:x="100" fg:w="2"/><text x="9.2916%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="693" width="0.1808%" height="15" fill="rgb(213,55,15)" fg:x="100" fg:w="2"/><text x="9.2916%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="677" width="0.1808%" height="15" fill="rgb(209,9,3)" fg:x="100" fg:w="2"/><text x="9.2916%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.0416%" y="661" width="0.1808%" height="15" fill="rgb(230,59,30)" fg:x="100" fg:w="2"/><text x="9.2916%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="9.1320%" y="645" width="0.0904%" height="15" fill="rgb(209,121,21)" fg:x="101" fg:w="1"/><text x="9.3820%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="9.1320%" y="629" width="0.0904%" height="15" fill="rgb(220,109,13)" fg:x="101" fg:w="1"/><text x="9.3820%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.45%)</title><rect x="9.2224%" y="597" width="0.4521%" height="15" fill="rgb(232,18,1)" fg:x="102" fg:w="5"/><text x="9.4724%" y="607.50"></text></g><g><title>__GI___munmap (5 samples, 0.45%)</title><rect x="9.2224%" y="581" width="0.4521%" height="15" fill="rgb(215,41,42)" fg:x="102" fg:w="5"/><text x="9.4724%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="565" width="0.4521%" height="15" fill="rgb(224,123,36)" fg:x="102" fg:w="5"/><text x="9.4724%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="549" width="0.4521%" height="15" fill="rgb(240,125,3)" fg:x="102" fg:w="5"/><text x="9.4724%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="533" width="0.4521%" height="15" fill="rgb(205,98,50)" fg:x="102" fg:w="5"/><text x="9.4724%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="517" width="0.4521%" height="15" fill="rgb(205,185,37)" fg:x="102" fg:w="5"/><text x="9.4724%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="501" width="0.4521%" height="15" fill="rgb(238,207,15)" fg:x="102" fg:w="5"/><text x="9.4724%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="485" width="0.4521%" height="15" fill="rgb(213,199,42)" fg:x="102" fg:w="5"/><text x="9.4724%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="469" width="0.4521%" height="15" fill="rgb(235,201,11)" fg:x="102" fg:w="5"/><text x="9.4724%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="453" width="0.4521%" height="15" fill="rgb(207,46,11)" fg:x="102" fg:w="5"/><text x="9.4724%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="437" width="0.4521%" height="15" fill="rgb(241,35,35)" fg:x="102" fg:w="5"/><text x="9.4724%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="421" width="0.4521%" height="15" fill="rgb(243,32,47)" fg:x="102" fg:w="5"/><text x="9.4724%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="9.2224%" y="405" width="0.4521%" height="15" fill="rgb(247,202,23)" fg:x="102" fg:w="5"/><text x="9.4724%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.4937%" y="389" width="0.1808%" height="15" fill="rgb(219,102,11)" fg:x="105" fg:w="2"/><text x="9.7437%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="9.4937%" y="373" width="0.1808%" height="15" fill="rgb(243,110,44)" fg:x="105" fg:w="2"/><text x="9.7437%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="9.5841%" y="357" width="0.0904%" height="15" fill="rgb(222,74,54)" fg:x="106" fg:w="1"/><text x="9.8341%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="9.5841%" y="341" width="0.0904%" height="15" fill="rgb(216,99,12)" fg:x="106" fg:w="1"/><text x="9.8341%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="9.5841%" y="325" width="0.0904%" height="15" fill="rgb(226,22,26)" fg:x="106" fg:w="1"/><text x="9.8341%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="9.6745%" y="565" width="0.0904%" height="15" fill="rgb(217,163,10)" fg:x="107" fg:w="1"/><text x="9.9245%" y="575.50"></text></g><g><title>mi_free (1 samples, 0.09%)</title><rect x="9.6745%" y="549" width="0.0904%" height="15" fill="rgb(213,25,53)" fg:x="107" fg:w="1"/><text x="9.9245%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(i32,csgoproto::netmessages::csvcmsg_game_event_list::Descriptor_t)&gt; (2 samples, 0.18%)</title><rect x="9.6745%" y="581" width="0.1808%" height="15" fill="rgb(252,105,26)" fg:x="107" fg:w="2"/><text x="9.9245%" y="591.50"></text></g><g><title>mi_free (1 samples, 0.09%)</title><rect x="9.7649%" y="565" width="0.0904%" height="15" fill="rgb(220,39,43)" fg:x="108" fg:w="1"/><text x="10.0149%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (107 samples, 9.67%)</title><rect x="9.6745%" y="597" width="9.6745%" height="15" fill="rgb(229,68,48)" fg:x="107" fg:w="107"/><text x="9.9245%" y="607.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::ParserState&gt; (105 samples, 9.49%)</title><rect x="9.8553%" y="581" width="9.4937%" height="15" fill="rgb(252,8,32)" fg:x="109" fg:w="105"/><text x="10.1053%" y="591.50">core::ptr::dro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 9.40%)</title><rect x="9.9458%" y="565" width="9.4033%" height="15" fill="rgb(223,20,43)" fg:x="110" fg:w="104"/><text x="10.1958%" y="575.50">&lt;alloc::vec::..</text></g><g><title>_mi_page_free (1 samples, 0.09%)</title><rect x="19.2586%" y="549" width="0.0904%" height="15" fill="rgb(229,81,49)" fg:x="213" fg:w="1"/><text x="19.5086%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.18%)</title><rect x="19.3490%" y="581" width="0.1808%" height="15" fill="rgb(236,28,36)" fg:x="214" fg:w="2"/><text x="19.5990%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::cache::cache_reader::ReadCache&gt; (3 samples, 0.27%)</title><rect x="19.5298%" y="581" width="0.2712%" height="15" fill="rgb(249,185,26)" fg:x="216" fg:w="3"/><text x="19.7798%" y="591.50"></text></g><g><title>__GI___munmap (3 samples, 0.27%)</title><rect x="19.5298%" y="565" width="0.2712%" height="15" fill="rgb(249,174,33)" fg:x="216" fg:w="3"/><text x="19.7798%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="549" width="0.2712%" height="15" fill="rgb(233,201,37)" fg:x="216" fg:w="3"/><text x="19.7798%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="533" width="0.2712%" height="15" fill="rgb(221,78,26)" fg:x="216" fg:w="3"/><text x="19.7798%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="517" width="0.2712%" height="15" fill="rgb(250,127,30)" fg:x="216" fg:w="3"/><text x="19.7798%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="501" width="0.2712%" height="15" fill="rgb(230,49,44)" fg:x="216" fg:w="3"/><text x="19.7798%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="485" width="0.2712%" height="15" fill="rgb(229,67,23)" fg:x="216" fg:w="3"/><text x="19.7798%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="469" width="0.2712%" height="15" fill="rgb(249,83,47)" fg:x="216" fg:w="3"/><text x="19.7798%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="453" width="0.2712%" height="15" fill="rgb(215,43,3)" fg:x="216" fg:w="3"/><text x="19.7798%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="437" width="0.2712%" height="15" fill="rgb(238,154,13)" fg:x="216" fg:w="3"/><text x="19.7798%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="421" width="0.2712%" height="15" fill="rgb(219,56,2)" fg:x="216" fg:w="3"/><text x="19.7798%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="19.5298%" y="405" width="0.2712%" height="15" fill="rgb(233,0,4)" fg:x="216" fg:w="3"/><text x="19.7798%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.7107%" y="389" width="0.0904%" height="15" fill="rgb(235,30,7)" fg:x="218" fg:w="1"/><text x="19.9607%" y="399.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_cache_if_exists (1 samples, 0.09%)</title><rect x="19.8011%" y="581" width="0.0904%" height="15" fill="rgb(250,79,13)" fg:x="219" fg:w="1"/><text x="20.0511%" y="591.50"></text></g><g><title>memmap2::MmapOptions::map (1 samples, 0.09%)</title><rect x="19.8011%" y="565" width="0.0904%" height="15" fill="rgb(211,146,34)" fg:x="219" fg:w="1"/><text x="20.0511%" y="575.50"></text></g><g><title>memmap2::os::file_len (1 samples, 0.09%)</title><rect x="19.8011%" y="549" width="0.0904%" height="15" fill="rgb(228,22,38)" fg:x="219" fg:w="1"/><text x="20.0511%" y="559.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.09%)</title><rect x="19.8011%" y="533" width="0.0904%" height="15" fill="rgb(235,168,5)" fg:x="219" fg:w="1"/><text x="20.0511%" y="543.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (1 samples, 0.09%)</title><rect x="19.8011%" y="517" width="0.0904%" height="15" fill="rgb(221,155,16)" fg:x="219" fg:w="1"/><text x="20.0511%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.09%)</title><rect x="19.8011%" y="501" width="0.0904%" height="15" fill="rgb(215,215,53)" fg:x="219" fg:w="1"/><text x="20.0511%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.09%)</title><rect x="19.8011%" y="485" width="0.0904%" height="15" fill="rgb(223,4,10)" fg:x="219" fg:w="1"/><text x="20.0511%" y="495.50"></text></g><g><title>statx (1 samples, 0.09%)</title><rect x="19.8011%" y="469" width="0.0904%" height="15" fill="rgb(234,103,6)" fg:x="219" fg:w="1"/><text x="20.0511%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.8011%" y="453" width="0.0904%" height="15" fill="rgb(227,97,0)" fg:x="219" fg:w="1"/><text x="20.0511%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.8011%" y="437" width="0.0904%" height="15" fill="rgb(234,150,53)" fg:x="219" fg:w="1"/><text x="20.0511%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.8011%" y="421" width="0.0904%" height="15" fill="rgb(228,201,54)" fg:x="219" fg:w="1"/><text x="20.0511%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.8011%" y="405" width="0.0904%" height="15" fill="rgb(222,22,37)" fg:x="219" fg:w="1"/><text x="20.0511%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="19.8011%" y="389" width="0.0904%" height="15" fill="rgb(237,53,32)" fg:x="219" fg:w="1"/><text x="20.0511%" y="399.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.09%)</title><rect x="21.5190%" y="533" width="0.0904%" height="15" fill="rgb(233,25,53)" fg:x="238" fg:w="1"/><text x="21.7690%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.36%)</title><rect x="21.4286%" y="565" width="0.3617%" height="15" fill="rgb(210,40,34)" fg:x="237" fg:w="4"/><text x="21.6786%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.36%)</title><rect x="21.4286%" y="549" width="0.3617%" height="15" fill="rgb(241,220,44)" fg:x="237" fg:w="4"/><text x="21.6786%" y="559.50"></text></g><g><title>mi_malloc (2 samples, 0.18%)</title><rect x="21.6094%" y="533" width="0.1808%" height="15" fill="rgb(235,28,35)" fg:x="239" fg:w="2"/><text x="21.8594%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="21.7902%" y="533" width="0.0904%" height="15" fill="rgb(210,56,17)" fg:x="241" fg:w="1"/><text x="22.0402%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="21.8807%" y="533" width="0.0904%" height="15" fill="rgb(224,130,29)" fg:x="242" fg:w="1"/><text x="22.1307%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="21.8807%" y="517" width="0.0904%" height="15" fill="rgb(235,212,8)" fg:x="242" fg:w="1"/><text x="22.1307%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.09%)</title><rect x="21.8807%" y="501" width="0.0904%" height="15" fill="rgb(223,33,50)" fg:x="242" fg:w="1"/><text x="22.1307%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="21.8807%" y="485" width="0.0904%" height="15" fill="rgb(219,149,13)" fg:x="242" fg:w="1"/><text x="22.1307%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="23.4177%" y="469" width="0.0904%" height="15" fill="rgb(250,156,29)" fg:x="259" fg:w="1"/><text x="23.6677%" y="479.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (21 samples, 1.90%)</title><rect x="21.7902%" y="565" width="1.8987%" height="15" fill="rgb(216,193,19)" fg:x="241" fg:w="21"/><text x="22.0402%" y="575.50">d..</text></g><g><title>std::io::default_read_to_end (21 samples, 1.90%)</title><rect x="21.7902%" y="549" width="1.8987%" height="15" fill="rgb(216,135,14)" fg:x="241" fg:w="21"/><text x="22.0402%" y="559.50">s..</text></g><g><title>flate2::zio::read (19 samples, 1.72%)</title><rect x="21.9711%" y="533" width="1.7179%" height="15" fill="rgb(241,47,5)" fg:x="243" fg:w="19"/><text x="22.2211%" y="543.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (19 samples, 1.72%)</title><rect x="21.9711%" y="517" width="1.7179%" height="15" fill="rgb(233,42,35)" fg:x="243" fg:w="19"/><text x="22.2211%" y="527.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (19 samples, 1.72%)</title><rect x="21.9711%" y="501" width="1.7179%" height="15" fill="rgb(231,13,6)" fg:x="243" fg:w="19"/><text x="22.2211%" y="511.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (19 samples, 1.72%)</title><rect x="21.9711%" y="485" width="1.7179%" height="15" fill="rgb(207,181,40)" fg:x="243" fg:w="19"/><text x="22.2211%" y="495.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (2 samples, 0.18%)</title><rect x="23.5081%" y="469" width="0.1808%" height="15" fill="rgb(254,173,49)" fg:x="260" fg:w="2"/><text x="23.7581%" y="479.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_eid_cls_map (43 samples, 3.89%)</title><rect x="19.8915%" y="581" width="3.8879%" height="15" fill="rgb(221,1,38)" fg:x="220" fg:w="43"/><text x="20.1415%" y="591.50">demo..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="23.6890%" y="565" width="0.0904%" height="15" fill="rgb(206,124,46)" fg:x="262" fg:w="1"/><text x="23.9390%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.99%)</title><rect x="27.2152%" y="565" width="0.9946%" height="15" fill="rgb(249,21,11)" fg:x="301" fg:w="11"/><text x="27.4652%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.99%)</title><rect x="27.2152%" y="549" width="0.9946%" height="15" fill="rgb(222,201,40)" fg:x="301" fg:w="11"/><text x="27.4652%" y="559.50"></text></g><g><title>_mi_heap_realloc_zero (11 samples, 0.99%)</title><rect x="27.2152%" y="533" width="0.9946%" height="15" fill="rgb(235,61,29)" fg:x="301" fg:w="11"/><text x="27.4652%" y="543.50"></text></g><g><title>[libc.so.6] (11 samples, 0.99%)</title><rect x="27.2152%" y="517" width="0.9946%" height="15" fill="rgb(219,207,3)" fg:x="301" fg:w="11"/><text x="27.4652%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="28.1193%" y="501" width="0.0904%" height="15" fill="rgb(222,56,46)" fg:x="311" fg:w="1"/><text x="28.3693%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.81%)</title><rect x="28.2098%" y="533" width="0.8137%" height="15" fill="rgb(239,76,54)" fg:x="312" fg:w="9"/><text x="28.4598%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.81%)</title><rect x="28.2098%" y="517" width="0.8137%" height="15" fill="rgb(231,124,27)" fg:x="312" fg:w="9"/><text x="28.4598%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (9 samples, 0.81%)</title><rect x="28.2098%" y="501" width="0.8137%" height="15" fill="rgb(249,195,6)" fg:x="312" fg:w="9"/><text x="28.4598%" y="511.50"></text></g><g><title>[libc.so.6] (9 samples, 0.81%)</title><rect x="28.2098%" y="485" width="0.8137%" height="15" fill="rgb(237,174,47)" fg:x="312" fg:w="9"/><text x="28.4598%" y="495.50"></text></g><g><title>[libc.so.6] (3 samples, 0.27%)</title><rect x="29.1139%" y="485" width="0.2712%" height="15" fill="rgb(206,201,31)" fg:x="322" fg:w="3"/><text x="29.3639%" y="495.50"></text></g><g><title>[libc.so.6] (5 samples, 0.45%)</title><rect x="44.6655%" y="469" width="0.4521%" height="15" fill="rgb(231,57,52)" fg:x="494" fg:w="5"/><text x="44.9155%" y="479.50"></text></g><g><title>adler::Adler32::write_slice (12 samples, 1.08%)</title><rect x="45.1175%" y="469" width="1.0850%" height="15" fill="rgb(248,177,22)" fg:x="499" fg:w="12"/><text x="45.3675%" y="479.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (16 samples, 1.45%)</title><rect x="46.2025%" y="469" width="1.4467%" height="15" fill="rgb(215,211,37)" fg:x="511" fg:w="16"/><text x="46.4525%" y="479.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (7 samples, 0.63%)</title><rect x="47.6492%" y="469" width="0.6329%" height="15" fill="rgb(241,128,51)" fg:x="527" fg:w="7"/><text x="47.8992%" y="479.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_game_events (288 samples, 26.04%)</title><rect x="23.7794%" y="581" width="26.0398%" height="15" fill="rgb(227,165,31)" fg:x="263" fg:w="288"/><text x="24.0294%" y="591.50">demoparser::parsing::cache::cache_reader::..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (239 samples, 21.61%)</title><rect x="28.2098%" y="565" width="21.6094%" height="15" fill="rgb(228,167,24)" fg:x="312" fg:w="239"/><text x="28.4598%" y="575.50">demoparser::parsing::cache::cache_..</text></g><g><title>std::io::default_read_to_end (239 samples, 21.61%)</title><rect x="28.2098%" y="549" width="21.6094%" height="15" fill="rgb(228,143,12)" fg:x="312" fg:w="239"/><text x="28.4598%" y="559.50">std::io::default_read_to_end</text></g><g><title>flate2::zio::read (230 samples, 20.80%)</title><rect x="29.0235%" y="533" width="20.7957%" height="15" fill="rgb(249,149,8)" fg:x="321" fg:w="230"/><text x="29.2735%" y="543.50">flate2::zio::read</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (229 samples, 20.71%)</title><rect x="29.1139%" y="517" width="20.7052%" height="15" fill="rgb(243,35,44)" fg:x="322" fg:w="229"/><text x="29.3639%" y="527.50">&lt;flate2::ffi::rust::Inflate as fl..</text></g><g><title>miniz_oxide::inflate::stream::inflate (229 samples, 20.71%)</title><rect x="29.1139%" y="501" width="20.7052%" height="15" fill="rgb(246,89,9)" fg:x="322" fg:w="229"/><text x="29.3639%" y="511.50">miniz_oxide::inflate::stream::inf..</text></g><g><title>miniz_oxide::inflate::core::decompress (226 samples, 20.43%)</title><rect x="29.3852%" y="485" width="20.4340%" height="15" fill="rgb(233,213,13)" fg:x="325" fg:w="226"/><text x="29.6352%" y="495.50">miniz_oxide::inflate::core::deco..</text></g><g><title>miniz_oxide::inflate::core::transfer (17 samples, 1.54%)</title><rect x="48.2821%" y="469" width="1.5371%" height="15" fill="rgb(233,141,41)" fg:x="534" fg:w="17"/><text x="48.5321%" y="479.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_index (1 samples, 0.09%)</title><rect x="49.8192%" y="581" width="0.0904%" height="15" fill="rgb(239,167,4)" fg:x="551" fg:w="1"/><text x="50.0692%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.09%)</title><rect x="49.8192%" y="565" width="0.0904%" height="15" fill="rgb(209,217,16)" fg:x="551" fg:w="1"/><text x="50.0692%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="49.8192%" y="549" width="0.0904%" height="15" fill="rgb(219,88,35)" fg:x="551" fg:w="1"/><text x="50.0692%" y="559.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_stringtables (1 samples, 0.09%)</title><rect x="49.9096%" y="581" width="0.0904%" height="15" fill="rgb(220,193,23)" fg:x="552" fg:w="1"/><text x="50.1596%" y="591.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (1 samples, 0.09%)</title><rect x="49.9096%" y="565" width="0.0904%" height="15" fill="rgb(230,90,52)" fg:x="552" fg:w="1"/><text x="50.1596%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="565" width="0.4521%" height="15" fill="rgb(252,106,19)" fg:x="554" fg:w="5"/><text x="50.3404%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="549" width="0.4521%" height="15" fill="rgb(206,74,20)" fg:x="554" fg:w="5"/><text x="50.3404%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="533" width="0.4521%" height="15" fill="rgb(230,138,44)" fg:x="554" fg:w="5"/><text x="50.3404%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="517" width="0.4521%" height="15" fill="rgb(235,182,43)" fg:x="554" fg:w="5"/><text x="50.3404%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="501" width="0.4521%" height="15" fill="rgb(242,16,51)" fg:x="554" fg:w="5"/><text x="50.3404%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="485" width="0.4521%" height="15" fill="rgb(248,9,4)" fg:x="554" fg:w="5"/><text x="50.3404%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="469" width="0.4521%" height="15" fill="rgb(210,31,22)" fg:x="554" fg:w="5"/><text x="50.3404%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="453" width="0.4521%" height="15" fill="rgb(239,54,39)" fg:x="554" fg:w="5"/><text x="50.3404%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="437" width="0.4521%" height="15" fill="rgb(230,99,41)" fg:x="554" fg:w="5"/><text x="50.3404%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="50.0904%" y="421" width="0.4521%" height="15" fill="rgb(253,106,12)" fg:x="554" fg:w="5"/><text x="50.3404%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="50.2712%" y="405" width="0.2712%" height="15" fill="rgb(213,46,41)" fg:x="556" fg:w="3"/><text x="50.5212%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="50.2712%" y="389" width="0.2712%" height="15" fill="rgb(215,133,35)" fg:x="556" fg:w="3"/><text x="50.5212%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="50.3617%" y="373" width="0.1808%" height="15" fill="rgb(213,28,5)" fg:x="557" fg:w="2"/><text x="50.6117%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="50.4521%" y="357" width="0.0904%" height="15" fill="rgb(215,77,49)" fg:x="558" fg:w="1"/><text x="50.7021%" y="367.50"></text></g><g><title>[libc.so.6] (135 samples, 12.21%)</title><rect x="61.2116%" y="501" width="12.2061%" height="15" fill="rgb(248,100,22)" fg:x="677" fg:w="135"/><text x="61.4616%" y="511.50">[libc.so.6]</text></g><g><title>[unknown] (7 samples, 0.63%)</title><rect x="72.7848%" y="485" width="0.6329%" height="15" fill="rgb(208,67,9)" fg:x="805" fg:w="7"/><text x="73.0348%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="469" width="0.1808%" height="15" fill="rgb(219,133,21)" fg:x="810" fg:w="2"/><text x="73.4869%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="453" width="0.1808%" height="15" fill="rgb(246,46,29)" fg:x="810" fg:w="2"/><text x="73.4869%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="437" width="0.1808%" height="15" fill="rgb(246,185,52)" fg:x="810" fg:w="2"/><text x="73.4869%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="421" width="0.1808%" height="15" fill="rgb(252,136,11)" fg:x="810" fg:w="2"/><text x="73.4869%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="405" width="0.1808%" height="15" fill="rgb(219,138,53)" fg:x="810" fg:w="2"/><text x="73.4869%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="389" width="0.1808%" height="15" fill="rgb(211,51,23)" fg:x="810" fg:w="2"/><text x="73.4869%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="373" width="0.1808%" height="15" fill="rgb(247,221,28)" fg:x="810" fg:w="2"/><text x="73.4869%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="357" width="0.1808%" height="15" fill="rgb(251,222,45)" fg:x="810" fg:w="2"/><text x="73.4869%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="341" width="0.1808%" height="15" fill="rgb(217,162,53)" fg:x="810" fg:w="2"/><text x="73.4869%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="325" width="0.1808%" height="15" fill="rgb(229,93,14)" fg:x="810" fg:w="2"/><text x="73.4869%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="73.2369%" y="309" width="0.1808%" height="15" fill="rgb(209,67,49)" fg:x="810" fg:w="2"/><text x="73.4869%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="73.3273%" y="293" width="0.0904%" height="15" fill="rgb(213,87,29)" fg:x="811" fg:w="1"/><text x="73.5773%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="73.3273%" y="277" width="0.0904%" height="15" fill="rgb(205,151,52)" fg:x="811" fg:w="1"/><text x="73.5773%" y="287.50"></text></g><g><title>_mi_clock_now (1 samples, 0.09%)</title><rect x="73.4177%" y="453" width="0.0904%" height="15" fill="rgb(253,215,39)" fg:x="812" fg:w="1"/><text x="73.6677%" y="463.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.09%)</title><rect x="73.4177%" y="437" width="0.0904%" height="15" fill="rgb(221,220,41)" fg:x="812" fg:w="1"/><text x="73.6677%" y="447.50"></text></g><g><title>[[vdso]] (1 samples, 0.09%)</title><rect x="73.4177%" y="421" width="0.0904%" height="15" fill="rgb(218,133,21)" fg:x="812" fg:w="1"/><text x="73.6677%" y="431.50"></text></g><g><title>[[vdso]] (1 samples, 0.09%)</title><rect x="73.4177%" y="405" width="0.0904%" height="15" fill="rgb(221,193,43)" fg:x="812" fg:w="1"/><text x="73.6677%" y="415.50"></text></g><g><title>mi_segment_span_allocate.isra.0 (1 samples, 0.09%)</title><rect x="73.5081%" y="437" width="0.0904%" height="15" fill="rgb(240,128,52)" fg:x="813" fg:w="1"/><text x="73.7581%" y="447.50"></text></g><g><title>mi_segment_commitx (1 samples, 0.09%)</title><rect x="73.5081%" y="421" width="0.0904%" height="15" fill="rgb(253,114,12)" fg:x="813" fg:w="1"/><text x="73.7581%" y="431.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.27%)</title><rect x="73.4177%" y="501" width="0.2712%" height="15" fill="rgb(215,223,47)" fg:x="812" fg:w="3"/><text x="73.6677%" y="511.50"></text></g><g><title>mi_page_fresh_alloc (3 samples, 0.27%)</title><rect x="73.4177%" y="485" width="0.2712%" height="15" fill="rgb(248,225,23)" fg:x="812" fg:w="3"/><text x="73.6677%" y="495.50"></text></g><g><title>mi_segments_page_alloc.constprop.1 (3 samples, 0.27%)</title><rect x="73.4177%" y="469" width="0.2712%" height="15" fill="rgb(250,108,0)" fg:x="812" fg:w="3"/><text x="73.6677%" y="479.50"></text></g><g><title>mi_segments_page_find_and_allocate (2 samples, 0.18%)</title><rect x="73.5081%" y="453" width="0.1808%" height="15" fill="rgb(228,208,7)" fg:x="813" fg:w="2"/><text x="73.7581%" y="463.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.09%)</title><rect x="73.5986%" y="437" width="0.0904%" height="15" fill="rgb(244,45,10)" fg:x="814" fg:w="1"/><text x="73.8486%" y="447.50"></text></g><g><title>mi_segment_perhaps_decommit (1 samples, 0.09%)</title><rect x="73.5986%" y="421" width="0.0904%" height="15" fill="rgb(207,125,25)" fg:x="814" fg:w="1"/><text x="73.8486%" y="431.50"></text></g><g><title>_mi_clock_now (1 samples, 0.09%)</title><rect x="73.5986%" y="405" width="0.0904%" height="15" fill="rgb(210,195,18)" fg:x="814" fg:w="1"/><text x="73.8486%" y="415.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.09%)</title><rect x="73.5986%" y="389" width="0.0904%" height="15" fill="rgb(249,80,12)" fg:x="814" fg:w="1"/><text x="73.8486%" y="399.50"></text></g><g><title>[[vdso]] (1 samples, 0.09%)</title><rect x="73.5986%" y="373" width="0.0904%" height="15" fill="rgb(221,65,9)" fg:x="814" fg:w="1"/><text x="73.8486%" y="383.50"></text></g><g><title>[[vdso]] (1 samples, 0.09%)</title><rect x="73.5986%" y="357" width="0.0904%" height="15" fill="rgb(235,49,36)" fg:x="814" fg:w="1"/><text x="73.8486%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (139 samples, 12.57%)</title><rect x="61.2116%" y="549" width="12.5678%" height="15" fill="rgb(225,32,20)" fg:x="677" fg:w="139"/><text x="61.4616%" y="559.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::finish_grow (139 samples, 12.57%)</title><rect x="61.2116%" y="533" width="12.5678%" height="15" fill="rgb(215,141,46)" fg:x="677" fg:w="139"/><text x="61.4616%" y="543.50">alloc::raw_vec::fin..</text></g><g><title>_mi_heap_realloc_zero (139 samples, 12.57%)</title><rect x="61.2116%" y="517" width="12.5678%" height="15" fill="rgb(250,160,47)" fg:x="677" fg:w="139"/><text x="61.4616%" y="527.50">_mi_heap_realloc_ze..</text></g><g><title>_mi_segment_page_free (1 samples, 0.09%)</title><rect x="73.6890%" y="501" width="0.0904%" height="15" fill="rgb(216,222,40)" fg:x="815" fg:w="1"/><text x="73.9390%" y="511.50"></text></g><g><title>mi_segment_span_free_coalesce (1 samples, 0.09%)</title><rect x="73.6890%" y="485" width="0.0904%" height="15" fill="rgb(234,217,39)" fg:x="815" fg:w="1"/><text x="73.9390%" y="495.50"></text></g><g><title>mi_segment_span_remove_from_queue (1 samples, 0.09%)</title><rect x="73.6890%" y="469" width="0.0904%" height="15" fill="rgb(207,178,40)" fg:x="815" fg:w="1"/><text x="73.9390%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.90%)</title><rect x="74.2315%" y="453" width="0.9042%" height="15" fill="rgb(221,136,13)" fg:x="821" fg:w="10"/><text x="74.4815%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.90%)</title><rect x="74.2315%" y="437" width="0.9042%" height="15" fill="rgb(249,199,10)" fg:x="821" fg:w="10"/><text x="74.4815%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.90%)</title><rect x="74.2315%" y="421" width="0.9042%" height="15" fill="rgb(249,222,13)" fg:x="821" fg:w="10"/><text x="74.4815%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.81%)</title><rect x="74.3219%" y="405" width="0.8137%" height="15" fill="rgb(244,185,38)" fg:x="822" fg:w="9"/><text x="74.5719%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.81%)</title><rect x="74.3219%" y="389" width="0.8137%" height="15" fill="rgb(236,202,9)" fg:x="822" fg:w="9"/><text x="74.5719%" y="399.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.81%)</title><rect x="74.3219%" y="373" width="0.8137%" height="15" fill="rgb(250,229,37)" fg:x="822" fg:w="9"/><text x="74.5719%" y="383.50"></text></g><g><title>mi_malloc (8 samples, 0.72%)</title><rect x="74.4123%" y="357" width="0.7233%" height="15" fill="rgb(206,174,23)" fg:x="823" fg:w="8"/><text x="74.6623%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 1.08%)</title><rect x="74.2315%" y="533" width="1.0850%" height="15" fill="rgb(211,33,43)" fg:x="821" fg:w="12"/><text x="74.4815%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 1.08%)</title><rect x="74.2315%" y="517" width="1.0850%" height="15" fill="rgb(245,58,50)" fg:x="821" fg:w="12"/><text x="74.4815%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 1.08%)</title><rect x="74.2315%" y="501" width="1.0850%" height="15" fill="rgb(244,68,36)" fg:x="821" fg:w="12"/><text x="74.4815%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 1.08%)</title><rect x="74.2315%" y="485" width="1.0850%" height="15" fill="rgb(232,229,15)" fg:x="821" fg:w="12"/><text x="74.4815%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 1.08%)</title><rect x="74.2315%" y="469" width="1.0850%" height="15" fill="rgb(254,30,23)" fg:x="821" fg:w="12"/><text x="74.4815%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.18%)</title><rect x="75.1356%" y="453" width="0.1808%" height="15" fill="rgb(235,160,14)" fg:x="831" fg:w="2"/><text x="75.3856%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.18%)</title><rect x="75.1356%" y="437" width="0.1808%" height="15" fill="rgb(212,155,44)" fg:x="831" fg:w="2"/><text x="75.3856%" y="447.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="75.1356%" y="421" width="0.1808%" height="15" fill="rgb(226,2,50)" fg:x="831" fg:w="2"/><text x="75.3856%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="75.3165%" y="533" width="0.0904%" height="15" fill="rgb(234,177,6)" fg:x="833" fg:w="1"/><text x="75.5665%" y="543.50"></text></g><g><title>__rust_alloc (1 samples, 0.09%)</title><rect x="75.4069%" y="533" width="0.0904%" height="15" fill="rgb(217,24,9)" fg:x="834" fg:w="1"/><text x="75.6569%" y="543.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.09%)</title><rect x="75.5877%" y="517" width="0.0904%" height="15" fill="rgb(220,13,46)" fg:x="836" fg:w="1"/><text x="75.8377%" y="527.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.27%)</title><rect x="75.4973%" y="533" width="0.2712%" height="15" fill="rgb(239,221,27)" fg:x="835" fg:w="3"/><text x="75.7473%" y="543.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.09%)</title><rect x="75.6781%" y="517" width="0.0904%" height="15" fill="rgb(222,198,25)" fg:x="837" fg:w="1"/><text x="75.9281%" y="527.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (1 samples, 0.09%)</title><rect x="75.6781%" y="501" width="0.0904%" height="15" fill="rgb(211,99,13)" fg:x="837" fg:w="1"/><text x="75.9281%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="75.6781%" y="485" width="0.0904%" height="15" fill="rgb(232,111,31)" fg:x="837" fg:w="1"/><text x="75.9281%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="75.6781%" y="469" width="0.0904%" height="15" fill="rgb(245,82,37)" fg:x="837" fg:w="1"/><text x="75.9281%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="75.6781%" y="453" width="0.0904%" height="15" fill="rgb(227,149,46)" fg:x="837" fg:w="1"/><text x="75.9281%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.09%)</title><rect x="75.7685%" y="533" width="0.0904%" height="15" fill="rgb(218,36,50)" fg:x="838" fg:w="1"/><text x="76.0185%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="75.7685%" y="517" width="0.0904%" height="15" fill="rgb(226,80,48)" fg:x="838" fg:w="1"/><text x="76.0185%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.09%)</title><rect x="75.7685%" y="501" width="0.0904%" height="15" fill="rgb(238,224,15)" fg:x="838" fg:w="1"/><text x="76.0185%" y="511.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.09%)</title><rect x="75.8590%" y="533" width="0.0904%" height="15" fill="rgb(241,136,10)" fg:x="839" fg:w="1"/><text x="76.1090%" y="543.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="75.8590%" y="517" width="0.0904%" height="15" fill="rgb(208,32,45)" fg:x="839" fg:w="1"/><text x="76.1090%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_end_matches (11 samples, 0.99%)</title><rect x="75.9494%" y="533" width="0.9946%" height="15" fill="rgb(207,135,9)" fg:x="840" fg:w="11"/><text x="76.1994%" y="543.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.09%)</title><rect x="83.0922%" y="469" width="0.0904%" height="15" fill="rgb(206,86,44)" fg:x="919" fg:w="1"/><text x="83.3422%" y="479.50"></text></g><g><title>_mi_heap_realloc_zero (12 samples, 1.08%)</title><rect x="82.1881%" y="485" width="1.0850%" height="15" fill="rgb(245,177,15)" fg:x="909" fg:w="12"/><text x="82.4381%" y="495.50"></text></g><g><title>mi_free (1 samples, 0.09%)</title><rect x="83.1826%" y="469" width="0.0904%" height="15" fill="rgb(206,64,50)" fg:x="920" fg:w="1"/><text x="83.4326%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 1.27%)</title><rect x="82.0976%" y="517" width="1.2658%" height="15" fill="rgb(234,36,40)" fg:x="908" fg:w="14"/><text x="82.3476%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 1.27%)</title><rect x="82.0976%" y="501" width="1.2658%" height="15" fill="rgb(213,64,8)" fg:x="908" fg:w="14"/><text x="82.3476%" y="511.50"></text></g><g><title>mi_heap_realloc (1 samples, 0.09%)</title><rect x="83.2731%" y="485" width="0.0904%" height="15" fill="rgb(210,75,36)" fg:x="921" fg:w="1"/><text x="83.5231%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_bits_st (190 samples, 17.18%)</title><rect x="76.9439%" y="533" width="17.1790%" height="15" fill="rgb(229,88,21)" fg:x="851" fg:w="190"/><text x="77.1939%" y="543.50">demoparser::parsing::demo_p..</text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_nbits (119 samples, 10.76%)</title><rect x="83.3635%" y="517" width="10.7595%" height="15" fill="rgb(252,204,47)" fg:x="922" fg:w="119"/><text x="83.6135%" y="527.50">demoparser::pars..</text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_nbits (2 samples, 0.18%)</title><rect x="94.1230%" y="533" width="0.1808%" height="15" fill="rgb(208,77,27)" fg:x="1041" fg:w="2"/><text x="94.3730%" y="543.50"></text></g><g><title>__rg_alloc (1 samples, 0.09%)</title><rect x="94.3942%" y="517" width="0.0904%" height="15" fill="rgb(221,76,26)" fg:x="1044" fg:w="1"/><text x="94.6442%" y="527.50"></text></g><g><title>__rust_alloc (1 samples, 0.09%)</title><rect x="94.4846%" y="517" width="0.0904%" height="15" fill="rgb(225,139,18)" fg:x="1045" fg:w="1"/><text x="94.7346%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.45%)</title><rect x="94.5750%" y="517" width="0.4521%" height="15" fill="rgb(230,137,11)" fg:x="1046" fg:w="5"/><text x="94.8250%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.36%)</title><rect x="94.6655%" y="501" width="0.3617%" height="15" fill="rgb(212,28,1)" fg:x="1047" fg:w="4"/><text x="94.9155%" y="511.50"></text></g><g><title>mi_malloc (4 samples, 0.36%)</title><rect x="94.6655%" y="485" width="0.3617%" height="15" fill="rgb(248,164,17)" fg:x="1047" fg:w="4"/><text x="94.9155%" y="495.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="95.2080%" y="501" width="0.0904%" height="15" fill="rgb(222,171,42)" fg:x="1053" fg:w="1"/><text x="95.4580%" y="511.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (5 samples, 0.45%)</title><rect x="95.0271%" y="517" width="0.4521%" height="15" fill="rgb(243,84,45)" fg:x="1051" fg:w="5"/><text x="95.2771%" y="527.50"></text></g><g><title>core::str::lossy::Utf8Chunk::valid (2 samples, 0.18%)</title><rect x="95.2984%" y="501" width="0.1808%" height="15" fill="rgb(252,49,23)" fg:x="1054" fg:w="2"/><text x="95.5484%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.09%)</title><rect x="95.4792%" y="517" width="0.0904%" height="15" fill="rgb(215,19,7)" fg:x="1056" fg:w="1"/><text x="95.7292%" y="527.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::read_string (16 samples, 1.45%)</title><rect x="94.3038%" y="533" width="1.4467%" height="15" fill="rgb(238,81,41)" fg:x="1043" fg:w="16"/><text x="94.5538%" y="543.50"></text></g><g><title>mi_malloc (2 samples, 0.18%)</title><rect x="95.5696%" y="517" width="0.1808%" height="15" fill="rgb(210,199,37)" fg:x="1057" fg:w="2"/><text x="95.8196%" y="527.50"></text></g><g><title>demoparser::parsing::demo_parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::update_string_table (246 samples, 22.24%)</title><rect x="73.7794%" y="549" width="22.2423%" height="15" fill="rgb(244,192,49)" fg:x="816" fg:w="246"/><text x="74.0294%" y="559.50">demoparser::parsing::demo_parsing::..</text></g><g><title>mi_malloc (3 samples, 0.27%)</title><rect x="95.7505%" y="533" width="0.2712%" height="15" fill="rgb(226,211,11)" fg:x="1059" fg:w="3"/><text x="96.0005%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.18%)</title><rect x="96.0217%" y="549" width="0.1808%" height="15" fill="rgb(236,162,54)" fg:x="1062" fg:w="2"/><text x="96.2717%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.09%)</title><rect x="96.1121%" y="533" width="0.0904%" height="15" fill="rgb(220,229,9)" fg:x="1063" fg:w="1"/><text x="96.3621%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="96.1121%" y="517" width="0.0904%" height="15" fill="rgb(250,87,22)" fg:x="1063" fg:w="1"/><text x="96.3621%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.18%)</title><rect x="96.2025%" y="549" width="0.1808%" height="15" fill="rgb(239,43,17)" fg:x="1064" fg:w="2"/><text x="96.4525%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="96.2929%" y="533" width="0.0904%" height="15" fill="rgb(231,177,25)" fg:x="1065" fg:w="1"/><text x="96.5429%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32 (1 samples, 0.09%)</title><rect x="96.5642%" y="501" width="0.0904%" height="15" fill="rgb(219,179,1)" fg:x="1068" fg:w="1"/><text x="96.8142%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (9 samples, 0.81%)</title><rect x="96.5642%" y="517" width="0.8137%" height="15" fill="rgb(238,219,53)" fg:x="1068" fg:w="9"/><text x="96.8142%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (8 samples, 0.72%)</title><rect x="96.6546%" y="501" width="0.7233%" height="15" fill="rgb(232,167,36)" fg:x="1069" fg:w="8"/><text x="96.9046%" y="511.50"></text></g><g><title>[libc.so.6] (8 samples, 0.72%)</title><rect x="96.6546%" y="485" width="0.7233%" height="15" fill="rgb(244,19,51)" fg:x="1069" fg:w="8"/><text x="96.9046%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="469" width="0.0904%" height="15" fill="rgb(224,6,22)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="453" width="0.0904%" height="15" fill="rgb(224,145,5)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="437" width="0.0904%" height="15" fill="rgb(234,130,49)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="421" width="0.0904%" height="15" fill="rgb(254,6,2)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="405" width="0.0904%" height="15" fill="rgb(208,96,46)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="389" width="0.0904%" height="15" fill="rgb(239,3,39)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="373" width="0.0904%" height="15" fill="rgb(233,210,1)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="357" width="0.0904%" height="15" fill="rgb(244,137,37)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="341" width="0.0904%" height="15" fill="rgb(240,136,2)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2875%" y="325" width="0.0904%" height="15" fill="rgb(239,18,37)" fg:x="1076" fg:w="1"/><text x="97.5375%" y="335.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_CreateStringTable as protobuf::message::Message&gt;::merge_from (10 samples, 0.90%)</title><rect x="96.5642%" y="533" width="0.9042%" height="15" fill="rgb(218,185,22)" fg:x="1068" fg:w="10"/><text x="96.8142%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.09%)</title><rect x="97.3779%" y="517" width="0.0904%" height="15" fill="rgb(225,218,4)" fg:x="1077" fg:w="1"/><text x="97.6279%" y="527.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.09%)</title><rect x="97.3779%" y="501" width="0.0904%" height="15" fill="rgb(230,182,32)" fg:x="1077" fg:w="1"/><text x="97.6279%" y="511.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.09%)</title><rect x="97.4684%" y="469" width="0.0904%" height="15" fill="rgb(242,56,43)" fg:x="1078" fg:w="1"/><text x="97.7184%" y="479.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.09%)</title><rect x="97.4684%" y="453" width="0.0904%" height="15" fill="rgb(233,99,24)" fg:x="1078" fg:w="1"/><text x="97.7184%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.18%)</title><rect x="97.4684%" y="517" width="0.1808%" height="15" fill="rgb(234,209,42)" fg:x="1078" fg:w="2"/><text x="97.7184%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.18%)</title><rect x="97.4684%" y="501" width="0.1808%" height="15" fill="rgb(227,7,12)" fg:x="1078" fg:w="2"/><text x="97.7184%" y="511.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.18%)</title><rect x="97.4684%" y="485" width="0.1808%" height="15" fill="rgb(245,203,43)" fg:x="1078" fg:w="2"/><text x="97.7184%" y="495.50"></text></g><g><title>mi_free (1 samples, 0.09%)</title><rect x="97.5588%" y="469" width="0.0904%" height="15" fill="rgb(238,205,33)" fg:x="1079" fg:w="1"/><text x="97.8088%" y="479.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (3 samples, 0.27%)</title><rect x="97.4684%" y="533" width="0.2712%" height="15" fill="rgb(231,56,7)" fg:x="1078" fg:w="3"/><text x="97.7184%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.09%)</title><rect x="97.6492%" y="517" width="0.0904%" height="15" fill="rgb(244,186,29)" fg:x="1080" fg:w="1"/><text x="97.8992%" y="527.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (1 samples, 0.09%)</title><rect x="97.6492%" y="501" width="0.0904%" height="15" fill="rgb(234,111,31)" fg:x="1080" fg:w="1"/><text x="97.8992%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.09%)</title><rect x="98.0108%" y="485" width="0.0904%" height="15" fill="rgb(241,149,10)" fg:x="1084" fg:w="1"/><text x="98.2608%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="98.0108%" y="469" width="0.0904%" height="15" fill="rgb(249,206,44)" fg:x="1084" fg:w="1"/><text x="98.2608%" y="479.50"></text></g><g><title>mi_malloc (1 samples, 0.09%)</title><rect x="98.0108%" y="453" width="0.0904%" height="15" fill="rgb(251,153,30)" fg:x="1084" fg:w="1"/><text x="98.2608%" y="463.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event_list::Key_t as protobuf::message::Message&gt;::merge_from (2 samples, 0.18%)</title><rect x="98.1013%" y="469" width="0.1808%" height="15" fill="rgb(239,152,38)" fg:x="1085" fg:w="2"/><text x="98.3513%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (2 samples, 0.18%)</title><rect x="98.1013%" y="453" width="0.1808%" height="15" fill="rgb(249,139,47)" fg:x="1085" fg:w="2"/><text x="98.3513%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (2 samples, 0.18%)</title><rect x="98.1013%" y="437" width="0.1808%" height="15" fill="rgb(244,64,35)" fg:x="1085" fg:w="2"/><text x="98.3513%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (1 samples, 0.09%)</title><rect x="98.1917%" y="421" width="0.0904%" height="15" fill="rgb(216,46,15)" fg:x="1086" fg:w="1"/><text x="98.4417%" y="431.50"></text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (875 samples, 79.11%)</title><rect x="19.3490%" y="597" width="79.1139%" height="15" fill="rgb(250,74,19)" fg:x="214" fg:w="875"/><text x="19.5990%" y="607.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (536 samples, 48.46%)</title><rect x="50.0000%" y="581" width="48.4629%" height="15" fill="rgb(249,42,33)" fg:x="553" fg:w="536"/><text x="50.2500%" y="591.50">demoparser::parsing::parser::Parser::parse_bytes</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (530 samples, 47.92%)</title><rect x="50.5425%" y="565" width="47.9204%" height="15" fill="rgb(242,149,17)" fg:x="559" fg:w="530"/><text x="50.7925%" y="575.50">demoparser::parsing::parser::Parser::msg_handler</text></g><g><title>protobuf::message::Message::parse_from_bytes (23 samples, 2.08%)</title><rect x="96.3834%" y="549" width="2.0796%" height="15" fill="rgb(244,29,21)" fg:x="1066" fg:w="23"/><text x="96.6334%" y="559.50">p..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEventList as protobuf::message::Message&gt;::merge_from (8 samples, 0.72%)</title><rect x="97.7396%" y="533" width="0.7233%" height="15" fill="rgb(220,130,37)" fg:x="1081" fg:w="8"/><text x="97.9896%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (7 samples, 0.63%)</title><rect x="97.8300%" y="517" width="0.6329%" height="15" fill="rgb(211,67,2)" fg:x="1082" fg:w="7"/><text x="98.0800%" y="527.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event_list::Descriptor_t as protobuf::message::Message&gt;::merge_from (7 samples, 0.63%)</title><rect x="97.8300%" y="501" width="0.6329%" height="15" fill="rgb(235,68,52)" fg:x="1082" fg:w="7"/><text x="98.0800%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (4 samples, 0.36%)</title><rect x="98.1013%" y="485" width="0.3617%" height="15" fill="rgb(246,142,3)" fg:x="1085" fg:w="4"/><text x="98.3513%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::push_limit (2 samples, 0.18%)</title><rect x="98.2821%" y="469" width="0.1808%" height="15" fill="rgb(241,25,7)" fg:x="1087" fg:w="2"/><text x="98.5321%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::push_limit (1 samples, 0.09%)</title><rect x="98.3725%" y="453" width="0.0904%" height="15" fill="rgb(242,119,39)" fg:x="1088" fg:w="1"/><text x="98.6225%" y="463.50"></text></g><g><title>_mi_heap_malloc_zero (2 samples, 0.18%)</title><rect x="98.4629%" y="581" width="0.1808%" height="15" fill="rgb(241,98,45)" fg:x="1089" fg:w="2"/><text x="98.7129%" y="591.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="98.4629%" y="565" width="0.1808%" height="15" fill="rgb(254,28,30)" fg:x="1089" fg:w="2"/><text x="98.7129%" y="575.50"></text></g><g><title>demoparser::parsing::parser_settings::&lt;impl demoparser::parsing::parser::Parser&gt;::new (3 samples, 0.27%)</title><rect x="98.4629%" y="597" width="0.2712%" height="15" fill="rgb(241,142,54)" fg:x="1089" fg:w="3"/><text x="98.7129%" y="607.50"></text></g><g><title>demoparser::parsing::utils::read_file (1 samples, 0.09%)</title><rect x="98.6438%" y="581" width="0.0904%" height="15" fill="rgb(222,85,15)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="591.50"></text></g><g><title>std::fs::File::open (1 samples, 0.09%)</title><rect x="98.6438%" y="565" width="0.0904%" height="15" fill="rgb(210,85,47)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="575.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.09%)</title><rect x="98.6438%" y="549" width="0.0904%" height="15" fill="rgb(224,206,25)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="559.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.09%)</title><rect x="98.6438%" y="533" width="0.0904%" height="15" fill="rgb(243,201,19)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.09%)</title><rect x="98.6438%" y="517" width="0.0904%" height="15" fill="rgb(236,59,4)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.09%)</title><rect x="98.6438%" y="501" width="0.0904%" height="15" fill="rgb(254,179,45)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.09%)</title><rect x="98.6438%" y="485" width="0.0904%" height="15" fill="rgb(226,14,10)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.09%)</title><rect x="98.6438%" y="469" width="0.0904%" height="15" fill="rgb(244,27,41)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="479.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.09%)</title><rect x="98.6438%" y="453" width="0.0904%" height="15" fill="rgb(235,35,32)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.09%)</title><rect x="98.6438%" y="437" width="0.0904%" height="15" fill="rgb(218,68,31)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="447.50"></text></g><g><title>__libc_open64 (1 samples, 0.09%)</title><rect x="98.6438%" y="421" width="0.0904%" height="15" fill="rgb(207,120,37)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="405" width="0.0904%" height="15" fill="rgb(227,98,0)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="389" width="0.0904%" height="15" fill="rgb(207,7,3)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="373" width="0.0904%" height="15" fill="rgb(206,98,19)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="357" width="0.0904%" height="15" fill="rgb(217,5,26)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="341" width="0.0904%" height="15" fill="rgb(235,190,38)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="325" width="0.0904%" height="15" fill="rgb(247,86,24)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="309" width="0.0904%" height="15" fill="rgb(205,101,16)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="293" width="0.0904%" height="15" fill="rgb(246,168,33)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.6438%" y="277" width="0.0904%" height="15" fill="rgb(231,114,1)" fg:x="1091" fg:w="1"/><text x="98.8938%" y="287.50"></text></g><g><title>demoparser::parsing::utils::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_demo_header (2 samples, 0.18%)</title><rect x="98.7342%" y="597" width="0.1808%" height="15" fill="rgb(207,184,53)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="607.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.18%)</title><rect x="98.7342%" y="581" width="0.1808%" height="15" fill="rgb(224,95,51)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="591.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.18%)</title><rect x="98.7342%" y="565" width="0.1808%" height="15" fill="rgb(212,188,45)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="549" width="0.1808%" height="15" fill="rgb(223,154,38)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="533" width="0.1808%" height="15" fill="rgb(251,22,52)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="517" width="0.1808%" height="15" fill="rgb(229,209,22)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="501" width="0.1808%" height="15" fill="rgb(234,138,34)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="485" width="0.1808%" height="15" fill="rgb(212,95,11)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="469" width="0.1808%" height="15" fill="rgb(240,179,47)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="453" width="0.1808%" height="15" fill="rgb(240,163,11)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="437" width="0.1808%" height="15" fill="rgb(236,37,12)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="421" width="0.1808%" height="15" fill="rgb(232,164,16)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.7342%" y="405" width="0.1808%" height="15" fill="rgb(244,205,15)" fg:x="1092" fg:w="2"/><text x="98.9842%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.8246%" y="389" width="0.0904%" height="15" fill="rgb(223,117,47)" fg:x="1093" fg:w="1"/><text x="99.0746%" y="399.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.09%)</title><rect x="98.9150%" y="565" width="0.0904%" height="15" fill="rgb(244,107,35)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="575.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.09%)</title><rect x="98.9150%" y="549" width="0.0904%" height="15" fill="rgb(205,140,8)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.09%)</title><rect x="98.9150%" y="533" width="0.0904%" height="15" fill="rgb(228,84,46)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="98.9150%" y="517" width="0.0904%" height="15" fill="rgb(254,188,9)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="98.9150%" y="501" width="0.0904%" height="15" fill="rgb(206,112,54)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="98.9150%" y="485" width="0.0904%" height="15" fill="rgb(216,84,49)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="98.9150%" y="469" width="0.0904%" height="15" fill="rgb(214,194,35)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="98.9150%" y="453" width="0.0904%" height="15" fill="rgb(249,28,3)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.09%)</title><rect x="98.9150%" y="437" width="0.0904%" height="15" fill="rgb(222,56,52)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="98.9150%" y="421" width="0.0904%" height="15" fill="rgb(245,217,50)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="431.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="98.9150%" y="405" width="0.0904%" height="15" fill="rgb(213,201,24)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.09%)</title><rect x="98.9150%" y="389" width="0.0904%" height="15" fill="rgb(248,116,28)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="399.50"></text></g><g><title>__GI___libc_write (1 samples, 0.09%)</title><rect x="98.9150%" y="373" width="0.0904%" height="15" fill="rgb(219,72,43)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="383.50"></text></g><g><title>__GI___libc_write (1 samples, 0.09%)</title><rect x="98.9150%" y="357" width="0.0904%" height="15" fill="rgb(209,138,14)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="341" width="0.0904%" height="15" fill="rgb(222,18,33)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="325" width="0.0904%" height="15" fill="rgb(213,199,7)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="309" width="0.0904%" height="15" fill="rgb(250,110,10)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="293" width="0.0904%" height="15" fill="rgb(248,123,6)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="277" width="0.0904%" height="15" fill="rgb(206,91,31)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="261" width="0.0904%" height="15" fill="rgb(211,154,13)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="245" width="0.0904%" height="15" fill="rgb(225,148,7)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="229" width="0.0904%" height="15" fill="rgb(220,160,43)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="213" width="0.0904%" height="15" fill="rgb(213,52,39)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="197" width="0.0904%" height="15" fill="rgb(243,137,7)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="181" width="0.0904%" height="15" fill="rgb(230,79,13)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="165" width="0.0904%" height="15" fill="rgb(247,105,23)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="149" width="0.0904%" height="15" fill="rgb(223,179,41)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="133" width="0.0904%" height="15" fill="rgb(218,9,34)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.9150%" y="117" width="0.0904%" height="15" fill="rgb(222,106,8)" fg:x="1094" fg:w="1"/><text x="99.1650%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (994 samples, 89.87%)</title><rect x="9.2224%" y="629" width="89.8734%" height="15" fill="rgb(211,220,0)" fg:x="102" fg:w="994"/><text x="9.4724%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>demoparser::parse_demo (994 samples, 89.87%)</title><rect x="9.2224%" y="613" width="89.8734%" height="15" fill="rgb(229,52,16)" fg:x="102" fg:w="994"/><text x="9.4724%" y="623.50">demoparser::parse_demo</text></g><g><title>std::io::stdio::_print (2 samples, 0.18%)</title><rect x="98.9150%" y="597" width="0.1808%" height="15" fill="rgb(212,155,18)" fg:x="1094" fg:w="2"/><text x="99.1650%" y="607.50"></text></g><g><title>std::io::stdio::print_to (2 samples, 0.18%)</title><rect x="98.9150%" y="581" width="0.1808%" height="15" fill="rgb(242,21,14)" fg:x="1094" fg:w="2"/><text x="99.1650%" y="591.50"></text></g><g><title>std::io::stdio::stdout (1 samples, 0.09%)</title><rect x="99.0054%" y="565" width="0.0904%" height="15" fill="rgb(222,19,48)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="575.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1 samples, 0.09%)</title><rect x="99.0054%" y="549" width="0.0904%" height="15" fill="rgb(232,45,27)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="559.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1 samples, 0.09%)</title><rect x="99.0054%" y="533" width="0.0904%" height="15" fill="rgb(249,103,42)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="543.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.09%)</title><rect x="99.0054%" y="517" width="0.0904%" height="15" fill="rgb(246,81,33)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="527.50"></text></g><g><title>std::sync::once::Once::call_once_force (1 samples, 0.09%)</title><rect x="99.0054%" y="501" width="0.0904%" height="15" fill="rgb(252,33,42)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="511.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.09%)</title><rect x="99.0054%" y="485" width="0.0904%" height="15" fill="rgb(209,212,41)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="495.50"></text></g><g><title>std::sync::once::Once::call_once_force::{{closure}} (1 samples, 0.09%)</title><rect x="99.0054%" y="469" width="0.0904%" height="15" fill="rgb(207,154,6)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="479.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize::{{closure}} (1 samples, 0.09%)</title><rect x="99.0054%" y="453" width="0.0904%" height="15" fill="rgb(223,64,47)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="463.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.09%)</title><rect x="99.0054%" y="437" width="0.0904%" height="15" fill="rgb(211,161,38)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="447.50"></text></g><g><title>std::io::stdio::stdout::{{closure}} (1 samples, 0.09%)</title><rect x="99.0054%" y="421" width="0.0904%" height="15" fill="rgb(219,138,40)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="431.50"></text></g><g><title>std::io::buffered::linewriter::LineWriter&lt;W&gt;::new (1 samples, 0.09%)</title><rect x="99.0054%" y="405" width="0.0904%" height="15" fill="rgb(241,228,46)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="415.50"></text></g><g><title>std::io::buffered::linewriter::LineWriter&lt;W&gt;::with_capacity (1 samples, 0.09%)</title><rect x="99.0054%" y="389" width="0.0904%" height="15" fill="rgb(223,209,38)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="399.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::with_capacity (1 samples, 0.09%)</title><rect x="99.0054%" y="373" width="0.0904%" height="15" fill="rgb(236,164,45)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.09%)</title><rect x="99.0054%" y="357" width="0.0904%" height="15" fill="rgb(231,15,5)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.09%)</title><rect x="99.0054%" y="341" width="0.0904%" height="15" fill="rgb(252,35,15)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.09%)</title><rect x="99.0054%" y="325" width="0.0904%" height="15" fill="rgb(248,181,18)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.09%)</title><rect x="99.0054%" y="309" width="0.0904%" height="15" fill="rgb(233,39,42)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.09%)</title><rect x="99.0054%" y="293" width="0.0904%" height="15" fill="rgb(238,110,33)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.09%)</title><rect x="99.0054%" y="277" width="0.0904%" height="15" fill="rgb(233,195,10)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.09%)</title><rect x="99.0054%" y="261" width="0.0904%" height="15" fill="rgb(254,105,3)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="271.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.09%)</title><rect x="99.0054%" y="245" width="0.0904%" height="15" fill="rgb(221,225,9)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="255.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.09%)</title><rect x="99.0054%" y="229" width="0.0904%" height="15" fill="rgb(224,227,45)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="239.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (1 samples, 0.09%)</title><rect x="99.0054%" y="213" width="0.0904%" height="15" fill="rgb(229,198,43)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="197" width="0.0904%" height="15" fill="rgb(206,209,35)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="181" width="0.0904%" height="15" fill="rgb(245,195,53)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="165" width="0.0904%" height="15" fill="rgb(240,92,26)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="149" width="0.0904%" height="15" fill="rgb(207,40,23)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="133" width="0.0904%" height="15" fill="rgb(223,111,35)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="117" width="0.0904%" height="15" fill="rgb(229,147,28)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="101" width="0.0904%" height="15" fill="rgb(211,29,28)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="85" width="0.0904%" height="15" fill="rgb(228,72,33)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="69" width="0.0904%" height="15" fill="rgb(205,214,31)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="53" width="0.0904%" height="15" fill="rgb(224,111,15)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0054%" y="37" width="0.0904%" height="15" fill="rgb(253,21,26)" fg:x="1095" fg:w="1"/><text x="99.2554%" y="47.50"></text></g><g><title>demoparser (1,101 samples, 99.55%)</title><rect x="0.0000%" y="901" width="99.5479%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="1101"/><text x="0.2500%" y="911.50">demoparser</text></g><g><title>_start (999 samples, 90.33%)</title><rect x="9.2224%" y="885" width="90.3255%" height="15" fill="rgb(252,170,7)" fg:x="102" fg:w="999"/><text x="9.4724%" y="895.50">_start</text></g><g><title>__libc_start_main_impl (999 samples, 90.33%)</title><rect x="9.2224%" y="869" width="90.3255%" height="15" fill="rgb(231,118,14)" fg:x="102" fg:w="999"/><text x="9.4724%" y="879.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (999 samples, 90.33%)</title><rect x="9.2224%" y="853" width="90.3255%" height="15" fill="rgb(238,83,0)" fg:x="102" fg:w="999"/><text x="9.4724%" y="863.50">__libc_start_call_main</text></g><g><title>main (999 samples, 90.33%)</title><rect x="9.2224%" y="837" width="90.3255%" height="15" fill="rgb(221,39,39)" fg:x="102" fg:w="999"/><text x="9.4724%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (999 samples, 90.33%)</title><rect x="9.2224%" y="821" width="90.3255%" height="15" fill="rgb(222,119,46)" fg:x="102" fg:w="999"/><text x="9.4724%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999 samples, 90.33%)</title><rect x="9.2224%" y="805" width="90.3255%" height="15" fill="rgb(222,165,49)" fg:x="102" fg:w="999"/><text x="9.4724%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999 samples, 90.33%)</title><rect x="9.2224%" y="789" width="90.3255%" height="15" fill="rgb(219,113,52)" fg:x="102" fg:w="999"/><text x="9.4724%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999 samples, 90.33%)</title><rect x="9.2224%" y="773" width="90.3255%" height="15" fill="rgb(214,7,15)" fg:x="102" fg:w="999"/><text x="9.4724%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (999 samples, 90.33%)</title><rect x="9.2224%" y="757" width="90.3255%" height="15" fill="rgb(235,32,4)" fg:x="102" fg:w="999"/><text x="9.4724%" y="767.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (999 samples, 90.33%)</title><rect x="9.2224%" y="741" width="90.3255%" height="15" fill="rgb(238,90,54)" fg:x="102" fg:w="999"/><text x="9.4724%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999 samples, 90.33%)</title><rect x="9.2224%" y="725" width="90.3255%" height="15" fill="rgb(213,208,19)" fg:x="102" fg:w="999"/><text x="9.4724%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999 samples, 90.33%)</title><rect x="9.2224%" y="709" width="90.3255%" height="15" fill="rgb(233,156,4)" fg:x="102" fg:w="999"/><text x="9.4724%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999 samples, 90.33%)</title><rect x="9.2224%" y="693" width="90.3255%" height="15" fill="rgb(207,194,5)" fg:x="102" fg:w="999"/><text x="9.4724%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999 samples, 90.33%)</title><rect x="9.2224%" y="677" width="90.3255%" height="15" fill="rgb(206,111,30)" fg:x="102" fg:w="999"/><text x="9.4724%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (999 samples, 90.33%)</title><rect x="9.2224%" y="661" width="90.3255%" height="15" fill="rgb(243,70,54)" fg:x="102" fg:w="999"/><text x="9.4724%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>demoparser::main (999 samples, 90.33%)</title><rect x="9.2224%" y="645" width="90.3255%" height="15" fill="rgb(242,28,8)" fg:x="102" fg:w="999"/><text x="9.4724%" y="655.50">demoparser::main</text></g><g><title>rayon_core::registry::Registry::wait_until_primed (5 samples, 0.45%)</title><rect x="99.0958%" y="629" width="0.4521%" height="15" fill="rgb(219,106,18)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="639.50"></text></g><g><title>rayon_core::latch::LockLatch::wait (5 samples, 0.45%)</title><rect x="99.0958%" y="613" width="0.4521%" height="15" fill="rgb(244,222,10)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 0.45%)</title><rect x="99.0958%" y="597" width="0.4521%" height="15" fill="rgb(236,179,52)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 0.45%)</title><rect x="99.0958%" y="581" width="0.4521%" height="15" fill="rgb(213,23,39)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.45%)</title><rect x="99.0958%" y="565" width="0.4521%" height="15" fill="rgb(238,48,10)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="575.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (5 samples, 0.45%)</title><rect x="99.0958%" y="549" width="0.4521%" height="15" fill="rgb(251,196,23)" fg:x="1096" fg:w="5"/><text x="99.3458%" y="559.50"></text></g><g><title>all (1,106 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(250,152,24)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="927.50"></text></g><g><title>perf-exec (5 samples, 0.45%)</title><rect x="99.5479%" y="901" width="0.4521%" height="15" fill="rgb(209,150,17)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="885" width="0.4521%" height="15" fill="rgb(234,202,34)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="869" width="0.4521%" height="15" fill="rgb(253,148,53)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="853" width="0.4521%" height="15" fill="rgb(218,129,16)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="837" width="0.4521%" height="15" fill="rgb(216,85,19)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="821" width="0.4521%" height="15" fill="rgb(235,228,7)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="805" width="0.4521%" height="15" fill="rgb(245,175,0)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="789" width="0.4521%" height="15" fill="rgb(208,168,36)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="773" width="0.4521%" height="15" fill="rgb(246,171,24)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="757" width="0.4521%" height="15" fill="rgb(215,142,24)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.45%)</title><rect x="99.5479%" y="741" width="0.4521%" height="15" fill="rgb(250,187,7)" fg:x="1101" fg:w="5"/><text x="99.7979%" y="751.50"></text></g></svg></svg>