<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="117"><g><title>HUF_decompress4X2_usingDTable_internal_bmi2_asm_loop (1 samples, 0.85%)</title><rect x="0.0000%" y="917" width="0.8547%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (18 samples, 15.38%)</title><rect x="0.8547%" y="917" width="15.3846%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="18"/><text x="1.1047%" y="927.50">[unknown]</text></g><g><title>[unknown] (13 samples, 11.11%)</title><rect x="5.1282%" y="901" width="11.1111%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="13"/><text x="5.3782%" y="911.50">[unknown]</text></g><g><title>[unknown] (13 samples, 11.11%)</title><rect x="5.1282%" y="885" width="11.1111%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="13"/><text x="5.3782%" y="895.50">[unknown]</text></g><g><title>[unknown] (13 samples, 11.11%)</title><rect x="5.1282%" y="869" width="11.1111%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="13"/><text x="5.3782%" y="879.50">[unknown]</text></g><g><title>[unknown] (13 samples, 11.11%)</title><rect x="5.1282%" y="853" width="11.1111%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="13"/><text x="5.3782%" y="863.50">[unknown]</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="837" width="2.5641%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="3"/><text x="13.9252%" y="847.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="821" width="2.5641%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="3"/><text x="13.9252%" y="831.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="805" width="2.5641%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="3"/><text x="13.9252%" y="815.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="789" width="2.5641%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="3"/><text x="13.9252%" y="799.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="773" width="2.5641%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="3"/><text x="13.9252%" y="783.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="13.6752%" y="757" width="2.5641%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="3"/><text x="13.9252%" y="767.50">[u..</text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="14.5299%" y="741" width="1.7094%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="2"/><text x="14.7799%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="15.3846%" y="725" width="0.8547%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="1"/><text x="15.6346%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.85%)</title><rect x="16.2393%" y="869" width="0.8547%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="16.4893%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.85%)</title><rect x="16.2393%" y="853" width="0.8547%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="1"/><text x="16.4893%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.85%)</title><rect x="16.2393%" y="837" width="0.8547%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="1"/><text x="16.4893%" y="847.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.85%)</title><rect x="16.2393%" y="821" width="0.8547%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="16.4893%" y="831.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.85%)</title><rect x="16.2393%" y="805" width="0.8547%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="16.4893%" y="815.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.85%)</title><rect x="16.2393%" y="789" width="0.8547%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="16.4893%" y="799.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.85%)</title><rect x="16.2393%" y="773" width="0.8547%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="16.4893%" y="783.50"></text></g><g><title>tcache_init (1 samples, 0.85%)</title><rect x="16.2393%" y="757" width="0.8547%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="16.4893%" y="767.50"></text></g><g><title>tcache_init (1 samples, 0.85%)</title><rect x="16.2393%" y="741" width="0.8547%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="1"/><text x="16.4893%" y="751.50"></text></g><g><title>arena_get2 (1 samples, 0.85%)</title><rect x="16.2393%" y="725" width="0.8547%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="1"/><text x="16.4893%" y="735.50"></text></g><g><title>arena_get2 (1 samples, 0.85%)</title><rect x="16.2393%" y="709" width="0.8547%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="1"/><text x="16.4893%" y="719.50"></text></g><g><title>_int_new_arena (1 samples, 0.85%)</title><rect x="16.2393%" y="693" width="0.8547%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="1"/><text x="16.4893%" y="703.50"></text></g><g><title>new_heap (1 samples, 0.85%)</title><rect x="16.2393%" y="677" width="0.8547%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="1"/><text x="16.4893%" y="687.50"></text></g><g><title>alloc_new_heap (1 samples, 0.85%)</title><rect x="16.2393%" y="661" width="0.8547%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="1"/><text x="16.4893%" y="671.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.85%)</title><rect x="16.2393%" y="645" width="0.8547%" height="15" fill="rgb(214,148,48)" fg:x="19" fg:w="1"/><text x="16.4893%" y="655.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.85%)</title><rect x="16.2393%" y="629" width="0.8547%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="1"/><text x="16.4893%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="613" width="0.8547%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="1"/><text x="16.4893%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="597" width="0.8547%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="1"/><text x="16.4893%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="581" width="0.8547%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="16.4893%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="565" width="0.8547%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="16.4893%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="549" width="0.8547%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="1"/><text x="16.4893%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="533" width="0.8547%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="1"/><text x="16.4893%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="517" width="0.8547%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="1"/><text x="16.4893%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="16.2393%" y="501" width="0.8547%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="1"/><text x="16.4893%" y="511.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.85%)</title><rect x="17.0940%" y="805" width="0.8547%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="17.3440%" y="815.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.85%)</title><rect x="17.0940%" y="789" width="0.8547%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="17.3440%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="773" width="0.8547%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="17.3440%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="757" width="0.8547%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="17.3440%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="741" width="0.8547%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="17.3440%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="725" width="0.8547%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="17.3440%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="709" width="0.8547%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="1"/><text x="17.3440%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="693" width="0.8547%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="1"/><text x="17.3440%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="677" width="0.8547%" height="15" fill="rgb(218,138,4)" fg:x="20" fg:w="1"/><text x="17.3440%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.0940%" y="661" width="0.8547%" height="15" fill="rgb(250,191,14)" fg:x="20" fg:w="1"/><text x="17.3440%" y="671.50"></text></g><g><title>__clone3 (3 samples, 2.56%)</title><rect x="16.2393%" y="917" width="2.5641%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="3"/><text x="16.4893%" y="927.50">__..</text></g><g><title>start_thread (3 samples, 2.56%)</title><rect x="16.2393%" y="901" width="2.5641%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="3"/><text x="16.4893%" y="911.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 2.56%)</title><rect x="16.2393%" y="885" width="2.5641%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="3"/><text x="16.4893%" y="895.50">st..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 1.71%)</title><rect x="17.0940%" y="869" width="1.7094%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="2"/><text x="17.3440%" y="879.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 1.71%)</title><rect x="17.0940%" y="853" width="1.7094%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="2"/><text x="17.3440%" y="863.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 1.71%)</title><rect x="17.0940%" y="837" width="1.7094%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="2"/><text x="17.3440%" y="847.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 1.71%)</title><rect x="17.0940%" y="821" width="1.7094%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="2"/><text x="17.3440%" y="831.50"></text></g><g><title>__GI___mprotect (1 samples, 0.85%)</title><rect x="17.9487%" y="805" width="0.8547%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="18.1987%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="789" width="0.8547%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="18.1987%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="773" width="0.8547%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="18.1987%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="757" width="0.8547%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="18.1987%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="741" width="0.8547%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="1"/><text x="18.1987%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="725" width="0.8547%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="18.1987%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="709" width="0.8547%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="18.1987%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="693" width="0.8547%" height="15" fill="rgb(210,229,1)" fg:x="21" fg:w="1"/><text x="18.1987%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="17.9487%" y="677" width="0.8547%" height="15" fill="rgb(222,148,37)" fg:x="21" fg:w="1"/><text x="18.1987%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="693" width="0.8547%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="1"/><text x="19.0534%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="677" width="0.8547%" height="15" fill="rgb(247,98,35)" fg:x="22" fg:w="1"/><text x="19.0534%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="661" width="0.8547%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="1"/><text x="19.0534%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="645" width="0.8547%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="1"/><text x="19.0534%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="629" width="0.8547%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="1"/><text x="19.0534%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="613" width="0.8547%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="1"/><text x="19.0534%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="597" width="0.8547%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="1"/><text x="19.0534%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="581" width="0.8547%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="1"/><text x="19.0534%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="565" width="0.8547%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="1"/><text x="19.0534%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="18.8034%" y="549" width="0.8547%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="1"/><text x="19.0534%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="469" width="0.8547%" height="15" fill="rgb(233,84,52)" fg:x="23" fg:w="1"/><text x="19.9081%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="453" width="0.8547%" height="15" fill="rgb(207,117,47)" fg:x="23" fg:w="1"/><text x="19.9081%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="437" width="0.8547%" height="15" fill="rgb(249,43,39)" fg:x="23" fg:w="1"/><text x="19.9081%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="421" width="0.8547%" height="15" fill="rgb(209,38,44)" fg:x="23" fg:w="1"/><text x="19.9081%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="405" width="0.8547%" height="15" fill="rgb(236,212,23)" fg:x="23" fg:w="1"/><text x="19.9081%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="389" width="0.8547%" height="15" fill="rgb(242,79,21)" fg:x="23" fg:w="1"/><text x="19.9081%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="19.6581%" y="373" width="0.8547%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="1"/><text x="19.9081%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.85%)</title><rect x="19.6581%" y="357" width="0.8547%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="1"/><text x="19.9081%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.85%)</title><rect x="19.6581%" y="341" width="0.8547%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="1"/><text x="19.9081%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.85%)</title><rect x="19.6581%" y="325" width="0.8547%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="1"/><text x="19.9081%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="309" width="0.8547%" height="15" fill="rgb(235,213,38)" fg:x="23" fg:w="1"/><text x="19.9081%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="293" width="0.8547%" height="15" fill="rgb(237,122,38)" fg:x="23" fg:w="1"/><text x="19.9081%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="277" width="0.8547%" height="15" fill="rgb(244,218,35)" fg:x="23" fg:w="1"/><text x="19.9081%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.85%)</title><rect x="19.6581%" y="261" width="0.8547%" height="15" fill="rgb(240,68,47)" fg:x="23" fg:w="1"/><text x="19.9081%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="19.6581%" y="245" width="0.8547%" height="15" fill="rgb(210,16,53)" fg:x="23" fg:w="1"/><text x="19.9081%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.85%)</title><rect x="19.6581%" y="229" width="0.8547%" height="15" fill="rgb(235,124,12)" fg:x="23" fg:w="1"/><text x="19.9081%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.85%)</title><rect x="19.6581%" y="213" width="0.8547%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="1"/><text x="19.9081%" y="223.50"></text></g><g><title>__GI___libc_free (1 samples, 0.85%)</title><rect x="19.6581%" y="197" width="0.8547%" height="15" fill="rgb(250,166,2)" fg:x="23" fg:w="1"/><text x="19.9081%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::cache::cache_reader::ReadCache&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="453" width="0.8547%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="1"/><text x="20.7628%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="437" width="0.8547%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="1"/><text x="20.7628%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="421" width="0.8547%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="1"/><text x="20.7628%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;)&gt;&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="405" width="0.8547%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="1"/><text x="20.7628%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="20.5128%" y="389" width="0.8547%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="1"/><text x="20.7628%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.85%)</title><rect x="20.5128%" y="373" width="0.8547%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="1"/><text x="20.7628%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.85%)</title><rect x="20.5128%" y="357" width="0.8547%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="1"/><text x="20.7628%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.85%)</title><rect x="20.5128%" y="341" width="0.8547%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="1"/><text x="20.7628%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;)&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="325" width="0.8547%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="1"/><text x="20.7628%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="309" width="0.8547%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="1"/><text x="20.7628%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;demoparser::parsing::cache::cache_reader::Delta&gt;&gt; (1 samples, 0.85%)</title><rect x="20.5128%" y="293" width="0.8547%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="1"/><text x="20.7628%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="20.5128%" y="277" width="0.8547%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="1"/><text x="20.7628%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.85%)</title><rect x="20.5128%" y="261" width="0.8547%" height="15" fill="rgb(233,223,10)" fg:x="24" fg:w="1"/><text x="20.7628%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.85%)</title><rect x="20.5128%" y="245" width="0.8547%" height="15" fill="rgb(215,21,27)" fg:x="24" fg:w="1"/><text x="20.7628%" y="255.50"></text></g><g><title>__GI___libc_free (1 samples, 0.85%)</title><rect x="20.5128%" y="229" width="0.8547%" height="15" fill="rgb(232,23,21)" fg:x="24" fg:w="1"/><text x="20.7628%" y="239.50"></text></g><g><title>__GI___munmap (1 samples, 0.85%)</title><rect x="20.5128%" y="213" width="0.8547%" height="15" fill="rgb(244,5,23)" fg:x="24" fg:w="1"/><text x="20.7628%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="197" width="0.8547%" height="15" fill="rgb(226,81,46)" fg:x="24" fg:w="1"/><text x="20.7628%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="181" width="0.8547%" height="15" fill="rgb(247,70,30)" fg:x="24" fg:w="1"/><text x="20.7628%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="165" width="0.8547%" height="15" fill="rgb(212,68,19)" fg:x="24" fg:w="1"/><text x="20.7628%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="149" width="0.8547%" height="15" fill="rgb(240,187,13)" fg:x="24" fg:w="1"/><text x="20.7628%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="133" width="0.8547%" height="15" fill="rgb(223,113,26)" fg:x="24" fg:w="1"/><text x="20.7628%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="117" width="0.8547%" height="15" fill="rgb(206,192,2)" fg:x="24" fg:w="1"/><text x="20.7628%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="101" width="0.8547%" height="15" fill="rgb(241,108,4)" fg:x="24" fg:w="1"/><text x="20.7628%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="85" width="0.8547%" height="15" fill="rgb(247,173,49)" fg:x="24" fg:w="1"/><text x="20.7628%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="69" width="0.8547%" height="15" fill="rgb(224,114,35)" fg:x="24" fg:w="1"/><text x="20.7628%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="53" width="0.8547%" height="15" fill="rgb(245,159,27)" fg:x="24" fg:w="1"/><text x="20.7628%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="20.5128%" y="37" width="0.8547%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="1"/><text x="20.7628%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.85%)</title><rect x="21.3675%" y="405" width="0.8547%" height="15" fill="rgb(236,23,11)" fg:x="25" fg:w="1"/><text x="21.6175%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.85%)</title><rect x="21.3675%" y="389" width="0.8547%" height="15" fill="rgb(205,117,38)" fg:x="25" fg:w="1"/><text x="21.6175%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.85%)</title><rect x="21.3675%" y="373" width="0.8547%" height="15" fill="rgb(237,72,25)" fg:x="25" fg:w="1"/><text x="21.6175%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 5.13%)</title><rect x="22.2222%" y="373" width="5.1282%" height="15" fill="rgb(244,70,9)" fg:x="26" fg:w="6"/><text x="22.4722%" y="383.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 5.13%)</title><rect x="22.2222%" y="357" width="5.1282%" height="15" fill="rgb(217,125,39)" fg:x="26" fg:w="6"/><text x="22.4722%" y="367.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 5.13%)</title><rect x="22.2222%" y="341" width="5.1282%" height="15" fill="rgb(235,36,10)" fg:x="26" fg:w="6"/><text x="22.4722%" y="351.50">hashbr..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 4.27%)</title><rect x="23.0769%" y="325" width="4.2735%" height="15" fill="rgb(251,123,47)" fg:x="27" fg:w="5"/><text x="23.3269%" y="335.50">&lt;hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 4.27%)</title><rect x="23.0769%" y="309" width="4.2735%" height="15" fill="rgb(221,13,13)" fg:x="27" fg:w="5"/><text x="23.3269%" y="319.50">hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.85%)</title><rect x="27.3504%" y="357" width="0.8547%" height="15" fill="rgb(238,131,9)" fg:x="32" fg:w="1"/><text x="27.6004%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.85%)</title><rect x="27.3504%" y="341" width="0.8547%" height="15" fill="rgb(211,50,8)" fg:x="32" fg:w="1"/><text x="27.6004%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.85%)</title><rect x="27.3504%" y="325" width="0.8547%" height="15" fill="rgb(245,182,24)" fg:x="32" fg:w="1"/><text x="27.6004%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.85%)</title><rect x="28.2051%" y="293" width="0.8547%" height="15" fill="rgb(242,14,37)" fg:x="33" fg:w="1"/><text x="28.4551%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="277" width="0.8547%" height="15" fill="rgb(246,228,12)" fg:x="33" fg:w="1"/><text x="28.4551%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="261" width="0.8547%" height="15" fill="rgb(213,55,15)" fg:x="33" fg:w="1"/><text x="28.4551%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="245" width="0.8547%" height="15" fill="rgb(209,9,3)" fg:x="33" fg:w="1"/><text x="28.4551%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="229" width="0.8547%" height="15" fill="rgb(230,59,30)" fg:x="33" fg:w="1"/><text x="28.4551%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="213" width="0.8547%" height="15" fill="rgb(209,121,21)" fg:x="33" fg:w="1"/><text x="28.4551%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="197" width="0.8547%" height="15" fill="rgb(220,109,13)" fg:x="33" fg:w="1"/><text x="28.4551%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="181" width="0.8547%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="1"/><text x="28.4551%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="165" width="0.8547%" height="15" fill="rgb(215,41,42)" fg:x="33" fg:w="1"/><text x="28.4551%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="28.2051%" y="149" width="0.8547%" height="15" fill="rgb(224,123,36)" fg:x="33" fg:w="1"/><text x="28.4551%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 1.71%)</title><rect x="28.2051%" y="357" width="1.7094%" height="15" fill="rgb(240,125,3)" fg:x="33" fg:w="2"/><text x="28.4551%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 1.71%)</title><rect x="28.2051%" y="341" width="1.7094%" height="15" fill="rgb(205,98,50)" fg:x="33" fg:w="2"/><text x="28.4551%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 1.71%)</title><rect x="28.2051%" y="325" width="1.7094%" height="15" fill="rgb(205,185,37)" fg:x="33" fg:w="2"/><text x="28.4551%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 1.71%)</title><rect x="28.2051%" y="309" width="1.7094%" height="15" fill="rgb(238,207,15)" fg:x="33" fg:w="2"/><text x="28.4551%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.85%)</title><rect x="29.0598%" y="293" width="0.8547%" height="15" fill="rgb(213,199,42)" fg:x="34" fg:w="1"/><text x="29.3098%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.85%)</title><rect x="29.0598%" y="277" width="0.8547%" height="15" fill="rgb(235,201,11)" fg:x="34" fg:w="1"/><text x="29.3098%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.85%)</title><rect x="29.9145%" y="341" width="0.8547%" height="15" fill="rgb(207,46,11)" fg:x="35" fg:w="1"/><text x="30.1645%" y="351.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_byte_tick_map (12 samples, 10.26%)</title><rect x="21.3675%" y="421" width="10.2564%" height="15" fill="rgb(241,35,35)" fg:x="25" fg:w="12"/><text x="21.6175%" y="431.50">demoparser::par..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 9.40%)</title><rect x="22.2222%" y="405" width="9.4017%" height="15" fill="rgb(243,32,47)" fg:x="26" fg:w="11"/><text x="22.4722%" y="415.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 9.40%)</title><rect x="22.2222%" y="389" width="9.4017%" height="15" fill="rgb(247,202,23)" fg:x="26" fg:w="11"/><text x="22.4722%" y="399.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 4.27%)</title><rect x="27.3504%" y="373" width="4.2735%" height="15" fill="rgb(219,102,11)" fg:x="32" fg:w="5"/><text x="27.6004%" y="383.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 1.71%)</title><rect x="29.9145%" y="357" width="1.7094%" height="15" fill="rgb(243,110,44)" fg:x="35" fg:w="2"/><text x="30.1645%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.85%)</title><rect x="30.7692%" y="341" width="0.8547%" height="15" fill="rgb(222,74,54)" fg:x="36" fg:w="1"/><text x="31.0192%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.85%)</title><rect x="30.7692%" y="325" width="0.8547%" height="15" fill="rgb(216,99,12)" fg:x="36" fg:w="1"/><text x="31.0192%" y="335.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_cache_if_exists (13 samples, 11.11%)</title><rect x="21.3675%" y="453" width="11.1111%" height="15" fill="rgb(226,22,26)" fg:x="25" fg:w="13"/><text x="21.6175%" y="463.50">demoparser::pars..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::new (13 samples, 11.11%)</title><rect x="21.3675%" y="437" width="11.1111%" height="15" fill="rgb(217,163,10)" fg:x="25" fg:w="13"/><text x="21.6175%" y="447.50">demoparser::pars..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::new (1 samples, 0.85%)</title><rect x="31.6239%" y="421" width="0.8547%" height="15" fill="rgb(213,25,53)" fg:x="37" fg:w="1"/><text x="31.8739%" y="431.50"></text></g><g><title>zip::read::central_header_to_zip_file (1 samples, 0.85%)</title><rect x="31.6239%" y="405" width="0.8547%" height="15" fill="rgb(252,105,26)" fg:x="37" fg:w="1"/><text x="31.8739%" y="415.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (1 samples, 0.85%)</title><rect x="31.6239%" y="389" width="0.8547%" height="15" fill="rgb(220,39,43)" fg:x="37" fg:w="1"/><text x="31.8739%" y="399.50"></text></g><g><title>std::io::Read::read_exact (1 samples, 0.85%)</title><rect x="31.6239%" y="373" width="0.8547%" height="15" fill="rgb(229,68,48)" fg:x="37" fg:w="1"/><text x="31.8739%" y="383.50"></text></g><g><title>std::io::default_read_exact (1 samples, 0.85%)</title><rect x="31.6239%" y="357" width="0.8547%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="1"/><text x="31.8739%" y="367.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.85%)</title><rect x="31.6239%" y="341" width="0.8547%" height="15" fill="rgb(223,20,43)" fg:x="37" fg:w="1"/><text x="31.8739%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.85%)</title><rect x="31.6239%" y="325" width="0.8547%" height="15" fill="rgb(229,81,49)" fg:x="37" fg:w="1"/><text x="31.8739%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.85%)</title><rect x="31.6239%" y="309" width="0.8547%" height="15" fill="rgb(236,28,36)" fg:x="37" fg:w="1"/><text x="31.8739%" y="319.50"></text></g><g><title>__GI___libc_read (1 samples, 0.85%)</title><rect x="31.6239%" y="293" width="0.8547%" height="15" fill="rgb(249,185,26)" fg:x="37" fg:w="1"/><text x="31.8739%" y="303.50"></text></g><g><title>__GI___libc_read (1 samples, 0.85%)</title><rect x="31.6239%" y="277" width="0.8547%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="1"/><text x="31.8739%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="261" width="0.8547%" height="15" fill="rgb(233,201,37)" fg:x="37" fg:w="1"/><text x="31.8739%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="245" width="0.8547%" height="15" fill="rgb(221,78,26)" fg:x="37" fg:w="1"/><text x="31.8739%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="229" width="0.8547%" height="15" fill="rgb(250,127,30)" fg:x="37" fg:w="1"/><text x="31.8739%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="213" width="0.8547%" height="15" fill="rgb(230,49,44)" fg:x="37" fg:w="1"/><text x="31.8739%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="197" width="0.8547%" height="15" fill="rgb(229,67,23)" fg:x="37" fg:w="1"/><text x="31.8739%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="181" width="0.8547%" height="15" fill="rgb(249,83,47)" fg:x="37" fg:w="1"/><text x="31.8739%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="165" width="0.8547%" height="15" fill="rgb(215,43,3)" fg:x="37" fg:w="1"/><text x="31.8739%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="149" width="0.8547%" height="15" fill="rgb(238,154,13)" fg:x="37" fg:w="1"/><text x="31.8739%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="31.6239%" y="133" width="0.8547%" height="15" fill="rgb(219,56,2)" fg:x="37" fg:w="1"/><text x="31.8739%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (16 samples, 13.68%)</title><rect x="32.4786%" y="405" width="13.6752%" height="15" fill="rgb(233,0,4)" fg:x="38" fg:w="16"/><text x="32.7286%" y="415.50">alloc::slice::&lt;impl [..</text></g><g><title>alloc::slice::merge_sort (16 samples, 13.68%)</title><rect x="32.4786%" y="389" width="13.6752%" height="15" fill="rgb(235,30,7)" fg:x="38" fg:w="16"/><text x="32.7286%" y="399.50">alloc::slice::merge_s..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key::{{closure}} (3 samples, 2.56%)</title><rect x="43.5897%" y="373" width="2.5641%" height="15" fill="rgb(250,79,13)" fg:x="51" fg:w="3"/><text x="43.8397%" y="383.50">al..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (3 samples, 2.56%)</title><rect x="43.5897%" y="357" width="2.5641%" height="15" fill="rgb(211,146,34)" fg:x="51" fg:w="3"/><text x="43.8397%" y="367.50">co..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 11.11%)</title><rect x="47.8632%" y="293" width="11.1111%" height="15" fill="rgb(228,22,38)" fg:x="56" fg:w="13"/><text x="48.1132%" y="303.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (13 samples, 11.11%)</title><rect x="47.8632%" y="277" width="11.1111%" height="15" fill="rgb(235,168,5)" fg:x="56" fg:w="13"/><text x="48.1132%" y="287.50">&lt;core::slice::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 2.56%)</title><rect x="56.4103%" y="261" width="2.5641%" height="15" fill="rgb(221,155,16)" fg:x="66" fg:w="3"/><text x="56.6603%" y="271.50">&lt;c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 17.95%)</title><rect x="46.1538%" y="341" width="17.9487%" height="15" fill="rgb(215,215,53)" fg:x="54" fg:w="21"/><text x="46.4038%" y="351.50">&lt;alloc::vec::Vec&lt;T,A&gt; as all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (21 samples, 17.95%)</title><rect x="46.1538%" y="325" width="17.9487%" height="15" fill="rgb(223,4,10)" fg:x="54" fg:w="21"/><text x="46.4038%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::extend..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 16.24%)</title><rect x="47.8632%" y="309" width="16.2393%" height="15" fill="rgb(234,103,6)" fg:x="56" fg:w="19"/><text x="48.1132%" y="319.50">&lt;core::iter::adapters::ma..</text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 5.13%)</title><rect x="58.9744%" y="293" width="5.1282%" height="15" fill="rgb(227,97,0)" fg:x="69" fg:w="6"/><text x="59.2244%" y="303.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 5.13%)</title><rect x="58.9744%" y="277" width="5.1282%" height="15" fill="rgb(234,150,53)" fg:x="69" fg:w="6"/><text x="59.2244%" y="287.50">core::..</text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}} (6 samples, 5.13%)</title><rect x="58.9744%" y="261" width="5.1282%" height="15" fill="rgb(228,201,54)" fg:x="69" fg:w="6"/><text x="59.2244%" y="271.50">demopa..</text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks (38 samples, 32.48%)</title><rect x="32.4786%" y="421" width="32.4786%" height="15" fill="rgb(222,22,37)" fg:x="38" fg:w="38"/><text x="32.7286%" y="431.50">demoparser::parsing::cache::cache_algorithms::&lt;impl d..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 18.80%)</title><rect x="46.1538%" y="405" width="18.8034%" height="15" fill="rgb(237,53,32)" fg:x="54" fg:w="22"/><text x="46.4038%" y="415.50">core::iter::traits::iterator:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 18.80%)</title><rect x="46.1538%" y="389" width="18.8034%" height="15" fill="rgb(233,25,53)" fg:x="54" fg:w="22"/><text x="46.4038%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 18.80%)</title><rect x="46.1538%" y="373" width="18.8034%" height="15" fill="rgb(210,40,34)" fg:x="54" fg:w="22"/><text x="46.4038%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22 samples, 18.80%)</title><rect x="46.1538%" y="357" width="18.8034%" height="15" fill="rgb(241,220,44)" fg:x="54" fg:w="22"/><text x="46.4038%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.85%)</title><rect x="64.1026%" y="341" width="0.8547%" height="15" fill="rgb(235,28,35)" fg:x="75" fg:w="1"/><text x="64.3526%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.85%)</title><rect x="64.1026%" y="325" width="0.8547%" height="15" fill="rgb(210,56,17)" fg:x="75" fg:w="1"/><text x="64.3526%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.85%)</title><rect x="64.1026%" y="309" width="0.8547%" height="15" fill="rgb(224,130,29)" fg:x="75" fg:w="1"/><text x="64.3526%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.71%)</title><rect x="65.8120%" y="389" width="1.7094%" height="15" fill="rgb(235,212,8)" fg:x="77" fg:w="2"/><text x="66.0620%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.71%)</title><rect x="65.8120%" y="373" width="1.7094%" height="15" fill="rgb(223,33,50)" fg:x="77" fg:w="2"/><text x="66.0620%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.71%)</title><rect x="65.8120%" y="357" width="1.7094%" height="15" fill="rgb(219,149,13)" fg:x="77" fg:w="2"/><text x="66.0620%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.71%)</title><rect x="65.8120%" y="341" width="1.7094%" height="15" fill="rgb(250,156,29)" fg:x="77" fg:w="2"/><text x="66.0620%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.71%)</title><rect x="65.8120%" y="325" width="1.7094%" height="15" fill="rgb(216,193,19)" fg:x="77" fg:w="2"/><text x="66.0620%" y="335.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.71%)</title><rect x="65.8120%" y="309" width="1.7094%" height="15" fill="rgb(216,135,14)" fg:x="77" fg:w="2"/><text x="66.0620%" y="319.50"></text></g><g><title>__GI___libc_realloc (2 samples, 1.71%)</title><rect x="65.8120%" y="293" width="1.7094%" height="15" fill="rgb(241,47,5)" fg:x="77" fg:w="2"/><text x="66.0620%" y="303.50"></text></g><g><title>_int_realloc (2 samples, 1.71%)</title><rect x="65.8120%" y="277" width="1.7094%" height="15" fill="rgb(233,42,35)" fg:x="77" fg:w="2"/><text x="66.0620%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 1.71%)</title><rect x="65.8120%" y="261" width="1.7094%" height="15" fill="rgb(231,13,6)" fg:x="77" fg:w="2"/><text x="66.0620%" y="271.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="65.8120%" y="245" width="1.7094%" height="15" fill="rgb(207,181,40)" fg:x="77" fg:w="2"/><text x="66.0620%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="66.6667%" y="229" width="0.8547%" height="15" fill="rgb(254,173,49)" fg:x="78" fg:w="1"/><text x="66.9167%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="66.6667%" y="213" width="0.8547%" height="15" fill="rgb(221,1,38)" fg:x="78" fg:w="1"/><text x="66.9167%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="66.6667%" y="197" width="0.8547%" height="15" fill="rgb(206,124,46)" fg:x="78" fg:w="1"/><text x="66.9167%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="66.6667%" y="181" width="0.8547%" height="15" fill="rgb(249,21,11)" fg:x="78" fg:w="1"/><text x="66.9167%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 9.40%)</title><rect x="64.9573%" y="405" width="9.4017%" height="15" fill="rgb(222,201,40)" fg:x="76" fg:w="11"/><text x="65.2073%" y="415.50">alloc::vec::V..</text></g><g><title>core::ptr::write (8 samples, 6.84%)</title><rect x="67.5214%" y="389" width="6.8376%" height="15" fill="rgb(235,61,29)" fg:x="79" fg:w="8"/><text x="67.7714%" y="399.50">core::ptr..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="373" width="2.5641%" height="15" fill="rgb(219,207,3)" fg:x="84" fg:w="3"/><text x="72.0449%" y="383.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="357" width="2.5641%" height="15" fill="rgb(222,56,46)" fg:x="84" fg:w="3"/><text x="72.0449%" y="367.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="341" width="2.5641%" height="15" fill="rgb(239,76,54)" fg:x="84" fg:w="3"/><text x="72.0449%" y="351.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="325" width="2.5641%" height="15" fill="rgb(231,124,27)" fg:x="84" fg:w="3"/><text x="72.0449%" y="335.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="309" width="2.5641%" height="15" fill="rgb(249,195,6)" fg:x="84" fg:w="3"/><text x="72.0449%" y="319.50">[u..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="71.7949%" y="293" width="2.5641%" height="15" fill="rgb(237,174,47)" fg:x="84" fg:w="3"/><text x="72.0449%" y="303.50">[u..</text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="72.6496%" y="277" width="1.7094%" height="15" fill="rgb(206,201,31)" fg:x="85" fg:w="2"/><text x="72.8996%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="73.5043%" y="261" width="0.8547%" height="15" fill="rgb(231,57,52)" fg:x="86" fg:w="1"/><text x="73.7543%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="73.5043%" y="245" width="0.8547%" height="15" fill="rgb(248,177,22)" fg:x="86" fg:w="1"/><text x="73.7543%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="73.5043%" y="229" width="0.8547%" height="15" fill="rgb(215,211,37)" fg:x="86" fg:w="1"/><text x="73.7543%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="73.5043%" y="213" width="0.8547%" height="15" fill="rgb(241,128,51)" fg:x="86" fg:w="1"/><text x="73.7543%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (1 samples, 0.85%)</title><rect x="74.3590%" y="405" width="0.8547%" height="15" fill="rgb(227,165,31)" fg:x="87" fg:w="1"/><text x="74.6090%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (1 samples, 0.85%)</title><rect x="74.3590%" y="389" width="0.8547%" height="15" fill="rgb(228,167,24)" fg:x="87" fg:w="1"/><text x="74.6090%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="74.3590%" y="373" width="0.8547%" height="15" fill="rgb(228,143,12)" fg:x="87" fg:w="1"/><text x="74.6090%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.85%)</title><rect x="74.3590%" y="357" width="0.8547%" height="15" fill="rgb(249,149,8)" fg:x="87" fg:w="1"/><text x="74.6090%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.85%)</title><rect x="74.3590%" y="341" width="0.8547%" height="15" fill="rgb(243,35,44)" fg:x="87" fg:w="1"/><text x="74.6090%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.85%)</title><rect x="74.3590%" y="325" width="0.8547%" height="15" fill="rgb(246,89,9)" fg:x="87" fg:w="1"/><text x="74.6090%" y="335.50"></text></g><g><title>__GI___munmap (1 samples, 0.85%)</title><rect x="74.3590%" y="309" width="0.8547%" height="15" fill="rgb(233,213,13)" fg:x="87" fg:w="1"/><text x="74.6090%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="293" width="0.8547%" height="15" fill="rgb(233,141,41)" fg:x="87" fg:w="1"/><text x="74.6090%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="277" width="0.8547%" height="15" fill="rgb(239,167,4)" fg:x="87" fg:w="1"/><text x="74.6090%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="261" width="0.8547%" height="15" fill="rgb(209,217,16)" fg:x="87" fg:w="1"/><text x="74.6090%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="245" width="0.8547%" height="15" fill="rgb(219,88,35)" fg:x="87" fg:w="1"/><text x="74.6090%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="229" width="0.8547%" height="15" fill="rgb(220,193,23)" fg:x="87" fg:w="1"/><text x="74.6090%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="213" width="0.8547%" height="15" fill="rgb(230,90,52)" fg:x="87" fg:w="1"/><text x="74.6090%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="197" width="0.8547%" height="15" fill="rgb(252,106,19)" fg:x="87" fg:w="1"/><text x="74.6090%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="181" width="0.8547%" height="15" fill="rgb(206,74,20)" fg:x="87" fg:w="1"/><text x="74.6090%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="165" width="0.8547%" height="15" fill="rgb(230,138,44)" fg:x="87" fg:w="1"/><text x="74.6090%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="149" width="0.8547%" height="15" fill="rgb(235,182,43)" fg:x="87" fg:w="1"/><text x="74.6090%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="133" width="0.8547%" height="15" fill="rgb(242,16,51)" fg:x="87" fg:w="1"/><text x="74.6090%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="117" width="0.8547%" height="15" fill="rgb(248,9,4)" fg:x="87" fg:w="1"/><text x="74.6090%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="74.3590%" y="101" width="0.8547%" height="15" fill="rgb(210,31,22)" fg:x="87" fg:w="1"/><text x="74.6090%" y="111.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.85%)</title><rect x="75.2137%" y="261" width="0.8547%" height="15" fill="rgb(239,54,39)" fg:x="88" fg:w="1"/><text x="75.4637%" y="271.50"></text></g><g><title>ahash::aes_hash::AHasher::from_random_state (1 samples, 0.85%)</title><rect x="75.2137%" y="245" width="0.8547%" height="15" fill="rgb(230,99,41)" fg:x="88" fg:w="1"/><text x="75.4637%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 1.71%)</title><rect x="75.2137%" y="325" width="1.7094%" height="15" fill="rgb(253,106,12)" fg:x="88" fg:w="2"/><text x="75.4637%" y="335.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (2 samples, 1.71%)</title><rect x="75.2137%" y="309" width="1.7094%" height="15" fill="rgb(213,46,41)" fg:x="88" fg:w="2"/><text x="75.4637%" y="319.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (2 samples, 1.71%)</title><rect x="75.2137%" y="293" width="1.7094%" height="15" fill="rgb(215,133,35)" fg:x="88" fg:w="2"/><text x="75.4637%" y="303.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (2 samples, 1.71%)</title><rect x="75.2137%" y="277" width="1.7094%" height="15" fill="rgb(213,28,5)" fg:x="88" fg:w="2"/><text x="75.4637%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.85%)</title><rect x="76.0684%" y="261" width="0.8547%" height="15" fill="rgb(215,77,49)" fg:x="89" fg:w="1"/><text x="76.3184%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (1 samples, 0.85%)</title><rect x="76.0684%" y="245" width="0.8547%" height="15" fill="rgb(248,100,22)" fg:x="89" fg:w="1"/><text x="76.3184%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i32 (1 samples, 0.85%)</title><rect x="76.0684%" y="229" width="0.8547%" height="15" fill="rgb(208,67,9)" fg:x="89" fg:w="1"/><text x="76.3184%" y="239.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u32 (1 samples, 0.85%)</title><rect x="76.0684%" y="213" width="0.8547%" height="15" fill="rgb(219,133,21)" fg:x="89" fg:w="1"/><text x="76.3184%" y="223.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1 samples, 0.85%)</title><rect x="76.0684%" y="197" width="0.8547%" height="15" fill="rgb(246,46,29)" fg:x="89" fg:w="1"/><text x="76.3184%" y="207.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u128 (1 samples, 0.85%)</title><rect x="76.0684%" y="181" width="0.8547%" height="15" fill="rgb(246,185,52)" fg:x="89" fg:w="1"/><text x="76.3184%" y="191.50"></text></g><g><title>ahash::aes_hash::AHasher::hash_in (1 samples, 0.85%)</title><rect x="76.0684%" y="165" width="0.8547%" height="15" fill="rgb(252,136,11)" fg:x="89" fg:w="1"/><text x="76.3184%" y="175.50"></text></g><g><title>ahash::operations::shuffle_and_add (1 samples, 0.85%)</title><rect x="76.0684%" y="149" width="0.8547%" height="15" fill="rgb(219,138,53)" fg:x="89" fg:w="1"/><text x="76.3184%" y="159.50"></text></g><g><title>ahash::operations::add_by_64s (1 samples, 0.85%)</title><rect x="76.0684%" y="133" width="0.8547%" height="15" fill="rgb(211,51,23)" fg:x="89" fg:w="1"/><text x="76.3184%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (1 samples, 0.85%)</title><rect x="76.0684%" y="117" width="0.8547%" height="15" fill="rgb(247,221,28)" fg:x="89" fg:w="1"/><text x="76.3184%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.85%)</title><rect x="82.9060%" y="277" width="0.8547%" height="15" fill="rgb(251,222,45)" fg:x="97" fg:w="1"/><text x="83.1560%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.85%)</title><rect x="82.9060%" y="261" width="0.8547%" height="15" fill="rgb(217,162,53)" fg:x="97" fg:w="1"/><text x="83.1560%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.85%)</title><rect x="82.9060%" y="245" width="0.8547%" height="15" fill="rgb(229,93,14)" fg:x="97" fg:w="1"/><text x="83.1560%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.85%)</title><rect x="82.9060%" y="229" width="0.8547%" height="15" fill="rgb(209,67,49)" fg:x="97" fg:w="1"/><text x="83.1560%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.85%)</title><rect x="82.9060%" y="213" width="0.8547%" height="15" fill="rgb(213,87,29)" fg:x="97" fg:w="1"/><text x="83.1560%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (13 samples, 11.11%)</title><rect x="75.2137%" y="389" width="11.1111%" height="15" fill="rgb(205,151,52)" fg:x="88" fg:w="13"/><text x="75.4637%" y="399.50">&lt;std::collection..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 11.11%)</title><rect x="75.2137%" y="373" width="11.1111%" height="15" fill="rgb(253,215,39)" fg:x="88" fg:w="13"/><text x="75.4637%" y="383.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (13 samples, 11.11%)</title><rect x="75.2137%" y="357" width="11.1111%" height="15" fill="rgb(221,220,41)" fg:x="88" fg:w="13"/><text x="75.4637%" y="367.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 11.11%)</title><rect x="75.2137%" y="341" width="11.1111%" height="15" fill="rgb(218,133,21)" fg:x="88" fg:w="13"/><text x="75.4637%" y="351.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 9.40%)</title><rect x="76.9231%" y="325" width="9.4017%" height="15" fill="rgb(221,193,43)" fg:x="90" fg:w="11"/><text x="77.1731%" y="335.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 9.40%)</title><rect x="76.9231%" y="309" width="9.4017%" height="15" fill="rgb(240,128,52)" fg:x="90" fg:w="11"/><text x="77.1731%" y="319.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 9.40%)</title><rect x="76.9231%" y="293" width="9.4017%" height="15" fill="rgb(253,114,12)" fg:x="90" fg:w="11"/><text x="77.1731%" y="303.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 2.56%)</title><rect x="83.7607%" y="277" width="2.5641%" height="15" fill="rgb(215,223,47)" fg:x="98" fg:w="3"/><text x="84.0107%" y="287.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 2.56%)</title><rect x="83.7607%" y="261" width="2.5641%" height="15" fill="rgb(248,225,23)" fg:x="98" fg:w="3"/><text x="84.0107%" y="271.50">co..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 2.56%)</title><rect x="89.7436%" y="373" width="2.5641%" height="15" fill="rgb(250,108,0)" fg:x="105" fg:w="3"/><text x="89.9936%" y="383.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 2.56%)</title><rect x="89.7436%" y="357" width="2.5641%" height="15" fill="rgb(228,208,7)" fg:x="105" fg:w="3"/><text x="89.9936%" y="367.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 2.56%)</title><rect x="89.7436%" y="341" width="2.5641%" height="15" fill="rgb(244,45,10)" fg:x="105" fg:w="3"/><text x="89.9936%" y="351.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 2.56%)</title><rect x="89.7436%" y="325" width="2.5641%" height="15" fill="rgb(207,125,25)" fg:x="105" fg:w="3"/><text x="89.9936%" y="335.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 2.56%)</title><rect x="89.7436%" y="309" width="2.5641%" height="15" fill="rgb(210,195,18)" fg:x="105" fg:w="3"/><text x="89.9936%" y="319.50">al..</text></g><g><title>alloc::alloc::realloc (3 samples, 2.56%)</title><rect x="89.7436%" y="293" width="2.5641%" height="15" fill="rgb(249,80,12)" fg:x="105" fg:w="3"/><text x="89.9936%" y="303.50">al..</text></g><g><title>__GI___libc_realloc (3 samples, 2.56%)</title><rect x="89.7436%" y="277" width="2.5641%" height="15" fill="rgb(221,65,9)" fg:x="105" fg:w="3"/><text x="89.9936%" y="287.50">__..</text></g><g><title>_int_realloc (3 samples, 2.56%)</title><rect x="89.7436%" y="261" width="2.5641%" height="15" fill="rgb(235,49,36)" fg:x="105" fg:w="3"/><text x="89.9936%" y="271.50">_i..</text></g><g><title>[libc.so.6] (3 samples, 2.56%)</title><rect x="89.7436%" y="245" width="2.5641%" height="15" fill="rgb(225,32,20)" fg:x="105" fg:w="3"/><text x="89.9936%" y="255.50">[l..</text></g><g><title>[unknown] (3 samples, 2.56%)</title><rect x="89.7436%" y="229" width="2.5641%" height="15" fill="rgb(215,141,46)" fg:x="105" fg:w="3"/><text x="89.9936%" y="239.50">[u..</text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="91.4530%" y="213" width="0.8547%" height="15" fill="rgb(250,160,47)" fg:x="107" fg:w="1"/><text x="91.7030%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="91.4530%" y="197" width="0.8547%" height="15" fill="rgb(216,222,40)" fg:x="107" fg:w="1"/><text x="91.7030%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="91.4530%" y="181" width="0.8547%" height="15" fill="rgb(234,217,39)" fg:x="107" fg:w="1"/><text x="91.7030%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="91.4530%" y="165" width="0.8547%" height="15" fill="rgb(207,178,40)" fg:x="107" fg:w="1"/><text x="91.7030%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="91.4530%" y="149" width="0.8547%" height="15" fill="rgb(221,136,13)" fg:x="107" fg:w="1"/><text x="91.7030%" y="159.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_wanted_bytes (73 samples, 62.39%)</title><rect x="32.4786%" y="437" width="62.3932%" height="15" fill="rgb(249,199,10)" fg:x="38" fg:w="73"/><text x="32.7286%" y="447.50">demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_deltas_by_name (35 samples, 29.91%)</title><rect x="64.9573%" y="421" width="29.9145%" height="15" fill="rgb(249,222,13)" fg:x="76" fg:w="35"/><text x="65.2073%" y="431.50">demoparser::parsing::cache::cache_reader::ReadCa..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::extract_entid_mask (23 samples, 19.66%)</title><rect x="75.2137%" y="405" width="19.6581%" height="15" fill="rgb(244,185,38)" fg:x="88" fg:w="23"/><text x="75.4637%" y="415.50">demoparser::parsing::cache::cac..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 8.55%)</title><rect x="86.3248%" y="389" width="8.5470%" height="15" fill="rgb(236,202,9)" fg:x="101" fg:w="10"/><text x="86.5748%" y="399.50">alloc::vec::..</text></g><g><title>core::ptr::write (3 samples, 2.56%)</title><rect x="92.3077%" y="373" width="2.5641%" height="15" fill="rgb(250,229,37)" fg:x="108" fg:w="3"/><text x="92.5577%" y="383.50">co..</text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="357" width="1.7094%" height="15" fill="rgb(206,174,23)" fg:x="109" fg:w="2"/><text x="93.4124%" y="367.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="341" width="1.7094%" height="15" fill="rgb(211,33,43)" fg:x="109" fg:w="2"/><text x="93.4124%" y="351.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="325" width="1.7094%" height="15" fill="rgb(245,58,50)" fg:x="109" fg:w="2"/><text x="93.4124%" y="335.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="309" width="1.7094%" height="15" fill="rgb(244,68,36)" fg:x="109" fg:w="2"/><text x="93.4124%" y="319.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="293" width="1.7094%" height="15" fill="rgb(232,229,15)" fg:x="109" fg:w="2"/><text x="93.4124%" y="303.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="277" width="1.7094%" height="15" fill="rgb(254,30,23)" fg:x="109" fg:w="2"/><text x="93.4124%" y="287.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="261" width="1.7094%" height="15" fill="rgb(235,160,14)" fg:x="109" fg:w="2"/><text x="93.4124%" y="271.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="245" width="1.7094%" height="15" fill="rgb(212,155,44)" fg:x="109" fg:w="2"/><text x="93.4124%" y="255.50"></text></g><g><title>[unknown] (2 samples, 1.71%)</title><rect x="93.1624%" y="229" width="1.7094%" height="15" fill="rgb(226,2,50)" fg:x="109" fg:w="2"/><text x="93.4124%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.0171%" y="213" width="0.8547%" height="15" fill="rgb(234,177,6)" fg:x="110" fg:w="1"/><text x="94.2671%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.0171%" y="197" width="0.8547%" height="15" fill="rgb(217,24,9)" fg:x="110" fg:w="1"/><text x="94.2671%" y="207.50"></text></g><g><title>demoparser (112 samples, 95.73%)</title><rect x="0.0000%" y="933" width="95.7265%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="112"/><text x="0.2500%" y="943.50">demoparser</text></g><g><title>_start (90 samples, 76.92%)</title><rect x="18.8034%" y="917" width="76.9231%" height="15" fill="rgb(239,221,27)" fg:x="22" fg:w="90"/><text x="19.0534%" y="927.50">_start</text></g><g><title>__libc_start_main_impl (90 samples, 76.92%)</title><rect x="18.8034%" y="901" width="76.9231%" height="15" fill="rgb(222,198,25)" fg:x="22" fg:w="90"/><text x="19.0534%" y="911.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (90 samples, 76.92%)</title><rect x="18.8034%" y="885" width="76.9231%" height="15" fill="rgb(211,99,13)" fg:x="22" fg:w="90"/><text x="19.0534%" y="895.50">__libc_start_call_main</text></g><g><title>main (90 samples, 76.92%)</title><rect x="18.8034%" y="869" width="76.9231%" height="15" fill="rgb(232,111,31)" fg:x="22" fg:w="90"/><text x="19.0534%" y="879.50">main</text></g><g><title>std::rt::lang_start_internal (90 samples, 76.92%)</title><rect x="18.8034%" y="853" width="76.9231%" height="15" fill="rgb(245,82,37)" fg:x="22" fg:w="90"/><text x="19.0534%" y="863.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (90 samples, 76.92%)</title><rect x="18.8034%" y="837" width="76.9231%" height="15" fill="rgb(227,149,46)" fg:x="22" fg:w="90"/><text x="19.0534%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (90 samples, 76.92%)</title><rect x="18.8034%" y="821" width="76.9231%" height="15" fill="rgb(218,36,50)" fg:x="22" fg:w="90"/><text x="19.0534%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (90 samples, 76.92%)</title><rect x="18.8034%" y="805" width="76.9231%" height="15" fill="rgb(226,80,48)" fg:x="22" fg:w="90"/><text x="19.0534%" y="815.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (90 samples, 76.92%)</title><rect x="18.8034%" y="789" width="76.9231%" height="15" fill="rgb(238,224,15)" fg:x="22" fg:w="90"/><text x="19.0534%" y="799.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (90 samples, 76.92%)</title><rect x="18.8034%" y="773" width="76.9231%" height="15" fill="rgb(241,136,10)" fg:x="22" fg:w="90"/><text x="19.0534%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (90 samples, 76.92%)</title><rect x="18.8034%" y="757" width="76.9231%" height="15" fill="rgb(208,32,45)" fg:x="22" fg:w="90"/><text x="19.0534%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (90 samples, 76.92%)</title><rect x="18.8034%" y="741" width="76.9231%" height="15" fill="rgb(207,135,9)" fg:x="22" fg:w="90"/><text x="19.0534%" y="751.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (90 samples, 76.92%)</title><rect x="18.8034%" y="725" width="76.9231%" height="15" fill="rgb(206,86,44)" fg:x="22" fg:w="90"/><text x="19.0534%" y="735.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (90 samples, 76.92%)</title><rect x="18.8034%" y="709" width="76.9231%" height="15" fill="rgb(245,177,15)" fg:x="22" fg:w="90"/><text x="19.0534%" y="719.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (89 samples, 76.07%)</title><rect x="19.6581%" y="693" width="76.0684%" height="15" fill="rgb(206,64,50)" fg:x="23" fg:w="89"/><text x="19.9081%" y="703.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (89 samples, 76.07%)</title><rect x="19.6581%" y="677" width="76.0684%" height="15" fill="rgb(234,36,40)" fg:x="23" fg:w="89"/><text x="19.9081%" y="687.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (89 samples, 76.07%)</title><rect x="19.6581%" y="661" width="76.0684%" height="15" fill="rgb(213,64,8)" fg:x="23" fg:w="89"/><text x="19.9081%" y="671.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (89 samples, 76.07%)</title><rect x="19.6581%" y="645" width="76.0684%" height="15" fill="rgb(210,75,36)" fg:x="23" fg:w="89"/><text x="19.9081%" y="655.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (89 samples, 76.07%)</title><rect x="19.6581%" y="629" width="76.0684%" height="15" fill="rgb(229,88,21)" fg:x="23" fg:w="89"/><text x="19.9081%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (89 samples, 76.07%)</title><rect x="19.6581%" y="613" width="76.0684%" height="15" fill="rgb(252,204,47)" fg:x="23" fg:w="89"/><text x="19.9081%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (89 samples, 76.07%)</title><rect x="19.6581%" y="597" width="76.0684%" height="15" fill="rgb(208,77,27)" fg:x="23" fg:w="89"/><text x="19.9081%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (89 samples, 76.07%)</title><rect x="19.6581%" y="581" width="76.0684%" height="15" fill="rgb(221,76,26)" fg:x="23" fg:w="89"/><text x="19.9081%" y="591.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (89 samples, 76.07%)</title><rect x="19.6581%" y="565" width="76.0684%" height="15" fill="rgb(225,139,18)" fg:x="23" fg:w="89"/><text x="19.9081%" y="575.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89 samples, 76.07%)</title><rect x="19.6581%" y="549" width="76.0684%" height="15" fill="rgb(230,137,11)" fg:x="23" fg:w="89"/><text x="19.9081%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (89 samples, 76.07%)</title><rect x="19.6581%" y="533" width="76.0684%" height="15" fill="rgb(212,28,1)" fg:x="23" fg:w="89"/><text x="19.9081%" y="543.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (89 samples, 76.07%)</title><rect x="19.6581%" y="517" width="76.0684%" height="15" fill="rgb(248,164,17)" fg:x="23" fg:w="89"/><text x="19.9081%" y="527.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (89 samples, 76.07%)</title><rect x="19.6581%" y="501" width="76.0684%" height="15" fill="rgb(222,171,42)" fg:x="23" fg:w="89"/><text x="19.9081%" y="511.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (89 samples, 76.07%)</title><rect x="19.6581%" y="485" width="76.0684%" height="15" fill="rgb(243,84,45)" fg:x="23" fg:w="89"/><text x="19.9081%" y="495.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (88 samples, 75.21%)</title><rect x="20.5128%" y="469" width="75.2137%" height="15" fill="rgb(252,49,23)" fg:x="24" fg:w="88"/><text x="20.7628%" y="479.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::create_output::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_with_cache (74 samples, 63.25%)</title><rect x="32.4786%" y="453" width="63.2479%" height="15" fill="rgb(215,19,7)" fg:x="38" fg:w="74"/><text x="32.7286%" y="463.50">demoparser::parsing::create_output::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jo..</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (1 samples, 0.85%)</title><rect x="94.8718%" y="437" width="0.8547%" height="15" fill="rgb(238,81,41)" fg:x="111" fg:w="1"/><text x="95.1218%" y="447.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_frame (1 samples, 0.85%)</title><rect x="94.8718%" y="421" width="0.8547%" height="15" fill="rgb(210,199,37)" fg:x="111" fg:w="1"/><text x="95.1218%" y="431.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_byte (1 samples, 0.85%)</title><rect x="94.8718%" y="405" width="0.8547%" height="15" fill="rgb(244,192,49)" fg:x="111" fg:w="1"/><text x="95.1218%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="389" width="0.8547%" height="15" fill="rgb(226,211,11)" fg:x="111" fg:w="1"/><text x="95.1218%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="373" width="0.8547%" height="15" fill="rgb(236,162,54)" fg:x="111" fg:w="1"/><text x="95.1218%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="357" width="0.8547%" height="15" fill="rgb(220,229,9)" fg:x="111" fg:w="1"/><text x="95.1218%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="341" width="0.8547%" height="15" fill="rgb(250,87,22)" fg:x="111" fg:w="1"/><text x="95.1218%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="325" width="0.8547%" height="15" fill="rgb(239,43,17)" fg:x="111" fg:w="1"/><text x="95.1218%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="309" width="0.8547%" height="15" fill="rgb(231,177,25)" fg:x="111" fg:w="1"/><text x="95.1218%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="293" width="0.8547%" height="15" fill="rgb(219,179,1)" fg:x="111" fg:w="1"/><text x="95.1218%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="277" width="0.8547%" height="15" fill="rgb(238,219,53)" fg:x="111" fg:w="1"/><text x="95.1218%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="261" width="0.8547%" height="15" fill="rgb(232,167,36)" fg:x="111" fg:w="1"/><text x="95.1218%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.85%)</title><rect x="94.8718%" y="245" width="0.8547%" height="15" fill="rgb(244,19,51)" fg:x="111" fg:w="1"/><text x="95.1218%" y="255.50"></text></g><g><title>all (117 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="117"/><text x="0.2500%" y="959.50"></text></g><g><title>perf-exec (5 samples, 4.27%)</title><rect x="95.7265%" y="933" width="4.2735%" height="15" fill="rgb(224,145,5)" fg:x="112" fg:w="5"/><text x="95.9765%" y="943.50">perf-..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="917" width="4.2735%" height="15" fill="rgb(234,130,49)" fg:x="112" fg:w="5"/><text x="95.9765%" y="927.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="901" width="4.2735%" height="15" fill="rgb(254,6,2)" fg:x="112" fg:w="5"/><text x="95.9765%" y="911.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="885" width="4.2735%" height="15" fill="rgb(208,96,46)" fg:x="112" fg:w="5"/><text x="95.9765%" y="895.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="869" width="4.2735%" height="15" fill="rgb(239,3,39)" fg:x="112" fg:w="5"/><text x="95.9765%" y="879.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="853" width="4.2735%" height="15" fill="rgb(233,210,1)" fg:x="112" fg:w="5"/><text x="95.9765%" y="863.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="837" width="4.2735%" height="15" fill="rgb(244,137,37)" fg:x="112" fg:w="5"/><text x="95.9765%" y="847.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="821" width="4.2735%" height="15" fill="rgb(240,136,2)" fg:x="112" fg:w="5"/><text x="95.9765%" y="831.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="805" width="4.2735%" height="15" fill="rgb(239,18,37)" fg:x="112" fg:w="5"/><text x="95.9765%" y="815.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="789" width="4.2735%" height="15" fill="rgb(218,185,22)" fg:x="112" fg:w="5"/><text x="95.9765%" y="799.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.27%)</title><rect x="95.7265%" y="773" width="4.2735%" height="15" fill="rgb(225,218,4)" fg:x="112" fg:w="5"/><text x="95.9765%" y="783.50">[unkn..</text></g></svg></svg>