<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="837.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="516"><g><title>[unknown] (106 samples, 20.54%)</title><rect x="0.0000%" y="773" width="20.5426%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="106"/><text x="0.2500%" y="783.50">[unknown]</text></g><g><title>[unknown] (81 samples, 15.70%)</title><rect x="4.8450%" y="757" width="15.6977%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="81"/><text x="5.0950%" y="767.50">[unknown]</text></g><g><title>[unknown] (81 samples, 15.70%)</title><rect x="4.8450%" y="741" width="15.6977%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="81"/><text x="5.0950%" y="751.50">[unknown]</text></g><g><title>[unknown] (71 samples, 13.76%)</title><rect x="6.7829%" y="725" width="13.7597%" height="15" fill="rgb(248,212,6)" fg:x="35" fg:w="71"/><text x="7.0329%" y="735.50">[unknown]</text></g><g><title>[unknown] (61 samples, 11.82%)</title><rect x="8.7209%" y="709" width="11.8217%" height="15" fill="rgb(208,68,35)" fg:x="45" fg:w="61"/><text x="8.9709%" y="719.50">[unknown]</text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="19.3798%" y="693" width="1.1628%" height="15" fill="rgb(232,128,0)" fg:x="100" fg:w="6"/><text x="19.6298%" y="703.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="19.3798%" y="677" width="1.1628%" height="15" fill="rgb(207,160,47)" fg:x="100" fg:w="6"/><text x="19.6298%" y="687.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="19.3798%" y="661" width="1.1628%" height="15" fill="rgb(228,23,34)" fg:x="100" fg:w="6"/><text x="19.6298%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="19.5736%" y="645" width="0.9690%" height="15" fill="rgb(218,30,26)" fg:x="101" fg:w="5"/><text x="19.8236%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="19.5736%" y="629" width="0.9690%" height="15" fill="rgb(220,122,19)" fg:x="101" fg:w="5"/><text x="19.8236%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="19.5736%" y="613" width="0.9690%" height="15" fill="rgb(250,228,42)" fg:x="101" fg:w="5"/><text x="19.8236%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="19.9612%" y="597" width="0.5814%" height="15" fill="rgb(240,193,28)" fg:x="103" fg:w="3"/><text x="20.2112%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="20.1550%" y="581" width="0.3876%" height="15" fill="rgb(216,20,37)" fg:x="104" fg:w="2"/><text x="20.4050%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.3488%" y="565" width="0.1938%" height="15" fill="rgb(206,188,39)" fg:x="105" fg:w="1"/><text x="20.5988%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.3488%" y="549" width="0.1938%" height="15" fill="rgb(217,207,13)" fg:x="105" fg:w="1"/><text x="20.5988%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.5426%" y="757" width="0.1938%" height="15" fill="rgb(231,73,38)" fg:x="106" fg:w="1"/><text x="20.7926%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.5426%" y="741" width="0.1938%" height="15" fill="rgb(225,20,46)" fg:x="106" fg:w="1"/><text x="20.7926%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.5426%" y="725" width="0.1938%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="1"/><text x="20.7926%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.5426%" y="709" width="0.1938%" height="15" fill="rgb(221,200,47)" fg:x="106" fg:w="1"/><text x="20.7926%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 1.36%)</title><rect x="20.9302%" y="533" width="1.3566%" height="15" fill="rgb(226,26,5)" fg:x="108" fg:w="7"/><text x="21.1802%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="22.2868%" y="517" width="0.1938%" height="15" fill="rgb(249,33,26)" fg:x="115" fg:w="1"/><text x="22.5368%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="27.1318%" y="501" width="0.1938%" height="15" fill="rgb(235,183,28)" fg:x="140" fg:w="1"/><text x="27.3818%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.39%)</title><rect x="27.3256%" y="501" width="0.3876%" height="15" fill="rgb(221,5,38)" fg:x="141" fg:w="2"/><text x="27.5756%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.39%)</title><rect x="27.3256%" y="485" width="0.3876%" height="15" fill="rgb(247,18,42)" fg:x="141" fg:w="2"/><text x="27.5756%" y="495.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push::{{closure}} (5 samples, 0.97%)</title><rect x="27.7132%" y="501" width="0.9690%" height="15" fill="rgb(241,131,45)" fg:x="143" fg:w="5"/><text x="27.9632%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.19%)</title><rect x="29.4574%" y="485" width="0.1938%" height="15" fill="rgb(249,31,29)" fg:x="152" fg:w="1"/><text x="29.7074%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.19%)</title><rect x="29.4574%" y="469" width="0.1938%" height="15" fill="rgb(225,111,53)" fg:x="152" fg:w="1"/><text x="29.7074%" y="479.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (6 samples, 1.16%)</title><rect x="28.6822%" y="501" width="1.1628%" height="15" fill="rgb(238,160,17)" fg:x="148" fg:w="6"/><text x="28.9322%" y="511.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1 samples, 0.19%)</title><rect x="29.6512%" y="485" width="0.1938%" height="15" fill="rgb(214,148,48)" fg:x="153" fg:w="1"/><text x="29.9012%" y="495.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.19%)</title><rect x="29.6512%" y="469" width="0.1938%" height="15" fill="rgb(232,36,49)" fg:x="153" fg:w="1"/><text x="29.9012%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.19%)</title><rect x="29.6512%" y="453" width="0.1938%" height="15" fill="rgb(209,103,24)" fg:x="153" fg:w="1"/><text x="29.9012%" y="463.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (57 samples, 11.05%)</title><rect x="22.2868%" y="533" width="11.0465%" height="15" fill="rgb(229,88,8)" fg:x="115" fg:w="57"/><text x="22.5368%" y="543.50">crossbeam_queue:..</text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (56 samples, 10.85%)</title><rect x="22.4806%" y="517" width="10.8527%" height="15" fill="rgb(213,181,19)" fg:x="116" fg:w="56"/><text x="22.7306%" y="527.50">crossbeam_queue:..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (18 samples, 3.49%)</title><rect x="29.8450%" y="501" width="3.4884%" height="15" fill="rgb(254,191,54)" fg:x="154" fg:w="18"/><text x="30.0950%" y="511.50">cro..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 3.10%)</title><rect x="30.2326%" y="485" width="3.1008%" height="15" fill="rgb(241,83,37)" fg:x="156" fg:w="16"/><text x="30.4826%" y="495.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 3.10%)</title><rect x="30.2326%" y="469" width="3.1008%" height="15" fill="rgb(233,36,39)" fg:x="156" fg:w="16"/><text x="30.4826%" y="479.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (3 samples, 0.58%)</title><rect x="32.7519%" y="453" width="0.5814%" height="15" fill="rgb(226,3,54)" fg:x="169" fg:w="3"/><text x="33.0019%" y="463.50"></text></g><g><title>demoparser::parsing::parser::Parser::find_beginning (3 samples, 0.58%)</title><rect x="33.3333%" y="533" width="0.5814%" height="15" fill="rgb(245,192,40)" fg:x="172" fg:w="3"/><text x="33.5833%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.39%)</title><rect x="33.5271%" y="517" width="0.3876%" height="15" fill="rgb(238,167,29)" fg:x="173" fg:w="2"/><text x="33.7771%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="33.9147%" y="517" width="0.1938%" height="15" fill="rgb(232,182,51)" fg:x="175" fg:w="1"/><text x="34.1647%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;demoparser::parsing::parser::ParsingMaps&gt;&gt;&gt; (4 samples, 0.78%)</title><rect x="34.1085%" y="517" width="0.7752%" height="15" fill="rgb(231,60,39)" fg:x="176" fg:w="4"/><text x="34.3585%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.78%)</title><rect x="34.1085%" y="501" width="0.7752%" height="15" fill="rgb(208,69,12)" fg:x="176" fg:w="4"/><text x="34.3585%" y="511.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (1 samples, 0.19%)</title><rect x="34.8837%" y="517" width="0.1938%" height="15" fill="rgb(235,93,37)" fg:x="180" fg:w="1"/><text x="35.1337%" y="527.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="34.8837%" y="501" width="0.1938%" height="15" fill="rgb(213,116,39)" fg:x="180" fg:w="1"/><text x="35.1337%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="34.8837%" y="485" width="0.1938%" height="15" fill="rgb(222,207,29)" fg:x="180" fg:w="1"/><text x="35.1337%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="34.8837%" y="469" width="0.1938%" height="15" fill="rgb(206,96,30)" fg:x="180" fg:w="1"/><text x="35.1337%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="34.8837%" y="453" width="0.1938%" height="15" fill="rgb(218,138,4)" fg:x="180" fg:w="1"/><text x="35.1337%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="34.8837%" y="437" width="0.1938%" height="15" fill="rgb(250,191,14)" fg:x="180" fg:w="1"/><text x="35.1337%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="34.8837%" y="421" width="0.1938%" height="15" fill="rgb(239,60,40)" fg:x="180" fg:w="1"/><text x="35.1337%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="34.8837%" y="405" width="0.1938%" height="15" fill="rgb(206,27,48)" fg:x="180" fg:w="1"/><text x="35.1337%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.19%)</title><rect x="34.8837%" y="389" width="0.1938%" height="15" fill="rgb(225,35,8)" fg:x="180" fg:w="1"/><text x="35.1337%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="34.8837%" y="373" width="0.1938%" height="15" fill="rgb(250,213,24)" fg:x="180" fg:w="1"/><text x="35.1337%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="34.8837%" y="357" width="0.1938%" height="15" fill="rgb(247,123,22)" fg:x="180" fg:w="1"/><text x="35.1337%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="34.8837%" y="341" width="0.1938%" height="15" fill="rgb(231,138,38)" fg:x="180" fg:w="1"/><text x="35.1337%" y="351.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.19%)</title><rect x="34.8837%" y="325" width="0.1938%" height="15" fill="rgb(231,145,46)" fg:x="180" fg:w="1"/><text x="35.1337%" y="335.50"></text></g><g><title>mi_find_page (1 samples, 0.19%)</title><rect x="34.8837%" y="309" width="0.1938%" height="15" fill="rgb(251,118,11)" fg:x="180" fg:w="1"/><text x="35.1337%" y="319.50"></text></g><g><title>mi_find_free_page (1 samples, 0.19%)</title><rect x="34.8837%" y="293" width="0.1938%" height="15" fill="rgb(217,147,25)" fg:x="180" fg:w="1"/><text x="35.1337%" y="303.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.19%)</title><rect x="34.8837%" y="277" width="0.1938%" height="15" fill="rgb(247,81,37)" fg:x="180" fg:w="1"/><text x="35.1337%" y="287.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.19%)</title><rect x="34.8837%" y="261" width="0.1938%" height="15" fill="rgb(209,12,38)" fg:x="180" fg:w="1"/><text x="35.1337%" y="271.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.19%)</title><rect x="34.8837%" y="245" width="0.1938%" height="15" fill="rgb(227,1,9)" fg:x="180" fg:w="1"/><text x="35.1337%" y="255.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.19%)</title><rect x="34.8837%" y="229" width="0.1938%" height="15" fill="rgb(248,47,43)" fg:x="180" fg:w="1"/><text x="35.1337%" y="239.50"></text></g><g><title>mi_block_set_next (1 samples, 0.19%)</title><rect x="34.8837%" y="213" width="0.1938%" height="15" fill="rgb(221,10,30)" fg:x="180" fg:w="1"/><text x="35.1337%" y="223.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.19%)</title><rect x="34.8837%" y="197" width="0.1938%" height="15" fill="rgb(210,229,1)" fg:x="180" fg:w="1"/><text x="35.1337%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="181" width="0.1938%" height="15" fill="rgb(222,148,37)" fg:x="180" fg:w="1"/><text x="35.1337%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="165" width="0.1938%" height="15" fill="rgb(234,67,33)" fg:x="180" fg:w="1"/><text x="35.1337%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="149" width="0.1938%" height="15" fill="rgb(247,98,35)" fg:x="180" fg:w="1"/><text x="35.1337%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="133" width="0.1938%" height="15" fill="rgb(247,138,52)" fg:x="180" fg:w="1"/><text x="35.1337%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="117" width="0.1938%" height="15" fill="rgb(213,79,30)" fg:x="180" fg:w="1"/><text x="35.1337%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="101" width="0.1938%" height="15" fill="rgb(246,177,23)" fg:x="180" fg:w="1"/><text x="35.1337%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="85" width="0.1938%" height="15" fill="rgb(230,62,27)" fg:x="180" fg:w="1"/><text x="35.1337%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="69" width="0.1938%" height="15" fill="rgb(216,154,8)" fg:x="180" fg:w="1"/><text x="35.1337%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="34.8837%" y="53" width="0.1938%" height="15" fill="rgb(244,35,45)" fg:x="180" fg:w="1"/><text x="35.1337%" y="63.50"></text></g><g><title>demoparser::parsing::read_bytes::ByteReader::read_i32 (6 samples, 1.16%)</title><rect x="35.0775%" y="501" width="1.1628%" height="15" fill="rgb(251,115,12)" fg:x="181" fg:w="6"/><text x="35.3275%" y="511.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (6 samples, 1.16%)</title><rect x="35.0775%" y="485" width="1.1628%" height="15" fill="rgb(240,54,50)" fg:x="181" fg:w="6"/><text x="35.3275%" y="495.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (6 samples, 1.16%)</title><rect x="35.0775%" y="469" width="1.1628%" height="15" fill="rgb(233,84,52)" fg:x="181" fg:w="6"/><text x="35.3275%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 1.16%)</title><rect x="35.0775%" y="453" width="1.1628%" height="15" fill="rgb(207,117,47)" fg:x="181" fg:w="6"/><text x="35.3275%" y="463.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="437" width="1.1628%" height="15" fill="rgb(249,43,39)" fg:x="181" fg:w="6"/><text x="35.3275%" y="447.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="421" width="1.1628%" height="15" fill="rgb(209,38,44)" fg:x="181" fg:w="6"/><text x="35.3275%" y="431.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="405" width="1.1628%" height="15" fill="rgb(236,212,23)" fg:x="181" fg:w="6"/><text x="35.3275%" y="415.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="389" width="1.1628%" height="15" fill="rgb(242,79,21)" fg:x="181" fg:w="6"/><text x="35.3275%" y="399.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="373" width="1.1628%" height="15" fill="rgb(211,96,35)" fg:x="181" fg:w="6"/><text x="35.3275%" y="383.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="357" width="1.1628%" height="15" fill="rgb(253,215,40)" fg:x="181" fg:w="6"/><text x="35.3275%" y="367.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="341" width="1.1628%" height="15" fill="rgb(211,81,21)" fg:x="181" fg:w="6"/><text x="35.3275%" y="351.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="325" width="1.1628%" height="15" fill="rgb(208,190,38)" fg:x="181" fg:w="6"/><text x="35.3275%" y="335.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="309" width="1.1628%" height="15" fill="rgb(235,213,38)" fg:x="181" fg:w="6"/><text x="35.3275%" y="319.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="293" width="1.1628%" height="15" fill="rgb(237,122,38)" fg:x="181" fg:w="6"/><text x="35.3275%" y="303.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="35.0775%" y="277" width="1.1628%" height="15" fill="rgb(244,218,35)" fg:x="181" fg:w="6"/><text x="35.3275%" y="287.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (13 samples, 2.52%)</title><rect x="33.9147%" y="533" width="2.5194%" height="15" fill="rgb(240,68,47)" fg:x="175" fg:w="13"/><text x="34.1647%" y="543.50">de..</text></g><g><title>demoparser::parsing::parser::Parser::parse_packet (7 samples, 1.36%)</title><rect x="35.0775%" y="517" width="1.3566%" height="15" fill="rgb(210,16,53)" fg:x="181" fg:w="7"/><text x="35.3275%" y="527.50"></text></g><g><title>demoparser::parsing::read_bytes::ByteReader::read_varint (1 samples, 0.19%)</title><rect x="36.2403%" y="501" width="0.1938%" height="15" fill="rgb(235,124,12)" fg:x="187" fg:w="1"/><text x="36.4903%" y="511.50"></text></g><g><title>demoparser::parsing::parser::Parser::start_io_threads::{{closure}} (83 samples, 16.09%)</title><rect x="20.9302%" y="565" width="16.0853%" height="15" fill="rgb(224,169,11)" fg:x="108" fg:w="83"/><text x="21.1802%" y="575.50">demoparser::parsing::pars..</text></g><g><title>demoparser::parsing::parser::Parser::parse_messages (83 samples, 16.09%)</title><rect x="20.9302%" y="549" width="16.0853%" height="15" fill="rgb(250,166,2)" fg:x="108" fg:w="83"/><text x="21.1802%" y="559.50">demoparser::parsing::pars..</text></g><g><title>demoparser::parsing::read_bytes::ByteReader::read_frame (3 samples, 0.58%)</title><rect x="36.4341%" y="533" width="0.5814%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="3"/><text x="36.6841%" y="543.50"></text></g><g><title>demoparser::parsing::read_bytes::ByteReader::read_byte (3 samples, 0.58%)</title><rect x="36.4341%" y="517" width="0.5814%" height="15" fill="rgb(230,116,27)" fg:x="188" fg:w="3"/><text x="36.6841%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="501" width="0.1938%" height="15" fill="rgb(228,99,48)" fg:x="190" fg:w="1"/><text x="37.0717%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="485" width="0.1938%" height="15" fill="rgb(253,11,6)" fg:x="190" fg:w="1"/><text x="37.0717%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="469" width="0.1938%" height="15" fill="rgb(247,143,39)" fg:x="190" fg:w="1"/><text x="37.0717%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="453" width="0.1938%" height="15" fill="rgb(236,97,10)" fg:x="190" fg:w="1"/><text x="37.0717%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="437" width="0.1938%" height="15" fill="rgb(233,208,19)" fg:x="190" fg:w="1"/><text x="37.0717%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="421" width="0.1938%" height="15" fill="rgb(216,164,2)" fg:x="190" fg:w="1"/><text x="37.0717%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="405" width="0.1938%" height="15" fill="rgb(220,129,5)" fg:x="190" fg:w="1"/><text x="37.0717%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="389" width="0.1938%" height="15" fill="rgb(242,17,10)" fg:x="190" fg:w="1"/><text x="37.0717%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="373" width="0.1938%" height="15" fill="rgb(242,107,0)" fg:x="190" fg:w="1"/><text x="37.0717%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="357" width="0.1938%" height="15" fill="rgb(251,28,31)" fg:x="190" fg:w="1"/><text x="37.0717%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="341" width="0.1938%" height="15" fill="rgb(233,223,10)" fg:x="190" fg:w="1"/><text x="37.0717%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="325" width="0.1938%" height="15" fill="rgb(215,21,27)" fg:x="190" fg:w="1"/><text x="37.0717%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="309" width="0.1938%" height="15" fill="rgb(232,23,21)" fg:x="190" fg:w="1"/><text x="37.0717%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="293" width="0.1938%" height="15" fill="rgb(244,5,23)" fg:x="190" fg:w="1"/><text x="37.0717%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="277" width="0.1938%" height="15" fill="rgb(226,81,46)" fg:x="190" fg:w="1"/><text x="37.0717%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.8217%" y="261" width="0.1938%" height="15" fill="rgb(247,70,30)" fg:x="190" fg:w="1"/><text x="37.0717%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 1.16%)</title><rect x="37.2093%" y="533" width="1.1628%" height="15" fill="rgb(212,68,19)" fg:x="192" fg:w="6"/><text x="37.4593%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.19%)</title><rect x="38.1783%" y="517" width="0.1938%" height="15" fill="rgb(240,187,13)" fg:x="197" fg:w="1"/><text x="38.4283%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.19%)</title><rect x="38.1783%" y="501" width="0.1938%" height="15" fill="rgb(223,113,26)" fg:x="197" fg:w="1"/><text x="38.4283%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.19%)</title><rect x="38.3721%" y="533" width="0.1938%" height="15" fill="rgb(206,192,2)" fg:x="198" fg:w="1"/><text x="38.6221%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.19%)</title><rect x="38.3721%" y="517" width="0.1938%" height="15" fill="rgb(241,108,4)" fg:x="198" fg:w="1"/><text x="38.6221%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.19%)</title><rect x="38.3721%" y="501" width="0.1938%" height="15" fill="rgb(247,173,49)" fg:x="198" fg:w="1"/><text x="38.6221%" y="511.50"></text></g><g><title>[libc.so.6] (3 samples, 0.58%)</title><rect x="38.5659%" y="533" width="0.5814%" height="15" fill="rgb(224,114,35)" fg:x="199" fg:w="3"/><text x="38.8159%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 1.74%)</title><rect x="39.1473%" y="533" width="1.7442%" height="15" fill="rgb(245,159,27)" fg:x="202" fg:w="9"/><text x="39.3973%" y="543.50"></text></g><g><title>core::ptr::write (9 samples, 1.74%)</title><rect x="39.1473%" y="517" width="1.7442%" height="15" fill="rgb(245,172,44)" fg:x="202" fg:w="9"/><text x="39.3973%" y="527.50"></text></g><g><title>[unknown] (9 samples, 1.74%)</title><rect x="39.1473%" y="501" width="1.7442%" height="15" fill="rgb(236,23,11)" fg:x="202" fg:w="9"/><text x="39.3973%" y="511.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="39.3411%" y="485" width="1.5504%" height="15" fill="rgb(205,117,38)" fg:x="203" fg:w="8"/><text x="39.5911%" y="495.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="39.3411%" y="469" width="1.5504%" height="15" fill="rgb(237,72,25)" fg:x="203" fg:w="8"/><text x="39.5911%" y="479.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="39.3411%" y="453" width="1.5504%" height="15" fill="rgb(244,70,9)" fg:x="203" fg:w="8"/><text x="39.5911%" y="463.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="39.3411%" y="437" width="1.5504%" height="15" fill="rgb(217,125,39)" fg:x="203" fg:w="8"/><text x="39.5911%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="421" width="0.3876%" height="15" fill="rgb(235,36,10)" fg:x="209" fg:w="2"/><text x="40.7539%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="405" width="0.3876%" height="15" fill="rgb(251,123,47)" fg:x="209" fg:w="2"/><text x="40.7539%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="389" width="0.3876%" height="15" fill="rgb(221,13,13)" fg:x="209" fg:w="2"/><text x="40.7539%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="373" width="0.3876%" height="15" fill="rgb(238,131,9)" fg:x="209" fg:w="2"/><text x="40.7539%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="357" width="0.3876%" height="15" fill="rgb(211,50,8)" fg:x="209" fg:w="2"/><text x="40.7539%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="40.5039%" y="341" width="0.3876%" height="15" fill="rgb(245,182,24)" fg:x="209" fg:w="2"/><text x="40.7539%" y="351.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::len (5 samples, 0.97%)</title><rect x="40.8915%" y="533" width="0.9690%" height="15" fill="rgb(242,14,37)" fg:x="211" fg:w="5"/><text x="41.1415%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.78%)</title><rect x="41.0853%" y="517" width="0.7752%" height="15" fill="rgb(246,228,12)" fg:x="212" fg:w="4"/><text x="41.3353%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.78%)</title><rect x="41.0853%" y="501" width="0.7752%" height="15" fill="rgb(213,55,15)" fg:x="212" fg:w="4"/><text x="41.3353%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="42.8295%" y="517" width="0.1938%" height="15" fill="rgb(209,9,3)" fg:x="221" fg:w="1"/><text x="43.0795%" y="527.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (7 samples, 1.36%)</title><rect x="41.8605%" y="533" width="1.3566%" height="15" fill="rgb(230,59,30)" fg:x="216" fg:w="7"/><text x="42.1105%" y="543.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.19%)</title><rect x="43.0233%" y="517" width="0.1938%" height="15" fill="rgb(209,121,21)" fg:x="222" fg:w="1"/><text x="43.2733%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="43.0233%" y="501" width="0.1938%" height="15" fill="rgb(220,109,13)" fg:x="222" fg:w="1"/><text x="43.2733%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;demoparser::parsing::parser::ParsingMaps&gt;&gt;&gt; (6 samples, 1.16%)</title><rect x="43.2171%" y="517" width="1.1628%" height="15" fill="rgb(232,18,1)" fg:x="223" fg:w="6"/><text x="43.4671%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.16%)</title><rect x="43.2171%" y="501" width="1.1628%" height="15" fill="rgb(215,41,42)" fg:x="223" fg:w="6"/><text x="43.4671%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.19%)</title><rect x="44.7674%" y="485" width="0.1938%" height="15" fill="rgb(224,123,36)" fg:x="231" fg:w="1"/><text x="45.0174%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.19%)</title><rect x="44.7674%" y="469" width="0.1938%" height="15" fill="rgb(240,125,3)" fg:x="231" fg:w="1"/><text x="45.0174%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.19%)</title><rect x="45.5426%" y="469" width="0.1938%" height="15" fill="rgb(205,98,50)" fg:x="235" fg:w="1"/><text x="45.7926%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.19%)</title><rect x="45.5426%" y="453" width="0.1938%" height="15" fill="rgb(205,185,37)" fg:x="235" fg:w="1"/><text x="45.7926%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.19%)</title><rect x="45.5426%" y="437" width="0.1938%" height="15" fill="rgb(238,207,15)" fg:x="235" fg:w="1"/><text x="45.7926%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.19%)</title><rect x="45.7364%" y="469" width="0.1938%" height="15" fill="rgb(213,199,42)" fg:x="236" fg:w="1"/><text x="45.9864%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (2 samples, 0.39%)</title><rect x="45.9302%" y="469" width="0.3876%" height="15" fill="rgb(235,201,11)" fg:x="237" fg:w="2"/><text x="46.1802%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[i32: 128]&gt;&gt; (1 samples, 0.19%)</title><rect x="46.3178%" y="469" width="0.1938%" height="15" fill="rgb(207,46,11)" fg:x="239" fg:w="1"/><text x="46.5678%" y="479.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="46.3178%" y="453" width="0.1938%" height="15" fill="rgb(241,35,35)" fg:x="239" fg:w="1"/><text x="46.5678%" y="463.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.19%)</title><rect x="46.3178%" y="437" width="0.1938%" height="15" fill="rgb(243,32,47)" fg:x="239" fg:w="1"/><text x="46.5678%" y="447.50"></text></g><g><title>[libc.so.6] (4 samples, 0.78%)</title><rect x="47.8682%" y="325" width="0.7752%" height="15" fill="rgb(247,202,23)" fg:x="247" fg:w="4"/><text x="48.1182%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (12 samples, 2.33%)</title><rect x="46.5116%" y="421" width="2.3256%" height="15" fill="rgb(219,102,11)" fg:x="240" fg:w="12"/><text x="46.7616%" y="431.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12 samples, 2.33%)</title><rect x="46.5116%" y="405" width="2.3256%" height="15" fill="rgb(243,110,44)" fg:x="240" fg:w="12"/><text x="46.7616%" y="415.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 2.33%)</title><rect x="46.5116%" y="389" width="2.3256%" height="15" fill="rgb(222,74,54)" fg:x="240" fg:w="12"/><text x="46.7616%" y="399.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 2.33%)</title><rect x="46.5116%" y="373" width="2.3256%" height="15" fill="rgb(216,99,12)" fg:x="240" fg:w="12"/><text x="46.7616%" y="383.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 2.33%)</title><rect x="46.5116%" y="357" width="2.3256%" height="15" fill="rgb(226,22,26)" fg:x="240" fg:w="12"/><text x="46.7616%" y="367.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 2.33%)</title><rect x="46.5116%" y="341" width="2.3256%" height="15" fill="rgb(217,163,10)" fg:x="240" fg:w="12"/><text x="46.7616%" y="351.50">&lt;..</text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="48.6434%" y="325" width="0.1938%" height="15" fill="rgb(213,25,53)" fg:x="251" fg:w="1"/><text x="48.8934%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="48.6434%" y="309" width="0.1938%" height="15" fill="rgb(252,105,26)" fg:x="251" fg:w="1"/><text x="48.8934%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="48.6434%" y="293" width="0.1938%" height="15" fill="rgb(220,39,43)" fg:x="251" fg:w="1"/><text x="48.8934%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 2.52%)</title><rect x="46.5116%" y="469" width="2.5194%" height="15" fill="rgb(229,68,48)" fg:x="240" fg:w="13"/><text x="46.7616%" y="479.50">co..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 2.52%)</title><rect x="46.5116%" y="453" width="2.5194%" height="15" fill="rgb(252,8,32)" fg:x="240" fg:w="13"/><text x="46.7616%" y="463.50">&lt;T..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 2.52%)</title><rect x="46.5116%" y="437" width="2.5194%" height="15" fill="rgb(223,20,43)" fg:x="240" fg:w="13"/><text x="46.7616%" y="447.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="48.8372%" y="421" width="0.1938%" height="15" fill="rgb(229,81,49)" fg:x="252" fg:w="1"/><text x="49.0872%" y="431.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (15 samples, 2.91%)</title><rect x="50.5814%" y="437" width="2.9070%" height="15" fill="rgb(236,28,36)" fg:x="261" fg:w="15"/><text x="50.8314%" y="447.50">de..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (15 samples, 2.91%)</title><rect x="50.5814%" y="421" width="2.9070%" height="15" fill="rgb(249,185,26)" fg:x="261" fg:w="15"/><text x="50.8314%" y="431.50">&lt;b..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (15 samples, 2.91%)</title><rect x="50.5814%" y="405" width="2.9070%" height="15" fill="rgb(249,174,33)" fg:x="261" fg:w="15"/><text x="50.8314%" y="415.50">&lt;b..</text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (2 samples, 0.39%)</title><rect x="53.1008%" y="389" width="0.3876%" height="15" fill="rgb(233,201,37)" fg:x="274" fg:w="2"/><text x="53.3508%" y="399.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_inx (30 samples, 5.81%)</title><rect x="49.6124%" y="453" width="5.8140%" height="15" fill="rgb(221,78,26)" fg:x="256" fg:w="30"/><text x="49.8624%" y="463.50">demopar..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (10 samples, 1.94%)</title><rect x="53.4884%" y="437" width="1.9380%" height="15" fill="rgb(250,127,30)" fg:x="276" fg:w="10"/><text x="53.7384%" y="447.50">d..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (8 samples, 1.55%)</title><rect x="53.8760%" y="421" width="1.5504%" height="15" fill="rgb(230,49,44)" fg:x="278" fg:w="8"/><text x="54.1260%" y="431.50"></text></g><g><title>demoparser::parsing::entities::get_indicies (43 samples, 8.33%)</title><rect x="49.0310%" y="469" width="8.3333%" height="15" fill="rgb(229,67,23)" fg:x="253" fg:w="43"/><text x="49.2810%" y="479.50">demoparser::..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (10 samples, 1.94%)</title><rect x="55.4264%" y="453" width="1.9380%" height="15" fill="rgb(249,83,47)" fg:x="286" fg:w="10"/><text x="55.6764%" y="463.50">s..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (2 samples, 0.39%)</title><rect x="56.9767%" y="437" width="0.3876%" height="15" fill="rgb(215,43,3)" fg:x="294" fg:w="2"/><text x="57.2267%" y="447.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (2 samples, 0.39%)</title><rect x="56.9767%" y="421" width="0.3876%" height="15" fill="rgb(238,154,13)" fg:x="294" fg:w="2"/><text x="57.2267%" y="431.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (9 samples, 1.74%)</title><rect x="61.2403%" y="437" width="1.7442%" height="15" fill="rgb(219,56,2)" fg:x="316" fg:w="9"/><text x="61.4903%" y="447.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (3 samples, 0.58%)</title><rect x="62.4031%" y="421" width="0.5814%" height="15" fill="rgb(233,0,4)" fg:x="322" fg:w="3"/><text x="62.6531%" y="431.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (3 samples, 0.58%)</title><rect x="62.4031%" y="405" width="0.5814%" height="15" fill="rgb(235,30,7)" fg:x="322" fg:w="3"/><text x="62.6531%" y="415.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 0.58%)</title><rect x="62.4031%" y="389" width="0.5814%" height="15" fill="rgb(250,79,13)" fg:x="322" fg:w="3"/><text x="62.6531%" y="399.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.19%)</title><rect x="62.7907%" y="373" width="0.1938%" height="15" fill="rgb(211,146,34)" fg:x="324" fg:w="1"/><text x="63.0407%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (15 samples, 2.91%)</title><rect x="60.4651%" y="453" width="2.9070%" height="15" fill="rgb(228,22,38)" fg:x="312" fg:w="15"/><text x="60.7151%" y="463.50">de..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (2 samples, 0.39%)</title><rect x="62.9845%" y="437" width="0.3876%" height="15" fill="rgb(235,168,5)" fg:x="325" fg:w="2"/><text x="63.2345%" y="447.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.39%)</title><rect x="62.9845%" y="421" width="0.3876%" height="15" fill="rgb(221,155,16)" fg:x="325" fg:w="2"/><text x="63.2345%" y="431.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.19%)</title><rect x="63.1783%" y="405" width="0.1938%" height="15" fill="rgb(215,215,53)" fg:x="326" fg:w="1"/><text x="63.4283%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_int (2 samples, 0.39%)</title><rect x="63.3721%" y="453" width="0.3876%" height="15" fill="rgb(223,4,10)" fg:x="327" fg:w="2"/><text x="63.6221%" y="463.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_sbit_long (2 samples, 0.39%)</title><rect x="63.3721%" y="437" width="0.3876%" height="15" fill="rgb(234,103,6)" fg:x="327" fg:w="2"/><text x="63.6221%" y="447.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (2 samples, 0.39%)</title><rect x="63.3721%" y="421" width="0.3876%" height="15" fill="rgb(227,97,0)" fg:x="327" fg:w="2"/><text x="63.6221%" y="431.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.39%)</title><rect x="63.3721%" y="405" width="0.3876%" height="15" fill="rgb(234,150,53)" fg:x="327" fg:w="2"/><text x="63.6221%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec (2 samples, 0.39%)</title><rect x="63.7597%" y="453" width="0.3876%" height="15" fill="rgb(228,201,54)" fg:x="329" fg:w="2"/><text x="64.0097%" y="463.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (2 samples, 0.39%)</title><rect x="63.7597%" y="437" width="0.3876%" height="15" fill="rgb(222,22,37)" fg:x="329" fg:w="2"/><text x="64.0097%" y="447.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (2 samples, 0.39%)</title><rect x="63.7597%" y="421" width="0.3876%" height="15" fill="rgb(237,53,32)" fg:x="329" fg:w="2"/><text x="64.0097%" y="431.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_bit_coord (2 samples, 0.39%)</title><rect x="63.7597%" y="405" width="0.3876%" height="15" fill="rgb(233,25,53)" fg:x="329" fg:w="2"/><text x="64.0097%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (41 samples, 7.95%)</title><rect x="57.3643%" y="469" width="7.9457%" height="15" fill="rgb(210,40,34)" fg:x="296" fg:w="41"/><text x="57.6143%" y="479.50">demoparser:..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec_xy (6 samples, 1.16%)</title><rect x="64.1473%" y="453" width="1.1628%" height="15" fill="rgb(241,220,44)" fg:x="331" fg:w="6"/><text x="64.3973%" y="463.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (4 samples, 0.78%)</title><rect x="64.5349%" y="437" width="0.7752%" height="15" fill="rgb(235,28,35)" fg:x="333" fg:w="4"/><text x="64.7849%" y="447.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (4 samples, 0.78%)</title><rect x="64.5349%" y="421" width="0.7752%" height="15" fill="rgb(210,56,17)" fg:x="333" fg:w="4"/><text x="64.7849%" y="431.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (4 samples, 0.78%)</title><rect x="64.5349%" y="405" width="0.7752%" height="15" fill="rgb(224,130,29)" fg:x="333" fg:w="4"/><text x="64.7849%" y="415.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (4 samples, 0.78%)</title><rect x="64.5349%" y="389" width="0.7752%" height="15" fill="rgb(235,212,8)" fg:x="333" fg:w="4"/><text x="64.7849%" y="399.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 0.78%)</title><rect x="64.5349%" y="373" width="0.7752%" height="15" fill="rgb(223,33,50)" fg:x="333" fg:w="4"/><text x="64.7849%" y="383.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.19%)</title><rect x="65.1163%" y="357" width="0.1938%" height="15" fill="rgb(219,149,13)" fg:x="336" fg:w="1"/><text x="65.3663%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.58%)</title><rect x="65.3101%" y="421" width="0.5814%" height="15" fill="rgb(250,156,29)" fg:x="337" fg:w="3"/><text x="65.5601%" y="431.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (3 samples, 0.58%)</title><rect x="65.3101%" y="405" width="0.5814%" height="15" fill="rgb(216,193,19)" fg:x="337" fg:w="3"/><text x="65.5601%" y="415.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (3 samples, 0.58%)</title><rect x="65.3101%" y="389" width="0.5814%" height="15" fill="rgb(216,135,14)" fg:x="337" fg:w="3"/><text x="65.5601%" y="399.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (3 samples, 0.58%)</title><rect x="65.3101%" y="373" width="0.5814%" height="15" fill="rgb(241,47,5)" fg:x="337" fg:w="3"/><text x="65.5601%" y="383.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::finish (3 samples, 0.58%)</title><rect x="65.3101%" y="357" width="0.5814%" height="15" fill="rgb(233,42,35)" fg:x="337" fg:w="3"/><text x="65.5601%" y="367.50"></text></g><g><title>ahash::operations::aesenc (1 samples, 0.19%)</title><rect x="65.6977%" y="341" width="0.1938%" height="15" fill="rgb(231,13,6)" fg:x="339" fg:w="1"/><text x="65.9477%" y="351.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (1 samples, 0.19%)</title><rect x="65.6977%" y="325" width="0.1938%" height="15" fill="rgb(207,181,40)" fg:x="339" fg:w="1"/><text x="65.9477%" y="335.50"></text></g><g><title>demoparser::parsing::entities::parse_ent_props (109 samples, 21.12%)</title><rect x="44.9612%" y="485" width="21.1240%" height="15" fill="rgb(254,173,49)" fg:x="232" fg:w="109"/><text x="45.2112%" y="495.50">demoparser::parsing::entities::pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.78%)</title><rect x="65.3101%" y="469" width="0.7752%" height="15" fill="rgb(221,1,38)" fg:x="337" fg:w="4"/><text x="65.5601%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.78%)</title><rect x="65.3101%" y="453" width="0.7752%" height="15" fill="rgb(206,124,46)" fg:x="337" fg:w="4"/><text x="65.5601%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.78%)</title><rect x="65.3101%" y="437" width="0.7752%" height="15" fill="rgb(249,21,11)" fg:x="337" fg:w="4"/><text x="65.5601%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.19%)</title><rect x="65.8915%" y="421" width="0.1938%" height="15" fill="rgb(222,201,40)" fg:x="340" fg:w="1"/><text x="66.1415%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.19%)</title><rect x="65.8915%" y="405" width="0.1938%" height="15" fill="rgb(235,61,29)" fg:x="340" fg:w="1"/><text x="66.1415%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.19%)</title><rect x="65.8915%" y="389" width="0.1938%" height="15" fill="rgb(219,207,3)" fg:x="340" fg:w="1"/><text x="66.1415%" y="399.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (113 samples, 21.90%)</title><rect x="44.3798%" y="501" width="21.8992%" height="15" fill="rgb(222,56,46)" fg:x="229" fg:w="113"/><text x="44.6298%" y="511.50">demoparser::parsing::entities::&lt;imp..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_u_bit_var (1 samples, 0.19%)</title><rect x="66.0853%" y="485" width="0.1938%" height="15" fill="rgb(239,76,54)" fg:x="341" fg:w="1"/><text x="66.3353%" y="495.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.19%)</title><rect x="66.0853%" y="469" width="0.1938%" height="15" fill="rgb(231,124,27)" fg:x="341" fg:w="1"/><text x="66.3353%" y="479.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.19%)</title><rect x="66.0853%" y="453" width="0.1938%" height="15" fill="rgb(249,195,6)" fg:x="341" fg:w="1"/><text x="66.3353%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.19%)</title><rect x="66.2791%" y="453" width="0.1938%" height="15" fill="rgb(237,174,47)" fg:x="342" fg:w="1"/><text x="66.5291%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bool (1 samples, 0.19%)</title><rect x="66.4729%" y="453" width="0.1938%" height="15" fill="rgb(206,201,31)" fg:x="343" fg:w="1"/><text x="66.7229%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.19%)</title><rect x="66.4729%" y="437" width="0.1938%" height="15" fill="rgb(231,57,52)" fg:x="343" fg:w="1"/><text x="66.7229%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="66.6667%" y="325" width="0.3876%" height="15" fill="rgb(248,177,22)" fg:x="344" fg:w="2"/><text x="66.9167%" y="335.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.19%)</title><rect x="66.8605%" y="309" width="0.1938%" height="15" fill="rgb(215,211,37)" fg:x="345" fg:w="1"/><text x="67.1105%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 0.58%)</title><rect x="66.6667%" y="389" width="0.5814%" height="15" fill="rgb(241,128,51)" fg:x="344" fg:w="3"/><text x="66.9167%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 0.58%)</title><rect x="66.6667%" y="373" width="0.5814%" height="15" fill="rgb(227,165,31)" fg:x="344" fg:w="3"/><text x="66.9167%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 0.58%)</title><rect x="66.6667%" y="357" width="0.5814%" height="15" fill="rgb(228,167,24)" fg:x="344" fg:w="3"/><text x="66.9167%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 0.58%)</title><rect x="66.6667%" y="341" width="0.5814%" height="15" fill="rgb(228,143,12)" fg:x="344" fg:w="3"/><text x="66.9167%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.19%)</title><rect x="67.0543%" y="325" width="0.1938%" height="15" fill="rgb(249,149,8)" fg:x="346" fg:w="1"/><text x="67.3043%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.19%)</title><rect x="67.0543%" y="309" width="0.1938%" height="15" fill="rgb(243,35,44)" fg:x="346" fg:w="1"/><text x="67.3043%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (11 samples, 2.13%)</title><rect x="66.6667%" y="453" width="2.1318%" height="15" fill="rgb(246,89,9)" fg:x="344" fg:w="11"/><text x="66.9167%" y="463.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (11 samples, 2.13%)</title><rect x="66.6667%" y="437" width="2.1318%" height="15" fill="rgb(233,213,13)" fg:x="344" fg:w="11"/><text x="66.9167%" y="447.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (11 samples, 2.13%)</title><rect x="66.6667%" y="421" width="2.1318%" height="15" fill="rgb(233,141,41)" fg:x="344" fg:w="11"/><text x="66.9167%" y="431.50">p..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (11 samples, 2.13%)</title><rect x="66.6667%" y="405" width="2.1318%" height="15" fill="rgb(239,167,4)" fg:x="344" fg:w="11"/><text x="66.9167%" y="415.50">p..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (8 samples, 1.55%)</title><rect x="67.2481%" y="389" width="1.5504%" height="15" fill="rgb(209,217,16)" fg:x="347" fg:w="8"/><text x="67.4981%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (8 samples, 1.55%)</title><rect x="67.2481%" y="373" width="1.5504%" height="15" fill="rgb(219,88,35)" fg:x="347" fg:w="8"/><text x="67.4981%" y="383.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (8 samples, 1.55%)</title><rect x="67.2481%" y="357" width="1.5504%" height="15" fill="rgb(220,193,23)" fg:x="347" fg:w="8"/><text x="67.4981%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 1.55%)</title><rect x="67.2481%" y="341" width="1.5504%" height="15" fill="rgb(230,90,52)" fg:x="347" fg:w="8"/><text x="67.4981%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 1.55%)</title><rect x="67.2481%" y="325" width="1.5504%" height="15" fill="rgb(252,106,19)" fg:x="347" fg:w="8"/><text x="67.4981%" y="335.50"></text></g><g><title>[libc.so.6] (8 samples, 1.55%)</title><rect x="67.2481%" y="309" width="1.5504%" height="15" fill="rgb(206,74,20)" fg:x="347" fg:w="8"/><text x="67.4981%" y="319.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="67.6357%" y="293" width="1.1628%" height="15" fill="rgb(230,138,44)" fg:x="349" fg:w="6"/><text x="67.8857%" y="303.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="67.6357%" y="277" width="1.1628%" height="15" fill="rgb(235,182,43)" fg:x="349" fg:w="6"/><text x="67.8857%" y="287.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="67.6357%" y="261" width="1.1628%" height="15" fill="rgb(242,16,51)" fg:x="349" fg:w="6"/><text x="67.8857%" y="271.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="67.6357%" y="245" width="1.1628%" height="15" fill="rgb(248,9,4)" fg:x="349" fg:w="6"/><text x="67.8857%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="68.6047%" y="229" width="0.1938%" height="15" fill="rgb(210,31,22)" fg:x="354" fg:w="1"/><text x="68.8547%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="68.6047%" y="213" width="0.1938%" height="15" fill="rgb(239,54,39)" fg:x="354" fg:w="1"/><text x="68.8547%" y="223.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.19%)</title><rect x="68.7984%" y="453" width="0.1938%" height="15" fill="rgb(230,99,41)" fg:x="355" fg:w="1"/><text x="69.0484%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.19%)</title><rect x="68.7984%" y="437" width="0.1938%" height="15" fill="rgb(253,106,12)" fg:x="355" fg:w="1"/><text x="69.0484%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.19%)</title><rect x="68.7984%" y="421" width="0.1938%" height="15" fill="rgb(213,46,41)" fg:x="355" fg:w="1"/><text x="69.0484%" y="431.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (17 samples, 3.29%)</title><rect x="66.2791%" y="469" width="3.2946%" height="15" fill="rgb(215,133,35)" fg:x="342" fg:w="17"/><text x="66.5291%" y="479.50">&lt;cs..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (3 samples, 0.58%)</title><rect x="68.9922%" y="453" width="0.5814%" height="15" fill="rgb(213,28,5)" fg:x="356" fg:w="3"/><text x="69.2422%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (3 samples, 0.58%)</title><rect x="68.9922%" y="437" width="0.5814%" height="15" fill="rgb(215,77,49)" fg:x="356" fg:w="3"/><text x="69.2422%" y="447.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (3 samples, 0.58%)</title><rect x="68.9922%" y="421" width="0.5814%" height="15" fill="rgb(248,100,22)" fg:x="356" fg:w="3"/><text x="69.2422%" y="431.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (3 samples, 0.58%)</title><rect x="68.9922%" y="405" width="0.5814%" height="15" fill="rgb(208,67,9)" fg:x="356" fg:w="3"/><text x="69.2422%" y="415.50"></text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (137 samples, 26.55%)</title><rect x="43.2171%" y="533" width="26.5504%" height="15" fill="rgb(219,133,21)" fg:x="223" fg:w="137"/><text x="43.4671%" y="543.50">demoparser::parsing::parser::Parser::msg_ha..</text></g><g><title>demoparser::parsing::entities::parse_packet_entities (131 samples, 25.39%)</title><rect x="44.3798%" y="517" width="25.3876%" height="15" fill="rgb(246,46,29)" fg:x="229" fg:w="131"/><text x="44.6298%" y="527.50">demoparser::parsing::entities::parse_pack..</text></g><g><title>protobuf::message::Message::parse_from_bytes (18 samples, 3.49%)</title><rect x="66.2791%" y="501" width="3.4884%" height="15" fill="rgb(246,185,52)" fg:x="342" fg:w="18"/><text x="66.5291%" y="511.50">pro..</text></g><g><title>protobuf::message::Message::parse_from (18 samples, 3.49%)</title><rect x="66.2791%" y="485" width="3.4884%" height="15" fill="rgb(252,136,11)" fg:x="342" fg:w="18"/><text x="66.5291%" y="495.50">pro..</text></g><g><title>protobuf::message::Message::check_initialized (1 samples, 0.19%)</title><rect x="69.5736%" y="469" width="0.1938%" height="15" fill="rgb(219,138,53)" fg:x="359" fg:w="1"/><text x="69.8236%" y="479.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::is_initialized_dyn (1 samples, 0.19%)</title><rect x="69.5736%" y="453" width="0.1938%" height="15" fill="rgb(211,51,23)" fg:x="359" fg:w="1"/><text x="69.8236%" y="463.50"></text></g><g><title>&lt;demoparser::parsing::entities::Prop as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="69.7674%" y="341" width="0.1938%" height="15" fill="rgb(247,221,28)" fg:x="360" fg:w="1"/><text x="70.0174%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="69.7674%" y="325" width="0.1938%" height="15" fill="rgb(251,222,45)" fg:x="360" fg:w="1"/><text x="70.0174%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="69.7674%" y="309" width="0.1938%" height="15" fill="rgb(217,162,53)" fg:x="360" fg:w="1"/><text x="70.0174%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="69.7674%" y="293" width="0.1938%" height="15" fill="rgb(229,93,14)" fg:x="360" fg:w="1"/><text x="70.0174%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="69.7674%" y="277" width="0.1938%" height="15" fill="rgb(209,67,49)" fg:x="360" fg:w="1"/><text x="70.0174%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="69.7674%" y="261" width="0.1938%" height="15" fill="rgb(213,87,29)" fg:x="360" fg:w="1"/><text x="70.0174%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="69.7674%" y="245" width="0.1938%" height="15" fill="rgb(205,151,52)" fg:x="360" fg:w="1"/><text x="70.0174%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="69.7674%" y="229" width="0.1938%" height="15" fill="rgb(253,215,39)" fg:x="360" fg:w="1"/><text x="70.0174%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.19%)</title><rect x="69.7674%" y="213" width="0.1938%" height="15" fill="rgb(221,220,41)" fg:x="360" fg:w="1"/><text x="70.0174%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="69.7674%" y="197" width="0.1938%" height="15" fill="rgb(218,133,21)" fg:x="360" fg:w="1"/><text x="70.0174%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="69.7674%" y="181" width="0.1938%" height="15" fill="rgb(221,193,43)" fg:x="360" fg:w="1"/><text x="70.0174%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="69.7674%" y="165" width="0.1938%" height="15" fill="rgb(240,128,52)" fg:x="360" fg:w="1"/><text x="70.0174%" y="175.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.19%)</title><rect x="69.7674%" y="149" width="0.1938%" height="15" fill="rgb(253,114,12)" fg:x="360" fg:w="1"/><text x="70.0174%" y="159.50"></text></g><g><title>mi_find_page (1 samples, 0.19%)</title><rect x="69.7674%" y="133" width="0.1938%" height="15" fill="rgb(215,223,47)" fg:x="360" fg:w="1"/><text x="70.0174%" y="143.50"></text></g><g><title>mi_find_free_page (1 samples, 0.19%)</title><rect x="69.7674%" y="117" width="0.1938%" height="15" fill="rgb(248,225,23)" fg:x="360" fg:w="1"/><text x="70.0174%" y="127.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.19%)</title><rect x="69.7674%" y="101" width="0.1938%" height="15" fill="rgb(250,108,0)" fg:x="360" fg:w="1"/><text x="70.0174%" y="111.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.19%)</title><rect x="69.7674%" y="85" width="0.1938%" height="15" fill="rgb(228,208,7)" fg:x="360" fg:w="1"/><text x="70.0174%" y="95.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.19%)</title><rect x="69.7674%" y="69" width="0.1938%" height="15" fill="rgb(244,45,10)" fg:x="360" fg:w="1"/><text x="70.0174%" y="79.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.19%)</title><rect x="69.7674%" y="53" width="0.1938%" height="15" fill="rgb(207,125,25)" fg:x="360" fg:w="1"/><text x="70.0174%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (5 samples, 0.97%)</title><rect x="69.7674%" y="469" width="0.9690%" height="15" fill="rgb(210,195,18)" fg:x="360" fg:w="5"/><text x="70.0174%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (5 samples, 0.97%)</title><rect x="69.7674%" y="453" width="0.9690%" height="15" fill="rgb(249,80,12)" fg:x="360" fg:w="5"/><text x="70.0174%" y="463.50"></text></g><g><title>core::clone::Clone::clone (5 samples, 0.97%)</title><rect x="69.7674%" y="437" width="0.9690%" height="15" fill="rgb(221,65,9)" fg:x="360" fg:w="5"/><text x="70.0174%" y="447.50"></text></g><g><title>&lt;demoparser::parsing::data_table::ServerClass as core::clone::Clone&gt;::clone (5 samples, 0.97%)</title><rect x="69.7674%" y="421" width="0.9690%" height="15" fill="rgb(235,49,36)" fg:x="360" fg:w="5"/><text x="70.0174%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.97%)</title><rect x="69.7674%" y="405" width="0.9690%" height="15" fill="rgb(225,32,20)" fg:x="360" fg:w="5"/><text x="70.0174%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.97%)</title><rect x="69.7674%" y="389" width="0.9690%" height="15" fill="rgb(215,141,46)" fg:x="360" fg:w="5"/><text x="70.0174%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.97%)</title><rect x="69.7674%" y="373" width="0.9690%" height="15" fill="rgb(250,160,47)" fg:x="360" fg:w="5"/><text x="70.0174%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.97%)</title><rect x="69.7674%" y="357" width="0.9690%" height="15" fill="rgb(216,222,40)" fg:x="360" fg:w="5"/><text x="70.0174%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.78%)</title><rect x="69.9612%" y="341" width="0.7752%" height="15" fill="rgb(234,217,39)" fg:x="361" fg:w="4"/><text x="70.2112%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="70.1550%" y="325" width="0.5814%" height="15" fill="rgb(207,178,40)" fg:x="362" fg:w="3"/><text x="70.4050%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="70.5426%" y="309" width="0.1938%" height="15" fill="rgb(221,136,13)" fg:x="364" fg:w="1"/><text x="70.7926%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="70.5426%" y="293" width="0.1938%" height="15" fill="rgb(249,199,10)" fg:x="364" fg:w="1"/><text x="70.7926%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="70.5426%" y="277" width="0.1938%" height="15" fill="rgb(249,222,13)" fg:x="364" fg:w="1"/><text x="70.7926%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="70.5426%" y="261" width="0.1938%" height="15" fill="rgb(244,185,38)" fg:x="364" fg:w="1"/><text x="70.7926%" y="271.50"></text></g><g><title>_mi_memcpy_aligned (6 samples, 1.16%)</title><rect x="70.7364%" y="325" width="1.1628%" height="15" fill="rgb(236,202,9)" fg:x="365" fg:w="6"/><text x="70.9864%" y="335.50"></text></g><g><title>_mi_memcpy (6 samples, 1.16%)</title><rect x="70.7364%" y="309" width="1.1628%" height="15" fill="rgb(250,229,37)" fg:x="365" fg:w="6"/><text x="70.9864%" y="319.50"></text></g><g><title>memcpy (6 samples, 1.16%)</title><rect x="70.7364%" y="293" width="1.1628%" height="15" fill="rgb(206,174,23)" fg:x="365" fg:w="6"/><text x="70.9864%" y="303.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="70.7364%" y="277" width="1.1628%" height="15" fill="rgb(211,33,43)" fg:x="365" fg:w="6"/><text x="70.9864%" y="287.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="70.7364%" y="261" width="1.1628%" height="15" fill="rgb(245,58,50)" fg:x="365" fg:w="6"/><text x="70.9864%" y="271.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="70.7364%" y="245" width="1.1628%" height="15" fill="rgb(244,68,36)" fg:x="365" fg:w="6"/><text x="70.9864%" y="255.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="70.7364%" y="229" width="1.1628%" height="15" fill="rgb(232,229,15)" fg:x="365" fg:w="6"/><text x="70.9864%" y="239.50"></text></g><g><title>_mi_random_init (1 samples, 0.19%)</title><rect x="71.8992%" y="325" width="0.1938%" height="15" fill="rgb(254,30,23)" fg:x="371" fg:w="1"/><text x="72.1492%" y="335.50"></text></g><g><title>os_random_buf (1 samples, 0.19%)</title><rect x="71.8992%" y="309" width="0.1938%" height="15" fill="rgb(235,160,14)" fg:x="371" fg:w="1"/><text x="72.1492%" y="319.50"></text></g><g><title>syscall (1 samples, 0.19%)</title><rect x="71.8992%" y="293" width="0.1938%" height="15" fill="rgb(212,155,44)" fg:x="371" fg:w="1"/><text x="72.1492%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.8992%" y="277" width="0.1938%" height="15" fill="rgb(226,2,50)" fg:x="371" fg:w="1"/><text x="72.1492%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.8992%" y="261" width="0.1938%" height="15" fill="rgb(234,177,6)" fg:x="371" fg:w="1"/><text x="72.1492%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.8992%" y="245" width="0.1938%" height="15" fill="rgb(217,24,9)" fg:x="371" fg:w="1"/><text x="72.1492%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.8992%" y="229" width="0.1938%" height="15" fill="rgb(220,13,46)" fg:x="371" fg:w="1"/><text x="72.1492%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.8992%" y="213" width="0.1938%" height="15" fill="rgb(239,221,27)" fg:x="371" fg:w="1"/><text x="72.1492%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (14 samples, 2.71%)</title><rect x="69.7674%" y="517" width="2.7132%" height="15" fill="rgb(222,198,25)" fg:x="360" fg:w="14"/><text x="70.0174%" y="527.50">&lt;s..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (14 samples, 2.71%)</title><rect x="69.7674%" y="501" width="2.7132%" height="15" fill="rgb(211,99,13)" fg:x="360" fg:w="14"/><text x="70.0174%" y="511.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 2.71%)</title><rect x="69.7674%" y="485" width="2.7132%" height="15" fill="rgb(232,111,31)" fg:x="360" fg:w="14"/><text x="70.0174%" y="495.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (9 samples, 1.74%)</title><rect x="70.7364%" y="469" width="1.7442%" height="15" fill="rgb(245,82,37)" fg:x="365" fg:w="9"/><text x="70.9864%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (9 samples, 1.74%)</title><rect x="70.7364%" y="453" width="1.7442%" height="15" fill="rgb(227,149,46)" fg:x="365" fg:w="9"/><text x="70.9864%" y="463.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 1.74%)</title><rect x="70.7364%" y="437" width="1.7442%" height="15" fill="rgb(218,36,50)" fg:x="365" fg:w="9"/><text x="70.9864%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 1.74%)</title><rect x="70.7364%" y="421" width="1.7442%" height="15" fill="rgb(226,80,48)" fg:x="365" fg:w="9"/><text x="70.9864%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 1.74%)</title><rect x="70.7364%" y="405" width="1.7442%" height="15" fill="rgb(238,224,15)" fg:x="365" fg:w="9"/><text x="70.9864%" y="415.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 1.74%)</title><rect x="70.7364%" y="389" width="1.7442%" height="15" fill="rgb(241,136,10)" fg:x="365" fg:w="9"/><text x="70.9864%" y="399.50"></text></g><g><title>_mi_malloc_generic (9 samples, 1.74%)</title><rect x="70.7364%" y="373" width="1.7442%" height="15" fill="rgb(208,32,45)" fg:x="365" fg:w="9"/><text x="70.9864%" y="383.50"></text></g><g><title>mi_thread_init (9 samples, 1.74%)</title><rect x="70.7364%" y="357" width="1.7442%" height="15" fill="rgb(207,135,9)" fg:x="365" fg:w="9"/><text x="70.9864%" y="367.50"></text></g><g><title>_mi_heap_init (9 samples, 1.74%)</title><rect x="70.7364%" y="341" width="1.7442%" height="15" fill="rgb(206,86,44)" fg:x="365" fg:w="9"/><text x="70.9864%" y="351.50"></text></g><g><title>mi_thread_data_alloc (2 samples, 0.39%)</title><rect x="72.0930%" y="325" width="0.3876%" height="15" fill="rgb(245,177,15)" fg:x="372" fg:w="2"/><text x="72.3430%" y="335.50"></text></g><g><title>_mi_os_alloc (1 samples, 0.19%)</title><rect x="72.2868%" y="309" width="0.1938%" height="15" fill="rgb(206,64,50)" fg:x="373" fg:w="1"/><text x="72.5368%" y="319.50"></text></g><g><title>mi_os_mem_alloc (1 samples, 0.19%)</title><rect x="72.2868%" y="293" width="0.1938%" height="15" fill="rgb(234,36,40)" fg:x="373" fg:w="1"/><text x="72.5368%" y="303.50"></text></g><g><title>mi_unix_mmap (1 samples, 0.19%)</title><rect x="72.2868%" y="277" width="0.1938%" height="15" fill="rgb(213,64,8)" fg:x="373" fg:w="1"/><text x="72.5368%" y="287.50"></text></g><g><title>mi_unix_mmapx (1 samples, 0.19%)</title><rect x="72.2868%" y="261" width="0.1938%" height="15" fill="rgb(210,75,36)" fg:x="373" fg:w="1"/><text x="72.5368%" y="271.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.19%)</title><rect x="72.2868%" y="245" width="0.1938%" height="15" fill="rgb(229,88,21)" fg:x="373" fg:w="1"/><text x="72.5368%" y="255.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.19%)</title><rect x="72.2868%" y="229" width="0.1938%" height="15" fill="rgb(252,204,47)" fg:x="373" fg:w="1"/><text x="72.5368%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="213" width="0.1938%" height="15" fill="rgb(208,77,27)" fg:x="373" fg:w="1"/><text x="72.5368%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="197" width="0.1938%" height="15" fill="rgb(221,76,26)" fg:x="373" fg:w="1"/><text x="72.5368%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="181" width="0.1938%" height="15" fill="rgb(225,139,18)" fg:x="373" fg:w="1"/><text x="72.5368%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="165" width="0.1938%" height="15" fill="rgb(230,137,11)" fg:x="373" fg:w="1"/><text x="72.5368%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="149" width="0.1938%" height="15" fill="rgb(212,28,1)" fg:x="373" fg:w="1"/><text x="72.5368%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="133" width="0.1938%" height="15" fill="rgb(248,164,17)" fg:x="373" fg:w="1"/><text x="72.5368%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="117" width="0.1938%" height="15" fill="rgb(222,171,42)" fg:x="373" fg:w="1"/><text x="72.5368%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="101" width="0.1938%" height="15" fill="rgb(243,84,45)" fg:x="373" fg:w="1"/><text x="72.5368%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="85" width="0.1938%" height="15" fill="rgb(252,49,23)" fg:x="373" fg:w="1"/><text x="72.5368%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="69" width="0.1938%" height="15" fill="rgb(215,19,7)" fg:x="373" fg:w="1"/><text x="72.5368%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="53" width="0.1938%" height="15" fill="rgb(238,81,41)" fg:x="373" fg:w="1"/><text x="72.5368%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="72.2868%" y="37" width="0.1938%" height="15" fill="rgb(210,199,37)" fg:x="373" fg:w="1"/><text x="72.5368%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;demoparser::parsing::parser::ParsingMaps&gt;&gt; (23 samples, 4.46%)</title><rect x="72.4806%" y="517" width="4.4574%" height="15" fill="rgb(244,192,49)" fg:x="374" fg:w="23"/><text x="72.7306%" y="527.50">core:..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 4.46%)</title><rect x="72.4806%" y="501" width="4.4574%" height="15" fill="rgb(226,211,11)" fg:x="374" fg:w="23"/><text x="72.7306%" y="511.50">&lt;std:..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (23 samples, 4.46%)</title><rect x="72.4806%" y="485" width="4.4574%" height="15" fill="rgb(236,162,54)" fg:x="374" fg:w="23"/><text x="72.7306%" y="495.50">std::..</text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (6 samples, 1.16%)</title><rect x="75.7752%" y="469" width="1.1628%" height="15" fill="rgb(220,229,9)" fg:x="391" fg:w="6"/><text x="76.0252%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 1.16%)</title><rect x="75.7752%" y="453" width="1.1628%" height="15" fill="rgb(250,87,22)" fg:x="391" fg:w="6"/><text x="76.0252%" y="463.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (7 samples, 1.36%)</title><rect x="76.9380%" y="517" width="1.3566%" height="15" fill="rgb(239,43,17)" fg:x="397" fg:w="7"/><text x="77.1880%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (7 samples, 1.36%)</title><rect x="76.9380%" y="501" width="1.3566%" height="15" fill="rgb(231,177,25)" fg:x="397" fg:w="7"/><text x="77.1880%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (1 samples, 0.19%)</title><rect x="78.1008%" y="485" width="0.1938%" height="15" fill="rgb(219,179,1)" fg:x="403" fg:w="1"/><text x="78.3508%" y="495.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.19%)</title><rect x="78.1008%" y="469" width="0.1938%" height="15" fill="rgb(238,219,53)" fg:x="403" fg:w="1"/><text x="78.3508%" y="479.50"></text></g><g><title>syscall (1 samples, 0.19%)</title><rect x="78.1008%" y="453" width="0.1938%" height="15" fill="rgb(232,167,36)" fg:x="403" fg:w="1"/><text x="78.3508%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="437" width="0.1938%" height="15" fill="rgb(244,19,51)" fg:x="403" fg:w="1"/><text x="78.3508%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="421" width="0.1938%" height="15" fill="rgb(224,6,22)" fg:x="403" fg:w="1"/><text x="78.3508%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="405" width="0.1938%" height="15" fill="rgb(224,145,5)" fg:x="403" fg:w="1"/><text x="78.3508%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="389" width="0.1938%" height="15" fill="rgb(234,130,49)" fg:x="403" fg:w="1"/><text x="78.3508%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="373" width="0.1938%" height="15" fill="rgb(254,6,2)" fg:x="403" fg:w="1"/><text x="78.3508%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="78.1008%" y="357" width="0.1938%" height="15" fill="rgb(208,96,46)" fg:x="403" fg:w="1"/><text x="78.3508%" y="367.50"></text></g><g><title>[unknown] (53 samples, 10.27%)</title><rect x="82.5581%" y="453" width="10.2713%" height="15" fill="rgb(239,3,39)" fg:x="426" fg:w="53"/><text x="82.8081%" y="463.50">[unknown]</text></g><g><title>[unknown] (52 samples, 10.08%)</title><rect x="82.7519%" y="437" width="10.0775%" height="15" fill="rgb(233,210,1)" fg:x="427" fg:w="52"/><text x="83.0019%" y="447.50">[unknown]</text></g><g><title>[unknown] (52 samples, 10.08%)</title><rect x="82.7519%" y="421" width="10.0775%" height="15" fill="rgb(244,137,37)" fg:x="427" fg:w="52"/><text x="83.0019%" y="431.50">[unknown]</text></g><g><title>[unknown] (52 samples, 10.08%)</title><rect x="82.7519%" y="405" width="10.0775%" height="15" fill="rgb(240,136,2)" fg:x="427" fg:w="52"/><text x="83.0019%" y="415.50">[unknown]</text></g><g><title>[unknown] (47 samples, 9.11%)</title><rect x="83.7209%" y="389" width="9.1085%" height="15" fill="rgb(239,18,37)" fg:x="432" fg:w="47"/><text x="83.9709%" y="399.50">[unknown]</text></g><g><title>[unknown] (47 samples, 9.11%)</title><rect x="83.7209%" y="373" width="9.1085%" height="15" fill="rgb(218,185,22)" fg:x="432" fg:w="47"/><text x="83.9709%" y="383.50">[unknown]</text></g><g><title>[unknown] (14 samples, 2.71%)</title><rect x="90.1163%" y="357" width="2.7132%" height="15" fill="rgb(225,218,4)" fg:x="465" fg:w="14"/><text x="90.3663%" y="367.50">[u..</text></g><g><title>[unknown] (14 samples, 2.71%)</title><rect x="90.1163%" y="341" width="2.7132%" height="15" fill="rgb(230,182,32)" fg:x="465" fg:w="14"/><text x="90.3663%" y="351.50">[u..</text></g><g><title>[unknown] (12 samples, 2.33%)</title><rect x="90.5039%" y="325" width="2.3256%" height="15" fill="rgb(242,56,43)" fg:x="467" fg:w="12"/><text x="90.7539%" y="335.50">[..</text></g><g><title>[unknown] (11 samples, 2.13%)</title><rect x="90.6977%" y="309" width="2.1318%" height="15" fill="rgb(233,99,24)" fg:x="468" fg:w="11"/><text x="90.9477%" y="319.50">[..</text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="91.2791%" y="293" width="1.5504%" height="15" fill="rgb(234,209,42)" fg:x="471" fg:w="8"/><text x="91.5291%" y="303.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="91.2791%" y="277" width="1.5504%" height="15" fill="rgb(227,7,12)" fg:x="471" fg:w="8"/><text x="91.5291%" y="287.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="91.2791%" y="261" width="1.5504%" height="15" fill="rgb(245,203,43)" fg:x="471" fg:w="8"/><text x="91.5291%" y="271.50"></text></g><g><title>[unknown] (7 samples, 1.36%)</title><rect x="91.4729%" y="245" width="1.3566%" height="15" fill="rgb(238,205,33)" fg:x="472" fg:w="7"/><text x="91.7229%" y="255.50"></text></g><g><title>[unknown] (7 samples, 1.36%)</title><rect x="91.4729%" y="229" width="1.3566%" height="15" fill="rgb(231,56,7)" fg:x="472" fg:w="7"/><text x="91.7229%" y="239.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="91.6667%" y="213" width="1.1628%" height="15" fill="rgb(244,186,29)" fg:x="473" fg:w="6"/><text x="91.9167%" y="223.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="91.6667%" y="197" width="1.1628%" height="15" fill="rgb(234,111,31)" fg:x="473" fg:w="6"/><text x="91.9167%" y="207.50"></text></g><g><title>[unknown] (6 samples, 1.16%)</title><rect x="91.6667%" y="181" width="1.1628%" height="15" fill="rgb(241,149,10)" fg:x="473" fg:w="6"/><text x="91.9167%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="91.8605%" y="165" width="0.9690%" height="15" fill="rgb(249,206,44)" fg:x="474" fg:w="5"/><text x="92.1105%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="91.8605%" y="149" width="0.9690%" height="15" fill="rgb(251,153,30)" fg:x="474" fg:w="5"/><text x="92.1105%" y="159.50"></text></g><g><title>std::panic::catch_unwind (388 samples, 75.19%)</title><rect x="20.9302%" y="661" width="75.1938%" height="15" fill="rgb(239,152,38)" fg:x="108" fg:w="388"/><text x="21.1802%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (388 samples, 75.19%)</title><rect x="20.9302%" y="645" width="75.1938%" height="15" fill="rgb(249,139,47)" fg:x="108" fg:w="388"/><text x="21.1802%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (388 samples, 75.19%)</title><rect x="20.9302%" y="629" width="75.1938%" height="15" fill="rgb(244,64,35)" fg:x="108" fg:w="388"/><text x="21.1802%" y="639.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (388 samples, 75.19%)</title><rect x="20.9302%" y="613" width="75.1938%" height="15" fill="rgb(216,46,15)" fg:x="108" fg:w="388"/><text x="21.1802%" y="623.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (388 samples, 75.19%)</title><rect x="20.9302%" y="597" width="75.1938%" height="15" fill="rgb(250,74,19)" fg:x="108" fg:w="388"/><text x="21.1802%" y="607.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (388 samples, 75.19%)</title><rect x="20.9302%" y="581" width="75.1938%" height="15" fill="rgb(249,42,33)" fg:x="108" fg:w="388"/><text x="21.1802%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>demoparser::parsing::parser::Parser::start_parser_thread_main::{{closure}} (305 samples, 59.11%)</title><rect x="37.0155%" y="565" width="59.1085%" height="15" fill="rgb(242,149,17)" fg:x="191" fg:w="305"/><text x="37.2655%" y="575.50">demoparser::parsing::parser::Parser::start_parser_thread_main::{{closure}}</text></g><g><title>demoparser::parsing::parser::Parser::start_parser_thread (305 samples, 59.11%)</title><rect x="37.0155%" y="549" width="59.1085%" height="15" fill="rgb(244,29,21)" fg:x="191" fg:w="305"/><text x="37.2655%" y="559.50">demoparser::parsing::parser::Parser::start_parser_thread</text></g><g><title>demoparser::parsing::parser::Parser::wait_for_map (136 samples, 26.36%)</title><rect x="69.7674%" y="533" width="26.3566%" height="15" fill="rgb(220,130,37)" fg:x="360" fg:w="136"/><text x="70.0174%" y="543.50">demoparser::parsing::parser::Parser::wait_..</text></g><g><title>std::thread::sleep (92 samples, 17.83%)</title><rect x="78.2946%" y="517" width="17.8295%" height="15" fill="rgb(211,67,2)" fg:x="404" fg:w="92"/><text x="78.5446%" y="527.50">std::thread::sleep</text></g><g><title>std::sys::unix::thread::Thread::sleep (92 samples, 17.83%)</title><rect x="78.2946%" y="501" width="17.8295%" height="15" fill="rgb(235,68,52)" fg:x="404" fg:w="92"/><text x="78.5446%" y="511.50">std::sys::unix::thread::Thre..</text></g><g><title>__GI___nanosleep (87 samples, 16.86%)</title><rect x="79.2636%" y="485" width="16.8605%" height="15" fill="rgb(246,142,3)" fg:x="409" fg:w="87"/><text x="79.5136%" y="495.50">__GI___nanosleep</text></g><g><title>__GI___clock_nanosleep (87 samples, 16.86%)</title><rect x="79.2636%" y="469" width="16.8605%" height="15" fill="rgb(241,25,7)" fg:x="409" fg:w="87"/><text x="79.5136%" y="479.50">__GI___clock_nanosleep</text></g><g><title>__GI___pthread_disable_asynccancel (17 samples, 3.29%)</title><rect x="92.8295%" y="453" width="3.2946%" height="15" fill="rgb(242,119,39)" fg:x="479" fg:w="17"/><text x="93.0795%" y="463.50">__G..</text></g><g><title>__GI___mmap64 (2 samples, 0.39%)</title><rect x="96.1240%" y="501" width="0.3876%" height="15" fill="rgb(241,98,45)" fg:x="496" fg:w="2"/><text x="96.3740%" y="511.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.39%)</title><rect x="96.1240%" y="485" width="0.3876%" height="15" fill="rgb(254,28,30)" fg:x="496" fg:w="2"/><text x="96.3740%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="469" width="0.3876%" height="15" fill="rgb(241,142,54)" fg:x="496" fg:w="2"/><text x="96.3740%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="453" width="0.3876%" height="15" fill="rgb(222,85,15)" fg:x="496" fg:w="2"/><text x="96.3740%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="437" width="0.3876%" height="15" fill="rgb(210,85,47)" fg:x="496" fg:w="2"/><text x="96.3740%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="421" width="0.3876%" height="15" fill="rgb(224,206,25)" fg:x="496" fg:w="2"/><text x="96.3740%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="405" width="0.3876%" height="15" fill="rgb(243,201,19)" fg:x="496" fg:w="2"/><text x="96.3740%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="389" width="0.3876%" height="15" fill="rgb(236,59,4)" fg:x="496" fg:w="2"/><text x="96.3740%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="373" width="0.3876%" height="15" fill="rgb(254,179,45)" fg:x="496" fg:w="2"/><text x="96.3740%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="96.1240%" y="357" width="0.3876%" height="15" fill="rgb(226,14,10)" fg:x="496" fg:w="2"/><text x="96.3740%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.3178%" y="341" width="0.1938%" height="15" fill="rgb(244,27,41)" fg:x="497" fg:w="1"/><text x="96.5678%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.3178%" y="325" width="0.1938%" height="15" fill="rgb(235,35,32)" fg:x="497" fg:w="1"/><text x="96.5678%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.3178%" y="309" width="0.1938%" height="15" fill="rgb(218,68,31)" fg:x="497" fg:w="1"/><text x="96.5678%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.3178%" y="293" width="0.1938%" height="15" fill="rgb(207,120,37)" fg:x="497" fg:w="1"/><text x="96.5678%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (391 samples, 75.78%)</title><rect x="20.9302%" y="725" width="75.7752%" height="15" fill="rgb(227,98,0)" fg:x="108" fg:w="391"/><text x="21.1802%" y="735.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (391 samples, 75.78%)</title><rect x="20.9302%" y="709" width="75.7752%" height="15" fill="rgb(207,7,3)" fg:x="108" fg:w="391"/><text x="21.1802%" y="719.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (391 samples, 75.78%)</title><rect x="20.9302%" y="693" width="75.7752%" height="15" fill="rgb(206,98,19)" fg:x="108" fg:w="391"/><text x="21.1802%" y="703.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (391 samples, 75.78%)</title><rect x="20.9302%" y="677" width="75.7752%" height="15" fill="rgb(217,5,26)" fg:x="108" fg:w="391"/><text x="21.1802%" y="687.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (3 samples, 0.58%)</title><rect x="96.1240%" y="661" width="0.5814%" height="15" fill="rgb(235,190,38)" fg:x="496" fg:w="3"/><text x="96.3740%" y="671.50"></text></g><g><title>__pthread_getattr_np (3 samples, 0.58%)</title><rect x="96.1240%" y="645" width="0.5814%" height="15" fill="rgb(247,86,24)" fg:x="496" fg:w="3"/><text x="96.3740%" y="655.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.58%)</title><rect x="96.1240%" y="629" width="0.5814%" height="15" fill="rgb(205,101,16)" fg:x="496" fg:w="3"/><text x="96.3740%" y="639.50"></text></g><g><title>tcache_init (3 samples, 0.58%)</title><rect x="96.1240%" y="613" width="0.5814%" height="15" fill="rgb(246,168,33)" fg:x="496" fg:w="3"/><text x="96.3740%" y="623.50"></text></g><g><title>tcache_init (3 samples, 0.58%)</title><rect x="96.1240%" y="597" width="0.5814%" height="15" fill="rgb(231,114,1)" fg:x="496" fg:w="3"/><text x="96.3740%" y="607.50"></text></g><g><title>arena_get2 (3 samples, 0.58%)</title><rect x="96.1240%" y="581" width="0.5814%" height="15" fill="rgb(207,184,53)" fg:x="496" fg:w="3"/><text x="96.3740%" y="591.50"></text></g><g><title>arena_get2 (3 samples, 0.58%)</title><rect x="96.1240%" y="565" width="0.5814%" height="15" fill="rgb(224,95,51)" fg:x="496" fg:w="3"/><text x="96.3740%" y="575.50"></text></g><g><title>_int_new_arena (3 samples, 0.58%)</title><rect x="96.1240%" y="549" width="0.5814%" height="15" fill="rgb(212,188,45)" fg:x="496" fg:w="3"/><text x="96.3740%" y="559.50"></text></g><g><title>new_heap (3 samples, 0.58%)</title><rect x="96.1240%" y="533" width="0.5814%" height="15" fill="rgb(223,154,38)" fg:x="496" fg:w="3"/><text x="96.3740%" y="543.50"></text></g><g><title>alloc_new_heap (3 samples, 0.58%)</title><rect x="96.1240%" y="517" width="0.5814%" height="15" fill="rgb(251,22,52)" fg:x="496" fg:w="3"/><text x="96.3740%" y="527.50"></text></g><g><title>__GI___mprotect (1 samples, 0.19%)</title><rect x="96.5116%" y="501" width="0.1938%" height="15" fill="rgb(229,209,22)" fg:x="498" fg:w="1"/><text x="96.7616%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="485" width="0.1938%" height="15" fill="rgb(234,138,34)" fg:x="498" fg:w="1"/><text x="96.7616%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="469" width="0.1938%" height="15" fill="rgb(212,95,11)" fg:x="498" fg:w="1"/><text x="96.7616%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="453" width="0.1938%" height="15" fill="rgb(240,179,47)" fg:x="498" fg:w="1"/><text x="96.7616%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="437" width="0.1938%" height="15" fill="rgb(240,163,11)" fg:x="498" fg:w="1"/><text x="96.7616%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="421" width="0.1938%" height="15" fill="rgb(236,37,12)" fg:x="498" fg:w="1"/><text x="96.7616%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="405" width="0.1938%" height="15" fill="rgb(232,164,16)" fg:x="498" fg:w="1"/><text x="96.7616%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.5116%" y="389" width="0.1938%" height="15" fill="rgb(244,205,15)" fg:x="498" fg:w="1"/><text x="96.7616%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.19%)</title><rect x="96.7054%" y="725" width="0.1938%" height="15" fill="rgb(223,117,47)" fg:x="499" fg:w="1"/><text x="96.9554%" y="735.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="96.7054%" y="709" width="0.1938%" height="15" fill="rgb(244,107,35)" fg:x="499" fg:w="1"/><text x="96.9554%" y="719.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.19%)</title><rect x="96.7054%" y="693" width="0.1938%" height="15" fill="rgb(205,140,8)" fg:x="499" fg:w="1"/><text x="96.9554%" y="703.50"></text></g><g><title>__GI___munmap (1 samples, 0.19%)</title><rect x="96.7054%" y="677" width="0.1938%" height="15" fill="rgb(228,84,46)" fg:x="499" fg:w="1"/><text x="96.9554%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="661" width="0.1938%" height="15" fill="rgb(254,188,9)" fg:x="499" fg:w="1"/><text x="96.9554%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="645" width="0.1938%" height="15" fill="rgb(206,112,54)" fg:x="499" fg:w="1"/><text x="96.9554%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="629" width="0.1938%" height="15" fill="rgb(216,84,49)" fg:x="499" fg:w="1"/><text x="96.9554%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="613" width="0.1938%" height="15" fill="rgb(214,194,35)" fg:x="499" fg:w="1"/><text x="96.9554%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="597" width="0.1938%" height="15" fill="rgb(249,28,3)" fg:x="499" fg:w="1"/><text x="96.9554%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="581" width="0.1938%" height="15" fill="rgb(222,56,52)" fg:x="499" fg:w="1"/><text x="96.9554%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="565" width="0.1938%" height="15" fill="rgb(245,217,50)" fg:x="499" fg:w="1"/><text x="96.9554%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="549" width="0.1938%" height="15" fill="rgb(213,201,24)" fg:x="499" fg:w="1"/><text x="96.9554%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="533" width="0.1938%" height="15" fill="rgb(248,116,28)" fg:x="499" fg:w="1"/><text x="96.9554%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="517" width="0.1938%" height="15" fill="rgb(219,72,43)" fg:x="499" fg:w="1"/><text x="96.9554%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.7054%" y="501" width="0.1938%" height="15" fill="rgb(209,138,14)" fg:x="499" fg:w="1"/><text x="96.9554%" y="511.50"></text></g><g><title>__GI___mmap64 (8 samples, 1.55%)</title><rect x="96.8992%" y="661" width="1.5504%" height="15" fill="rgb(222,18,33)" fg:x="500" fg:w="8"/><text x="97.1492%" y="671.50"></text></g><g><title>__GI___mmap64 (8 samples, 1.55%)</title><rect x="96.8992%" y="645" width="1.5504%" height="15" fill="rgb(213,199,7)" fg:x="500" fg:w="8"/><text x="97.1492%" y="655.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="629" width="1.5504%" height="15" fill="rgb(250,110,10)" fg:x="500" fg:w="8"/><text x="97.1492%" y="639.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="613" width="1.5504%" height="15" fill="rgb(248,123,6)" fg:x="500" fg:w="8"/><text x="97.1492%" y="623.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="597" width="1.5504%" height="15" fill="rgb(206,91,31)" fg:x="500" fg:w="8"/><text x="97.1492%" y="607.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="581" width="1.5504%" height="15" fill="rgb(211,154,13)" fg:x="500" fg:w="8"/><text x="97.1492%" y="591.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="565" width="1.5504%" height="15" fill="rgb(225,148,7)" fg:x="500" fg:w="8"/><text x="97.1492%" y="575.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="549" width="1.5504%" height="15" fill="rgb(220,160,43)" fg:x="500" fg:w="8"/><text x="97.1492%" y="559.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="533" width="1.5504%" height="15" fill="rgb(213,52,39)" fg:x="500" fg:w="8"/><text x="97.1492%" y="543.50"></text></g><g><title>[unknown] (8 samples, 1.55%)</title><rect x="96.8992%" y="517" width="1.5504%" height="15" fill="rgb(243,137,7)" fg:x="500" fg:w="8"/><text x="97.1492%" y="527.50"></text></g><g><title>[unknown] (7 samples, 1.36%)</title><rect x="97.0930%" y="501" width="1.3566%" height="15" fill="rgb(230,79,13)" fg:x="501" fg:w="7"/><text x="97.3430%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.78%)</title><rect x="97.6744%" y="485" width="0.7752%" height="15" fill="rgb(247,105,23)" fg:x="504" fg:w="4"/><text x="97.9244%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="97.8682%" y="469" width="0.5814%" height="15" fill="rgb(223,179,41)" fg:x="505" fg:w="3"/><text x="98.1182%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.2558%" y="453" width="0.1938%" height="15" fill="rgb(218,9,34)" fg:x="507" fg:w="1"/><text x="98.5058%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.2558%" y="437" width="0.1938%" height="15" fill="rgb(222,106,8)" fg:x="507" fg:w="1"/><text x="98.5058%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.2558%" y="421" width="0.1938%" height="15" fill="rgb(211,220,0)" fg:x="507" fg:w="1"/><text x="98.5058%" y="431.50"></text></g><g><title>__clone3 (404 samples, 78.29%)</title><rect x="20.5426%" y="773" width="78.2946%" height="15" fill="rgb(229,52,16)" fg:x="106" fg:w="404"/><text x="20.7926%" y="783.50">__clone3</text></g><g><title>start_thread (403 samples, 78.10%)</title><rect x="20.7364%" y="757" width="78.1008%" height="15" fill="rgb(212,155,18)" fg:x="107" fg:w="403"/><text x="20.9864%" y="767.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (402 samples, 77.91%)</title><rect x="20.9302%" y="741" width="77.9070%" height="15" fill="rgb(242,21,14)" fg:x="108" fg:w="402"/><text x="21.1802%" y="751.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (10 samples, 1.94%)</title><rect x="96.8992%" y="725" width="1.9380%" height="15" fill="rgb(222,19,48)" fg:x="500" fg:w="10"/><text x="97.1492%" y="735.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (10 samples, 1.94%)</title><rect x="96.8992%" y="709" width="1.9380%" height="15" fill="rgb(232,45,27)" fg:x="500" fg:w="10"/><text x="97.1492%" y="719.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (10 samples, 1.94%)</title><rect x="96.8992%" y="693" width="1.9380%" height="15" fill="rgb(249,103,42)" fg:x="500" fg:w="10"/><text x="97.1492%" y="703.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (10 samples, 1.94%)</title><rect x="96.8992%" y="677" width="1.9380%" height="15" fill="rgb(246,81,33)" fg:x="500" fg:w="10"/><text x="97.1492%" y="687.50">s..</text></g><g><title>__GI___mprotect (2 samples, 0.39%)</title><rect x="98.4496%" y="661" width="0.3876%" height="15" fill="rgb(252,33,42)" fg:x="508" fg:w="2"/><text x="98.6996%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="645" width="0.3876%" height="15" fill="rgb(209,212,41)" fg:x="508" fg:w="2"/><text x="98.6996%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="629" width="0.3876%" height="15" fill="rgb(207,154,6)" fg:x="508" fg:w="2"/><text x="98.6996%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="613" width="0.3876%" height="15" fill="rgb(223,64,47)" fg:x="508" fg:w="2"/><text x="98.6996%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="597" width="0.3876%" height="15" fill="rgb(211,161,38)" fg:x="508" fg:w="2"/><text x="98.6996%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="581" width="0.3876%" height="15" fill="rgb(219,138,40)" fg:x="508" fg:w="2"/><text x="98.6996%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="565" width="0.3876%" height="15" fill="rgb(241,228,46)" fg:x="508" fg:w="2"/><text x="98.6996%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="549" width="0.3876%" height="15" fill="rgb(223,209,38)" fg:x="508" fg:w="2"/><text x="98.6996%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.4496%" y="533" width="0.3876%" height="15" fill="rgb(236,164,45)" fg:x="508" fg:w="2"/><text x="98.6996%" y="543.50"></text></g><g><title>demoparser (511 samples, 99.03%)</title><rect x="0.0000%" y="789" width="99.0310%" height="15" fill="rgb(231,15,5)" fg:x="0" fg:w="511"/><text x="0.2500%" y="799.50">demoparser</text></g><g><title>_start (1 samples, 0.19%)</title><rect x="98.8372%" y="773" width="0.1938%" height="15" fill="rgb(252,35,15)" fg:x="510" fg:w="1"/><text x="99.0872%" y="783.50"></text></g><g><title>__libc_start_main_impl (1 samples, 0.19%)</title><rect x="98.8372%" y="757" width="0.1938%" height="15" fill="rgb(248,181,18)" fg:x="510" fg:w="1"/><text x="99.0872%" y="767.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.19%)</title><rect x="98.8372%" y="741" width="0.1938%" height="15" fill="rgb(233,39,42)" fg:x="510" fg:w="1"/><text x="99.0872%" y="751.50"></text></g><g><title>main (1 samples, 0.19%)</title><rect x="98.8372%" y="725" width="0.1938%" height="15" fill="rgb(238,110,33)" fg:x="510" fg:w="1"/><text x="99.0872%" y="735.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.19%)</title><rect x="98.8372%" y="709" width="0.1938%" height="15" fill="rgb(233,195,10)" fg:x="510" fg:w="1"/><text x="99.0872%" y="719.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.19%)</title><rect x="98.8372%" y="693" width="0.1938%" height="15" fill="rgb(254,105,3)" fg:x="510" fg:w="1"/><text x="99.0872%" y="703.50"></text></g><g><title>std::panicking::try (1 samples, 0.19%)</title><rect x="98.8372%" y="677" width="0.1938%" height="15" fill="rgb(221,225,9)" fg:x="510" fg:w="1"/><text x="99.0872%" y="687.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.19%)</title><rect x="98.8372%" y="661" width="0.1938%" height="15" fill="rgb(224,227,45)" fg:x="510" fg:w="1"/><text x="99.0872%" y="671.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.19%)</title><rect x="98.8372%" y="645" width="0.1938%" height="15" fill="rgb(229,198,43)" fg:x="510" fg:w="1"/><text x="99.0872%" y="655.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.19%)</title><rect x="98.8372%" y="629" width="0.1938%" height="15" fill="rgb(206,209,35)" fg:x="510" fg:w="1"/><text x="99.0872%" y="639.50"></text></g><g><title>std::panicking::try (1 samples, 0.19%)</title><rect x="98.8372%" y="613" width="0.1938%" height="15" fill="rgb(245,195,53)" fg:x="510" fg:w="1"/><text x="99.0872%" y="623.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.19%)</title><rect x="98.8372%" y="597" width="0.1938%" height="15" fill="rgb(240,92,26)" fg:x="510" fg:w="1"/><text x="99.0872%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.19%)</title><rect x="98.8372%" y="581" width="0.1938%" height="15" fill="rgb(207,40,23)" fg:x="510" fg:w="1"/><text x="99.0872%" y="591.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.19%)</title><rect x="98.8372%" y="565" width="0.1938%" height="15" fill="rgb(223,111,35)" fg:x="510" fg:w="1"/><text x="99.0872%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.19%)</title><rect x="98.8372%" y="549" width="0.1938%" height="15" fill="rgb(229,147,28)" fg:x="510" fg:w="1"/><text x="99.0872%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.19%)</title><rect x="98.8372%" y="533" width="0.1938%" height="15" fill="rgb(211,29,28)" fg:x="510" fg:w="1"/><text x="99.0872%" y="543.50"></text></g><g><title>demoparser::main (1 samples, 0.19%)</title><rect x="98.8372%" y="517" width="0.1938%" height="15" fill="rgb(228,72,33)" fg:x="510" fg:w="1"/><text x="99.0872%" y="527.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="98.8372%" y="501" width="0.1938%" height="15" fill="rgb(205,214,31)" fg:x="510" fg:w="1"/><text x="99.0872%" y="511.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="98.8372%" y="485" width="0.1938%" height="15" fill="rgb(224,111,15)" fg:x="510" fg:w="1"/><text x="99.0872%" y="495.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.19%)</title><rect x="98.8372%" y="469" width="0.1938%" height="15" fill="rgb(253,21,26)" fg:x="510" fg:w="1"/><text x="99.0872%" y="479.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.19%)</title><rect x="98.8372%" y="453" width="0.1938%" height="15" fill="rgb(245,139,43)" fg:x="510" fg:w="1"/><text x="99.0872%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="437" width="0.1938%" height="15" fill="rgb(252,170,7)" fg:x="510" fg:w="1"/><text x="99.0872%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="421" width="0.1938%" height="15" fill="rgb(231,118,14)" fg:x="510" fg:w="1"/><text x="99.0872%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="405" width="0.1938%" height="15" fill="rgb(238,83,0)" fg:x="510" fg:w="1"/><text x="99.0872%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="389" width="0.1938%" height="15" fill="rgb(221,39,39)" fg:x="510" fg:w="1"/><text x="99.0872%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="373" width="0.1938%" height="15" fill="rgb(222,119,46)" fg:x="510" fg:w="1"/><text x="99.0872%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="357" width="0.1938%" height="15" fill="rgb(222,165,49)" fg:x="510" fg:w="1"/><text x="99.0872%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="341" width="0.1938%" height="15" fill="rgb(219,113,52)" fg:x="510" fg:w="1"/><text x="99.0872%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="325" width="0.1938%" height="15" fill="rgb(214,7,15)" fg:x="510" fg:w="1"/><text x="99.0872%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="309" width="0.1938%" height="15" fill="rgb(235,32,4)" fg:x="510" fg:w="1"/><text x="99.0872%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="293" width="0.1938%" height="15" fill="rgb(238,90,54)" fg:x="510" fg:w="1"/><text x="99.0872%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="98.8372%" y="277" width="0.1938%" height="15" fill="rgb(213,208,19)" fg:x="510" fg:w="1"/><text x="99.0872%" y="287.50"></text></g><g><title>all (516 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="516"/><text x="0.2500%" y="815.50"></text></g><g><title>perf-exec (5 samples, 0.97%)</title><rect x="99.0310%" y="789" width="0.9690%" height="15" fill="rgb(207,194,5)" fg:x="511" fg:w="5"/><text x="99.2810%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="773" width="0.9690%" height="15" fill="rgb(206,111,30)" fg:x="511" fg:w="5"/><text x="99.2810%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="757" width="0.9690%" height="15" fill="rgb(243,70,54)" fg:x="511" fg:w="5"/><text x="99.2810%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="741" width="0.9690%" height="15" fill="rgb(242,28,8)" fg:x="511" fg:w="5"/><text x="99.2810%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="725" width="0.9690%" height="15" fill="rgb(219,106,18)" fg:x="511" fg:w="5"/><text x="99.2810%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="709" width="0.9690%" height="15" fill="rgb(244,222,10)" fg:x="511" fg:w="5"/><text x="99.2810%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="693" width="0.9690%" height="15" fill="rgb(236,179,52)" fg:x="511" fg:w="5"/><text x="99.2810%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="677" width="0.9690%" height="15" fill="rgb(213,23,39)" fg:x="511" fg:w="5"/><text x="99.2810%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="661" width="0.9690%" height="15" fill="rgb(238,48,10)" fg:x="511" fg:w="5"/><text x="99.2810%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="645" width="0.9690%" height="15" fill="rgb(251,196,23)" fg:x="511" fg:w="5"/><text x="99.2810%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="629" width="0.9690%" height="15" fill="rgb(250,152,24)" fg:x="511" fg:w="5"/><text x="99.2810%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.97%)</title><rect x="99.0310%" y="613" width="0.9690%" height="15" fill="rgb(209,150,17)" fg:x="511" fg:w="5"/><text x="99.2810%" y="623.50"></text></g></svg></svg>