<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="629"><g><title>[unknown] (60 samples, 9.54%)</title><rect x="0.0000%" y="741" width="9.5390%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="60"/><text x="0.2500%" y="751.50">[unknown]</text></g><g><title>[unknown] (55 samples, 8.74%)</title><rect x="0.7949%" y="725" width="8.7440%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="55"/><text x="1.0449%" y="735.50">[unknown]</text></g><g><title>[unknown] (55 samples, 8.74%)</title><rect x="0.7949%" y="709" width="8.7440%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="55"/><text x="1.0449%" y="719.50">[unknown]</text></g><g><title>[unknown] (50 samples, 7.95%)</title><rect x="1.5898%" y="693" width="7.9491%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="50"/><text x="1.8398%" y="703.50">[unknown]</text></g><g><title>[unknown] (38 samples, 6.04%)</title><rect x="3.4976%" y="677" width="6.0413%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="38"/><text x="3.7476%" y="687.50">[unknown]</text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="661" width="0.4769%" height="15" fill="rgb(232,128,0)" fg:x="57" fg:w="3"/><text x="9.3120%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="645" width="0.4769%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="3"/><text x="9.3120%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="629" width="0.4769%" height="15" fill="rgb(228,23,34)" fg:x="57" fg:w="3"/><text x="9.3120%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="613" width="0.4769%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="3"/><text x="9.3120%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="597" width="0.4769%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="3"/><text x="9.3120%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="9.0620%" y="581" width="0.4769%" height="15" fill="rgb(250,228,42)" fg:x="57" fg:w="3"/><text x="9.3120%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="9.2210%" y="565" width="0.3180%" height="15" fill="rgb(240,193,28)" fg:x="58" fg:w="2"/><text x="9.4710%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="9.2210%" y="549" width="0.3180%" height="15" fill="rgb(216,20,37)" fg:x="58" fg:w="2"/><text x="9.4710%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="9.3800%" y="533" width="0.1590%" height="15" fill="rgb(206,188,39)" fg:x="59" fg:w="1"/><text x="9.6300%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="9.3800%" y="517" width="0.1590%" height="15" fill="rgb(217,207,13)" fg:x="59" fg:w="1"/><text x="9.6300%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="9.3800%" y="501" width="0.1590%" height="15" fill="rgb(231,73,38)" fg:x="59" fg:w="1"/><text x="9.6300%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="9.3800%" y="485" width="0.1590%" height="15" fill="rgb(225,20,46)" fg:x="59" fg:w="1"/><text x="9.6300%" y="495.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.95%)</title><rect x="9.5390%" y="613" width="0.9539%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="6"/><text x="9.7890%" y="623.50"></text></g><g><title>mi_thread_init (6 samples, 0.95%)</title><rect x="9.5390%" y="597" width="0.9539%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="6"/><text x="9.7890%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="9.5390%" y="581" width="0.9539%" height="15" fill="rgb(226,26,5)" fg:x="60" fg:w="6"/><text x="9.7890%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="9.5390%" y="565" width="0.9539%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="6"/><text x="9.7890%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="9.5390%" y="549" width="0.9539%" height="15" fill="rgb(235,183,28)" fg:x="60" fg:w="6"/><text x="9.7890%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="9.5390%" y="533" width="0.9539%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="6"/><text x="9.7890%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="517" width="0.1590%" height="15" fill="rgb(247,18,42)" fg:x="65" fg:w="1"/><text x="10.5839%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="501" width="0.1590%" height="15" fill="rgb(241,131,45)" fg:x="65" fg:w="1"/><text x="10.5839%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="485" width="0.1590%" height="15" fill="rgb(249,31,29)" fg:x="65" fg:w="1"/><text x="10.5839%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="469" width="0.1590%" height="15" fill="rgb(225,111,53)" fg:x="65" fg:w="1"/><text x="10.5839%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="453" width="0.1590%" height="15" fill="rgb(238,160,17)" fg:x="65" fg:w="1"/><text x="10.5839%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="10.3339%" y="437" width="0.1590%" height="15" fill="rgb(214,148,48)" fg:x="65" fg:w="1"/><text x="10.5839%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 3.82%)</title><rect x="9.5390%" y="693" width="3.8156%" height="15" fill="rgb(232,36,49)" fg:x="60" fg:w="24"/><text x="9.7890%" y="703.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (24 samples, 3.82%)</title><rect x="9.5390%" y="677" width="3.8156%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="24"/><text x="9.7890%" y="687.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (24 samples, 3.82%)</title><rect x="9.5390%" y="661" width="3.8156%" height="15" fill="rgb(229,88,8)" fg:x="60" fg:w="24"/><text x="9.7890%" y="671.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 3.82%)</title><rect x="9.5390%" y="645" width="3.8156%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="24"/><text x="9.7890%" y="655.50">std:..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (24 samples, 3.82%)</title><rect x="9.5390%" y="629" width="3.8156%" height="15" fill="rgb(254,191,54)" fg:x="60" fg:w="24"/><text x="9.7890%" y="639.50">rayo..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (18 samples, 2.86%)</title><rect x="10.4928%" y="613" width="2.8617%" height="15" fill="rgb(241,83,37)" fg:x="66" fg:w="18"/><text x="10.7428%" y="623.50">ra..</text></g><g><title>rayon_core::sleep::Sleep::sleep (18 samples, 2.86%)</title><rect x="10.4928%" y="597" width="2.8617%" height="15" fill="rgb(233,36,39)" fg:x="66" fg:w="18"/><text x="10.7428%" y="607.50">ra..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (18 samples, 2.86%)</title><rect x="10.4928%" y="581" width="2.8617%" height="15" fill="rgb(226,3,54)" fg:x="66" fg:w="18"/><text x="10.7428%" y="591.50">st..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (18 samples, 2.86%)</title><rect x="10.4928%" y="565" width="2.8617%" height="15" fill="rgb(245,192,40)" fg:x="66" fg:w="18"/><text x="10.7428%" y="575.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (18 samples, 2.86%)</title><rect x="10.4928%" y="549" width="2.8617%" height="15" fill="rgb(238,167,29)" fg:x="66" fg:w="18"/><text x="10.7428%" y="559.50">st..</text></g><g><title>syscall (18 samples, 2.86%)</title><rect x="10.4928%" y="533" width="2.8617%" height="15" fill="rgb(232,182,51)" fg:x="66" fg:w="18"/><text x="10.7428%" y="543.50">sy..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="517" width="2.8617%" height="15" fill="rgb(231,60,39)" fg:x="66" fg:w="18"/><text x="10.7428%" y="527.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="501" width="2.8617%" height="15" fill="rgb(208,69,12)" fg:x="66" fg:w="18"/><text x="10.7428%" y="511.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="485" width="2.8617%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="18"/><text x="10.7428%" y="495.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="469" width="2.8617%" height="15" fill="rgb(213,116,39)" fg:x="66" fg:w="18"/><text x="10.7428%" y="479.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="453" width="2.8617%" height="15" fill="rgb(222,207,29)" fg:x="66" fg:w="18"/><text x="10.7428%" y="463.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="437" width="2.8617%" height="15" fill="rgb(206,96,30)" fg:x="66" fg:w="18"/><text x="10.7428%" y="447.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="10.4928%" y="421" width="2.8617%" height="15" fill="rgb(218,138,4)" fg:x="66" fg:w="18"/><text x="10.7428%" y="431.50">[u..</text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="12.4006%" y="405" width="0.9539%" height="15" fill="rgb(250,191,14)" fg:x="78" fg:w="6"/><text x="12.6506%" y="415.50"></text></g><g><title>__GI___mmap64 (7 samples, 1.11%)</title><rect x="13.3545%" y="629" width="1.1129%" height="15" fill="rgb(239,60,40)" fg:x="84" fg:w="7"/><text x="13.6045%" y="639.50"></text></g><g><title>__GI___mmap64 (7 samples, 1.11%)</title><rect x="13.3545%" y="613" width="1.1129%" height="15" fill="rgb(206,27,48)" fg:x="84" fg:w="7"/><text x="13.6045%" y="623.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="597" width="1.1129%" height="15" fill="rgb(225,35,8)" fg:x="84" fg:w="7"/><text x="13.6045%" y="607.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="581" width="1.1129%" height="15" fill="rgb(250,213,24)" fg:x="84" fg:w="7"/><text x="13.6045%" y="591.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="565" width="1.1129%" height="15" fill="rgb(247,123,22)" fg:x="84" fg:w="7"/><text x="13.6045%" y="575.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="549" width="1.1129%" height="15" fill="rgb(231,138,38)" fg:x="84" fg:w="7"/><text x="13.6045%" y="559.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="533" width="1.1129%" height="15" fill="rgb(231,145,46)" fg:x="84" fg:w="7"/><text x="13.6045%" y="543.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="517" width="1.1129%" height="15" fill="rgb(251,118,11)" fg:x="84" fg:w="7"/><text x="13.6045%" y="527.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="501" width="1.1129%" height="15" fill="rgb(217,147,25)" fg:x="84" fg:w="7"/><text x="13.6045%" y="511.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="13.3545%" y="485" width="1.1129%" height="15" fill="rgb(247,81,37)" fg:x="84" fg:w="7"/><text x="13.6045%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.95%)</title><rect x="13.5135%" y="469" width="0.9539%" height="15" fill="rgb(209,12,38)" fg:x="85" fg:w="6"/><text x="13.7635%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="453" width="0.1590%" height="15" fill="rgb(227,1,9)" fg:x="90" fg:w="1"/><text x="14.5584%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="437" width="0.1590%" height="15" fill="rgb(248,47,43)" fg:x="90" fg:w="1"/><text x="14.5584%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="421" width="0.1590%" height="15" fill="rgb(221,10,30)" fg:x="90" fg:w="1"/><text x="14.5584%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="405" width="0.1590%" height="15" fill="rgb(210,229,1)" fg:x="90" fg:w="1"/><text x="14.5584%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="389" width="0.1590%" height="15" fill="rgb(222,148,37)" fg:x="90" fg:w="1"/><text x="14.5584%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="373" width="0.1590%" height="15" fill="rgb(234,67,33)" fg:x="90" fg:w="1"/><text x="14.5584%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="357" width="0.1590%" height="15" fill="rgb(247,98,35)" fg:x="90" fg:w="1"/><text x="14.5584%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="14.3084%" y="341" width="0.1590%" height="15" fill="rgb(247,138,52)" fg:x="90" fg:w="1"/><text x="14.5584%" y="351.50"></text></g><g><title>__clone3 (33 samples, 5.25%)</title><rect x="9.5390%" y="741" width="5.2464%" height="15" fill="rgb(213,79,30)" fg:x="60" fg:w="33"/><text x="9.7890%" y="751.50">__clon..</text></g><g><title>start_thread (33 samples, 5.25%)</title><rect x="9.5390%" y="725" width="5.2464%" height="15" fill="rgb(246,177,23)" fg:x="60" fg:w="33"/><text x="9.7890%" y="735.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (33 samples, 5.25%)</title><rect x="9.5390%" y="709" width="5.2464%" height="15" fill="rgb(230,62,27)" fg:x="60" fg:w="33"/><text x="9.7890%" y="719.50">std::s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (9 samples, 1.43%)</title><rect x="13.3545%" y="693" width="1.4308%" height="15" fill="rgb(216,154,8)" fg:x="84" fg:w="9"/><text x="13.6045%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (9 samples, 1.43%)</title><rect x="13.3545%" y="677" width="1.4308%" height="15" fill="rgb(244,35,45)" fg:x="84" fg:w="9"/><text x="13.6045%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (9 samples, 1.43%)</title><rect x="13.3545%" y="661" width="1.4308%" height="15" fill="rgb(251,115,12)" fg:x="84" fg:w="9"/><text x="13.6045%" y="671.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (9 samples, 1.43%)</title><rect x="13.3545%" y="645" width="1.4308%" height="15" fill="rgb(240,54,50)" fg:x="84" fg:w="9"/><text x="13.6045%" y="655.50"></text></g><g><title>__GI___mprotect (2 samples, 0.32%)</title><rect x="14.4674%" y="629" width="0.3180%" height="15" fill="rgb(233,84,52)" fg:x="91" fg:w="2"/><text x="14.7174%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="613" width="0.3180%" height="15" fill="rgb(207,117,47)" fg:x="91" fg:w="2"/><text x="14.7174%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="597" width="0.3180%" height="15" fill="rgb(249,43,39)" fg:x="91" fg:w="2"/><text x="14.7174%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="581" width="0.3180%" height="15" fill="rgb(209,38,44)" fg:x="91" fg:w="2"/><text x="14.7174%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="565" width="0.3180%" height="15" fill="rgb(236,212,23)" fg:x="91" fg:w="2"/><text x="14.7174%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="549" width="0.3180%" height="15" fill="rgb(242,79,21)" fg:x="91" fg:w="2"/><text x="14.7174%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="533" width="0.3180%" height="15" fill="rgb(211,96,35)" fg:x="91" fg:w="2"/><text x="14.7174%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="517" width="0.3180%" height="15" fill="rgb(253,215,40)" fg:x="91" fg:w="2"/><text x="14.7174%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="14.4674%" y="501" width="0.3180%" height="15" fill="rgb(211,81,21)" fg:x="91" fg:w="2"/><text x="14.7174%" y="511.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.16%)</title><rect x="14.7854%" y="629" width="0.1590%" height="15" fill="rgb(208,190,38)" fg:x="93" fg:w="1"/><text x="15.0354%" y="639.50"></text></g><g><title>__GI_exit (13 samples, 2.07%)</title><rect x="14.7854%" y="693" width="2.0668%" height="15" fill="rgb(235,213,38)" fg:x="93" fg:w="13"/><text x="15.0354%" y="703.50">_..</text></g><g><title>__run_exit_handlers (13 samples, 2.07%)</title><rect x="14.7854%" y="677" width="2.0668%" height="15" fill="rgb(237,122,38)" fg:x="93" fg:w="13"/><text x="15.0354%" y="687.50">_..</text></g><g><title>mi_process_done (13 samples, 2.07%)</title><rect x="14.7854%" y="661" width="2.0668%" height="15" fill="rgb(244,218,35)" fg:x="93" fg:w="13"/><text x="15.0354%" y="671.50">m..</text></g><g><title>mi_heap_collect_ex (13 samples, 2.07%)</title><rect x="14.7854%" y="645" width="2.0668%" height="15" fill="rgb(240,68,47)" fg:x="93" fg:w="13"/><text x="15.0354%" y="655.50">m..</text></g><g><title>mi_segment_cache_purge (12 samples, 1.91%)</title><rect x="14.9444%" y="629" width="1.9078%" height="15" fill="rgb(210,16,53)" fg:x="94" fg:w="12"/><text x="15.1944%" y="639.50">m..</text></g><g><title>mi_commit_mask_decommit.constprop.0 (12 samples, 1.91%)</title><rect x="14.9444%" y="613" width="1.9078%" height="15" fill="rgb(235,124,12)" fg:x="94" fg:w="12"/><text x="15.1944%" y="623.50">m..</text></g><g><title>_mi_os_decommit (12 samples, 1.91%)</title><rect x="14.9444%" y="597" width="1.9078%" height="15" fill="rgb(224,169,11)" fg:x="94" fg:w="12"/><text x="15.1944%" y="607.50">_..</text></g><g><title>__GI_madvise (12 samples, 1.91%)</title><rect x="14.9444%" y="581" width="1.9078%" height="15" fill="rgb(250,166,2)" fg:x="94" fg:w="12"/><text x="15.1944%" y="591.50">_..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="565" width="1.9078%" height="15" fill="rgb(242,216,29)" fg:x="94" fg:w="12"/><text x="15.1944%" y="575.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="549" width="1.9078%" height="15" fill="rgb(230,116,27)" fg:x="94" fg:w="12"/><text x="15.1944%" y="559.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="533" width="1.9078%" height="15" fill="rgb(228,99,48)" fg:x="94" fg:w="12"/><text x="15.1944%" y="543.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="517" width="1.9078%" height="15" fill="rgb(253,11,6)" fg:x="94" fg:w="12"/><text x="15.1944%" y="527.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="501" width="1.9078%" height="15" fill="rgb(247,143,39)" fg:x="94" fg:w="12"/><text x="15.1944%" y="511.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="485" width="1.9078%" height="15" fill="rgb(236,97,10)" fg:x="94" fg:w="12"/><text x="15.1944%" y="495.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="469" width="1.9078%" height="15" fill="rgb(233,208,19)" fg:x="94" fg:w="12"/><text x="15.1944%" y="479.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="453" width="1.9078%" height="15" fill="rgb(216,164,2)" fg:x="94" fg:w="12"/><text x="15.1944%" y="463.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="14.9444%" y="437" width="1.9078%" height="15" fill="rgb(220,129,5)" fg:x="94" fg:w="12"/><text x="15.1944%" y="447.50">[..</text></g><g><title>[unknown] (10 samples, 1.59%)</title><rect x="15.2623%" y="421" width="1.5898%" height="15" fill="rgb(242,17,10)" fg:x="96" fg:w="10"/><text x="15.5123%" y="431.50"></text></g><g><title>[unknown] (9 samples, 1.43%)</title><rect x="15.4213%" y="405" width="1.4308%" height="15" fill="rgb(242,107,0)" fg:x="97" fg:w="9"/><text x="15.6713%" y="415.50"></text></g><g><title>[unknown] (8 samples, 1.27%)</title><rect x="15.5803%" y="389" width="1.2719%" height="15" fill="rgb(251,28,31)" fg:x="98" fg:w="8"/><text x="15.8303%" y="399.50"></text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="15.7393%" y="373" width="1.1129%" height="15" fill="rgb(233,223,10)" fg:x="99" fg:w="7"/><text x="15.9893%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="16.0572%" y="357" width="0.7949%" height="15" fill="rgb(215,21,27)" fg:x="101" fg:w="5"/><text x="16.3072%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="16.0572%" y="341" width="0.7949%" height="15" fill="rgb(232,23,21)" fg:x="101" fg:w="5"/><text x="16.3072%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="16.2162%" y="325" width="0.6359%" height="15" fill="rgb(244,5,23)" fg:x="102" fg:w="4"/><text x="16.4662%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.6932%" y="309" width="0.1590%" height="15" fill="rgb(226,81,46)" fg:x="105" fg:w="1"/><text x="16.9432%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (1 samples, 0.16%)</title><rect x="16.8521%" y="437" width="0.1590%" height="15" fill="rgb(247,70,30)" fg:x="106" fg:w="1"/><text x="17.1021%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.16%)</title><rect x="16.8521%" y="421" width="0.1590%" height="15" fill="rgb(212,68,19)" fg:x="106" fg:w="1"/><text x="17.1021%" y="431.50"></text></g><g><title>__GI___munmap (1 samples, 0.16%)</title><rect x="16.8521%" y="405" width="0.1590%" height="15" fill="rgb(240,187,13)" fg:x="106" fg:w="1"/><text x="17.1021%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="389" width="0.1590%" height="15" fill="rgb(223,113,26)" fg:x="106" fg:w="1"/><text x="17.1021%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="373" width="0.1590%" height="15" fill="rgb(206,192,2)" fg:x="106" fg:w="1"/><text x="17.1021%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="357" width="0.1590%" height="15" fill="rgb(241,108,4)" fg:x="106" fg:w="1"/><text x="17.1021%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="341" width="0.1590%" height="15" fill="rgb(247,173,49)" fg:x="106" fg:w="1"/><text x="17.1021%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="325" width="0.1590%" height="15" fill="rgb(224,114,35)" fg:x="106" fg:w="1"/><text x="17.1021%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="309" width="0.1590%" height="15" fill="rgb(245,159,27)" fg:x="106" fg:w="1"/><text x="17.1021%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="293" width="0.1590%" height="15" fill="rgb(245,172,44)" fg:x="106" fg:w="1"/><text x="17.1021%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="277" width="0.1590%" height="15" fill="rgb(236,23,11)" fg:x="106" fg:w="1"/><text x="17.1021%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="261" width="0.1590%" height="15" fill="rgb(205,117,38)" fg:x="106" fg:w="1"/><text x="17.1021%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="245" width="0.1590%" height="15" fill="rgb(237,72,25)" fg:x="106" fg:w="1"/><text x="17.1021%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="229" width="0.1590%" height="15" fill="rgb(244,70,9)" fg:x="106" fg:w="1"/><text x="17.1021%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="213" width="0.1590%" height="15" fill="rgb(217,125,39)" fg:x="106" fg:w="1"/><text x="17.1021%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="197" width="0.1590%" height="15" fill="rgb(235,36,10)" fg:x="106" fg:w="1"/><text x="17.1021%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="181" width="0.1590%" height="15" fill="rgb(251,123,47)" fg:x="106" fg:w="1"/><text x="17.1021%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="165" width="0.1590%" height="15" fill="rgb(221,13,13)" fg:x="106" fg:w="1"/><text x="17.1021%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="16.8521%" y="149" width="0.1590%" height="15" fill="rgb(238,131,9)" fg:x="106" fg:w="1"/><text x="17.1021%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.16%)</title><rect x="31.7965%" y="421" width="0.1590%" height="15" fill="rgb(211,50,8)" fg:x="200" fg:w="1"/><text x="32.0465%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="31.7965%" y="405" width="0.1590%" height="15" fill="rgb(245,182,24)" fg:x="200" fg:w="1"/><text x="32.0465%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.16%)</title><rect x="31.7965%" y="389" width="0.1590%" height="15" fill="rgb(242,14,37)" fg:x="200" fg:w="1"/><text x="32.0465%" y="399.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.16%)</title><rect x="31.7965%" y="373" width="0.1590%" height="15" fill="rgb(246,228,12)" fg:x="200" fg:w="1"/><text x="32.0465%" y="383.50"></text></g><g><title>_mi_segment_page_free (1 samples, 0.16%)</title><rect x="31.9555%" y="421" width="0.1590%" height="15" fill="rgb(213,55,15)" fg:x="201" fg:w="1"/><text x="32.2055%" y="431.50"></text></g><g><title>mi_segment_span_free_coalesce (1 samples, 0.16%)</title><rect x="31.9555%" y="405" width="0.1590%" height="15" fill="rgb(209,9,3)" fg:x="201" fg:w="1"/><text x="32.2055%" y="415.50"></text></g><g><title>mi_segment_perhaps_decommit (1 samples, 0.16%)</title><rect x="31.9555%" y="389" width="0.1590%" height="15" fill="rgb(230,59,30)" fg:x="201" fg:w="1"/><text x="32.2055%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.48%)</title><rect x="32.1145%" y="421" width="0.4769%" height="15" fill="rgb(209,121,21)" fg:x="202" fg:w="3"/><text x="32.3645%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.48%)</title><rect x="32.1145%" y="405" width="0.4769%" height="15" fill="rgb(220,109,13)" fg:x="202" fg:w="3"/><text x="32.3645%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 0.48%)</title><rect x="32.1145%" y="389" width="0.4769%" height="15" fill="rgb(232,18,1)" fg:x="202" fg:w="3"/><text x="32.3645%" y="399.50"></text></g><g><title>[libc.so.6] (3 samples, 0.48%)</title><rect x="32.1145%" y="373" width="0.4769%" height="15" fill="rgb(215,41,42)" fg:x="202" fg:w="3"/><text x="32.3645%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="32.2734%" y="357" width="0.3180%" height="15" fill="rgb(224,123,36)" fg:x="203" fg:w="2"/><text x="32.5234%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="341" width="0.1590%" height="15" fill="rgb(240,125,3)" fg:x="204" fg:w="1"/><text x="32.6824%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="325" width="0.1590%" height="15" fill="rgb(205,98,50)" fg:x="204" fg:w="1"/><text x="32.6824%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="309" width="0.1590%" height="15" fill="rgb(205,185,37)" fg:x="204" fg:w="1"/><text x="32.6824%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="293" width="0.1590%" height="15" fill="rgb(238,207,15)" fg:x="204" fg:w="1"/><text x="32.6824%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="277" width="0.1590%" height="15" fill="rgb(213,199,42)" fg:x="204" fg:w="1"/><text x="32.6824%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="261" width="0.1590%" height="15" fill="rgb(235,201,11)" fg:x="204" fg:w="1"/><text x="32.6824%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="245" width="0.1590%" height="15" fill="rgb(207,46,11)" fg:x="204" fg:w="1"/><text x="32.6824%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="229" width="0.1590%" height="15" fill="rgb(241,35,35)" fg:x="204" fg:w="1"/><text x="32.6824%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="213" width="0.1590%" height="15" fill="rgb(243,32,47)" fg:x="204" fg:w="1"/><text x="32.6824%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.4324%" y="197" width="0.1590%" height="15" fill="rgb(247,202,23)" fg:x="204" fg:w="1"/><text x="32.6824%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="32.5914%" y="421" width="0.1590%" height="15" fill="rgb(219,102,11)" fg:x="205" fg:w="1"/><text x="32.8414%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="32.5914%" y="405" width="0.1590%" height="15" fill="rgb(243,110,44)" fg:x="205" fg:w="1"/><text x="32.8414%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.16%)</title><rect x="32.5914%" y="389" width="0.1590%" height="15" fill="rgb(222,74,54)" fg:x="205" fg:w="1"/><text x="32.8414%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.16%)</title><rect x="32.5914%" y="373" width="0.1590%" height="15" fill="rgb(216,99,12)" fg:x="205" fg:w="1"/><text x="32.8414%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.5914%" y="357" width="0.1590%" height="15" fill="rgb(226,22,26)" fg:x="205" fg:w="1"/><text x="32.8414%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.5914%" y="341" width="0.1590%" height="15" fill="rgb(217,163,10)" fg:x="205" fg:w="1"/><text x="32.8414%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.5914%" y="325" width="0.1590%" height="15" fill="rgb(213,25,53)" fg:x="205" fg:w="1"/><text x="32.8414%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="32.5914%" y="309" width="0.1590%" height="15" fill="rgb(252,105,26)" fg:x="205" fg:w="1"/><text x="32.8414%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::JobResult&gt; (19 samples, 3.02%)</title><rect x="32.7504%" y="421" width="3.0207%" height="15" fill="rgb(220,39,43)" fg:x="206" fg:w="19"/><text x="33.0004%" y="431.50">cor..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.32%)</title><rect x="35.7711%" y="405" width="0.3180%" height="15" fill="rgb(229,68,48)" fg:x="225" fg:w="2"/><text x="36.0211%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.32%)</title><rect x="35.7711%" y="389" width="0.3180%" height="15" fill="rgb(252,8,32)" fg:x="225" fg:w="2"/><text x="36.0211%" y="399.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.32%)</title><rect x="35.7711%" y="373" width="0.3180%" height="15" fill="rgb(223,20,43)" fg:x="225" fg:w="2"/><text x="36.0211%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.32%)</title><rect x="35.7711%" y="357" width="0.3180%" height="15" fill="rgb(229,81,49)" fg:x="225" fg:w="2"/><text x="36.0211%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="35.9300%" y="341" width="0.1590%" height="15" fill="rgb(236,28,36)" fg:x="226" fg:w="1"/><text x="36.1800%" y="351.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (1 samples, 0.16%)</title><rect x="36.0890%" y="389" width="0.1590%" height="15" fill="rgb(249,185,26)" fg:x="227" fg:w="1"/><text x="36.3390%" y="399.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (1 samples, 0.16%)</title><rect x="36.0890%" y="373" width="0.1590%" height="15" fill="rgb(249,174,33)" fg:x="227" fg:w="1"/><text x="36.3390%" y="383.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.16%)</title><rect x="36.0890%" y="357" width="0.1590%" height="15" fill="rgb(233,201,37)" fg:x="227" fg:w="1"/><text x="36.3390%" y="367.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.16%)</title><rect x="36.0890%" y="341" width="0.1590%" height="15" fill="rgb(221,78,26)" fg:x="227" fg:w="1"/><text x="36.3390%" y="351.50"></text></g><g><title>zstd_safe::DCtx::decompress_stream (1 samples, 0.16%)</title><rect x="36.0890%" y="325" width="0.1590%" height="15" fill="rgb(250,127,30)" fg:x="227" fg:w="1"/><text x="36.3390%" y="335.50"></text></g><g><title>ZSTD_decompressStream (1 samples, 0.16%)</title><rect x="36.0890%" y="309" width="0.1590%" height="15" fill="rgb(230,49,44)" fg:x="227" fg:w="1"/><text x="36.3390%" y="319.50"></text></g><g><title>ZSTD_decompressContinueStream (1 samples, 0.16%)</title><rect x="36.0890%" y="293" width="0.1590%" height="15" fill="rgb(229,67,23)" fg:x="227" fg:w="1"/><text x="36.3390%" y="303.50"></text></g><g><title>ZSTD_decompressContinue (1 samples, 0.16%)</title><rect x="36.0890%" y="277" width="0.1590%" height="15" fill="rgb(249,83,47)" fg:x="227" fg:w="1"/><text x="36.3390%" y="287.50"></text></g><g><title>ZSTD_decompressBlock_internal (1 samples, 0.16%)</title><rect x="36.0890%" y="261" width="0.1590%" height="15" fill="rgb(215,43,3)" fg:x="227" fg:w="1"/><text x="36.3390%" y="271.50"></text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (1 samples, 0.16%)</title><rect x="36.0890%" y="245" width="0.1590%" height="15" fill="rgb(238,154,13)" fg:x="227" fg:w="1"/><text x="36.3390%" y="255.50"></text></g><g><title>demoparser::parsing::cache::ReadCache::read_deltas_by_name (4 samples, 0.64%)</title><rect x="35.7711%" y="421" width="0.6359%" height="15" fill="rgb(219,56,2)" fg:x="225" fg:w="4"/><text x="36.0211%" y="431.50"></text></g><g><title>std::io::default_read_to_end (2 samples, 0.32%)</title><rect x="36.0890%" y="405" width="0.3180%" height="15" fill="rgb(233,0,4)" fg:x="227" fg:w="2"/><text x="36.3390%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.16%)</title><rect x="36.2480%" y="389" width="0.1590%" height="15" fill="rgb(235,30,7)" fg:x="228" fg:w="1"/><text x="36.4980%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="373" width="0.1590%" height="15" fill="rgb(250,79,13)" fg:x="228" fg:w="1"/><text x="36.4980%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="357" width="0.1590%" height="15" fill="rgb(211,146,34)" fg:x="228" fg:w="1"/><text x="36.4980%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="341" width="0.1590%" height="15" fill="rgb(228,22,38)" fg:x="228" fg:w="1"/><text x="36.4980%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="325" width="0.1590%" height="15" fill="rgb(235,168,5)" fg:x="228" fg:w="1"/><text x="36.4980%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="309" width="0.1590%" height="15" fill="rgb(221,155,16)" fg:x="228" fg:w="1"/><text x="36.4980%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="293" width="0.1590%" height="15" fill="rgb(215,215,53)" fg:x="228" fg:w="1"/><text x="36.4980%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="277" width="0.1590%" height="15" fill="rgb(223,4,10)" fg:x="228" fg:w="1"/><text x="36.4980%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="261" width="0.1590%" height="15" fill="rgb(234,103,6)" fg:x="228" fg:w="1"/><text x="36.4980%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="245" width="0.1590%" height="15" fill="rgb(227,97,0)" fg:x="228" fg:w="1"/><text x="36.4980%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="229" width="0.1590%" height="15" fill="rgb(234,150,53)" fg:x="228" fg:w="1"/><text x="36.4980%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="36.2480%" y="213" width="0.1590%" height="15" fill="rgb(228,201,54)" fg:x="228" fg:w="1"/><text x="36.4980%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="373" width="0.3180%" height="15" fill="rgb(222,22,37)" fg:x="236" fg:w="2"/><text x="37.7699%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="357" width="0.3180%" height="15" fill="rgb(237,53,32)" fg:x="236" fg:w="2"/><text x="37.7699%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="341" width="0.3180%" height="15" fill="rgb(233,25,53)" fg:x="236" fg:w="2"/><text x="37.7699%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="325" width="0.3180%" height="15" fill="rgb(210,40,34)" fg:x="236" fg:w="2"/><text x="37.7699%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="309" width="0.3180%" height="15" fill="rgb(241,220,44)" fg:x="236" fg:w="2"/><text x="37.7699%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="293" width="0.3180%" height="15" fill="rgb(235,28,35)" fg:x="236" fg:w="2"/><text x="37.7699%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="277" width="0.3180%" height="15" fill="rgb(210,56,17)" fg:x="236" fg:w="2"/><text x="37.7699%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="261" width="0.3180%" height="15" fill="rgb(224,130,29)" fg:x="236" fg:w="2"/><text x="37.7699%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="245" width="0.3180%" height="15" fill="rgb(235,212,8)" fg:x="236" fg:w="2"/><text x="37.7699%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="229" width="0.3180%" height="15" fill="rgb(223,33,50)" fg:x="236" fg:w="2"/><text x="37.7699%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.32%)</title><rect x="37.5199%" y="213" width="0.3180%" height="15" fill="rgb(219,149,13)" fg:x="236" fg:w="2"/><text x="37.7699%" y="223.50"></text></g><g><title>[libc.so.6] (17 samples, 2.70%)</title><rect x="59.6184%" y="341" width="2.7027%" height="15" fill="rgb(250,156,29)" fg:x="375" fg:w="17"/><text x="59.8684%" y="351.50">[l..</text></g><g><title>[unknown] (7 samples, 1.11%)</title><rect x="61.2083%" y="325" width="1.1129%" height="15" fill="rgb(216,193,19)" fg:x="385" fg:w="7"/><text x="61.4583%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="61.6852%" y="309" width="0.6359%" height="15" fill="rgb(216,135,14)" fg:x="388" fg:w="4"/><text x="61.9352%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="61.6852%" y="293" width="0.6359%" height="15" fill="rgb(241,47,5)" fg:x="388" fg:w="4"/><text x="61.9352%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="61.6852%" y="277" width="0.6359%" height="15" fill="rgb(233,42,35)" fg:x="388" fg:w="4"/><text x="61.9352%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="61.6852%" y="261" width="0.6359%" height="15" fill="rgb(231,13,6)" fg:x="388" fg:w="4"/><text x="61.9352%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="245" width="0.4769%" height="15" fill="rgb(207,181,40)" fg:x="389" fg:w="3"/><text x="62.0942%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="229" width="0.4769%" height="15" fill="rgb(254,173,49)" fg:x="389" fg:w="3"/><text x="62.0942%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="213" width="0.4769%" height="15" fill="rgb(221,1,38)" fg:x="389" fg:w="3"/><text x="62.0942%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="197" width="0.4769%" height="15" fill="rgb(206,124,46)" fg:x="389" fg:w="3"/><text x="62.0942%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="181" width="0.4769%" height="15" fill="rgb(249,21,11)" fg:x="389" fg:w="3"/><text x="62.0942%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="61.8442%" y="165" width="0.4769%" height="15" fill="rgb(222,201,40)" fg:x="389" fg:w="3"/><text x="62.0942%" y="175.50"></text></g><g><title>__rust_dealloc (1 samples, 0.16%)</title><rect x="62.3211%" y="341" width="0.1590%" height="15" fill="rgb(235,61,29)" fg:x="392" fg:w="1"/><text x="62.5711%" y="351.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.16%)</title><rect x="62.4801%" y="341" width="0.1590%" height="15" fill="rgb(219,207,3)" fg:x="393" fg:w="1"/><text x="62.7301%" y="351.50"></text></g><g><title>__rust_realloc (1 samples, 0.16%)</title><rect x="62.6391%" y="309" width="0.1590%" height="15" fill="rgb(222,56,46)" fg:x="394" fg:w="1"/><text x="62.8891%" y="319.50"></text></g><g><title>[libc.so.6] (26 samples, 4.13%)</title><rect x="62.7981%" y="293" width="4.1335%" height="15" fill="rgb(239,76,54)" fg:x="395" fg:w="26"/><text x="63.0481%" y="303.50">[libc..</text></g><g><title>[unknown] (17 samples, 2.70%)</title><rect x="64.2289%" y="277" width="2.7027%" height="15" fill="rgb(231,124,27)" fg:x="404" fg:w="17"/><text x="64.4789%" y="287.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="64.5469%" y="261" width="2.3847%" height="15" fill="rgb(249,195,6)" fg:x="406" fg:w="15"/><text x="64.7969%" y="271.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="64.5469%" y="245" width="2.3847%" height="15" fill="rgb(237,174,47)" fg:x="406" fg:w="15"/><text x="64.7969%" y="255.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="64.5469%" y="229" width="2.3847%" height="15" fill="rgb(206,201,31)" fg:x="406" fg:w="15"/><text x="64.7969%" y="239.50">[u..</text></g><g><title>[unknown] (14 samples, 2.23%)</title><rect x="64.7059%" y="213" width="2.2258%" height="15" fill="rgb(231,57,52)" fg:x="407" fg:w="14"/><text x="64.9559%" y="223.50">[..</text></g><g><title>[unknown] (11 samples, 1.75%)</title><rect x="65.1828%" y="197" width="1.7488%" height="15" fill="rgb(248,177,22)" fg:x="410" fg:w="11"/><text x="65.4328%" y="207.50"></text></g><g><title>[unknown] (11 samples, 1.75%)</title><rect x="65.1828%" y="181" width="1.7488%" height="15" fill="rgb(215,211,37)" fg:x="410" fg:w="11"/><text x="65.4328%" y="191.50"></text></g><g><title>[unknown] (10 samples, 1.59%)</title><rect x="65.3418%" y="165" width="1.5898%" height="15" fill="rgb(241,128,51)" fg:x="411" fg:w="10"/><text x="65.5918%" y="175.50"></text></g><g><title>[unknown] (10 samples, 1.59%)</title><rect x="65.3418%" y="149" width="1.5898%" height="15" fill="rgb(227,165,31)" fg:x="411" fg:w="10"/><text x="65.5918%" y="159.50"></text></g><g><title>[unknown] (9 samples, 1.43%)</title><rect x="65.5008%" y="133" width="1.4308%" height="15" fill="rgb(228,167,24)" fg:x="412" fg:w="9"/><text x="65.7508%" y="143.50"></text></g><g><title>[unknown] (8 samples, 1.27%)</title><rect x="65.6598%" y="117" width="1.2719%" height="15" fill="rgb(228,143,12)" fg:x="413" fg:w="8"/><text x="65.9098%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="66.4547%" y="101" width="0.4769%" height="15" fill="rgb(249,149,8)" fg:x="418" fg:w="3"/><text x="66.7047%" y="111.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.16%)</title><rect x="67.2496%" y="277" width="0.1590%" height="15" fill="rgb(243,35,44)" fg:x="423" fg:w="1"/><text x="67.4996%" y="287.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.32%)</title><rect x="67.4086%" y="277" width="0.3180%" height="15" fill="rgb(246,89,9)" fg:x="424" fg:w="2"/><text x="67.6586%" y="287.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (32 samples, 5.09%)</title><rect x="68.0445%" y="261" width="5.0874%" height="15" fill="rgb(233,213,13)" fg:x="428" fg:w="32"/><text x="68.2945%" y="271.50">mi_pag..</text></g><g><title>[unknown] (28 samples, 4.45%)</title><rect x="68.6804%" y="245" width="4.4515%" height="15" fill="rgb(233,141,41)" fg:x="432" fg:w="28"/><text x="68.9304%" y="255.50">[unkn..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="70.2703%" y="229" width="2.8617%" height="15" fill="rgb(239,167,4)" fg:x="442" fg:w="18"/><text x="70.5203%" y="239.50">[u..</text></g><g><title>[unknown] (18 samples, 2.86%)</title><rect x="70.2703%" y="213" width="2.8617%" height="15" fill="rgb(209,217,16)" fg:x="442" fg:w="18"/><text x="70.5203%" y="223.50">[u..</text></g><g><title>[unknown] (16 samples, 2.54%)</title><rect x="70.5882%" y="197" width="2.5437%" height="15" fill="rgb(219,88,35)" fg:x="444" fg:w="16"/><text x="70.8382%" y="207.50">[u..</text></g><g><title>[unknown] (16 samples, 2.54%)</title><rect x="70.5882%" y="181" width="2.5437%" height="15" fill="rgb(220,193,23)" fg:x="444" fg:w="16"/><text x="70.8382%" y="191.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="70.7472%" y="165" width="2.3847%" height="15" fill="rgb(230,90,52)" fg:x="445" fg:w="15"/><text x="70.9972%" y="175.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="70.7472%" y="149" width="2.3847%" height="15" fill="rgb(252,106,19)" fg:x="445" fg:w="15"/><text x="70.9972%" y="159.50">[u..</text></g><g><title>[unknown] (15 samples, 2.38%)</title><rect x="70.7472%" y="133" width="2.3847%" height="15" fill="rgb(206,74,20)" fg:x="445" fg:w="15"/><text x="70.9972%" y="143.50">[u..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="71.2242%" y="117" width="1.9078%" height="15" fill="rgb(230,138,44)" fg:x="448" fg:w="12"/><text x="71.4742%" y="127.50">[..</text></g><g><title>[unknown] (12 samples, 1.91%)</title><rect x="71.2242%" y="101" width="1.9078%" height="15" fill="rgb(235,182,43)" fg:x="448" fg:w="12"/><text x="71.4742%" y="111.50">[..</text></g><g><title>[unknown] (11 samples, 1.75%)</title><rect x="71.3831%" y="85" width="1.7488%" height="15" fill="rgb(242,16,51)" fg:x="449" fg:w="11"/><text x="71.6331%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="72.6550%" y="69" width="0.4769%" height="15" fill="rgb(248,9,4)" fg:x="457" fg:w="3"/><text x="72.9050%" y="79.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (5 samples, 0.79%)</title><rect x="73.1320%" y="245" width="0.7949%" height="15" fill="rgb(210,31,22)" fg:x="460" fg:w="5"/><text x="73.3820%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.64%)</title><rect x="73.2909%" y="229" width="0.6359%" height="15" fill="rgb(239,54,39)" fg:x="461" fg:w="4"/><text x="73.5409%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="213" width="0.4769%" height="15" fill="rgb(230,99,41)" fg:x="462" fg:w="3"/><text x="73.6999%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="197" width="0.4769%" height="15" fill="rgb(253,106,12)" fg:x="462" fg:w="3"/><text x="73.6999%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="181" width="0.4769%" height="15" fill="rgb(213,46,41)" fg:x="462" fg:w="3"/><text x="73.6999%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="165" width="0.4769%" height="15" fill="rgb(215,133,35)" fg:x="462" fg:w="3"/><text x="73.6999%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="149" width="0.4769%" height="15" fill="rgb(213,28,5)" fg:x="462" fg:w="3"/><text x="73.6999%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="133" width="0.4769%" height="15" fill="rgb(215,77,49)" fg:x="462" fg:w="3"/><text x="73.6999%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="117" width="0.4769%" height="15" fill="rgb(248,100,22)" fg:x="462" fg:w="3"/><text x="73.6999%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="101" width="0.4769%" height="15" fill="rgb(208,67,9)" fg:x="462" fg:w="3"/><text x="73.6999%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="85" width="0.4769%" height="15" fill="rgb(219,133,21)" fg:x="462" fg:w="3"/><text x="73.6999%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.48%)</title><rect x="73.4499%" y="69" width="0.4769%" height="15" fill="rgb(246,46,29)" fg:x="462" fg:w="3"/><text x="73.6999%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="73.7679%" y="53" width="0.1590%" height="15" fill="rgb(246,185,52)" fg:x="464" fg:w="1"/><text x="74.0179%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="73.7679%" y="37" width="0.1590%" height="15" fill="rgb(252,136,11)" fg:x="464" fg:w="1"/><text x="74.0179%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (73 samples, 11.61%)</title><rect x="62.6391%" y="341" width="11.6057%" height="15" fill="rgb(219,138,53)" fg:x="394" fg:w="73"/><text x="62.8891%" y="351.50">alloc::raw_vec::R..</text></g><g><title>alloc::raw_vec::finish_grow (73 samples, 11.61%)</title><rect x="62.6391%" y="325" width="11.6057%" height="15" fill="rgb(211,51,23)" fg:x="394" fg:w="73"/><text x="62.8891%" y="335.50">alloc::raw_vec::f..</text></g><g><title>_mi_heap_realloc_zero (72 samples, 11.45%)</title><rect x="62.7981%" y="309" width="11.4467%" height="15" fill="rgb(247,221,28)" fg:x="395" fg:w="72"/><text x="63.0481%" y="319.50">_mi_heap_realloc_..</text></g><g><title>_mi_malloc_generic (46 samples, 7.31%)</title><rect x="66.9316%" y="293" width="7.3132%" height="15" fill="rgb(251,222,45)" fg:x="421" fg:w="46"/><text x="67.1816%" y="303.50">_mi_malloc..</text></g><g><title>mi_page_queue_find_free_ex (41 samples, 6.52%)</title><rect x="67.7266%" y="277" width="6.5183%" height="15" fill="rgb(217,162,53)" fg:x="426" fg:w="41"/><text x="67.9766%" y="287.50">mi_page_q..</text></g><g><title>mi_page_fresh_alloc (7 samples, 1.11%)</title><rect x="73.1320%" y="261" width="1.1129%" height="15" fill="rgb(229,93,14)" fg:x="460" fg:w="7"/><text x="73.3820%" y="271.50"></text></g><g><title>mi_segments_page_alloc.constprop.1 (2 samples, 0.32%)</title><rect x="73.9269%" y="245" width="0.3180%" height="15" fill="rgb(209,67,49)" fg:x="465" fg:w="2"/><text x="74.1769%" y="255.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.16%)</title><rect x="74.0859%" y="229" width="0.1590%" height="15" fill="rgb(213,87,29)" fg:x="466" fg:w="1"/><text x="74.3359%" y="239.50"></text></g><g><title>mi_segment_span_allocate.isra.0 (1 samples, 0.16%)</title><rect x="74.0859%" y="213" width="0.1590%" height="15" fill="rgb(205,151,52)" fg:x="466" fg:w="1"/><text x="74.3359%" y="223.50"></text></g><g><title>mi_segment_commitx (1 samples, 0.16%)</title><rect x="74.0859%" y="197" width="0.1590%" height="15" fill="rgb(253,215,39)" fg:x="466" fg:w="1"/><text x="74.3359%" y="207.50"></text></g><g><title>__rg_realloc (1 samples, 0.16%)</title><rect x="75.0397%" y="309" width="0.1590%" height="15" fill="rgb(221,220,41)" fg:x="472" fg:w="1"/><text x="75.2897%" y="319.50"></text></g><g><title>[libc.so.6] (5 samples, 0.79%)</title><rect x="75.3577%" y="293" width="0.7949%" height="15" fill="rgb(218,133,21)" fg:x="474" fg:w="5"/><text x="75.6077%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="75.9936%" y="277" width="0.1590%" height="15" fill="rgb(221,193,43)" fg:x="478" fg:w="1"/><text x="76.2436%" y="287.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.16%)</title><rect x="76.1526%" y="293" width="0.1590%" height="15" fill="rgb(240,128,52)" fg:x="479" fg:w="1"/><text x="76.4026%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 2.54%)</title><rect x="74.2448%" y="341" width="2.5437%" height="15" fill="rgb(253,114,12)" fg:x="467" fg:w="16"/><text x="74.4948%" y="351.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 2.23%)</title><rect x="74.5628%" y="325" width="2.2258%" height="15" fill="rgb(215,223,47)" fg:x="469" fg:w="14"/><text x="74.8128%" y="335.50">a..</text></g><g><title>_mi_heap_realloc_zero (10 samples, 1.59%)</title><rect x="75.1987%" y="309" width="1.5898%" height="15" fill="rgb(248,225,23)" fg:x="473" fg:w="10"/><text x="75.4487%" y="319.50"></text></g><g><title>mi_free (3 samples, 0.48%)</title><rect x="76.3116%" y="293" width="0.4769%" height="15" fill="rgb(250,108,0)" fg:x="480" fg:w="3"/><text x="76.5616%" y="303.50"></text></g><g><title>mi_free (1 samples, 0.16%)</title><rect x="76.7886%" y="341" width="0.1590%" height="15" fill="rgb(228,208,7)" fg:x="483" fg:w="1"/><text x="77.0386%" y="351.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (246 samples, 39.11%)</title><rect x="37.9968%" y="357" width="39.1097%" height="15" fill="rgb(244,45,10)" fg:x="239" fg:w="246"/><text x="38.2468%" y="367.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser..</text></g><g><title>mi_malloc (1 samples, 0.16%)</title><rect x="76.9475%" y="341" width="0.1590%" height="15" fill="rgb(207,125,25)" fg:x="484" fg:w="1"/><text x="77.1975%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32 (1 samples, 0.16%)</title><rect x="77.4245%" y="309" width="0.1590%" height="15" fill="rgb(210,195,18)" fg:x="487" fg:w="1"/><text x="77.6745%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.64%)</title><rect x="77.5835%" y="293" width="0.6359%" height="15" fill="rgb(249,80,12)" fg:x="488" fg:w="4"/><text x="77.8335%" y="303.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (7 samples, 1.11%)</title><rect x="77.2655%" y="325" width="1.1129%" height="15" fill="rgb(221,65,9)" fg:x="486" fg:w="7"/><text x="77.5155%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (5 samples, 0.79%)</title><rect x="77.5835%" y="309" width="0.7949%" height="15" fill="rgb(235,49,36)" fg:x="488" fg:w="5"/><text x="77.8335%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="78.2194%" y="293" width="0.1590%" height="15" fill="rgb(225,32,20)" fg:x="492" fg:w="1"/><text x="78.4694%" y="303.50"></text></g><g><title>mi_malloc (1 samples, 0.16%)</title><rect x="78.2194%" y="277" width="0.1590%" height="15" fill="rgb(215,141,46)" fg:x="492" fg:w="1"/><text x="78.4694%" y="287.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (9 samples, 1.43%)</title><rect x="77.1065%" y="341" width="1.4308%" height="15" fill="rgb(250,160,47)" fg:x="485" fg:w="9"/><text x="77.3565%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.16%)</title><rect x="78.3784%" y="325" width="0.1590%" height="15" fill="rgb(216,222,40)" fg:x="493" fg:w="1"/><text x="78.6284%" y="335.50"></text></g><g><title>demoparser::parsing::entities::parse_packet_entities (257 samples, 40.86%)</title><rect x="37.8378%" y="373" width="40.8585%" height="15" fill="rgb(234,217,39)" fg:x="238" fg:w="257"/><text x="38.0878%" y="383.50">demoparser::parsing::entities::parse_packet_entities</text></g><g><title>protobuf::message::Message::parse_from_bytes (10 samples, 1.59%)</title><rect x="77.1065%" y="357" width="1.5898%" height="15" fill="rgb(207,178,40)" fg:x="485" fg:w="10"/><text x="77.3565%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::from_bytes (1 samples, 0.16%)</title><rect x="78.5374%" y="341" width="0.1590%" height="15" fill="rgb(221,136,13)" fg:x="494" fg:w="1"/><text x="78.7874%" y="351.50"></text></g><g><title>csgoproto::netmessages::CNETMsg_SignonState::signon_state (1 samples, 0.16%)</title><rect x="78.6963%" y="357" width="0.1590%" height="15" fill="rgb(249,199,10)" fg:x="495" fg:w="1"/><text x="78.9463%" y="367.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.32%)</title><rect x="79.1733%" y="293" width="0.3180%" height="15" fill="rgb(249,222,13)" fg:x="498" fg:w="2"/><text x="79.4233%" y="303.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.16%)</title><rect x="79.3323%" y="277" width="0.1590%" height="15" fill="rgb(244,185,38)" fg:x="499" fg:w="1"/><text x="79.5823%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.48%)</title><rect x="79.1733%" y="325" width="0.4769%" height="15" fill="rgb(236,202,9)" fg:x="498" fg:w="3"/><text x="79.4233%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.48%)</title><rect x="79.1733%" y="309" width="0.4769%" height="15" fill="rgb(250,229,37)" fg:x="498" fg:w="3"/><text x="79.4233%" y="319.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.16%)</title><rect x="79.4913%" y="293" width="0.1590%" height="15" fill="rgb(206,174,23)" fg:x="500" fg:w="1"/><text x="79.7413%" y="303.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (2 samples, 0.32%)</title><rect x="79.8092%" y="309" width="0.3180%" height="15" fill="rgb(211,33,43)" fg:x="502" fg:w="2"/><text x="80.0592%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (2 samples, 0.32%)</title><rect x="79.8092%" y="293" width="0.3180%" height="15" fill="rgb(245,58,50)" fg:x="502" fg:w="2"/><text x="80.0592%" y="303.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.16%)</title><rect x="79.9682%" y="277" width="0.1590%" height="15" fill="rgb(244,68,36)" fg:x="503" fg:w="1"/><text x="80.2182%" y="287.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::pop_limit (1 samples, 0.16%)</title><rect x="80.1272%" y="309" width="0.1590%" height="15" fill="rgb(232,229,15)" fg:x="504" fg:w="1"/><text x="80.3772%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (5 samples, 0.79%)</title><rect x="79.6502%" y="325" width="0.7949%" height="15" fill="rgb(254,30,23)" fg:x="501" fg:w="5"/><text x="79.9002%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.16%)</title><rect x="80.2862%" y="309" width="0.1590%" height="15" fill="rgb(235,160,14)" fg:x="505" fg:w="1"/><text x="80.5362%" y="319.50"></text></g><g><title>&lt;u64 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.16%)</title><rect x="80.2862%" y="293" width="0.1590%" height="15" fill="rgb(212,155,44)" fg:x="505" fg:w="1"/><text x="80.5362%" y="303.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (11 samples, 1.75%)</title><rect x="78.8553%" y="341" width="1.7488%" height="15" fill="rgb(226,2,50)" fg:x="496" fg:w="11"/><text x="79.1053%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.16%)</title><rect x="80.4452%" y="325" width="0.1590%" height="15" fill="rgb(234,177,6)" fg:x="506" fg:w="1"/><text x="80.6952%" y="335.50"></text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_events (13 samples, 2.07%)</title><rect x="78.6963%" y="373" width="2.0668%" height="15" fill="rgb(217,24,9)" fg:x="495" fg:w="13"/><text x="78.9463%" y="383.50">d..</text></g><g><title>protobuf::message::Message::parse_from_bytes (12 samples, 1.91%)</title><rect x="78.8553%" y="357" width="1.9078%" height="15" fill="rgb(220,13,46)" fg:x="496" fg:w="12"/><text x="79.1053%" y="367.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::from_bytes (1 samples, 0.16%)</title><rect x="80.6041%" y="341" width="0.1590%" height="15" fill="rgb(239,221,27)" fg:x="507" fg:w="1"/><text x="80.8541%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="80.7631%" y="357" width="0.1590%" height="15" fill="rgb(222,198,25)" fg:x="508" fg:w="1"/><text x="81.0131%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="80.7631%" y="341" width="0.1590%" height="15" fill="rgb(211,99,13)" fg:x="508" fg:w="1"/><text x="81.0131%" y="351.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.16%)</title><rect x="80.7631%" y="325" width="0.1590%" height="15" fill="rgb(232,111,31)" fg:x="508" fg:w="1"/><text x="81.0131%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.16%)</title><rect x="80.7631%" y="309" width="0.1590%" height="15" fill="rgb(245,82,37)" fg:x="508" fg:w="1"/><text x="81.0131%" y="319.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (2 samples, 0.32%)</title><rect x="80.7631%" y="373" width="0.3180%" height="15" fill="rgb(227,149,46)" fg:x="508" fg:w="2"/><text x="81.0131%" y="383.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::update_string_table (1 samples, 0.16%)</title><rect x="80.9221%" y="357" width="0.1590%" height="15" fill="rgb(218,36,50)" fg:x="509" fg:w="1"/><text x="81.1721%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.16%)</title><rect x="80.9221%" y="341" width="0.1590%" height="15" fill="rgb(226,80,48)" fg:x="509" fg:w="1"/><text x="81.1721%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="80.9221%" y="325" width="0.1590%" height="15" fill="rgb(238,224,15)" fg:x="509" fg:w="1"/><text x="81.1721%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.16%)</title><rect x="80.9221%" y="309" width="0.1590%" height="15" fill="rgb(241,136,10)" fg:x="509" fg:w="1"/><text x="81.1721%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_PacketEntities&gt; (1 samples, 0.16%)</title><rect x="81.0811%" y="357" width="0.1590%" height="15" fill="rgb(208,32,45)" fg:x="510" fg:w="1"/><text x="81.3311%" y="367.50"></text></g><g><title>mi_free (1 samples, 0.16%)</title><rect x="81.0811%" y="341" width="0.1590%" height="15" fill="rgb(207,135,9)" fg:x="510" fg:w="1"/><text x="81.3311%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.16%)</title><rect x="81.5580%" y="293" width="0.1590%" height="15" fill="rgb(206,86,44)" fg:x="513" fg:w="1"/><text x="81.8080%" y="303.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (7 samples, 1.11%)</title><rect x="81.5580%" y="325" width="1.1129%" height="15" fill="rgb(245,177,15)" fg:x="513" fg:w="7"/><text x="81.8080%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (7 samples, 1.11%)</title><rect x="81.5580%" y="309" width="1.1129%" height="15" fill="rgb(206,64,50)" fg:x="513" fg:w="7"/><text x="81.8080%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.95%)</title><rect x="81.7170%" y="293" width="0.9539%" height="15" fill="rgb(234,36,40)" fg:x="514" fg:w="6"/><text x="81.9670%" y="303.50"></text></g><g><title>mi_malloc (6 samples, 0.95%)</title><rect x="81.7170%" y="277" width="0.9539%" height="15" fill="rgb(213,64,8)" fg:x="514" fg:w="6"/><text x="81.9670%" y="287.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_UpdateStringTable as protobuf::message::Message&gt;::merge_from (12 samples, 1.91%)</title><rect x="81.2401%" y="341" width="1.9078%" height="15" fill="rgb(210,75,36)" fg:x="511" fg:w="12"/><text x="81.4901%" y="351.50">&lt;..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (3 samples, 0.48%)</title><rect x="82.6709%" y="325" width="0.4769%" height="15" fill="rgb(229,88,21)" fg:x="520" fg:w="3"/><text x="82.9209%" y="335.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints (295 samples, 46.90%)</title><rect x="36.4070%" y="421" width="46.8998%" height="15" fill="rgb(252,204,47)" fg:x="229" fg:w="295"/><text x="36.6570%" y="431.50">demoparser::parsing::parser::Parser::parse_blueprints</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (295 samples, 46.90%)</title><rect x="36.4070%" y="405" width="46.8998%" height="15" fill="rgb(208,77,27)" fg:x="229" fg:w="295"/><text x="36.6570%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (295 samples, 46.90%)</title><rect x="36.4070%" y="389" width="46.8998%" height="15" fill="rgb(221,76,26)" fg:x="229" fg:w="295"/><text x="36.6570%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterato..</text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::update_string_table_msg (14 samples, 2.23%)</title><rect x="81.0811%" y="373" width="2.2258%" height="15" fill="rgb(225,139,18)" fg:x="510" fg:w="14"/><text x="81.3311%" y="383.50">d..</text></g><g><title>protobuf::message::Message::parse_from_bytes (13 samples, 2.07%)</title><rect x="81.2401%" y="357" width="2.0668%" height="15" fill="rgb(230,137,11)" fg:x="511" fg:w="13"/><text x="81.4901%" y="367.50">p..</text></g><g><title>&lt;protobuf::coded_input_stream::buf_read_iter::BufReadIter as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="83.1479%" y="341" width="0.1590%" height="15" fill="rgb(212,28,1)" fg:x="523" fg:w="1"/><text x="83.3979%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="405" width="0.1590%" height="15" fill="rgb(248,164,17)" fg:x="532" fg:w="1"/><text x="84.8287%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="389" width="0.1590%" height="15" fill="rgb(222,171,42)" fg:x="532" fg:w="1"/><text x="84.8287%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="373" width="0.1590%" height="15" fill="rgb(243,84,45)" fg:x="532" fg:w="1"/><text x="84.8287%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="357" width="0.1590%" height="15" fill="rgb(252,49,23)" fg:x="532" fg:w="1"/><text x="84.8287%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="341" width="0.1590%" height="15" fill="rgb(215,19,7)" fg:x="532" fg:w="1"/><text x="84.8287%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="325" width="0.1590%" height="15" fill="rgb(238,81,41)" fg:x="532" fg:w="1"/><text x="84.8287%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="309" width="0.1590%" height="15" fill="rgb(210,199,37)" fg:x="532" fg:w="1"/><text x="84.8287%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="293" width="0.1590%" height="15" fill="rgb(244,192,49)" fg:x="532" fg:w="1"/><text x="84.8287%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="277" width="0.1590%" height="15" fill="rgb(226,211,11)" fg:x="532" fg:w="1"/><text x="84.8287%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="84.5787%" y="261" width="0.1590%" height="15" fill="rgb(236,162,54)" fg:x="532" fg:w="1"/><text x="84.8287%" y="271.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (11 samples, 1.75%)</title><rect x="83.3068%" y="421" width="1.7488%" height="15" fill="rgb(220,229,9)" fg:x="524" fg:w="11"/><text x="83.5568%" y="431.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.32%)</title><rect x="84.7377%" y="405" width="0.3180%" height="15" fill="rgb(250,87,22)" fg:x="533" fg:w="2"/><text x="84.9877%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (76 samples, 12.08%)</title><rect x="85.0556%" y="421" width="12.0827%" height="15" fill="rgb(239,43,17)" fg:x="535" fg:w="76"/><text x="85.3056%" y="431.50">hashbrown::map::Ha..</text></g><g><title>demoparser::parsing::players::Players::eid_to_sid (8 samples, 1.27%)</title><rect x="97.1383%" y="389" width="1.2719%" height="15" fill="rgb(231,177,25)" fg:x="611" fg:w="8"/><text x="97.3883%" y="399.50"></text></g><g><title>std::panic::catch_unwind (517 samples, 82.19%)</title><rect x="16.8521%" y="597" width="82.1940%" height="15" fill="rgb(219,179,1)" fg:x="106" fg:w="517"/><text x="17.1021%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (517 samples, 82.19%)</title><rect x="16.8521%" y="581" width="82.1940%" height="15" fill="rgb(238,219,53)" fg:x="106" fg:w="517"/><text x="17.1021%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (517 samples, 82.19%)</title><rect x="16.8521%" y="565" width="82.1940%" height="15" fill="rgb(232,167,36)" fg:x="106" fg:w="517"/><text x="17.1021%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (517 samples, 82.19%)</title><rect x="16.8521%" y="549" width="82.1940%" height="15" fill="rgb(244,19,51)" fg:x="106" fg:w="517"/><text x="17.1021%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (517 samples, 82.19%)</title><rect x="16.8521%" y="533" width="82.1940%" height="15" fill="rgb(224,6,22)" fg:x="106" fg:w="517"/><text x="17.1021%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (517 samples, 82.19%)</title><rect x="16.8521%" y="517" width="82.1940%" height="15" fill="rgb(224,145,5)" fg:x="106" fg:w="517"/><text x="17.1021%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>demoparser::main (517 samples, 82.19%)</title><rect x="16.8521%" y="501" width="82.1940%" height="15" fill="rgb(234,130,49)" fg:x="106" fg:w="517"/><text x="17.1021%" y="511.50">demoparser::main</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (517 samples, 82.19%)</title><rect x="16.8521%" y="485" width="82.1940%" height="15" fill="rgb(254,6,2)" fg:x="106" fg:w="517"/><text x="17.1021%" y="495.50">alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (517 samples, 82.19%)</title><rect x="16.8521%" y="469" width="82.1940%" height="15" fill="rgb(208,96,46)" fg:x="106" fg:w="517"/><text x="17.1021%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>demoparser::parse_demo (517 samples, 82.19%)</title><rect x="16.8521%" y="453" width="82.1940%" height="15" fill="rgb(239,3,39)" fg:x="106" fg:w="517"/><text x="17.1021%" y="463.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (516 samples, 82.03%)</title><rect x="17.0111%" y="437" width="82.0350%" height="15" fill="rgb(233,210,1)" fg:x="107" fg:w="516"/><text x="17.2611%" y="447.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>itertools::group_map::into_group_map_by (12 samples, 1.91%)</title><rect x="97.1383%" y="421" width="1.9078%" height="15" fill="rgb(244,137,37)" fg:x="611" fg:w="12"/><text x="97.3883%" y="431.50">i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 1.91%)</title><rect x="97.1383%" y="405" width="1.9078%" height="15" fill="rgb(240,136,2)" fg:x="611" fg:w="12"/><text x="97.3883%" y="415.50">&lt;..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.64%)</title><rect x="98.4102%" y="389" width="0.6359%" height="15" fill="rgb(239,18,37)" fg:x="619" fg:w="4"/><text x="98.6602%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.16%)</title><rect x="98.8871%" y="373" width="0.1590%" height="15" fill="rgb(218,185,22)" fg:x="622" fg:w="1"/><text x="99.1371%" y="383.50"></text></g><g><title>demoparser (624 samples, 99.21%)</title><rect x="0.0000%" y="757" width="99.2051%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="624"/><text x="0.2500%" y="767.50">demoparser</text></g><g><title>_start (531 samples, 84.42%)</title><rect x="14.7854%" y="741" width="84.4197%" height="15" fill="rgb(230,182,32)" fg:x="93" fg:w="531"/><text x="15.0354%" y="751.50">_start</text></g><g><title>__libc_start_main_impl (531 samples, 84.42%)</title><rect x="14.7854%" y="725" width="84.4197%" height="15" fill="rgb(242,56,43)" fg:x="93" fg:w="531"/><text x="15.0354%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (531 samples, 84.42%)</title><rect x="14.7854%" y="709" width="84.4197%" height="15" fill="rgb(233,99,24)" fg:x="93" fg:w="531"/><text x="15.0354%" y="719.50">__libc_start_call_main</text></g><g><title>main (518 samples, 82.35%)</title><rect x="16.8521%" y="693" width="82.3529%" height="15" fill="rgb(234,209,42)" fg:x="106" fg:w="518"/><text x="17.1021%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (518 samples, 82.35%)</title><rect x="16.8521%" y="677" width="82.3529%" height="15" fill="rgb(227,7,12)" fg:x="106" fg:w="518"/><text x="17.1021%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (518 samples, 82.35%)</title><rect x="16.8521%" y="661" width="82.3529%" height="15" fill="rgb(245,203,43)" fg:x="106" fg:w="518"/><text x="17.1021%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (518 samples, 82.35%)</title><rect x="16.8521%" y="645" width="82.3529%" height="15" fill="rgb(238,205,33)" fg:x="106" fg:w="518"/><text x="17.1021%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (518 samples, 82.35%)</title><rect x="16.8521%" y="629" width="82.3529%" height="15" fill="rgb(231,56,7)" fg:x="106" fg:w="518"/><text x="17.1021%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (518 samples, 82.35%)</title><rect x="16.8521%" y="613" width="82.3529%" height="15" fill="rgb(244,186,29)" fg:x="106" fg:w="518"/><text x="17.1021%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.16%)</title><rect x="99.0461%" y="597" width="0.1590%" height="15" fill="rgb(234,111,31)" fg:x="623" fg:w="1"/><text x="99.2961%" y="607.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.16%)</title><rect x="99.0461%" y="581" width="0.1590%" height="15" fill="rgb(241,149,10)" fg:x="623" fg:w="1"/><text x="99.2961%" y="591.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.16%)</title><rect x="99.0461%" y="565" width="0.1590%" height="15" fill="rgb(249,206,44)" fg:x="623" fg:w="1"/><text x="99.2961%" y="575.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.16%)</title><rect x="99.0461%" y="549" width="0.1590%" height="15" fill="rgb(251,153,30)" fg:x="623" fg:w="1"/><text x="99.2961%" y="559.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.16%)</title><rect x="99.0461%" y="533" width="0.1590%" height="15" fill="rgb(239,152,38)" fg:x="623" fg:w="1"/><text x="99.2961%" y="543.50"></text></g><g><title>__GI___getdelim (1 samples, 0.16%)</title><rect x="99.0461%" y="517" width="0.1590%" height="15" fill="rgb(249,139,47)" fg:x="623" fg:w="1"/><text x="99.2961%" y="527.50"></text></g><g><title>_IO_new_file_underflow (1 samples, 0.16%)</title><rect x="99.0461%" y="501" width="0.1590%" height="15" fill="rgb(244,64,35)" fg:x="623" fg:w="1"/><text x="99.2961%" y="511.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.16%)</title><rect x="99.0461%" y="485" width="0.1590%" height="15" fill="rgb(216,46,15)" fg:x="623" fg:w="1"/><text x="99.2961%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="469" width="0.1590%" height="15" fill="rgb(250,74,19)" fg:x="623" fg:w="1"/><text x="99.2961%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="453" width="0.1590%" height="15" fill="rgb(249,42,33)" fg:x="623" fg:w="1"/><text x="99.2961%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="437" width="0.1590%" height="15" fill="rgb(242,149,17)" fg:x="623" fg:w="1"/><text x="99.2961%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="421" width="0.1590%" height="15" fill="rgb(244,29,21)" fg:x="623" fg:w="1"/><text x="99.2961%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="405" width="0.1590%" height="15" fill="rgb(220,130,37)" fg:x="623" fg:w="1"/><text x="99.2961%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="389" width="0.1590%" height="15" fill="rgb(211,67,2)" fg:x="623" fg:w="1"/><text x="99.2961%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="373" width="0.1590%" height="15" fill="rgb(235,68,52)" fg:x="623" fg:w="1"/><text x="99.2961%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="357" width="0.1590%" height="15" fill="rgb(246,142,3)" fg:x="623" fg:w="1"/><text x="99.2961%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="341" width="0.1590%" height="15" fill="rgb(241,25,7)" fg:x="623" fg:w="1"/><text x="99.2961%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="325" width="0.1590%" height="15" fill="rgb(242,119,39)" fg:x="623" fg:w="1"/><text x="99.2961%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.16%)</title><rect x="99.0461%" y="309" width="0.1590%" height="15" fill="rgb(241,98,45)" fg:x="623" fg:w="1"/><text x="99.2961%" y="319.50"></text></g><g><title>all (629 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="629"/><text x="0.2500%" y="783.50"></text></g><g><title>perf-exec (5 samples, 0.79%)</title><rect x="99.2051%" y="757" width="0.7949%" height="15" fill="rgb(241,142,54)" fg:x="624" fg:w="5"/><text x="99.4551%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="741" width="0.7949%" height="15" fill="rgb(222,85,15)" fg:x="624" fg:w="5"/><text x="99.4551%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="725" width="0.7949%" height="15" fill="rgb(210,85,47)" fg:x="624" fg:w="5"/><text x="99.4551%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="709" width="0.7949%" height="15" fill="rgb(224,206,25)" fg:x="624" fg:w="5"/><text x="99.4551%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="693" width="0.7949%" height="15" fill="rgb(243,201,19)" fg:x="624" fg:w="5"/><text x="99.4551%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="677" width="0.7949%" height="15" fill="rgb(236,59,4)" fg:x="624" fg:w="5"/><text x="99.4551%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="661" width="0.7949%" height="15" fill="rgb(254,179,45)" fg:x="624" fg:w="5"/><text x="99.4551%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="645" width="0.7949%" height="15" fill="rgb(226,14,10)" fg:x="624" fg:w="5"/><text x="99.4551%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="629" width="0.7949%" height="15" fill="rgb(244,27,41)" fg:x="624" fg:w="5"/><text x="99.4551%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="613" width="0.7949%" height="15" fill="rgb(235,35,32)" fg:x="624" fg:w="5"/><text x="99.4551%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.79%)</title><rect x="99.2051%" y="597" width="0.7949%" height="15" fill="rgb(218,68,31)" fg:x="624" fg:w="5"/><text x="99.4551%" y="607.50"></text></g></svg></svg>