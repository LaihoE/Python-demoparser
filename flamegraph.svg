<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1061.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="131"><g><title>[unknown] (9 samples, 6.87%)</title><rect x="0.0000%" y="997" width="6.8702%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1007.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.87%)</title><rect x="0.0000%" y="981" width="6.8702%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="991.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.87%)</title><rect x="0.0000%" y="965" width="6.8702%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="975.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.87%)</title><rect x="0.0000%" y="949" width="6.8702%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="9"/><text x="0.2500%" y="959.50">[unknown]</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="933" width="3.0534%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="4"/><text x="4.0668%" y="943.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="917" width="3.0534%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="4"/><text x="4.0668%" y="927.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="901" width="3.0534%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="4"/><text x="4.0668%" y="911.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="885" width="3.0534%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="4"/><text x="4.0668%" y="895.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="869" width="3.0534%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="4"/><text x="4.0668%" y="879.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="853" width="3.0534%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="4"/><text x="4.0668%" y="863.50">[un..</text></g><g><title>[unknown] (4 samples, 3.05%)</title><rect x="3.8168%" y="837" width="3.0534%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="4"/><text x="4.0668%" y="847.50">[un..</text></g><g><title>[unknown] (3 samples, 2.29%)</title><rect x="4.5802%" y="821" width="2.2901%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="3"/><text x="4.8302%" y="831.50">[..</text></g><g><title>[unknown] (3 samples, 2.29%)</title><rect x="4.5802%" y="805" width="2.2901%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="3"/><text x="4.8302%" y="815.50">[..</text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="6.1069%" y="789" width="0.7634%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="6.3569%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="6.1069%" y="773" width="0.7634%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="6.3569%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="6.1069%" y="757" width="0.7634%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="6.3569%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="6.1069%" y="741" width="0.7634%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="6.3569%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="549" width="0.7634%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="7.1202%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="533" width="0.7634%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="7.1202%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::demo_parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="517" width="0.7634%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="7.1202%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::demo_parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="501" width="0.7634%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="7.1202%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::demo_parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="485" width="0.7634%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="1"/><text x="7.1202%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="6.8702%" y="469" width="0.7634%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="7.1202%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.76%)</title><rect x="6.8702%" y="453" width="0.7634%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="7.1202%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.76%)</title><rect x="6.8702%" y="437" width="0.7634%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="7.1202%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.76%)</title><rect x="6.8702%" y="421" width="0.7634%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="7.1202%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::demo_parsing::data_table::ServerClass)&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="405" width="0.7634%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="7.1202%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::data_table::ServerClass&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="389" width="0.7634%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="7.1202%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::entities::Prop&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="373" width="0.7634%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="7.1202%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="6.8702%" y="357" width="0.7634%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="7.1202%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::entities::Prop]&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="341" width="0.7634%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="7.1202%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::entities::Prop&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="325" width="0.7634%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="7.1202%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="309" width="0.7634%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="7.1202%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="293" width="0.7634%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="7.1202%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.76%)</title><rect x="6.8702%" y="277" width="0.7634%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="7.1202%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="6.8702%" y="261" width="0.7634%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="7.1202%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.76%)</title><rect x="6.8702%" y="245" width="0.7634%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="7.1202%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.76%)</title><rect x="6.8702%" y="229" width="0.7634%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="7.1202%" y="239.50"></text></g><g><title>mi_free (1 samples, 0.76%)</title><rect x="6.8702%" y="213" width="0.7634%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="7.1202%" y="223.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.76%)</title><rect x="6.8702%" y="197" width="0.7634%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="7.1202%" y="207.50"></text></g><g><title>mi_slice_first (1 samples, 0.76%)</title><rect x="6.8702%" y="181" width="0.7634%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="7.1202%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.76%)</title><rect x="7.6336%" y="341" width="0.7634%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="7.8836%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.76%)</title><rect x="9.1603%" y="309" width="0.7634%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="1"/><text x="9.4103%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Windows&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.53%)</title><rect x="28.2443%" y="277" width="1.5267%" height="15" fill="rgb(213,116,39)" fg:x="37" fg:w="2"/><text x="28.4943%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 3.82%)</title><rect x="29.7710%" y="277" width="3.8168%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="5"/><text x="30.0210%" y="287.50">core..</text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 2.29%)</title><rect x="33.5878%" y="165" width="2.2901%" height="15" fill="rgb(206,96,30)" fg:x="44" fg:w="3"/><text x="33.8378%" y="175.50">&lt;..</text></g><g><title>ahash::aes_hash::AHasher::from_random_state (3 samples, 2.29%)</title><rect x="33.5878%" y="149" width="2.2901%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="3"/><text x="33.8378%" y="159.50">a..</text></g><g><title>hashbrown::map::make_hash (4 samples, 3.05%)</title><rect x="33.5878%" y="229" width="3.0534%" height="15" fill="rgb(250,191,14)" fg:x="44" fg:w="4"/><text x="33.8378%" y="239.50">has..</text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (4 samples, 3.05%)</title><rect x="33.5878%" y="213" width="3.0534%" height="15" fill="rgb(239,60,40)" fg:x="44" fg:w="4"/><text x="33.8378%" y="223.50">&lt;ah..</text></g><g><title>ahash::random_state::RandomState::hash_one (4 samples, 3.05%)</title><rect x="33.5878%" y="197" width="3.0534%" height="15" fill="rgb(206,27,48)" fg:x="44" fg:w="4"/><text x="33.8378%" y="207.50">aha..</text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (4 samples, 3.05%)</title><rect x="33.5878%" y="181" width="3.0534%" height="15" fill="rgb(225,35,8)" fg:x="44" fg:w="4"/><text x="33.8378%" y="191.50">&lt;T ..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.76%)</title><rect x="35.8779%" y="165" width="0.7634%" height="15" fill="rgb(250,213,24)" fg:x="47" fg:w="1"/><text x="36.1279%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.76%)</title><rect x="35.8779%" y="149" width="0.7634%" height="15" fill="rgb(247,123,22)" fg:x="47" fg:w="1"/><text x="36.1279%" y="159.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u32 (1 samples, 0.76%)</title><rect x="35.8779%" y="133" width="0.7634%" height="15" fill="rgb(231,138,38)" fg:x="47" fg:w="1"/><text x="36.1279%" y="143.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1 samples, 0.76%)</title><rect x="35.8779%" y="117" width="0.7634%" height="15" fill="rgb(231,145,46)" fg:x="47" fg:w="1"/><text x="36.1279%" y="127.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u128 (1 samples, 0.76%)</title><rect x="35.8779%" y="101" width="0.7634%" height="15" fill="rgb(251,118,11)" fg:x="47" fg:w="1"/><text x="36.1279%" y="111.50"></text></g><g><title>ahash::aes_hash::AHasher::hash_in (1 samples, 0.76%)</title><rect x="35.8779%" y="85" width="0.7634%" height="15" fill="rgb(217,147,25)" fg:x="47" fg:w="1"/><text x="36.1279%" y="95.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 1.53%)</title><rect x="43.5115%" y="165" width="1.5267%" height="15" fill="rgb(247,81,37)" fg:x="57" fg:w="2"/><text x="43.7615%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 1.53%)</title><rect x="43.5115%" y="149" width="1.5267%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="2"/><text x="43.7615%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 3.82%)</title><rect x="43.5115%" y="181" width="3.8168%" height="15" fill="rgb(227,1,9)" fg:x="57" fg:w="5"/><text x="43.7615%" y="191.50">hash..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 2.29%)</title><rect x="45.0382%" y="165" width="2.2901%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="3"/><text x="45.2882%" y="175.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 2.29%)</title><rect x="45.0382%" y="149" width="2.2901%" height="15" fill="rgb(221,10,30)" fg:x="59" fg:w="3"/><text x="45.2882%" y="159.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 2.29%)</title><rect x="45.0382%" y="133" width="2.2901%" height="15" fill="rgb(210,229,1)" fg:x="59" fg:w="3"/><text x="45.2882%" y="143.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 2.29%)</title><rect x="45.0382%" y="117" width="2.2901%" height="15" fill="rgb(222,148,37)" fg:x="59" fg:w="3"/><text x="45.2882%" y="127.50">c..</text></g><g><title>hashbrown::raw::h2 (2 samples, 1.53%)</title><rect x="47.3282%" y="181" width="1.5267%" height="15" fill="rgb(234,67,33)" fg:x="62" fg:w="2"/><text x="47.5782%" y="191.50"></text></g><g><title>demoparser::parsing::players::Players::entid_to_uid (51 samples, 38.93%)</title><rect x="10.6870%" y="293" width="38.9313%" height="15" fill="rgb(247,98,35)" fg:x="14" fg:w="51"/><text x="10.9370%" y="303.50">demoparser::parsing::players::Players::entid_to_uid</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 16.03%)</title><rect x="33.5878%" y="277" width="16.0305%" height="15" fill="rgb(247,138,52)" fg:x="44" fg:w="21"/><text x="33.8378%" y="287.50">std::collections::hash::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 16.03%)</title><rect x="33.5878%" y="261" width="16.0305%" height="15" fill="rgb(213,79,30)" fg:x="44" fg:w="21"/><text x="33.8378%" y="271.50">hashbrown::map::HashMap&lt;K..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 16.03%)</title><rect x="33.5878%" y="245" width="16.0305%" height="15" fill="rgb(246,177,23)" fg:x="44" fg:w="21"/><text x="33.8378%" y="255.50">hashbrown::map::HashMap&lt;K..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (17 samples, 12.98%)</title><rect x="36.6412%" y="229" width="12.9771%" height="15" fill="rgb(230,62,27)" fg:x="48" fg:w="17"/><text x="36.8912%" y="239.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 12.98%)</title><rect x="36.6412%" y="213" width="12.9771%" height="15" fill="rgb(216,154,8)" fg:x="48" fg:w="17"/><text x="36.8912%" y="223.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (17 samples, 12.98%)</title><rect x="36.6412%" y="197" width="12.9771%" height="15" fill="rgb(244,35,45)" fg:x="48" fg:w="17"/><text x="36.8912%" y="207.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.76%)</title><rect x="48.8550%" y="181" width="0.7634%" height="15" fill="rgb(251,115,12)" fg:x="64" fg:w="1"/><text x="49.1050%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.76%)</title><rect x="48.8550%" y="165" width="0.7634%" height="15" fill="rgb(240,54,50)" fg:x="64" fg:w="1"/><text x="49.1050%" y="175.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::finish (11 samples, 8.40%)</title><rect x="50.3817%" y="165" width="8.3969%" height="15" fill="rgb(233,84,52)" fg:x="66" fg:w="11"/><text x="50.6317%" y="175.50">&lt;ahash::aes_..</text></g><g><title>ahash::operations::aesenc (8 samples, 6.11%)</title><rect x="52.6718%" y="149" width="6.1069%" height="15" fill="rgb(207,117,47)" fg:x="69" fg:w="8"/><text x="52.9218%" y="159.50">ahash::o..</text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (8 samples, 6.11%)</title><rect x="52.6718%" y="133" width="6.1069%" height="15" fill="rgb(249,43,39)" fg:x="69" fg:w="8"/><text x="52.9218%" y="143.50">core::co..</text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.76%)</title><rect x="58.7786%" y="165" width="0.7634%" height="15" fill="rgb(209,38,44)" fg:x="77" fg:w="1"/><text x="59.0286%" y="175.50"></text></g><g><title>ahash::aes_hash::AHasher::from_random_state (1 samples, 0.76%)</title><rect x="58.7786%" y="149" width="0.7634%" height="15" fill="rgb(236,212,23)" fg:x="77" fg:w="1"/><text x="59.0286%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 14.50%)</title><rect x="50.3817%" y="229" width="14.5038%" height="15" fill="rgb(242,79,21)" fg:x="66" fg:w="19"/><text x="50.6317%" y="239.50">hashbrown::map::make_h..</text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (19 samples, 14.50%)</title><rect x="50.3817%" y="213" width="14.5038%" height="15" fill="rgb(211,96,35)" fg:x="66" fg:w="19"/><text x="50.6317%" y="223.50">&lt;ahash::random_state::..</text></g><g><title>ahash::random_state::RandomState::hash_one (19 samples, 14.50%)</title><rect x="50.3817%" y="197" width="14.5038%" height="15" fill="rgb(253,215,40)" fg:x="66" fg:w="19"/><text x="50.6317%" y="207.50">ahash::random_state::R..</text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (19 samples, 14.50%)</title><rect x="50.3817%" y="181" width="14.5038%" height="15" fill="rgb(211,81,21)" fg:x="66" fg:w="19"/><text x="50.6317%" y="191.50">&lt;T as ahash::specializ..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 5.34%)</title><rect x="59.5420%" y="165" width="5.3435%" height="15" fill="rgb(208,190,38)" fg:x="78" fg:w="7"/><text x="59.7920%" y="175.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (7 samples, 5.34%)</title><rect x="59.5420%" y="149" width="5.3435%" height="15" fill="rgb(235,213,38)" fg:x="78" fg:w="7"/><text x="59.7920%" y="159.50">core::h..</text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u32 (7 samples, 5.34%)</title><rect x="59.5420%" y="133" width="5.3435%" height="15" fill="rgb(237,122,38)" fg:x="78" fg:w="7"/><text x="59.7920%" y="143.50">&lt;ahash:..</text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u64 (7 samples, 5.34%)</title><rect x="59.5420%" y="117" width="5.3435%" height="15" fill="rgb(244,218,35)" fg:x="78" fg:w="7"/><text x="59.7920%" y="127.50">&lt;ahash:..</text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u128 (7 samples, 5.34%)</title><rect x="59.5420%" y="101" width="5.3435%" height="15" fill="rgb(240,68,47)" fg:x="78" fg:w="7"/><text x="59.7920%" y="111.50">&lt;ahash:..</text></g><g><title>ahash::aes_hash::AHasher::hash_in (7 samples, 5.34%)</title><rect x="59.5420%" y="85" width="5.3435%" height="15" fill="rgb(210,16,53)" fg:x="78" fg:w="7"/><text x="59.7920%" y="95.50">ahash::..</text></g><g><title>ahash::operations::shuffle_and_add (5 samples, 3.82%)</title><rect x="61.0687%" y="69" width="3.8168%" height="15" fill="rgb(235,124,12)" fg:x="80" fg:w="5"/><text x="61.3187%" y="79.50">ahas..</text></g><g><title>ahash::operations::add_by_64s (5 samples, 3.82%)</title><rect x="61.0687%" y="53" width="3.8168%" height="15" fill="rgb(224,169,11)" fg:x="80" fg:w="5"/><text x="61.3187%" y="63.50">ahas..</text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (5 samples, 3.82%)</title><rect x="61.0687%" y="37" width="3.8168%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="5"/><text x="61.3187%" y="47.50">core..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 1.53%)</title><rect x="80.1527%" y="181" width="1.5267%" height="15" fill="rgb(242,216,29)" fg:x="105" fg:w="2"/><text x="80.4027%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 1.53%)</title><rect x="80.1527%" y="165" width="1.5267%" height="15" fill="rgb(230,116,27)" fg:x="105" fg:w="2"/><text x="80.4027%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 1.53%)</title><rect x="80.1527%" y="149" width="1.5267%" height="15" fill="rgb(228,99,48)" fg:x="105" fg:w="2"/><text x="80.4027%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 3.05%)</title><rect x="81.6794%" y="181" width="3.0534%" height="15" fill="rgb(253,11,6)" fg:x="107" fg:w="4"/><text x="81.9294%" y="191.50">has..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 81.68%)</title><rect x="7.6336%" y="389" width="81.6794%" height="15" fill="rgb(247,143,39)" fg:x="10" fg:w="107"/><text x="7.8836%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 81.68%)</title><rect x="7.6336%" y="373" width="81.6794%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="107"/><text x="7.8836%" y="383.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (107 samples, 81.68%)</title><rect x="7.6336%" y="357" width="81.6794%" height="15" fill="rgb(233,208,19)" fg:x="10" fg:w="107"/><text x="7.8836%" y="367.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (106 samples, 80.92%)</title><rect x="8.3969%" y="341" width="80.9160%" height="15" fill="rgb(216,164,2)" fg:x="11" fg:w="106"/><text x="8.6469%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}} (106 samples, 80.92%)</title><rect x="8.3969%" y="325" width="80.9160%" height="15" fill="rgb(220,129,5)" fg:x="11" fg:w="106"/><text x="8.6469%" y="335.50">demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}}</text></g><g><title>demoparser::parsing::players::Players::eid_to_sid (104 samples, 79.39%)</title><rect x="9.9237%" y="309" width="79.3893%" height="15" fill="rgb(242,17,10)" fg:x="13" fg:w="104"/><text x="10.1737%" y="319.50">demoparser::parsing::players::Players::eid_to_sid</text></g><g><title>demoparser::parsing::players::Players::uid_to_steamid (52 samples, 39.69%)</title><rect x="49.6183%" y="293" width="39.6947%" height="15" fill="rgb(242,107,0)" fg:x="65" fg:w="52"/><text x="49.8683%" y="303.50">demoparser::parsing::players::Players::uid_to_steamid</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (52 samples, 39.69%)</title><rect x="49.6183%" y="277" width="39.6947%" height="15" fill="rgb(251,28,31)" fg:x="65" fg:w="52"/><text x="49.8683%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (52 samples, 39.69%)</title><rect x="49.6183%" y="261" width="39.6947%" height="15" fill="rgb(233,223,10)" fg:x="65" fg:w="52"/><text x="49.8683%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (52 samples, 39.69%)</title><rect x="49.6183%" y="245" width="39.6947%" height="15" fill="rgb(215,21,27)" fg:x="65" fg:w="52"/><text x="49.8683%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (32 samples, 24.43%)</title><rect x="64.8855%" y="229" width="24.4275%" height="15" fill="rgb(232,23,21)" fg:x="85" fg:w="32"/><text x="65.1355%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (32 samples, 24.43%)</title><rect x="64.8855%" y="213" width="24.4275%" height="15" fill="rgb(244,5,23)" fg:x="85" fg:w="32"/><text x="65.1355%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (32 samples, 24.43%)</title><rect x="64.8855%" y="197" width="24.4275%" height="15" fill="rgb(226,81,46)" fg:x="85" fg:w="32"/><text x="65.1355%" y="207.50">hashbrown::raw::RawTableInner&lt;A&gt;::find_..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 4.58%)</title><rect x="84.7328%" y="181" width="4.5802%" height="15" fill="rgb(247,70,30)" fg:x="111" fg:w="6"/><text x="84.9828%" y="191.50">hashb..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 4.58%)</title><rect x="84.7328%" y="165" width="4.5802%" height="15" fill="rgb(212,68,19)" fg:x="111" fg:w="6"/><text x="84.9828%" y="175.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (108 samples, 82.44%)</title><rect x="7.6336%" y="421" width="82.4427%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="108"/><text x="7.8836%" y="431.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (108 samples, 82.44%)</title><rect x="7.6336%" y="405" width="82.4427%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="108"/><text x="7.8836%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (1 samples, 0.76%)</title><rect x="89.3130%" y="389" width="0.7634%" height="15" fill="rgb(206,192,2)" fg:x="117" fg:w="1"/><text x="89.5630%" y="399.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks (109 samples, 83.21%)</title><rect x="7.6336%" y="501" width="83.2061%" height="15" fill="rgb(241,108,4)" fg:x="10" fg:w="109"/><text x="7.8836%" y="511.50">demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks</text></g><g><title>core::iter::traits::iterator::Iterator::collect (109 samples, 83.21%)</title><rect x="7.6336%" y="485" width="83.2061%" height="15" fill="rgb(247,173,49)" fg:x="10" fg:w="109"/><text x="7.8836%" y="495.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (109 samples, 83.21%)</title><rect x="7.6336%" y="469" width="83.2061%" height="15" fill="rgb(224,114,35)" fg:x="10" fg:w="109"/><text x="7.8836%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (109 samples, 83.21%)</title><rect x="7.6336%" y="453" width="83.2061%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="109"/><text x="7.8836%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (109 samples, 83.21%)</title><rect x="7.6336%" y="437" width="83.2061%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="109"/><text x="7.8836%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.76%)</title><rect x="90.0763%" y="421" width="0.7634%" height="15" fill="rgb(236,23,11)" fg:x="118" fg:w="1"/><text x="90.3263%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.76%)</title><rect x="90.0763%" y="405" width="0.7634%" height="15" fill="rgb(205,117,38)" fg:x="118" fg:w="1"/><text x="90.3263%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.76%)</title><rect x="90.0763%" y="389" width="0.7634%" height="15" fill="rgb(237,72,25)" fg:x="118" fg:w="1"/><text x="90.3263%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.76%)</title><rect x="90.0763%" y="373" width="0.7634%" height="15" fill="rgb(244,70,9)" fg:x="118" fg:w="1"/><text x="90.3263%" y="383.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_delta_ticks::{{closure}} (1 samples, 0.76%)</title><rect x="90.0763%" y="357" width="0.7634%" height="15" fill="rgb(217,125,39)" fg:x="118" fg:w="1"/><text x="90.3263%" y="367.50"></text></g><g><title>demoparser::parsing::players::Players::eid_to_sid (1 samples, 0.76%)</title><rect x="90.0763%" y="341" width="0.7634%" height="15" fill="rgb(235,36,10)" fg:x="118" fg:w="1"/><text x="90.3263%" y="351.50"></text></g><g><title>demoparser::parsing::players::Players::uid_to_steamid (1 samples, 0.76%)</title><rect x="90.0763%" y="325" width="0.7634%" height="15" fill="rgb(251,123,47)" fg:x="118" fg:w="1"/><text x="90.3263%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.76%)</title><rect x="90.0763%" y="309" width="0.7634%" height="15" fill="rgb(221,13,13)" fg:x="118" fg:w="1"/><text x="90.3263%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.76%)</title><rect x="90.0763%" y="293" width="0.7634%" height="15" fill="rgb(238,131,9)" fg:x="118" fg:w="1"/><text x="90.3263%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.76%)</title><rect x="90.0763%" y="277" width="0.7634%" height="15" fill="rgb(211,50,8)" fg:x="118" fg:w="1"/><text x="90.3263%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.76%)</title><rect x="90.0763%" y="261" width="0.7634%" height="15" fill="rgb(245,182,24)" fg:x="118" fg:w="1"/><text x="90.3263%" y="271.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (1 samples, 0.76%)</title><rect x="90.0763%" y="245" width="0.7634%" height="15" fill="rgb(242,14,37)" fg:x="118" fg:w="1"/><text x="90.3263%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.76%)</title><rect x="90.0763%" y="229" width="0.7634%" height="15" fill="rgb(246,228,12)" fg:x="118" fg:w="1"/><text x="90.3263%" y="239.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (1 samples, 0.76%)</title><rect x="90.0763%" y="213" width="0.7634%" height="15" fill="rgb(213,55,15)" fg:x="118" fg:w="1"/><text x="90.3263%" y="223.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="90.0763%" y="197" width="0.7634%" height="15" fill="rgb(209,9,3)" fg:x="118" fg:w="1"/><text x="90.3263%" y="207.50"></text></g><g><title>ahash::operations::aesenc (1 samples, 0.76%)</title><rect x="90.0763%" y="181" width="0.7634%" height="15" fill="rgb(230,59,30)" fg:x="118" fg:w="1"/><text x="90.3263%" y="191.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (1 samples, 0.76%)</title><rect x="90.0763%" y="165" width="0.7634%" height="15" fill="rgb(209,121,21)" fg:x="118" fg:w="1"/><text x="90.3263%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.76%)</title><rect x="90.8397%" y="485" width="0.7634%" height="15" fill="rgb(220,109,13)" fg:x="119" fg:w="1"/><text x="91.0897%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.76%)</title><rect x="90.8397%" y="469" width="0.7634%" height="15" fill="rgb(232,18,1)" fg:x="119" fg:w="1"/><text x="91.0897%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.76%)</title><rect x="90.8397%" y="453" width="0.7634%" height="15" fill="rgb(215,41,42)" fg:x="119" fg:w="1"/><text x="91.0897%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.76%)</title><rect x="90.8397%" y="437" width="0.7634%" height="15" fill="rgb(224,123,36)" fg:x="119" fg:w="1"/><text x="91.0897%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.76%)</title><rect x="90.8397%" y="421" width="0.7634%" height="15" fill="rgb(240,125,3)" fg:x="119" fg:w="1"/><text x="91.0897%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.76%)</title><rect x="90.8397%" y="405" width="0.7634%" height="15" fill="rgb(205,98,50)" fg:x="119" fg:w="1"/><text x="91.0897%" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.76%)</title><rect x="90.8397%" y="389" width="0.7634%" height="15" fill="rgb(205,185,37)" fg:x="119" fg:w="1"/><text x="91.0897%" y="399.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.76%)</title><rect x="90.8397%" y="373" width="0.7634%" height="15" fill="rgb(238,207,15)" fg:x="119" fg:w="1"/><text x="91.0897%" y="383.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.76%)</title><rect x="90.8397%" y="357" width="0.7634%" height="15" fill="rgb(213,199,42)" fg:x="119" fg:w="1"/><text x="91.0897%" y="367.50"></text></g><g><title>_mi_memcpy (1 samples, 0.76%)</title><rect x="90.8397%" y="341" width="0.7634%" height="15" fill="rgb(235,201,11)" fg:x="119" fg:w="1"/><text x="91.0897%" y="351.50"></text></g><g><title>memcpy (1 samples, 0.76%)</title><rect x="90.8397%" y="325" width="0.7634%" height="15" fill="rgb(207,46,11)" fg:x="119" fg:w="1"/><text x="91.0897%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.76%)</title><rect x="90.8397%" y="309" width="0.7634%" height="15" fill="rgb(241,35,35)" fg:x="119" fg:w="1"/><text x="91.0897%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.8397%" y="293" width="0.7634%" height="15" fill="rgb(243,32,47)" fg:x="119" fg:w="1"/><text x="91.0897%" y="303.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (1 samples, 0.76%)</title><rect x="91.6031%" y="421" width="0.7634%" height="15" fill="rgb(247,202,23)" fg:x="120" fg:w="1"/><text x="91.8531%" y="431.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (1 samples, 0.76%)</title><rect x="91.6031%" y="405" width="0.7634%" height="15" fill="rgb(219,102,11)" fg:x="120" fg:w="1"/><text x="91.8531%" y="415.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (1 samples, 0.76%)</title><rect x="91.6031%" y="389" width="0.7634%" height="15" fill="rgb(243,110,44)" fg:x="120" fg:w="1"/><text x="91.8531%" y="399.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.76%)</title><rect x="91.6031%" y="373" width="0.7634%" height="15" fill="rgb(222,74,54)" fg:x="120" fg:w="1"/><text x="91.8531%" y="383.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.76%)</title><rect x="91.6031%" y="357" width="0.7634%" height="15" fill="rgb(216,99,12)" fg:x="120" fg:w="1"/><text x="91.8531%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.76%)</title><rect x="91.6031%" y="341" width="0.7634%" height="15" fill="rgb(226,22,26)" fg:x="120" fg:w="1"/><text x="91.8531%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (1 samples, 0.76%)</title><rect x="91.6031%" y="325" width="0.7634%" height="15" fill="rgb(217,163,10)" fg:x="120" fg:w="1"/><text x="91.8531%" y="335.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.76%)</title><rect x="91.6031%" y="309" width="0.7634%" height="15" fill="rgb(213,25,53)" fg:x="120" fg:w="1"/><text x="91.8531%" y="319.50"></text></g><g><title>demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_wanted_bytes (112 samples, 85.50%)</title><rect x="7.6336%" y="517" width="85.4962%" height="15" fill="rgb(252,105,26)" fg:x="10" fg:w="112"/><text x="7.8836%" y="527.50">demoparser::parsing::cache::cache_algorithms::&lt;impl demoparser::parsing::cache::cache_reader::ReadCache&gt;::find_wanted_bytes</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_deltas_by_name (3 samples, 2.29%)</title><rect x="90.8397%" y="501" width="2.2901%" height="15" fill="rgb(220,39,43)" fg:x="119" fg:w="3"/><text x="91.0897%" y="511.50">d..</text></g><g><title>std::io::Read::read_to_end (2 samples, 1.53%)</title><rect x="91.6031%" y="485" width="1.5267%" height="15" fill="rgb(229,68,48)" fg:x="120" fg:w="2"/><text x="91.8531%" y="495.50"></text></g><g><title>std::io::default_read_to_end (2 samples, 1.53%)</title><rect x="91.6031%" y="469" width="1.5267%" height="15" fill="rgb(252,8,32)" fg:x="120" fg:w="2"/><text x="91.8531%" y="479.50"></text></g><g><title>std::io::Read::read_buf (2 samples, 1.53%)</title><rect x="91.6031%" y="453" width="1.5267%" height="15" fill="rgb(223,20,43)" fg:x="120" fg:w="2"/><text x="91.8531%" y="463.50"></text></g><g><title>std::io::default_read_buf (2 samples, 1.53%)</title><rect x="91.6031%" y="437" width="1.5267%" height="15" fill="rgb(229,81,49)" fg:x="120" fg:w="2"/><text x="91.8531%" y="447.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (1 samples, 0.76%)</title><rect x="92.3664%" y="421" width="0.7634%" height="15" fill="rgb(236,28,36)" fg:x="121" fg:w="1"/><text x="92.6164%" y="431.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.76%)</title><rect x="92.3664%" y="405" width="0.7634%" height="15" fill="rgb(249,185,26)" fg:x="121" fg:w="1"/><text x="92.6164%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.76%)</title><rect x="92.3664%" y="389" width="0.7634%" height="15" fill="rgb(249,174,33)" fg:x="121" fg:w="1"/><text x="92.6164%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="92.3664%" y="373" width="0.7634%" height="15" fill="rgb(233,201,37)" fg:x="121" fg:w="1"/><text x="92.6164%" y="383.50"></text></g><g><title>demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_with_cache (114 samples, 87.02%)</title><rect x="7.6336%" y="533" width="87.0229%" height="15" fill="rgb(221,78,26)" fg:x="10" fg:w="114"/><text x="7.8836%" y="543.50">demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_with_cache</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints (2 samples, 1.53%)</title><rect x="93.1298%" y="517" width="1.5267%" height="15" fill="rgb(250,127,30)" fg:x="122" fg:w="2"/><text x="93.3798%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 1.53%)</title><rect x="93.1298%" y="501" width="1.5267%" height="15" fill="rgb(230,49,44)" fg:x="122" fg:w="2"/><text x="93.3798%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 1.53%)</title><rect x="93.1298%" y="485" width="1.5267%" height="15" fill="rgb(229,67,23)" fg:x="122" fg:w="2"/><text x="93.3798%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 1.53%)</title><rect x="93.1298%" y="469" width="1.5267%" height="15" fill="rgb(249,83,47)" fg:x="122" fg:w="2"/><text x="93.3798%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 1.53%)</title><rect x="93.1298%" y="453" width="1.5267%" height="15" fill="rgb(215,43,3)" fg:x="122" fg:w="2"/><text x="93.3798%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 1.53%)</title><rect x="93.1298%" y="437" width="1.5267%" height="15" fill="rgb(238,154,13)" fg:x="122" fg:w="2"/><text x="93.3798%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 1.53%)</title><rect x="93.1298%" y="421" width="1.5267%" height="15" fill="rgb(219,56,2)" fg:x="122" fg:w="2"/><text x="93.3798%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.53%)</title><rect x="93.1298%" y="405" width="1.5267%" height="15" fill="rgb(233,0,4)" fg:x="122" fg:w="2"/><text x="93.3798%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.53%)</title><rect x="93.1298%" y="389" width="1.5267%" height="15" fill="rgb(235,30,7)" fg:x="122" fg:w="2"/><text x="93.3798%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.53%)</title><rect x="93.1298%" y="373" width="1.5267%" height="15" fill="rgb(250,79,13)" fg:x="122" fg:w="2"/><text x="93.3798%" y="383.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints::{{closure}} (2 samples, 1.53%)</title><rect x="93.1298%" y="357" width="1.5267%" height="15" fill="rgb(211,146,34)" fg:x="122" fg:w="2"/><text x="93.3798%" y="367.50"></text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (2 samples, 1.53%)</title><rect x="93.1298%" y="341" width="1.5267%" height="15" fill="rgb(228,22,38)" fg:x="122" fg:w="2"/><text x="93.3798%" y="351.50"></text></g><g><title>demoparser::parsing::demo_parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (2 samples, 1.53%)</title><rect x="93.1298%" y="325" width="1.5267%" height="15" fill="rgb(235,168,5)" fg:x="122" fg:w="2"/><text x="93.3798%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StringTable&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="309" width="1.5267%" height="15" fill="rgb(221,155,16)" fg:x="122" fg:w="2"/><text x="93.3798%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt;&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="293" width="1.5267%" height="15" fill="rgb(215,215,53)" fg:x="122" fg:w="2"/><text x="93.3798%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.53%)</title><rect x="93.1298%" y="277" width="1.5267%" height="15" fill="rgb(223,4,10)" fg:x="122" fg:w="2"/><text x="93.3798%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::stringtables::StField]&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="261" width="1.5267%" height="15" fill="rgb(234,103,6)" fg:x="122" fg:w="2"/><text x="93.3798%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="245" width="1.5267%" height="15" fill="rgb(227,97,0)" fg:x="122" fg:w="2"/><text x="93.3798%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="229" width="1.5267%" height="15" fill="rgb(234,150,53)" fg:x="122" fg:w="2"/><text x="93.3798%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="213" width="1.5267%" height="15" fill="rgb(228,201,54)" fg:x="122" fg:w="2"/><text x="93.3798%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 1.53%)</title><rect x="93.1298%" y="197" width="1.5267%" height="15" fill="rgb(222,22,37)" fg:x="122" fg:w="2"/><text x="93.3798%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.53%)</title><rect x="93.1298%" y="181" width="1.5267%" height="15" fill="rgb(237,53,32)" fg:x="122" fg:w="2"/><text x="93.3798%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 1.53%)</title><rect x="93.1298%" y="165" width="1.5267%" height="15" fill="rgb(233,25,53)" fg:x="122" fg:w="2"/><text x="93.3798%" y="175.50"></text></g><g><title>__libc_start_main_impl (116 samples, 88.55%)</title><rect x="6.8702%" y="981" width="88.5496%" height="15" fill="rgb(210,40,34)" fg:x="9" fg:w="116"/><text x="7.1202%" y="991.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (116 samples, 88.55%)</title><rect x="6.8702%" y="965" width="88.5496%" height="15" fill="rgb(241,220,44)" fg:x="9" fg:w="116"/><text x="7.1202%" y="975.50">__libc_start_call_main</text></g><g><title>main (116 samples, 88.55%)</title><rect x="6.8702%" y="949" width="88.5496%" height="15" fill="rgb(235,28,35)" fg:x="9" fg:w="116"/><text x="7.1202%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (116 samples, 88.55%)</title><rect x="6.8702%" y="933" width="88.5496%" height="15" fill="rgb(210,56,17)" fg:x="9" fg:w="116"/><text x="7.1202%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (116 samples, 88.55%)</title><rect x="6.8702%" y="917" width="88.5496%" height="15" fill="rgb(224,130,29)" fg:x="9" fg:w="116"/><text x="7.1202%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (116 samples, 88.55%)</title><rect x="6.8702%" y="901" width="88.5496%" height="15" fill="rgb(235,212,8)" fg:x="9" fg:w="116"/><text x="7.1202%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (116 samples, 88.55%)</title><rect x="6.8702%" y="885" width="88.5496%" height="15" fill="rgb(223,33,50)" fg:x="9" fg:w="116"/><text x="7.1202%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (116 samples, 88.55%)</title><rect x="6.8702%" y="869" width="88.5496%" height="15" fill="rgb(219,149,13)" fg:x="9" fg:w="116"/><text x="7.1202%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (116 samples, 88.55%)</title><rect x="6.8702%" y="853" width="88.5496%" height="15" fill="rgb(250,156,29)" fg:x="9" fg:w="116"/><text x="7.1202%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (116 samples, 88.55%)</title><rect x="6.8702%" y="837" width="88.5496%" height="15" fill="rgb(216,193,19)" fg:x="9" fg:w="116"/><text x="7.1202%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (116 samples, 88.55%)</title><rect x="6.8702%" y="821" width="88.5496%" height="15" fill="rgb(216,135,14)" fg:x="9" fg:w="116"/><text x="7.1202%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (116 samples, 88.55%)</title><rect x="6.8702%" y="805" width="88.5496%" height="15" fill="rgb(241,47,5)" fg:x="9" fg:w="116"/><text x="7.1202%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (116 samples, 88.55%)</title><rect x="6.8702%" y="789" width="88.5496%" height="15" fill="rgb(233,42,35)" fg:x="9" fg:w="116"/><text x="7.1202%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (116 samples, 88.55%)</title><rect x="6.8702%" y="773" width="88.5496%" height="15" fill="rgb(231,13,6)" fg:x="9" fg:w="116"/><text x="7.1202%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (116 samples, 88.55%)</title><rect x="6.8702%" y="757" width="88.5496%" height="15" fill="rgb(207,181,40)" fg:x="9" fg:w="116"/><text x="7.1202%" y="767.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (116 samples, 88.55%)</title><rect x="6.8702%" y="741" width="88.5496%" height="15" fill="rgb(254,173,49)" fg:x="9" fg:w="116"/><text x="7.1202%" y="751.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (116 samples, 88.55%)</title><rect x="6.8702%" y="725" width="88.5496%" height="15" fill="rgb(221,1,38)" fg:x="9" fg:w="116"/><text x="7.1202%" y="735.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (116 samples, 88.55%)</title><rect x="6.8702%" y="709" width="88.5496%" height="15" fill="rgb(206,124,46)" fg:x="9" fg:w="116"/><text x="7.1202%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (116 samples, 88.55%)</title><rect x="6.8702%" y="693" width="88.5496%" height="15" fill="rgb(249,21,11)" fg:x="9" fg:w="116"/><text x="7.1202%" y="703.50">alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (116 samples, 88.55%)</title><rect x="6.8702%" y="677" width="88.5496%" height="15" fill="rgb(222,201,40)" fg:x="9" fg:w="116"/><text x="7.1202%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (116 samples, 88.55%)</title><rect x="6.8702%" y="661" width="88.5496%" height="15" fill="rgb(235,61,29)" fg:x="9" fg:w="116"/><text x="7.1202%" y="671.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (116 samples, 88.55%)</title><rect x="6.8702%" y="645" width="88.5496%" height="15" fill="rgb(219,207,3)" fg:x="9" fg:w="116"/><text x="7.1202%" y="655.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (116 samples, 88.55%)</title><rect x="6.8702%" y="629" width="88.5496%" height="15" fill="rgb(222,56,46)" fg:x="9" fg:w="116"/><text x="7.1202%" y="639.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (116 samples, 88.55%)</title><rect x="6.8702%" y="613" width="88.5496%" height="15" fill="rgb(239,76,54)" fg:x="9" fg:w="116"/><text x="7.1202%" y="623.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (116 samples, 88.55%)</title><rect x="6.8702%" y="597" width="88.5496%" height="15" fill="rgb(231,124,27)" fg:x="9" fg:w="116"/><text x="7.1202%" y="607.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (116 samples, 88.55%)</title><rect x="6.8702%" y="581" width="88.5496%" height="15" fill="rgb(249,195,6)" fg:x="9" fg:w="116"/><text x="7.1202%" y="591.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (116 samples, 88.55%)</title><rect x="6.8702%" y="565" width="88.5496%" height="15" fill="rgb(237,174,47)" fg:x="9" fg:w="116"/><text x="7.1202%" y="575.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (115 samples, 87.79%)</title><rect x="7.6336%" y="549" width="87.7863%" height="15" fill="rgb(206,201,31)" fg:x="10" fg:w="115"/><text x="7.8836%" y="559.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (1 samples, 0.76%)</title><rect x="94.6565%" y="533" width="0.7634%" height="15" fill="rgb(231,57,52)" fg:x="124" fg:w="1"/><text x="94.9065%" y="543.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (1 samples, 0.76%)</title><rect x="94.6565%" y="517" width="0.7634%" height="15" fill="rgb(248,177,22)" fg:x="124" fg:w="1"/><text x="94.9065%" y="527.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (1 samples, 0.76%)</title><rect x="94.6565%" y="501" width="0.7634%" height="15" fill="rgb(215,211,37)" fg:x="124" fg:w="1"/><text x="94.9065%" y="511.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (1 samples, 0.76%)</title><rect x="94.6565%" y="485" width="0.7634%" height="15" fill="rgb(241,128,51)" fg:x="124" fg:w="1"/><text x="94.9065%" y="495.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.76%)</title><rect x="94.6565%" y="469" width="0.7634%" height="15" fill="rgb(227,165,31)" fg:x="124" fg:w="1"/><text x="94.9065%" y="479.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.76%)</title><rect x="94.6565%" y="453" width="0.7634%" height="15" fill="rgb(228,167,24)" fg:x="124" fg:w="1"/><text x="94.9065%" y="463.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::num_elements (1 samples, 0.76%)</title><rect x="94.6565%" y="437" width="0.7634%" height="15" fill="rgb(228,143,12)" fg:x="124" fg:w="1"/><text x="94.9065%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.76%)</title><rect x="94.6565%" y="421" width="0.7634%" height="15" fill="rgb(249,149,8)" fg:x="124" fg:w="1"/><text x="94.9065%" y="431.50"></text></g><g><title>demoparser (126 samples, 96.18%)</title><rect x="0.0000%" y="1013" width="96.1832%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="126"/><text x="0.2500%" y="1023.50">demoparser</text></g><g><title>_start (117 samples, 89.31%)</title><rect x="6.8702%" y="997" width="89.3130%" height="15" fill="rgb(246,89,9)" fg:x="9" fg:w="117"/><text x="7.1202%" y="1007.50">_start</text></g><g><title>_dl_start (1 samples, 0.76%)</title><rect x="95.4198%" y="981" width="0.7634%" height="15" fill="rgb(233,213,13)" fg:x="125" fg:w="1"/><text x="95.6698%" y="991.50"></text></g><g><title>_dl_start_final (1 samples, 0.76%)</title><rect x="95.4198%" y="965" width="0.7634%" height="15" fill="rgb(233,141,41)" fg:x="125" fg:w="1"/><text x="95.6698%" y="975.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.76%)</title><rect x="95.4198%" y="949" width="0.7634%" height="15" fill="rgb(239,167,4)" fg:x="125" fg:w="1"/><text x="95.6698%" y="959.50"></text></g><g><title>dl_main (1 samples, 0.76%)</title><rect x="95.4198%" y="933" width="0.7634%" height="15" fill="rgb(209,217,16)" fg:x="125" fg:w="1"/><text x="95.6698%" y="943.50"></text></g><g><title>__libc_early_init (1 samples, 0.76%)</title><rect x="95.4198%" y="917" width="0.7634%" height="15" fill="rgb(219,88,35)" fg:x="125" fg:w="1"/><text x="95.6698%" y="927.50"></text></g><g><title>__pthread_early_init (1 samples, 0.76%)</title><rect x="95.4198%" y="901" width="0.7634%" height="15" fill="rgb(220,193,23)" fg:x="125" fg:w="1"/><text x="95.6698%" y="911.50"></text></g><g><title>__pthread_tunables_init (1 samples, 0.76%)</title><rect x="95.4198%" y="885" width="0.7634%" height="15" fill="rgb(230,90,52)" fg:x="125" fg:w="1"/><text x="95.6698%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="869" width="0.7634%" height="15" fill="rgb(252,106,19)" fg:x="125" fg:w="1"/><text x="95.6698%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="853" width="0.7634%" height="15" fill="rgb(206,74,20)" fg:x="125" fg:w="1"/><text x="95.6698%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="837" width="0.7634%" height="15" fill="rgb(230,138,44)" fg:x="125" fg:w="1"/><text x="95.6698%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="821" width="0.7634%" height="15" fill="rgb(235,182,43)" fg:x="125" fg:w="1"/><text x="95.6698%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="805" width="0.7634%" height="15" fill="rgb(242,16,51)" fg:x="125" fg:w="1"/><text x="95.6698%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="789" width="0.7634%" height="15" fill="rgb(248,9,4)" fg:x="125" fg:w="1"/><text x="95.6698%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="773" width="0.7634%" height="15" fill="rgb(210,31,22)" fg:x="125" fg:w="1"/><text x="95.6698%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="757" width="0.7634%" height="15" fill="rgb(239,54,39)" fg:x="125" fg:w="1"/><text x="95.6698%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="741" width="0.7634%" height="15" fill="rgb(230,99,41)" fg:x="125" fg:w="1"/><text x="95.6698%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4198%" y="725" width="0.7634%" height="15" fill="rgb(253,106,12)" fg:x="125" fg:w="1"/><text x="95.6698%" y="735.50"></text></g><g><title>all (131 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="131"/><text x="0.2500%" y="1039.50"></text></g><g><title>perf-exec (5 samples, 3.82%)</title><rect x="96.1832%" y="1013" width="3.8168%" height="15" fill="rgb(215,133,35)" fg:x="126" fg:w="5"/><text x="96.4332%" y="1023.50">perf..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="997" width="3.8168%" height="15" fill="rgb(213,28,5)" fg:x="126" fg:w="5"/><text x="96.4332%" y="1007.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="981" width="3.8168%" height="15" fill="rgb(215,77,49)" fg:x="126" fg:w="5"/><text x="96.4332%" y="991.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="965" width="3.8168%" height="15" fill="rgb(248,100,22)" fg:x="126" fg:w="5"/><text x="96.4332%" y="975.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="949" width="3.8168%" height="15" fill="rgb(208,67,9)" fg:x="126" fg:w="5"/><text x="96.4332%" y="959.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="933" width="3.8168%" height="15" fill="rgb(219,133,21)" fg:x="126" fg:w="5"/><text x="96.4332%" y="943.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="917" width="3.8168%" height="15" fill="rgb(246,46,29)" fg:x="126" fg:w="5"/><text x="96.4332%" y="927.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="901" width="3.8168%" height="15" fill="rgb(246,185,52)" fg:x="126" fg:w="5"/><text x="96.4332%" y="911.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="885" width="3.8168%" height="15" fill="rgb(252,136,11)" fg:x="126" fg:w="5"/><text x="96.4332%" y="895.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="869" width="3.8168%" height="15" fill="rgb(219,138,53)" fg:x="126" fg:w="5"/><text x="96.4332%" y="879.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.82%)</title><rect x="96.1832%" y="853" width="3.8168%" height="15" fill="rgb(211,51,23)" fg:x="126" fg:w="5"/><text x="96.4332%" y="863.50">[unk..</text></g></svg></svg>