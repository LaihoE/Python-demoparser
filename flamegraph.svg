<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1399"><g><title>[unknown] (64 samples, 4.57%)</title><rect x="0.0000%" y="1141" width="4.5747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="64"/><text x="0.2500%" y="1151.50">[unkn..</text></g><g><title>[unknown] (49 samples, 3.50%)</title><rect x="1.0722%" y="1125" width="3.5025%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="49"/><text x="1.3222%" y="1135.50">[un..</text></g><g><title>[unknown] (49 samples, 3.50%)</title><rect x="1.0722%" y="1109" width="3.5025%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="49"/><text x="1.3222%" y="1119.50">[un..</text></g><g><title>[unknown] (39 samples, 2.79%)</title><rect x="1.7870%" y="1093" width="2.7877%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="39"/><text x="2.0370%" y="1103.50">[u..</text></g><g><title>[unknown] (23 samples, 1.64%)</title><rect x="2.9307%" y="1077" width="1.6440%" height="15" fill="rgb(208,68,35)" fg:x="41" fg:w="23"/><text x="3.1807%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="1061" width="0.2144%" height="15" fill="rgb(232,128,0)" fg:x="61" fg:w="3"/><text x="4.6103%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="1045" width="0.2144%" height="15" fill="rgb(207,160,47)" fg:x="61" fg:w="3"/><text x="4.6103%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="1029" width="0.2144%" height="15" fill="rgb(228,23,34)" fg:x="61" fg:w="3"/><text x="4.6103%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="1013" width="0.2144%" height="15" fill="rgb(218,30,26)" fg:x="61" fg:w="3"/><text x="4.6103%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="997" width="0.2144%" height="15" fill="rgb(220,122,19)" fg:x="61" fg:w="3"/><text x="4.6103%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="4.3603%" y="981" width="0.2144%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="3"/><text x="4.6103%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="4.4317%" y="965" width="0.1430%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="2"/><text x="4.6817%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="4.4317%" y="949" width="0.1430%" height="15" fill="rgb(216,20,37)" fg:x="62" fg:w="2"/><text x="4.6817%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="4.5747%" y="1125" width="0.0715%" height="15" fill="rgb(206,188,39)" fg:x="64" fg:w="1"/><text x="4.8247%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="4.5747%" y="1109" width="0.0715%" height="15" fill="rgb(217,207,13)" fg:x="64" fg:w="1"/><text x="4.8247%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="4.5747%" y="1093" width="0.0715%" height="15" fill="rgb(231,73,38)" fg:x="64" fg:w="1"/><text x="4.8247%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="4.5747%" y="1077" width="0.0715%" height="15" fill="rgb(225,20,46)" fg:x="64" fg:w="1"/><text x="4.8247%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;memmap2::Mmap&gt;&gt; (3 samples, 0.21%)</title><rect x="4.9321%" y="869" width="0.2144%" height="15" fill="rgb(210,31,41)" fg:x="69" fg:w="3"/><text x="5.1821%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="4.9321%" y="853" width="0.2144%" height="15" fill="rgb(221,200,47)" fg:x="69" fg:w="3"/><text x="5.1821%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.21%)</title><rect x="5.1465%" y="869" width="0.2144%" height="15" fill="rgb(226,26,5)" fg:x="72" fg:w="3"/><text x="5.3965%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.21%)</title><rect x="5.1465%" y="853" width="0.2144%" height="15" fill="rgb(249,33,26)" fg:x="72" fg:w="3"/><text x="5.3965%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (251 samples, 17.94%)</title><rect x="6.2902%" y="853" width="17.9414%" height="15" fill="rgb(235,183,28)" fg:x="88" fg:w="251"/><text x="6.5402%" y="863.50">&lt;alloc::sync::Arc&lt;T&gt; as core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dashmap::DashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;u32,demoparser::parsing::variants::VarVec&gt;&gt;&gt;&gt; (4 samples, 0.29%)</title><rect x="24.2316%" y="853" width="0.2859%" height="15" fill="rgb(221,5,38)" fg:x="339" fg:w="4"/><text x="24.4816%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.29%)</title><rect x="24.2316%" y="837" width="0.2859%" height="15" fill="rgb(247,18,42)" fg:x="339" fg:w="4"/><text x="24.4816%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt;&gt;&gt; (17 samples, 1.22%)</title><rect x="24.5175%" y="853" width="1.2152%" height="15" fill="rgb(241,131,45)" fg:x="343" fg:w="17"/><text x="24.7675%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.22%)</title><rect x="24.5175%" y="837" width="1.2152%" height="15" fill="rgb(249,31,29)" fg:x="343" fg:w="17"/><text x="24.7675%" y="847.50"></text></g><g><title>_mi_memcpy_aligned (3 samples, 0.21%)</title><rect x="46.1758%" y="709" width="0.2144%" height="15" fill="rgb(225,111,53)" fg:x="646" fg:w="3"/><text x="46.4258%" y="719.50"></text></g><g><title>_mi_memcpy (3 samples, 0.21%)</title><rect x="46.1758%" y="693" width="0.2144%" height="15" fill="rgb(238,160,17)" fg:x="646" fg:w="3"/><text x="46.4258%" y="703.50"></text></g><g><title>memcpy (3 samples, 0.21%)</title><rect x="46.1758%" y="677" width="0.2144%" height="15" fill="rgb(214,148,48)" fg:x="646" fg:w="3"/><text x="46.4258%" y="687.50"></text></g><g><title>[libc.so.6] (3 samples, 0.21%)</title><rect x="46.1758%" y="661" width="0.2144%" height="15" fill="rgb(232,36,49)" fg:x="646" fg:w="3"/><text x="46.4258%" y="671.50"></text></g><g><title>_mi_page_retire (6 samples, 0.43%)</title><rect x="46.3903%" y="709" width="0.4289%" height="15" fill="rgb(209,103,24)" fg:x="649" fg:w="6"/><text x="46.6403%" y="719.50"></text></g><g><title>mi_page_queue_of (2 samples, 0.14%)</title><rect x="46.6762%" y="693" width="0.1430%" height="15" fill="rgb(229,88,8)" fg:x="653" fg:w="2"/><text x="46.9262%" y="703.50"></text></g><g><title>mi_bin (2 samples, 0.14%)</title><rect x="46.6762%" y="677" width="0.1430%" height="15" fill="rgb(213,181,19)" fg:x="653" fg:w="2"/><text x="46.9262%" y="687.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.07%)</title><rect x="47.1051%" y="693" width="0.0715%" height="15" fill="rgb(254,191,54)" fg:x="659" fg:w="1"/><text x="47.3551%" y="703.50"></text></g><g><title>mi_slice_first (1 samples, 0.07%)</title><rect x="47.1051%" y="677" width="0.0715%" height="15" fill="rgb(241,83,37)" fg:x="659" fg:w="1"/><text x="47.3551%" y="687.50"></text></g><g><title>_mi_usable_size (6 samples, 0.43%)</title><rect x="46.8192%" y="709" width="0.4289%" height="15" fill="rgb(233,36,39)" fg:x="655" fg:w="6"/><text x="47.0692%" y="719.50"></text></g><g><title>mi_page_usable_size_of (1 samples, 0.07%)</title><rect x="47.1766%" y="693" width="0.0715%" height="15" fill="rgb(226,3,54)" fg:x="660" fg:w="1"/><text x="47.4266%" y="703.50"></text></g><g><title>mi_page_usable_block_size (1 samples, 0.07%)</title><rect x="47.1766%" y="677" width="0.0715%" height="15" fill="rgb(245,192,40)" fg:x="660" fg:w="1"/><text x="47.4266%" y="687.50"></text></g><g><title>mi_page_block_size (1 samples, 0.07%)</title><rect x="47.1766%" y="661" width="0.0715%" height="15" fill="rgb(238,167,29)" fg:x="660" fg:w="1"/><text x="47.4266%" y="671.50"></text></g><g><title>mi_block_set_next (1 samples, 0.07%)</title><rect x="47.2480%" y="693" width="0.0715%" height="15" fill="rgb(232,182,51)" fg:x="661" fg:w="1"/><text x="47.4980%" y="703.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.07%)</title><rect x="47.2480%" y="677" width="0.0715%" height="15" fill="rgb(231,60,39)" fg:x="661" fg:w="1"/><text x="47.4980%" y="687.50"></text></g><g><title>mi_free (2 samples, 0.14%)</title><rect x="47.2480%" y="709" width="0.1430%" height="15" fill="rgb(208,69,12)" fg:x="661" fg:w="2"/><text x="47.4980%" y="719.50"></text></g><g><title>mi_checked_ptr_segment (1 samples, 0.07%)</title><rect x="47.3195%" y="693" width="0.0715%" height="15" fill="rgb(235,93,37)" fg:x="662" fg:w="1"/><text x="47.5695%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (23 samples, 1.64%)</title><rect x="45.8184%" y="773" width="1.6440%" height="15" fill="rgb(213,116,39)" fg:x="641" fg:w="23"/><text x="46.0684%" y="783.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 1.64%)</title><rect x="45.8184%" y="757" width="1.6440%" height="15" fill="rgb(222,207,29)" fg:x="641" fg:w="23"/><text x="46.0684%" y="767.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 1.64%)</title><rect x="45.8184%" y="741" width="1.6440%" height="15" fill="rgb(206,96,30)" fg:x="641" fg:w="23"/><text x="46.0684%" y="751.50"></text></g><g><title>_mi_heap_realloc_zero (23 samples, 1.64%)</title><rect x="45.8184%" y="725" width="1.6440%" height="15" fill="rgb(218,138,4)" fg:x="641" fg:w="23"/><text x="46.0684%" y="735.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.07%)</title><rect x="47.3910%" y="709" width="0.0715%" height="15" fill="rgb(250,191,14)" fg:x="663" fg:w="1"/><text x="47.6410%" y="719.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.07%)</title><rect x="47.3910%" y="693" width="0.0715%" height="15" fill="rgb(239,60,40)" fg:x="663" fg:w="1"/><text x="47.6410%" y="703.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.07%)</title><rect x="47.3910%" y="677" width="0.0715%" height="15" fill="rgb(206,27,48)" fg:x="663" fg:w="1"/><text x="47.6410%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 2.29%)</title><rect x="45.6040%" y="789" width="2.2873%" height="15" fill="rgb(225,35,8)" fg:x="638" fg:w="32"/><text x="45.8540%" y="799.50">a..</text></g><g><title>_mi_malloc_generic (6 samples, 0.43%)</title><rect x="47.4625%" y="773" width="0.4289%" height="15" fill="rgb(250,213,24)" fg:x="664" fg:w="6"/><text x="47.7125%" y="783.50"></text></g><g><title>mi_find_page (6 samples, 0.43%)</title><rect x="47.4625%" y="757" width="0.4289%" height="15" fill="rgb(247,123,22)" fg:x="664" fg:w="6"/><text x="47.7125%" y="767.50"></text></g><g><title>mi_find_free_page (6 samples, 0.43%)</title><rect x="47.4625%" y="741" width="0.4289%" height="15" fill="rgb(231,138,38)" fg:x="664" fg:w="6"/><text x="47.7125%" y="751.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.43%)</title><rect x="47.4625%" y="725" width="0.4289%" height="15" fill="rgb(231,145,46)" fg:x="664" fg:w="6"/><text x="47.7125%" y="735.50"></text></g><g><title>mi_page_fresh (6 samples, 0.43%)</title><rect x="47.4625%" y="709" width="0.4289%" height="15" fill="rgb(251,118,11)" fg:x="664" fg:w="6"/><text x="47.7125%" y="719.50"></text></g><g><title>mi_page_fresh_alloc (6 samples, 0.43%)</title><rect x="47.4625%" y="693" width="0.4289%" height="15" fill="rgb(217,147,25)" fg:x="664" fg:w="6"/><text x="47.7125%" y="703.50"></text></g><g><title>mi_page_init (6 samples, 0.43%)</title><rect x="47.4625%" y="677" width="0.4289%" height="15" fill="rgb(247,81,37)" fg:x="664" fg:w="6"/><text x="47.7125%" y="687.50"></text></g><g><title>mi_page_extend_free (6 samples, 0.43%)</title><rect x="47.4625%" y="661" width="0.4289%" height="15" fill="rgb(209,12,38)" fg:x="664" fg:w="6"/><text x="47.7125%" y="671.50"></text></g><g><title>mi_page_extend_free (6 samples, 0.43%)</title><rect x="47.4625%" y="645" width="0.4289%" height="15" fill="rgb(227,1,9)" fg:x="664" fg:w="6"/><text x="47.7125%" y="655.50"></text></g><g><title>mi_page_free_list_extend (6 samples, 0.43%)</title><rect x="47.4625%" y="629" width="0.4289%" height="15" fill="rgb(248,47,43)" fg:x="664" fg:w="6"/><text x="47.7125%" y="639.50"></text></g><g><title>mi_block_set_next (6 samples, 0.43%)</title><rect x="47.4625%" y="613" width="0.4289%" height="15" fill="rgb(221,10,30)" fg:x="664" fg:w="6"/><text x="47.7125%" y="623.50"></text></g><g><title>mi_block_set_nextx (6 samples, 0.43%)</title><rect x="47.4625%" y="597" width="0.4289%" height="15" fill="rgb(210,229,1)" fg:x="664" fg:w="6"/><text x="47.7125%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="47.4625%" y="581" width="0.4289%" height="15" fill="rgb(222,148,37)" fg:x="664" fg:w="6"/><text x="47.7125%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="47.4625%" y="565" width="0.4289%" height="15" fill="rgb(234,67,33)" fg:x="664" fg:w="6"/><text x="47.7125%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="47.4625%" y="549" width="0.4289%" height="15" fill="rgb(247,98,35)" fg:x="664" fg:w="6"/><text x="47.7125%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="47.4625%" y="533" width="0.4289%" height="15" fill="rgb(247,138,52)" fg:x="664" fg:w="6"/><text x="47.7125%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="47.4625%" y="517" width="0.4289%" height="15" fill="rgb(213,79,30)" fg:x="664" fg:w="6"/><text x="47.7125%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (33 samples, 2.36%)</title><rect x="45.6040%" y="821" width="2.3588%" height="15" fill="rgb(246,177,23)" fg:x="638" fg:w="33"/><text x="45.8540%" y="831.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 2.36%)</title><rect x="45.6040%" y="805" width="2.3588%" height="15" fill="rgb(230,62,27)" fg:x="638" fg:w="33"/><text x="45.8540%" y="815.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.07%)</title><rect x="47.8914%" y="789" width="0.0715%" height="15" fill="rgb(216,154,8)" fg:x="670" fg:w="1"/><text x="48.1414%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.07%)</title><rect x="47.8914%" y="773" width="0.0715%" height="15" fill="rgb(244,35,45)" fg:x="670" fg:w="1"/><text x="48.1414%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (41 samples, 2.93%)</title><rect x="45.1751%" y="837" width="2.9307%" height="15" fill="rgb(251,115,12)" fg:x="632" fg:w="41"/><text x="45.4251%" y="847.50">al..</text></g><g><title>core::ptr::write (2 samples, 0.14%)</title><rect x="47.9628%" y="821" width="0.1430%" height="15" fill="rgb(240,54,50)" fg:x="671" fg:w="2"/><text x="48.2128%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.21%)</title><rect x="48.1058%" y="837" width="0.2144%" height="15" fill="rgb(233,84,52)" fg:x="673" fg:w="3"/><text x="48.3558%" y="847.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="48.3202%" y="821" width="0.0715%" height="15" fill="rgb(207,117,47)" fg:x="676" fg:w="1"/><text x="48.5702%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;&gt; (2 samples, 0.14%)</title><rect x="48.3202%" y="837" width="0.1430%" height="15" fill="rgb(249,43,39)" fg:x="676" fg:w="2"/><text x="48.5702%" y="847.50"></text></g><g><title>mi_free (1 samples, 0.07%)</title><rect x="48.3917%" y="821" width="0.0715%" height="15" fill="rgb(209,38,44)" fg:x="677" fg:w="1"/><text x="48.6417%" y="831.50"></text></g><g><title>mi_block_set_next (1 samples, 0.07%)</title><rect x="48.3917%" y="805" width="0.0715%" height="15" fill="rgb(236,212,23)" fg:x="677" fg:w="1"/><text x="48.6417%" y="815.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.07%)</title><rect x="48.3917%" y="789" width="0.0715%" height="15" fill="rgb(242,79,21)" fg:x="677" fg:w="1"/><text x="48.6417%" y="799.50"></text></g><g><title>_mi_page_retire (4 samples, 0.29%)</title><rect x="48.4632%" y="709" width="0.2859%" height="15" fill="rgb(211,96,35)" fg:x="678" fg:w="4"/><text x="48.7132%" y="719.50"></text></g><g><title>mi_page_queue_of (3 samples, 0.21%)</title><rect x="48.5347%" y="693" width="0.2144%" height="15" fill="rgb(253,215,40)" fg:x="679" fg:w="3"/><text x="48.7847%" y="703.50"></text></g><g><title>mi_bin (2 samples, 0.14%)</title><rect x="48.6061%" y="677" width="0.1430%" height="15" fill="rgb(211,81,21)" fg:x="680" fg:w="2"/><text x="48.8561%" y="687.50"></text></g><g><title>_mi_wsize_from_size (2 samples, 0.14%)</title><rect x="48.6061%" y="661" width="0.1430%" height="15" fill="rgb(208,190,38)" fg:x="680" fg:w="2"/><text x="48.8561%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;i32&gt;&gt; (6 samples, 0.43%)</title><rect x="48.4632%" y="837" width="0.4289%" height="15" fill="rgb(235,213,38)" fg:x="678" fg:w="6"/><text x="48.7132%" y="847.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.43%)</title><rect x="48.4632%" y="821" width="0.4289%" height="15" fill="rgb(237,122,38)" fg:x="678" fg:w="6"/><text x="48.7132%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;i32,alloc::alloc::Global&gt;&gt; (6 samples, 0.43%)</title><rect x="48.4632%" y="805" width="0.4289%" height="15" fill="rgb(244,218,35)" fg:x="678" fg:w="6"/><text x="48.7132%" y="815.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.43%)</title><rect x="48.4632%" y="789" width="0.4289%" height="15" fill="rgb(240,68,47)" fg:x="678" fg:w="6"/><text x="48.7132%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (6 samples, 0.43%)</title><rect x="48.4632%" y="773" width="0.4289%" height="15" fill="rgb(210,16,53)" fg:x="678" fg:w="6"/><text x="48.7132%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.43%)</title><rect x="48.4632%" y="757" width="0.4289%" height="15" fill="rgb(235,124,12)" fg:x="678" fg:w="6"/><text x="48.7132%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.43%)</title><rect x="48.4632%" y="741" width="0.4289%" height="15" fill="rgb(224,169,11)" fg:x="678" fg:w="6"/><text x="48.7132%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.43%)</title><rect x="48.4632%" y="725" width="0.4289%" height="15" fill="rgb(250,166,2)" fg:x="678" fg:w="6"/><text x="48.7132%" y="735.50"></text></g><g><title>mi_free (2 samples, 0.14%)</title><rect x="48.7491%" y="709" width="0.1430%" height="15" fill="rgb(242,216,29)" fg:x="682" fg:w="2"/><text x="48.9991%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (2 samples, 0.14%)</title><rect x="48.8921%" y="837" width="0.1430%" height="15" fill="rgb(230,116,27)" fg:x="684" fg:w="2"/><text x="49.1421%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt;&gt; (184 samples, 13.15%)</title><rect x="49.0350%" y="837" width="13.1523%" height="15" fill="rgb(228,99,48)" fg:x="686" fg:w="184"/><text x="49.2850%" y="847.50">core::ptr::drop_in_p..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (184 samples, 13.15%)</title><rect x="49.0350%" y="821" width="13.1523%" height="15" fill="rgb(253,11,6)" fg:x="686" fg:w="184"/><text x="49.2850%" y="831.50">&lt;std::sync::rwlock::..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (184 samples, 13.15%)</title><rect x="49.0350%" y="805" width="13.1523%" height="15" fill="rgb(247,143,39)" fg:x="686" fg:w="184"/><text x="49.2850%" y="815.50">std::sys::unix::lock..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (5 samples, 0.36%)</title><rect x="62.1873%" y="805" width="0.3574%" height="15" fill="rgb(236,97,10)" fg:x="870" fg:w="5"/><text x="62.4373%" y="815.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (5 samples, 0.36%)</title><rect x="62.1873%" y="789" width="0.3574%" height="15" fill="rgb(233,208,19)" fg:x="870" fg:w="5"/><text x="62.4373%" y="799.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (5 samples, 0.36%)</title><rect x="62.1873%" y="773" width="0.3574%" height="15" fill="rgb(216,164,2)" fg:x="870" fg:w="5"/><text x="62.4373%" y="783.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (5 samples, 0.36%)</title><rect x="62.1873%" y="757" width="0.3574%" height="15" fill="rgb(220,129,5)" fg:x="870" fg:w="5"/><text x="62.4373%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 0.36%)</title><rect x="62.1873%" y="741" width="0.3574%" height="15" fill="rgb(242,17,10)" fg:x="870" fg:w="5"/><text x="62.4373%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 0.36%)</title><rect x="62.1873%" y="725" width="0.3574%" height="15" fill="rgb(242,107,0)" fg:x="870" fg:w="5"/><text x="62.4373%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (5 samples, 0.36%)</title><rect x="62.1873%" y="709" width="0.3574%" height="15" fill="rgb(251,28,31)" fg:x="870" fg:w="5"/><text x="62.4373%" y="719.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 0.36%)</title><rect x="62.1873%" y="693" width="0.3574%" height="15" fill="rgb(233,223,10)" fg:x="870" fg:w="5"/><text x="62.4373%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 0.36%)</title><rect x="62.1873%" y="677" width="0.3574%" height="15" fill="rgb(215,21,27)" fg:x="870" fg:w="5"/><text x="62.4373%" y="687.50"></text></g><g><title>syscall (5 samples, 0.36%)</title><rect x="62.1873%" y="661" width="0.3574%" height="15" fill="rgb(232,23,21)" fg:x="870" fg:w="5"/><text x="62.4373%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="62.1873%" y="645" width="0.3574%" height="15" fill="rgb(244,5,23)" fg:x="870" fg:w="5"/><text x="62.4373%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="62.1873%" y="629" width="0.3574%" height="15" fill="rgb(226,81,46)" fg:x="870" fg:w="5"/><text x="62.4373%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="62.1873%" y="613" width="0.3574%" height="15" fill="rgb(247,70,30)" fg:x="870" fg:w="5"/><text x="62.4373%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="62.1873%" y="597" width="0.3574%" height="15" fill="rgb(212,68,19)" fg:x="870" fg:w="5"/><text x="62.4373%" y="607.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.07%)</title><rect x="62.5447%" y="805" width="0.0715%" height="15" fill="rgb(240,187,13)" fg:x="875" fg:w="1"/><text x="62.7947%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.07%)</title><rect x="62.5447%" y="789" width="0.0715%" height="15" fill="rgb(223,113,26)" fg:x="875" fg:w="1"/><text x="62.7947%" y="799.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get_mut (7 samples, 0.50%)</title><rect x="62.1873%" y="837" width="0.5004%" height="15" fill="rgb(206,192,2)" fg:x="870" fg:w="7"/><text x="62.4373%" y="847.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (7 samples, 0.50%)</title><rect x="62.1873%" y="821" width="0.5004%" height="15" fill="rgb(241,108,4)" fg:x="870" fg:w="7"/><text x="62.4373%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.07%)</title><rect x="62.6162%" y="805" width="0.0715%" height="15" fill="rgb(247,173,49)" fg:x="876" fg:w="1"/><text x="62.8662%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.07%)</title><rect x="62.6162%" y="789" width="0.0715%" height="15" fill="rgb(224,114,35)" fg:x="876" fg:w="1"/><text x="62.8662%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.07%)</title><rect x="62.6162%" y="773" width="0.0715%" height="15" fill="rgb(245,159,27)" fg:x="876" fg:w="1"/><text x="62.8662%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.07%)</title><rect x="62.6162%" y="757" width="0.0715%" height="15" fill="rgb(245,172,44)" fg:x="876" fg:w="1"/><text x="62.8662%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.07%)</title><rect x="62.6162%" y="741" width="0.0715%" height="15" fill="rgb(236,23,11)" fg:x="876" fg:w="1"/><text x="62.8662%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.07%)</title><rect x="62.6162%" y="725" width="0.0715%" height="15" fill="rgb(205,117,38)" fg:x="876" fg:w="1"/><text x="62.8662%" y="735.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.07%)</title><rect x="62.6162%" y="709" width="0.0715%" height="15" fill="rgb(237,72,25)" fg:x="876" fg:w="1"/><text x="62.8662%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="62.6162%" y="693" width="0.0715%" height="15" fill="rgb(244,70,9)" fg:x="876" fg:w="1"/><text x="62.8662%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.07%)</title><rect x="62.6162%" y="677" width="0.0715%" height="15" fill="rgb(217,125,39)" fg:x="876" fg:w="1"/><text x="62.8662%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.07%)</title><rect x="62.6162%" y="661" width="0.0715%" height="15" fill="rgb(235,36,10)" fg:x="876" fg:w="1"/><text x="62.8662%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.07%)</title><rect x="62.6162%" y="645" width="0.0715%" height="15" fill="rgb(251,123,47)" fg:x="876" fg:w="1"/><text x="62.8662%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.07%)</title><rect x="62.6162%" y="629" width="0.0715%" height="15" fill="rgb(221,13,13)" fg:x="876" fg:w="1"/><text x="62.8662%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="62.6162%" y="613" width="0.0715%" height="15" fill="rgb(238,131,9)" fg:x="876" fg:w="1"/><text x="62.8662%" y="623.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_array (1 samples, 0.07%)</title><rect x="64.1172%" y="821" width="0.0715%" height="15" fill="rgb(211,50,8)" fg:x="897" fg:w="1"/><text x="64.3672%" y="831.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.07%)</title><rect x="64.1172%" y="805" width="0.0715%" height="15" fill="rgb(245,182,24)" fg:x="897" fg:w="1"/><text x="64.3672%" y="815.50"></text></g><g><title>protobuf::text_format::print::fmt (1 samples, 0.07%)</title><rect x="64.1172%" y="789" width="0.0715%" height="15" fill="rgb(242,14,37)" fg:x="897" fg:w="1"/><text x="64.3672%" y="799.50"></text></g><g><title>protobuf::text_format::print::print_to_string_internal (1 samples, 0.07%)</title><rect x="64.1172%" y="773" width="0.0715%" height="15" fill="rgb(246,228,12)" fg:x="897" fg:w="1"/><text x="64.3672%" y="783.50"></text></g><g><title>protobuf::text_format::print::print_to_internal (1 samples, 0.07%)</title><rect x="64.1172%" y="757" width="0.0715%" height="15" fill="rgb(213,55,15)" fg:x="897" fg:w="1"/><text x="64.3672%" y="767.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::descriptor_dyn (1 samples, 0.07%)</title><rect x="64.1172%" y="741" width="0.0715%" height="15" fill="rgb(209,9,3)" fg:x="897" fg:w="1"/><text x="64.3672%" y="751.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor (1 samples, 0.07%)</title><rect x="64.1172%" y="725" width="0.0715%" height="15" fill="rgb(230,59,30)" fg:x="897" fg:w="1"/><text x="64.3672%" y="735.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.07%)</title><rect x="64.1172%" y="709" width="0.0715%" height="15" fill="rgb(209,121,21)" fg:x="897" fg:w="1"/><text x="64.3672%" y="719.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.07%)</title><rect x="64.1172%" y="693" width="0.0715%" height="15" fill="rgb(220,109,13)" fg:x="897" fg:w="1"/><text x="64.3672%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.07%)</title><rect x="64.1172%" y="677" width="0.0715%" height="15" fill="rgb(232,18,1)" fg:x="897" fg:w="1"/><text x="64.3672%" y="687.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.07%)</title><rect x="64.1172%" y="661" width="0.0715%" height="15" fill="rgb(215,41,42)" fg:x="897" fg:w="1"/><text x="64.3672%" y="671.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.07%)</title><rect x="64.1172%" y="645" width="0.0715%" height="15" fill="rgb(224,123,36)" fg:x="897" fg:w="1"/><text x="64.3672%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.07%)</title><rect x="64.1172%" y="629" width="0.0715%" height="15" fill="rgb(240,125,3)" fg:x="897" fg:w="1"/><text x="64.3672%" y="639.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="613" width="0.0715%" height="15" fill="rgb(205,98,50)" fg:x="897" fg:w="1"/><text x="64.3672%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="597" width="0.0715%" height="15" fill="rgb(205,185,37)" fg:x="897" fg:w="1"/><text x="64.3672%" y="607.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="581" width="0.0715%" height="15" fill="rgb(238,207,15)" fg:x="897" fg:w="1"/><text x="64.3672%" y="591.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 0.07%)</title><rect x="64.1172%" y="565" width="0.0715%" height="15" fill="rgb(213,199,42)" fg:x="897" fg:w="1"/><text x="64.3672%" y="575.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.07%)</title><rect x="64.1172%" y="549" width="0.0715%" height="15" fill="rgb(235,201,11)" fg:x="897" fg:w="1"/><text x="64.3672%" y="559.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.07%)</title><rect x="64.1172%" y="533" width="0.0715%" height="15" fill="rgb(207,46,11)" fg:x="897" fg:w="1"/><text x="64.3672%" y="543.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.07%)</title><rect x="64.1172%" y="517" width="0.0715%" height="15" fill="rgb(241,35,35)" fg:x="897" fg:w="1"/><text x="64.3672%" y="527.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.07%)</title><rect x="64.1172%" y="501" width="0.0715%" height="15" fill="rgb(243,32,47)" fg:x="897" fg:w="1"/><text x="64.3672%" y="511.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.07%)</title><rect x="64.1172%" y="485" width="0.0715%" height="15" fill="rgb(247,202,23)" fg:x="897" fg:w="1"/><text x="64.3672%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.07%)</title><rect x="64.1172%" y="469" width="0.0715%" height="15" fill="rgb(219,102,11)" fg:x="897" fg:w="1"/><text x="64.3672%" y="479.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="453" width="0.0715%" height="15" fill="rgb(243,110,44)" fg:x="897" fg:w="1"/><text x="64.3672%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="437" width="0.0715%" height="15" fill="rgb(222,74,54)" fg:x="897" fg:w="1"/><text x="64.3672%" y="447.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="421" width="0.0715%" height="15" fill="rgb(216,99,12)" fg:x="897" fg:w="1"/><text x="64.3672%" y="431.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.07%)</title><rect x="64.1172%" y="405" width="0.0715%" height="15" fill="rgb(226,22,26)" fg:x="897" fg:w="1"/><text x="64.3672%" y="415.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.07%)</title><rect x="64.1172%" y="389" width="0.0715%" height="15" fill="rgb(217,163,10)" fg:x="897" fg:w="1"/><text x="64.3672%" y="399.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.07%)</title><rect x="64.1172%" y="373" width="0.0715%" height="15" fill="rgb(213,25,53)" fg:x="897" fg:w="1"/><text x="64.3672%" y="383.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.07%)</title><rect x="64.1172%" y="357" width="0.0715%" height="15" fill="rgb(252,105,26)" fg:x="897" fg:w="1"/><text x="64.3672%" y="367.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.07%)</title><rect x="64.1172%" y="341" width="0.0715%" height="15" fill="rgb(220,39,43)" fg:x="897" fg:w="1"/><text x="64.3672%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.07%)</title><rect x="64.1172%" y="325" width="0.0715%" height="15" fill="rgb(229,68,48)" fg:x="897" fg:w="1"/><text x="64.3672%" y="335.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="309" width="0.0715%" height="15" fill="rgb(252,8,32)" fg:x="897" fg:w="1"/><text x="64.3672%" y="319.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="293" width="0.0715%" height="15" fill="rgb(223,20,43)" fg:x="897" fg:w="1"/><text x="64.3672%" y="303.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.07%)</title><rect x="64.1172%" y="277" width="0.0715%" height="15" fill="rgb(229,81,49)" fg:x="897" fg:w="1"/><text x="64.3672%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.07%)</title><rect x="64.1172%" y="261" width="0.0715%" height="15" fill="rgb(236,28,36)" fg:x="897" fg:w="1"/><text x="64.3672%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="64.1172%" y="245" width="0.0715%" height="15" fill="rgb(249,185,26)" fg:x="897" fg:w="1"/><text x="64.3672%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="64.1172%" y="229" width="0.0715%" height="15" fill="rgb(249,174,33)" fg:x="897" fg:w="1"/><text x="64.3672%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.07%)</title><rect x="64.1172%" y="213" width="0.0715%" height="15" fill="rgb(233,201,37)" fg:x="897" fg:w="1"/><text x="64.3672%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.07%)</title><rect x="64.1172%" y="197" width="0.0715%" height="15" fill="rgb(221,78,26)" fg:x="897" fg:w="1"/><text x="64.3672%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.07%)</title><rect x="64.1172%" y="181" width="0.0715%" height="15" fill="rgb(250,127,30)" fg:x="897" fg:w="1"/><text x="64.3672%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.07%)</title><rect x="64.1172%" y="165" width="0.0715%" height="15" fill="rgb(230,49,44)" fg:x="897" fg:w="1"/><text x="64.3672%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="149" width="0.0715%" height="15" fill="rgb(229,67,23)" fg:x="897" fg:w="1"/><text x="64.3672%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="133" width="0.0715%" height="15" fill="rgb(249,83,47)" fg:x="897" fg:w="1"/><text x="64.3672%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="117" width="0.0715%" height="15" fill="rgb(215,43,3)" fg:x="897" fg:w="1"/><text x="64.3672%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="101" width="0.0715%" height="15" fill="rgb(238,154,13)" fg:x="897" fg:w="1"/><text x="64.3672%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="85" width="0.0715%" height="15" fill="rgb(219,56,2)" fg:x="897" fg:w="1"/><text x="64.3672%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="69" width="0.0715%" height="15" fill="rgb(233,0,4)" fg:x="897" fg:w="1"/><text x="64.3672%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="53" width="0.0715%" height="15" fill="rgb(235,30,7)" fg:x="897" fg:w="1"/><text x="64.3672%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="64.1172%" y="37" width="0.0715%" height="15" fill="rgb(250,79,13)" fg:x="897" fg:w="1"/><text x="64.3672%" y="47.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (2 samples, 0.14%)</title><rect x="64.9035%" y="741" width="0.1430%" height="15" fill="rgb(211,146,34)" fg:x="908" fg:w="2"/><text x="65.1535%" y="751.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (9 samples, 0.64%)</title><rect x="64.5461%" y="805" width="0.6433%" height="15" fill="rgb(228,22,38)" fg:x="903" fg:w="9"/><text x="64.7961%" y="815.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (4 samples, 0.29%)</title><rect x="64.9035%" y="789" width="0.2859%" height="15" fill="rgb(235,168,5)" fg:x="908" fg:w="4"/><text x="65.1535%" y="799.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (4 samples, 0.29%)</title><rect x="64.9035%" y="773" width="0.2859%" height="15" fill="rgb(221,155,16)" fg:x="908" fg:w="4"/><text x="65.1535%" y="783.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 0.29%)</title><rect x="64.9035%" y="757" width="0.2859%" height="15" fill="rgb(215,215,53)" fg:x="908" fg:w="4"/><text x="65.1535%" y="767.50"></text></g><g><title>bitter::LittleEndianReader::refill (2 samples, 0.14%)</title><rect x="65.0465%" y="741" width="0.1430%" height="15" fill="rgb(223,4,10)" fg:x="910" fg:w="2"/><text x="65.2965%" y="751.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::consume (1 samples, 0.07%)</title><rect x="65.1894%" y="773" width="0.0715%" height="15" fill="rgb(234,103,6)" fg:x="912" fg:w="1"/><text x="65.4394%" y="783.50"></text></g><g><title>bitter::LittleEndianReader::consume_ (1 samples, 0.07%)</title><rect x="65.1894%" y="757" width="0.0715%" height="15" fill="rgb(227,97,0)" fg:x="912" fg:w="1"/><text x="65.4394%" y="767.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::peek (2 samples, 0.14%)</title><rect x="65.2609%" y="773" width="0.1430%" height="15" fill="rgb(234,150,53)" fg:x="913" fg:w="2"/><text x="65.5109%" y="783.50"></text></g><g><title>bitter::LittleEndianReader::peek_ (2 samples, 0.14%)</title><rect x="65.2609%" y="757" width="0.1430%" height="15" fill="rgb(228,201,54)" fg:x="913" fg:w="2"/><text x="65.5109%" y="767.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (18 samples, 1.29%)</title><rect x="64.1887%" y="821" width="1.2866%" height="15" fill="rgb(222,22,37)" fg:x="898" fg:w="18"/><text x="64.4387%" y="831.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (4 samples, 0.29%)</title><rect x="65.1894%" y="805" width="0.2859%" height="15" fill="rgb(237,53,32)" fg:x="912" fg:w="4"/><text x="65.4394%" y="815.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 0.29%)</title><rect x="65.1894%" y="789" width="0.2859%" height="15" fill="rgb(233,25,53)" fg:x="912" fg:w="4"/><text x="65.4394%" y="799.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.07%)</title><rect x="65.4039%" y="773" width="0.0715%" height="15" fill="rgb(210,40,34)" fg:x="915" fg:w="1"/><text x="65.6539%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.07%)</title><rect x="65.4753%" y="805" width="0.0715%" height="15" fill="rgb(241,220,44)" fg:x="916" fg:w="1"/><text x="65.7253%" y="815.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.07%)</title><rect x="65.4753%" y="789" width="0.0715%" height="15" fill="rgb(235,28,35)" fg:x="916" fg:w="1"/><text x="65.7253%" y="799.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_int (2 samples, 0.14%)</title><rect x="65.4753%" y="821" width="0.1430%" height="15" fill="rgb(210,56,17)" fg:x="916" fg:w="2"/><text x="65.7253%" y="831.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_sbit_long (1 samples, 0.07%)</title><rect x="65.5468%" y="805" width="0.0715%" height="15" fill="rgb(224,130,29)" fg:x="917" fg:w="1"/><text x="65.7968%" y="815.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.07%)</title><rect x="65.5468%" y="789" width="0.0715%" height="15" fill="rgb(235,212,8)" fg:x="917" fg:w="1"/><text x="65.7968%" y="799.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.07%)</title><rect x="65.5468%" y="773" width="0.0715%" height="15" fill="rgb(223,33,50)" fg:x="917" fg:w="1"/><text x="65.7968%" y="783.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (2 samples, 0.14%)</title><rect x="65.7613%" y="757" width="0.1430%" height="15" fill="rgb(219,149,13)" fg:x="920" fg:w="2"/><text x="66.0113%" y="767.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.14%)</title><rect x="65.7613%" y="741" width="0.1430%" height="15" fill="rgb(250,156,29)" fg:x="920" fg:w="2"/><text x="66.0113%" y="751.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (47 samples, 3.36%)</title><rect x="62.6876%" y="837" width="3.3595%" height="15" fill="rgb(216,193,19)" fg:x="877" fg:w="47"/><text x="62.9376%" y="847.50">dem..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec (6 samples, 0.43%)</title><rect x="65.6183%" y="821" width="0.4289%" height="15" fill="rgb(216,135,14)" fg:x="918" fg:w="6"/><text x="65.8683%" y="831.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (6 samples, 0.43%)</title><rect x="65.6183%" y="805" width="0.4289%" height="15" fill="rgb(241,47,5)" fg:x="918" fg:w="6"/><text x="65.8683%" y="815.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (4 samples, 0.29%)</title><rect x="65.7613%" y="789" width="0.2859%" height="15" fill="rgb(233,42,35)" fg:x="920" fg:w="4"/><text x="66.0113%" y="799.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_bit_coord (4 samples, 0.29%)</title><rect x="65.7613%" y="773" width="0.2859%" height="15" fill="rgb(231,13,6)" fg:x="920" fg:w="4"/><text x="66.0113%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (2 samples, 0.14%)</title><rect x="65.9042%" y="757" width="0.1430%" height="15" fill="rgb(207,181,40)" fg:x="922" fg:w="2"/><text x="66.1542%" y="767.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.14%)</title><rect x="65.9042%" y="741" width="0.1430%" height="15" fill="rgb(254,173,49)" fg:x="922" fg:w="2"/><text x="66.1542%" y="751.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.07%)</title><rect x="65.9757%" y="725" width="0.0715%" height="15" fill="rgb(221,1,38)" fg:x="923" fg:w="1"/><text x="66.2257%" y="735.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.07%)</title><rect x="66.9764%" y="773" width="0.0715%" height="15" fill="rgb(206,124,46)" fg:x="937" fg:w="1"/><text x="67.2264%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (10 samples, 0.71%)</title><rect x="66.4046%" y="821" width="0.7148%" height="15" fill="rgb(249,21,11)" fg:x="929" fg:w="10"/><text x="66.6546%" y="831.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (10 samples, 0.71%)</title><rect x="66.4046%" y="805" width="0.7148%" height="15" fill="rgb(222,201,40)" fg:x="929" fg:w="10"/><text x="66.6546%" y="815.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (10 samples, 0.71%)</title><rect x="66.4046%" y="789" width="0.7148%" height="15" fill="rgb(235,61,29)" fg:x="929" fg:w="10"/><text x="66.6546%" y="799.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.07%)</title><rect x="67.0479%" y="773" width="0.0715%" height="15" fill="rgb(219,207,3)" fg:x="938" fg:w="1"/><text x="67.2979%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_inx (24 samples, 1.72%)</title><rect x="66.0472%" y="837" width="1.7155%" height="15" fill="rgb(222,56,46)" fg:x="924" fg:w="24"/><text x="66.2972%" y="847.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (9 samples, 0.64%)</title><rect x="67.1194%" y="821" width="0.6433%" height="15" fill="rgb(239,76,54)" fg:x="939" fg:w="9"/><text x="67.3694%" y="831.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (9 samples, 0.64%)</title><rect x="67.1194%" y="805" width="0.6433%" height="15" fill="rgb(231,124,27)" fg:x="939" fg:w="9"/><text x="67.3694%" y="815.50"></text></g><g><title>demoparser::parsing::variants::create_default_from_pdata (5 samples, 0.36%)</title><rect x="67.7627%" y="837" width="0.3574%" height="15" fill="rgb(249,195,6)" fg:x="948" fg:w="5"/><text x="68.0127%" y="847.50"></text></g><g><title>alloc::vec::from_elem (5 samples, 0.36%)</title><rect x="67.7627%" y="821" width="0.3574%" height="15" fill="rgb(237,174,47)" fg:x="948" fg:w="5"/><text x="68.0127%" y="831.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 0.36%)</title><rect x="67.7627%" y="805" width="0.3574%" height="15" fill="rgb(206,201,31)" fg:x="948" fg:w="5"/><text x="68.0127%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.36%)</title><rect x="67.7627%" y="789" width="0.3574%" height="15" fill="rgb(231,57,52)" fg:x="948" fg:w="5"/><text x="68.0127%" y="799.50"></text></g><g><title>core::ptr::write (5 samples, 0.36%)</title><rect x="67.7627%" y="773" width="0.3574%" height="15" fill="rgb(248,177,22)" fg:x="948" fg:w="5"/><text x="68.0127%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="757" width="0.2859%" height="15" fill="rgb(215,211,37)" fg:x="949" fg:w="4"/><text x="68.0842%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="741" width="0.2859%" height="15" fill="rgb(241,128,51)" fg:x="949" fg:w="4"/><text x="68.0842%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="725" width="0.2859%" height="15" fill="rgb(227,165,31)" fg:x="949" fg:w="4"/><text x="68.0842%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="709" width="0.2859%" height="15" fill="rgb(228,167,24)" fg:x="949" fg:w="4"/><text x="68.0842%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="693" width="0.2859%" height="15" fill="rgb(228,143,12)" fg:x="949" fg:w="4"/><text x="68.0842%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="677" width="0.2859%" height="15" fill="rgb(249,149,8)" fg:x="949" fg:w="4"/><text x="68.0842%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="661" width="0.2859%" height="15" fill="rgb(243,35,44)" fg:x="949" fg:w="4"/><text x="68.0842%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="645" width="0.2859%" height="15" fill="rgb(246,89,9)" fg:x="949" fg:w="4"/><text x="68.0842%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="629" width="0.2859%" height="15" fill="rgb(233,213,13)" fg:x="949" fg:w="4"/><text x="68.0842%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="613" width="0.2859%" height="15" fill="rgb(233,141,41)" fg:x="949" fg:w="4"/><text x="68.0842%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="67.8342%" y="597" width="0.2859%" height="15" fill="rgb(239,167,4)" fg:x="949" fg:w="4"/><text x="68.0842%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="68.0486%" y="581" width="0.0715%" height="15" fill="rgb(209,217,16)" fg:x="952" fg:w="1"/><text x="68.2986%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.07%)</title><rect x="68.1201%" y="789" width="0.0715%" height="15" fill="rgb(219,88,35)" fg:x="953" fg:w="1"/><text x="68.3701%" y="799.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (1 samples, 0.07%)</title><rect x="68.1201%" y="773" width="0.0715%" height="15" fill="rgb(220,193,23)" fg:x="953" fg:w="1"/><text x="68.3701%" y="783.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.07%)</title><rect x="68.1201%" y="757" width="0.0715%" height="15" fill="rgb(230,90,52)" fg:x="953" fg:w="1"/><text x="68.3701%" y="767.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (1 samples, 0.07%)</title><rect x="68.1201%" y="741" width="0.0715%" height="15" fill="rgb(252,106,19)" fg:x="953" fg:w="1"/><text x="68.3701%" y="751.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.07%)</title><rect x="68.1201%" y="725" width="0.0715%" height="15" fill="rgb(206,74,20)" fg:x="953" fg:w="1"/><text x="68.3701%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.07%)</title><rect x="68.1201%" y="709" width="0.0715%" height="15" fill="rgb(230,138,44)" fg:x="953" fg:w="1"/><text x="68.3701%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.14%)</title><rect x="68.1201%" y="837" width="0.1430%" height="15" fill="rgb(235,182,43)" fg:x="953" fg:w="2"/><text x="68.3701%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.14%)</title><rect x="68.1201%" y="821" width="0.1430%" height="15" fill="rgb(242,16,51)" fg:x="953" fg:w="2"/><text x="68.3701%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.14%)</title><rect x="68.1201%" y="805" width="0.1430%" height="15" fill="rgb(248,9,4)" fg:x="953" fg:w="2"/><text x="68.3701%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.07%)</title><rect x="68.1916%" y="789" width="0.0715%" height="15" fill="rgb(210,31,22)" fg:x="954" fg:w="1"/><text x="68.4416%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.07%)</title><rect x="68.1916%" y="773" width="0.0715%" height="15" fill="rgb(239,54,39)" fg:x="954" fg:w="1"/><text x="68.4416%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.07%)</title><rect x="68.1916%" y="757" width="0.0715%" height="15" fill="rgb(230,99,41)" fg:x="954" fg:w="1"/><text x="68.4416%" y="767.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.07%)</title><rect x="68.1916%" y="741" width="0.0715%" height="15" fill="rgb(253,106,12)" fg:x="954" fg:w="1"/><text x="68.4416%" y="751.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (16 samples, 1.14%)</title><rect x="68.2630%" y="821" width="1.1437%" height="15" fill="rgb(213,46,41)" fg:x="955" fg:w="16"/><text x="68.5130%" y="831.50"></text></g><g><title>std::sync::poison::Flag::borrow (16 samples, 1.14%)</title><rect x="68.2630%" y="805" width="1.1437%" height="15" fill="rgb(215,133,35)" fg:x="955" fg:w="16"/><text x="68.5130%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (37 samples, 2.64%)</title><rect x="73.1951%" y="805" width="2.6447%" height="15" fill="rgb(213,28,5)" fg:x="1024" fg:w="37"/><text x="73.4451%" y="815.50">st..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_read (21 samples, 1.50%)</title><rect x="74.3388%" y="789" width="1.5011%" height="15" fill="rgb(215,77,49)" fg:x="1040" fg:w="21"/><text x="74.5888%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_until (21 samples, 1.50%)</title><rect x="74.3388%" y="773" width="1.5011%" height="15" fill="rgb(248,100,22)" fg:x="1040" fg:w="21"/><text x="74.5888%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_read::{{closure}} (21 samples, 1.50%)</title><rect x="74.3388%" y="757" width="1.5011%" height="15" fill="rgb(208,67,9)" fg:x="1040" fg:w="21"/><text x="74.5888%" y="767.50"></text></g><g><title>demoparser::parsing::entities::parse_ent_props (825 samples, 58.97%)</title><rect x="25.7327%" y="853" width="58.9707%" height="15" fill="rgb(219,133,21)" fg:x="360" fg:w="825"/><text x="25.9827%" y="863.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (230 samples, 16.44%)</title><rect x="68.2630%" y="837" width="16.4403%" height="15" fill="rgb(246,46,29)" fg:x="955" fg:w="230"/><text x="68.5130%" y="847.50">std::sync::rwlock::RwLock..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (214 samples, 15.30%)</title><rect x="69.4067%" y="821" width="15.2966%" height="15" fill="rgb(246,185,52)" fg:x="971" fg:w="214"/><text x="69.6567%" y="831.50">std::sys::unix::locks::..</text></g><g><title>std::sys::unix::locks::futex_rwlock::is_read_lockable (124 samples, 8.86%)</title><rect x="75.8399%" y="805" width="8.8635%" height="15" fill="rgb(252,136,11)" fg:x="1061" fg:w="124"/><text x="76.0899%" y="815.50">std::sys::uni..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_u_bit_var (2 samples, 0.14%)</title><rect x="84.7034%" y="853" width="0.1430%" height="15" fill="rgb(219,138,53)" fg:x="1185" fg:w="2"/><text x="84.9534%" y="863.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.07%)</title><rect x="84.7748%" y="837" width="0.0715%" height="15" fill="rgb(211,51,23)" fg:x="1186" fg:w="1"/><text x="85.0248%" y="847.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.07%)</title><rect x="84.7748%" y="821" width="0.0715%" height="15" fill="rgb(247,221,28)" fg:x="1186" fg:w="1"/><text x="85.0248%" y="831.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (1,113 samples, 79.56%)</title><rect x="5.3610%" y="869" width="79.5568%" height="15" fill="rgb(251,222,45)" fg:x="75" fg:w="1113"/><text x="5.6110%" y="879.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities</text></g><g><title>mi_free (1 samples, 0.07%)</title><rect x="84.8463%" y="853" width="0.0715%" height="15" fill="rgb(217,162,53)" fg:x="1187" fg:w="1"/><text x="85.0963%" y="863.50"></text></g><g><title>_mi_thread_id (1 samples, 0.07%)</title><rect x="84.8463%" y="837" width="0.0715%" height="15" fill="rgb(229,93,14)" fg:x="1187" fg:w="1"/><text x="85.0963%" y="847.50"></text></g><g><title>mi_tls_slot (1 samples, 0.07%)</title><rect x="84.8463%" y="821" width="0.0715%" height="15" fill="rgb(209,67,49)" fg:x="1187" fg:w="1"/><text x="85.0963%" y="831.50"></text></g><g><title>_mi_arena_alloc_aligned (6 samples, 0.43%)</title><rect x="84.9893%" y="517" width="0.4289%" height="15" fill="rgb(213,87,29)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="527.50"></text></g><g><title>_mi_os_alloc_aligned (6 samples, 0.43%)</title><rect x="84.9893%" y="501" width="0.4289%" height="15" fill="rgb(205,151,52)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="511.50"></text></g><g><title>mi_os_mem_alloc_aligned (6 samples, 0.43%)</title><rect x="84.9893%" y="485" width="0.4289%" height="15" fill="rgb(253,215,39)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="495.50"></text></g><g><title>mi_os_mem_alloc (6 samples, 0.43%)</title><rect x="84.9893%" y="469" width="0.4289%" height="15" fill="rgb(221,220,41)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="479.50"></text></g><g><title>mi_unix_mmap (6 samples, 0.43%)</title><rect x="84.9893%" y="453" width="0.4289%" height="15" fill="rgb(218,133,21)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="463.50"></text></g><g><title>mi_unix_mmapx (6 samples, 0.43%)</title><rect x="84.9893%" y="437" width="0.4289%" height="15" fill="rgb(221,193,43)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="447.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.43%)</title><rect x="84.9893%" y="421" width="0.4289%" height="15" fill="rgb(240,128,52)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="431.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.43%)</title><rect x="84.9893%" y="405" width="0.4289%" height="15" fill="rgb(253,114,12)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="389" width="0.4289%" height="15" fill="rgb(215,223,47)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="373" width="0.4289%" height="15" fill="rgb(248,225,23)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="357" width="0.4289%" height="15" fill="rgb(250,108,0)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="341" width="0.4289%" height="15" fill="rgb(228,208,7)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="325" width="0.4289%" height="15" fill="rgb(244,45,10)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="309" width="0.4289%" height="15" fill="rgb(207,125,25)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="293" width="0.4289%" height="15" fill="rgb(210,195,18)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="277" width="0.4289%" height="15" fill="rgb(249,80,12)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="261" width="0.4289%" height="15" fill="rgb(221,65,9)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="84.9893%" y="245" width="0.4289%" height="15" fill="rgb(235,49,36)" fg:x="1189" fg:w="6"/><text x="85.2393%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="85.0608%" y="229" width="0.3574%" height="15" fill="rgb(225,32,20)" fg:x="1190" fg:w="5"/><text x="85.3108%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="85.0608%" y="213" width="0.3574%" height="15" fill="rgb(215,141,46)" fg:x="1190" fg:w="5"/><text x="85.3108%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="85.0608%" y="197" width="0.3574%" height="15" fill="rgb(250,160,47)" fg:x="1190" fg:w="5"/><text x="85.3108%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="85.0608%" y="181" width="0.3574%" height="15" fill="rgb(216,222,40)" fg:x="1190" fg:w="5"/><text x="85.3108%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="85.0608%" y="165" width="0.3574%" height="15" fill="rgb(234,217,39)" fg:x="1190" fg:w="5"/><text x="85.3108%" y="175.50"></text></g><g><title>mi_segment_reclaim_or_alloc (19 samples, 1.36%)</title><rect x="84.9893%" y="565" width="1.3581%" height="15" fill="rgb(207,178,40)" fg:x="1189" fg:w="19"/><text x="85.2393%" y="575.50"></text></g><g><title>mi_segment_alloc (19 samples, 1.36%)</title><rect x="84.9893%" y="549" width="1.3581%" height="15" fill="rgb(221,136,13)" fg:x="1189" fg:w="19"/><text x="85.2393%" y="559.50"></text></g><g><title>mi_segment_init (19 samples, 1.36%)</title><rect x="84.9893%" y="533" width="1.3581%" height="15" fill="rgb(249,199,10)" fg:x="1189" fg:w="19"/><text x="85.2393%" y="543.50"></text></g><g><title>memset (13 samples, 0.93%)</title><rect x="85.4182%" y="517" width="0.9292%" height="15" fill="rgb(249,222,13)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="527.50"></text></g><g><title>[libc.so.6] (13 samples, 0.93%)</title><rect x="85.4182%" y="501" width="0.9292%" height="15" fill="rgb(244,185,38)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="511.50"></text></g><g><title>[unknown] (13 samples, 0.93%)</title><rect x="85.4182%" y="485" width="0.9292%" height="15" fill="rgb(236,202,9)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="495.50"></text></g><g><title>[unknown] (13 samples, 0.93%)</title><rect x="85.4182%" y="469" width="0.9292%" height="15" fill="rgb(250,229,37)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="479.50"></text></g><g><title>[unknown] (13 samples, 0.93%)</title><rect x="85.4182%" y="453" width="0.9292%" height="15" fill="rgb(206,174,23)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="463.50"></text></g><g><title>[unknown] (13 samples, 0.93%)</title><rect x="85.4182%" y="437" width="0.9292%" height="15" fill="rgb(211,33,43)" fg:x="1195" fg:w="13"/><text x="85.6682%" y="447.50"></text></g><g><title>[unknown] (12 samples, 0.86%)</title><rect x="85.4896%" y="421" width="0.8578%" height="15" fill="rgb(245,58,50)" fg:x="1196" fg:w="12"/><text x="85.7396%" y="431.50"></text></g><g><title>[unknown] (12 samples, 0.86%)</title><rect x="85.4896%" y="405" width="0.8578%" height="15" fill="rgb(244,68,36)" fg:x="1196" fg:w="12"/><text x="85.7396%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.86%)</title><rect x="85.4896%" y="389" width="0.8578%" height="15" fill="rgb(232,229,15)" fg:x="1196" fg:w="12"/><text x="85.7396%" y="399.50"></text></g><g><title>[unknown] (11 samples, 0.79%)</title><rect x="85.5611%" y="373" width="0.7863%" height="15" fill="rgb(254,30,23)" fg:x="1197" fg:w="11"/><text x="85.8111%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="85.9185%" y="357" width="0.4289%" height="15" fill="rgb(235,160,14)" fg:x="1202" fg:w="6"/><text x="86.1685%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="85.9185%" y="341" width="0.4289%" height="15" fill="rgb(212,155,44)" fg:x="1202" fg:w="6"/><text x="86.1685%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="85.9185%" y="325" width="0.4289%" height="15" fill="rgb(226,2,50)" fg:x="1202" fg:w="6"/><text x="86.1685%" y="335.50"></text></g><g><title>mi_find_page (21 samples, 1.50%)</title><rect x="84.9178%" y="661" width="1.5011%" height="15" fill="rgb(234,177,6)" fg:x="1188" fg:w="21"/><text x="85.1678%" y="671.50"></text></g><g><title>mi_find_free_page (21 samples, 1.50%)</title><rect x="84.9178%" y="645" width="1.5011%" height="15" fill="rgb(217,24,9)" fg:x="1188" fg:w="21"/><text x="85.1678%" y="655.50"></text></g><g><title>mi_page_queue_find_free_ex (20 samples, 1.43%)</title><rect x="84.9893%" y="629" width="1.4296%" height="15" fill="rgb(220,13,46)" fg:x="1189" fg:w="20"/><text x="85.2393%" y="639.50"></text></g><g><title>mi_page_fresh (20 samples, 1.43%)</title><rect x="84.9893%" y="613" width="1.4296%" height="15" fill="rgb(239,221,27)" fg:x="1189" fg:w="20"/><text x="85.2393%" y="623.50"></text></g><g><title>mi_page_fresh_alloc (20 samples, 1.43%)</title><rect x="84.9893%" y="597" width="1.4296%" height="15" fill="rgb(222,198,25)" fg:x="1189" fg:w="20"/><text x="85.2393%" y="607.50"></text></g><g><title>mi_segments_page_alloc (20 samples, 1.43%)</title><rect x="84.9893%" y="581" width="1.4296%" height="15" fill="rgb(211,99,13)" fg:x="1189" fg:w="20"/><text x="85.2393%" y="591.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.07%)</title><rect x="86.3474%" y="565" width="0.0715%" height="15" fill="rgb(232,111,31)" fg:x="1208" fg:w="1"/><text x="86.5974%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (45 samples, 3.22%)</title><rect x="84.9178%" y="757" width="3.2166%" height="15" fill="rgb(245,82,37)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="767.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (45 samples, 3.22%)</title><rect x="84.9178%" y="741" width="3.2166%" height="15" fill="rgb(227,149,46)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="751.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (45 samples, 3.22%)</title><rect x="84.9178%" y="725" width="3.2166%" height="15" fill="rgb(218,36,50)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="735.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (45 samples, 3.22%)</title><rect x="84.9178%" y="709" width="3.2166%" height="15" fill="rgb(226,80,48)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="719.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 3.22%)</title><rect x="84.9178%" y="693" width="3.2166%" height="15" fill="rgb(238,224,15)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="703.50">all..</text></g><g><title>_mi_malloc_generic (45 samples, 3.22%)</title><rect x="84.9178%" y="677" width="3.2166%" height="15" fill="rgb(241,136,10)" fg:x="1188" fg:w="45"/><text x="85.1678%" y="687.50">_mi..</text></g><g><title>mi_thread_init (24 samples, 1.72%)</title><rect x="86.4189%" y="661" width="1.7155%" height="15" fill="rgb(208,32,45)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="671.50"></text></g><g><title>_mi_heap_init (24 samples, 1.72%)</title><rect x="86.4189%" y="645" width="1.7155%" height="15" fill="rgb(207,135,9)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="655.50"></text></g><g><title>_mi_memcpy_aligned (24 samples, 1.72%)</title><rect x="86.4189%" y="629" width="1.7155%" height="15" fill="rgb(206,86,44)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="639.50"></text></g><g><title>_mi_memcpy (24 samples, 1.72%)</title><rect x="86.4189%" y="613" width="1.7155%" height="15" fill="rgb(245,177,15)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="623.50"></text></g><g><title>memcpy (24 samples, 1.72%)</title><rect x="86.4189%" y="597" width="1.7155%" height="15" fill="rgb(206,64,50)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="607.50"></text></g><g><title>[unknown] (24 samples, 1.72%)</title><rect x="86.4189%" y="581" width="1.7155%" height="15" fill="rgb(234,36,40)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="591.50"></text></g><g><title>[unknown] (24 samples, 1.72%)</title><rect x="86.4189%" y="565" width="1.7155%" height="15" fill="rgb(213,64,8)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="575.50"></text></g><g><title>[unknown] (24 samples, 1.72%)</title><rect x="86.4189%" y="549" width="1.7155%" height="15" fill="rgb(210,75,36)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="559.50"></text></g><g><title>[unknown] (24 samples, 1.72%)</title><rect x="86.4189%" y="533" width="1.7155%" height="15" fill="rgb(229,88,21)" fg:x="1209" fg:w="24"/><text x="86.6689%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="87.6340%" y="517" width="0.5004%" height="15" fill="rgb(252,204,47)" fg:x="1226" fg:w="7"/><text x="87.8840%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="87.6340%" y="501" width="0.5004%" height="15" fill="rgb(208,77,27)" fg:x="1226" fg:w="7"/><text x="87.8840%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="88.0629%" y="485" width="0.0715%" height="15" fill="rgb(221,76,26)" fg:x="1232" fg:w="1"/><text x="88.3129%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="88.0629%" y="469" width="0.0715%" height="15" fill="rgb(225,139,18)" fg:x="1232" fg:w="1"/><text x="88.3129%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="88.0629%" y="453" width="0.0715%" height="15" fill="rgb(230,137,11)" fg:x="1232" fg:w="1"/><text x="88.3129%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="88.0629%" y="437" width="0.0715%" height="15" fill="rgb(212,28,1)" fg:x="1232" fg:w="1"/><text x="88.3129%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="88.0629%" y="421" width="0.0715%" height="15" fill="rgb(248,164,17)" fg:x="1232" fg:w="1"/><text x="88.3129%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (51 samples, 3.65%)</title><rect x="84.9178%" y="821" width="3.6455%" height="15" fill="rgb(222,171,42)" fg:x="1188" fg:w="51"/><text x="85.1678%" y="831.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (51 samples, 3.65%)</title><rect x="84.9178%" y="805" width="3.6455%" height="15" fill="rgb(243,84,45)" fg:x="1188" fg:w="51"/><text x="85.1678%" y="815.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (51 samples, 3.65%)</title><rect x="84.9178%" y="789" width="3.6455%" height="15" fill="rgb(252,49,23)" fg:x="1188" fg:w="51"/><text x="85.1678%" y="799.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (51 samples, 3.65%)</title><rect x="84.9178%" y="773" width="3.6455%" height="15" fill="rgb(215,19,7)" fg:x="1188" fg:w="51"/><text x="85.1678%" y="783.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (6 samples, 0.43%)</title><rect x="88.1344%" y="757" width="0.4289%" height="15" fill="rgb(238,81,41)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="767.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (6 samples, 0.43%)</title><rect x="88.1344%" y="741" width="0.4289%" height="15" fill="rgb(210,199,37)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="751.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (6 samples, 0.43%)</title><rect x="88.1344%" y="725" width="0.4289%" height="15" fill="rgb(244,192,49)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.43%)</title><rect x="88.1344%" y="709" width="0.4289%" height="15" fill="rgb(226,211,11)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.43%)</title><rect x="88.1344%" y="693" width="0.4289%" height="15" fill="rgb(236,162,54)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="703.50"></text></g><g><title>[libc.so.6] (6 samples, 0.43%)</title><rect x="88.1344%" y="677" width="0.4289%" height="15" fill="rgb(220,229,9)" fg:x="1233" fg:w="6"/><text x="88.3844%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.07%)</title><rect x="88.5633%" y="789" width="0.0715%" height="15" fill="rgb(250,87,22)" fg:x="1239" fg:w="1"/><text x="88.8133%" y="799.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (2 samples, 0.14%)</title><rect x="88.5633%" y="821" width="0.1430%" height="15" fill="rgb(239,43,17)" fg:x="1239" fg:w="2"/><text x="88.8133%" y="831.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (2 samples, 0.14%)</title><rect x="88.5633%" y="805" width="0.1430%" height="15" fill="rgb(231,177,25)" fg:x="1239" fg:w="2"/><text x="88.8133%" y="815.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.07%)</title><rect x="88.6347%" y="789" width="0.0715%" height="15" fill="rgb(219,179,1)" fg:x="1240" fg:w="1"/><text x="88.8847%" y="799.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.07%)</title><rect x="88.6347%" y="773" width="0.0715%" height="15" fill="rgb(238,219,53)" fg:x="1240" fg:w="1"/><text x="88.8847%" y="783.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::remaining_in_buf (1 samples, 0.07%)</title><rect x="88.6347%" y="757" width="0.0715%" height="15" fill="rgb(232,167,36)" fg:x="1240" fg:w="1"/><text x="88.8847%" y="767.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.07%)</title><rect x="88.7062%" y="789" width="0.0715%" height="15" fill="rgb(244,19,51)" fg:x="1241" fg:w="1"/><text x="88.9562%" y="799.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::remaining_in_buf (1 samples, 0.07%)</title><rect x="88.7062%" y="773" width="0.0715%" height="15" fill="rgb(224,6,22)" fg:x="1241" fg:w="1"/><text x="88.9562%" y="783.50"></text></g><g><title>&lt;F as threadpool::FnBox&gt;::call_box (1,184 samples, 84.63%)</title><rect x="4.7177%" y="917" width="84.6319%" height="15" fill="rgb(224,145,5)" fg:x="66" fg:w="1184"/><text x="4.9677%" y="927.50">&lt;F as threadpool::FnBox&gt;::call_box</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler::{{closure}} (1,182 samples, 84.49%)</title><rect x="4.8606%" y="901" width="84.4889%" height="15" fill="rgb(234,130,49)" fg:x="68" fg:w="1182"/><text x="5.1106%" y="911.50">demoparser::parsing::parser::Parser::msg_handler::{{closure}}</text></g><g><title>demoparser::parsing::entities::parse_packet_entities (1,182 samples, 84.49%)</title><rect x="4.8606%" y="885" width="84.4889%" height="15" fill="rgb(254,6,2)" fg:x="68" fg:w="1182"/><text x="5.1106%" y="895.50">demoparser::parsing::entities::parse_packet_entities</text></g><g><title>protobuf::message::Message::parse_from_bytes (62 samples, 4.43%)</title><rect x="84.9178%" y="869" width="4.4317%" height="15" fill="rgb(208,96,46)" fg:x="1188" fg:w="62"/><text x="85.1678%" y="879.50">proto..</text></g><g><title>protobuf::message::Message::parse_from (62 samples, 4.43%)</title><rect x="84.9178%" y="853" width="4.4317%" height="15" fill="rgb(239,3,39)" fg:x="1188" fg:w="62"/><text x="85.1678%" y="863.50">proto..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (62 samples, 4.43%)</title><rect x="84.9178%" y="837" width="4.4317%" height="15" fill="rgb(233,210,1)" fg:x="1188" fg:w="62"/><text x="85.1678%" y="847.50">&lt;csgo..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (9 samples, 0.64%)</title><rect x="88.7062%" y="821" width="0.6433%" height="15" fill="rgb(244,137,37)" fg:x="1241" fg:w="9"/><text x="88.9562%" y="831.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (9 samples, 0.64%)</title><rect x="88.7062%" y="805" width="0.6433%" height="15" fill="rgb(240,136,2)" fg:x="1241" fg:w="9"/><text x="88.9562%" y="815.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (8 samples, 0.57%)</title><rect x="88.7777%" y="789" width="0.5718%" height="15" fill="rgb(239,18,37)" fg:x="1242" fg:w="8"/><text x="89.0277%" y="799.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (8 samples, 0.57%)</title><rect x="88.7777%" y="773" width="0.5718%" height="15" fill="rgb(218,185,22)" fg:x="1242" fg:w="8"/><text x="89.0277%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.29%)</title><rect x="89.3495%" y="917" width="0.2859%" height="15" fill="rgb(225,218,4)" fg:x="1250" fg:w="4"/><text x="89.5995%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (4 samples, 0.29%)</title><rect x="89.3495%" y="901" width="0.2859%" height="15" fill="rgb(230,182,32)" fg:x="1250" fg:w="4"/><text x="89.5995%" y="911.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.29%)</title><rect x="89.3495%" y="885" width="0.2859%" height="15" fill="rgb(242,56,43)" fg:x="1250" fg:w="4"/><text x="89.5995%" y="895.50"></text></g><g><title>_mi_free_block_mt (3 samples, 0.21%)</title><rect x="89.6355%" y="917" width="0.2144%" height="15" fill="rgb(233,99,24)" fg:x="1254" fg:w="3"/><text x="89.8855%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;std::sync::mpsc::Receiver&lt;alloc::boxed::Box&lt;dyn threadpool::FnBox+core::marker::Send&gt;&gt;&gt;&gt; (6 samples, 0.43%)</title><rect x="89.8499%" y="917" width="0.4289%" height="15" fill="rgb(234,209,42)" fg:x="1257" fg:w="6"/><text x="90.0999%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.43%)</title><rect x="89.8499%" y="901" width="0.4289%" height="15" fill="rgb(227,7,12)" fg:x="1257" fg:w="6"/><text x="90.0999%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (6 samples, 0.43%)</title><rect x="89.8499%" y="885" width="0.4289%" height="15" fill="rgb(245,203,43)" fg:x="1257" fg:w="6"/><text x="90.0999%" y="895.50"></text></g><g><title>syscall (3 samples, 0.21%)</title><rect x="90.0643%" y="869" width="0.2144%" height="15" fill="rgb(238,205,33)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="853" width="0.2144%" height="15" fill="rgb(231,56,7)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="837" width="0.2144%" height="15" fill="rgb(244,186,29)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="821" width="0.2144%" height="15" fill="rgb(234,111,31)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="805" width="0.2144%" height="15" fill="rgb(241,149,10)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="789" width="0.2144%" height="15" fill="rgb(249,206,44)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="773" width="0.2144%" height="15" fill="rgb(251,153,30)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="757" width="0.2144%" height="15" fill="rgb(239,152,38)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="90.0643%" y="741" width="0.2144%" height="15" fill="rgb(249,139,47)" fg:x="1260" fg:w="3"/><text x="90.3143%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="90.2073%" y="725" width="0.0715%" height="15" fill="rgb(244,64,35)" fg:x="1262" fg:w="1"/><text x="90.4573%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (5 samples, 0.36%)</title><rect x="90.2788%" y="853" width="0.3574%" height="15" fill="rgb(216,46,15)" fg:x="1263" fg:w="5"/><text x="90.5288%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_or (5 samples, 0.36%)</title><rect x="90.2788%" y="837" width="0.3574%" height="15" fill="rgb(250,74,19)" fg:x="1263" fg:w="5"/><text x="90.5288%" y="847.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::read (7 samples, 0.50%)</title><rect x="90.2788%" y="869" width="0.5004%" height="15" fill="rgb(249,42,33)" fg:x="1263" fg:w="7"/><text x="90.5288%" y="879.50"></text></g><g><title>std::sync::mpmc::list::Slot&lt;T&gt;::wait_write (2 samples, 0.14%)</title><rect x="90.6362%" y="853" width="0.1430%" height="15" fill="rgb(242,149,17)" fg:x="1268" fg:w="2"/><text x="90.8862%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.14%)</title><rect x="90.6362%" y="837" width="0.1430%" height="15" fill="rgb(244,29,21)" fg:x="1268" fg:w="2"/><text x="90.8862%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.14%)</title><rect x="90.6362%" y="821" width="0.1430%" height="15" fill="rgb(220,130,37)" fg:x="1268" fg:w="2"/><text x="90.8862%" y="831.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (9 samples, 0.64%)</title><rect x="90.2788%" y="917" width="0.6433%" height="15" fill="rgb(211,67,2)" fg:x="1263" fg:w="9"/><text x="90.5288%" y="927.50"></text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv (9 samples, 0.64%)</title><rect x="90.2788%" y="901" width="0.6433%" height="15" fill="rgb(235,68,52)" fg:x="1263" fg:w="9"/><text x="90.5288%" y="911.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (9 samples, 0.64%)</title><rect x="90.2788%" y="885" width="0.6433%" height="15" fill="rgb(246,142,3)" fg:x="1263" fg:w="9"/><text x="90.5288%" y="895.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_recv (2 samples, 0.14%)</title><rect x="90.7791%" y="869" width="0.1430%" height="15" fill="rgb(241,25,7)" fg:x="1270" fg:w="2"/><text x="91.0291%" y="879.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 0.14%)</title><rect x="90.9221%" y="869" width="0.1430%" height="15" fill="rgb(242,119,39)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="879.50"></text></g><g><title>syscall (2 samples, 0.14%)</title><rect x="90.9221%" y="853" width="0.1430%" height="15" fill="rgb(241,98,45)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="837" width="0.1430%" height="15" fill="rgb(254,28,30)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="821" width="0.1430%" height="15" fill="rgb(241,142,54)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="805" width="0.1430%" height="15" fill="rgb(222,85,15)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="789" width="0.1430%" height="15" fill="rgb(210,85,47)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="773" width="0.1430%" height="15" fill="rgb(224,206,25)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="757" width="0.1430%" height="15" fill="rgb(243,201,19)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="741" width="0.1430%" height="15" fill="rgb(236,59,4)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="725" width="0.1430%" height="15" fill="rgb(254,179,45)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="709" width="0.1430%" height="15" fill="rgb(226,14,10)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="693" width="0.1430%" height="15" fill="rgb(244,27,41)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="677" width="0.1430%" height="15" fill="rgb(235,35,32)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="661" width="0.1430%" height="15" fill="rgb(218,68,31)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="645" width="0.1430%" height="15" fill="rgb(207,120,37)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="629" width="0.1430%" height="15" fill="rgb(227,98,0)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="613" width="0.1430%" height="15" fill="rgb(207,7,3)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="597" width="0.1430%" height="15" fill="rgb(206,98,19)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="581" width="0.1430%" height="15" fill="rgb(217,5,26)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="90.9221%" y="565" width="0.1430%" height="15" fill="rgb(235,190,38)" fg:x="1272" fg:w="2"/><text x="91.1721%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.86%)</title><rect x="90.9221%" y="917" width="0.8578%" height="15" fill="rgb(247,86,24)" fg:x="1272" fg:w="12"/><text x="91.1721%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (12 samples, 0.86%)</title><rect x="90.9221%" y="901" width="0.8578%" height="15" fill="rgb(205,101,16)" fg:x="1272" fg:w="12"/><text x="91.1721%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (12 samples, 0.86%)</title><rect x="90.9221%" y="885" width="0.8578%" height="15" fill="rgb(246,168,33)" fg:x="1272" fg:w="12"/><text x="91.1721%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (10 samples, 0.71%)</title><rect x="91.0650%" y="869" width="0.7148%" height="15" fill="rgb(231,114,1)" fg:x="1274" fg:w="10"/><text x="91.3150%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="853" width="0.0715%" height="15" fill="rgb(207,184,53)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="837" width="0.0715%" height="15" fill="rgb(224,95,51)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="821" width="0.0715%" height="15" fill="rgb(212,188,45)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="805" width="0.0715%" height="15" fill="rgb(223,154,38)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="789" width="0.0715%" height="15" fill="rgb(251,22,52)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="773" width="0.0715%" height="15" fill="rgb(229,209,22)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="757" width="0.0715%" height="15" fill="rgb(234,138,34)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="741" width="0.0715%" height="15" fill="rgb(212,95,11)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="725" width="0.0715%" height="15" fill="rgb(240,179,47)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="709" width="0.0715%" height="15" fill="rgb(240,163,11)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="693" width="0.0715%" height="15" fill="rgb(236,37,12)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="677" width="0.0715%" height="15" fill="rgb(232,164,16)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="661" width="0.0715%" height="15" fill="rgb(244,205,15)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="645" width="0.0715%" height="15" fill="rgb(223,117,47)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="629" width="0.0715%" height="15" fill="rgb(244,107,35)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.7084%" y="613" width="0.0715%" height="15" fill="rgb(205,140,8)" fg:x="1283" fg:w="1"/><text x="91.9584%" y="623.50"></text></g><g><title>std::panic::catch_unwind (1,220 samples, 87.21%)</title><rect x="4.6462%" y="1029" width="87.2051%" height="15" fill="rgb(228,84,46)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,220 samples, 87.21%)</title><rect x="4.6462%" y="1013" width="87.2051%" height="15" fill="rgb(254,188,9)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,220 samples, 87.21%)</title><rect x="4.6462%" y="997" width="87.2051%" height="15" fill="rgb(206,112,54)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="1007.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,220 samples, 87.21%)</title><rect x="4.6462%" y="981" width="87.2051%" height="15" fill="rgb(216,84,49)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="991.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,220 samples, 87.21%)</title><rect x="4.6462%" y="965" width="87.2051%" height="15" fill="rgb(214,194,35)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="975.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,220 samples, 87.21%)</title><rect x="4.6462%" y="949" width="87.2051%" height="15" fill="rgb(249,28,3)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="959.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>threadpool::spawn_in_pool::{{closure}} (1,220 samples, 87.21%)</title><rect x="4.6462%" y="933" width="87.2051%" height="15" fill="rgb(222,56,52)" fg:x="65" fg:w="1220"/><text x="4.8962%" y="943.50">threadpool::spawn_in_pool::{{closure}}</text></g><g><title>threadpool::ThreadPoolSharedData::no_work_notify_all (1 samples, 0.07%)</title><rect x="91.7798%" y="917" width="0.0715%" height="15" fill="rgb(245,217,50)" fg:x="1284" fg:w="1"/><text x="92.0298%" y="927.50"></text></g><g><title>threadpool::ThreadPoolSharedData::has_work (1 samples, 0.07%)</title><rect x="91.7798%" y="901" width="0.0715%" height="15" fill="rgb(213,201,24)" fg:x="1284" fg:w="1"/><text x="92.0298%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,221 samples, 87.28%)</title><rect x="4.6462%" y="1093" width="87.2766%" height="15" fill="rgb(248,116,28)" fg:x="65" fg:w="1221"/><text x="4.8962%" y="1103.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,221 samples, 87.28%)</title><rect x="4.6462%" y="1077" width="87.2766%" height="15" fill="rgb(219,72,43)" fg:x="65" fg:w="1221"/><text x="4.8962%" y="1087.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,221 samples, 87.28%)</title><rect x="4.6462%" y="1061" width="87.2766%" height="15" fill="rgb(209,138,14)" fg:x="65" fg:w="1221"/><text x="4.8962%" y="1071.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,221 samples, 87.28%)</title><rect x="4.6462%" y="1045" width="87.2766%" height="15" fill="rgb(222,18,33)" fg:x="65" fg:w="1221"/><text x="4.8962%" y="1055.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.07%)</title><rect x="91.8513%" y="1029" width="0.0715%" height="15" fill="rgb(213,199,7)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="1039.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.07%)</title><rect x="91.8513%" y="1013" width="0.0715%" height="15" fill="rgb(250,110,10)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="1023.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.07%)</title><rect x="91.8513%" y="997" width="0.0715%" height="15" fill="rgb(248,123,6)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="1007.50"></text></g><g><title>tcache_init (1 samples, 0.07%)</title><rect x="91.8513%" y="981" width="0.0715%" height="15" fill="rgb(206,91,31)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="991.50"></text></g><g><title>tcache_init (1 samples, 0.07%)</title><rect x="91.8513%" y="965" width="0.0715%" height="15" fill="rgb(211,154,13)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="975.50"></text></g><g><title>arena_get2 (1 samples, 0.07%)</title><rect x="91.8513%" y="949" width="0.0715%" height="15" fill="rgb(225,148,7)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="959.50"></text></g><g><title>arena_get2 (1 samples, 0.07%)</title><rect x="91.8513%" y="933" width="0.0715%" height="15" fill="rgb(220,160,43)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="943.50"></text></g><g><title>_int_new_arena (1 samples, 0.07%)</title><rect x="91.8513%" y="917" width="0.0715%" height="15" fill="rgb(213,52,39)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="927.50"></text></g><g><title>new_heap (1 samples, 0.07%)</title><rect x="91.8513%" y="901" width="0.0715%" height="15" fill="rgb(243,137,7)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="911.50"></text></g><g><title>alloc_new_heap (1 samples, 0.07%)</title><rect x="91.8513%" y="885" width="0.0715%" height="15" fill="rgb(230,79,13)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="869" width="0.0715%" height="15" fill="rgb(247,105,23)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="853" width="0.0715%" height="15" fill="rgb(223,179,41)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="837" width="0.0715%" height="15" fill="rgb(218,9,34)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="821" width="0.0715%" height="15" fill="rgb(222,106,8)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="805" width="0.0715%" height="15" fill="rgb(211,220,0)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="789" width="0.0715%" height="15" fill="rgb(229,52,16)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="773" width="0.0715%" height="15" fill="rgb(212,155,18)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="757" width="0.0715%" height="15" fill="rgb(242,21,14)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="741" width="0.0715%" height="15" fill="rgb(222,19,48)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="725" width="0.0715%" height="15" fill="rgb(232,45,27)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="709" width="0.0715%" height="15" fill="rgb(249,103,42)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="693" width="0.0715%" height="15" fill="rgb(246,81,33)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="677" width="0.0715%" height="15" fill="rgb(252,33,42)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.8513%" y="661" width="0.0715%" height="15" fill="rgb(209,212,41)" fg:x="1285" fg:w="1"/><text x="92.1013%" y="671.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.14%)</title><rect x="91.9228%" y="1029" width="0.1430%" height="15" fill="rgb(207,154,6)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="1039.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.14%)</title><rect x="91.9228%" y="1013" width="0.1430%" height="15" fill="rgb(223,64,47)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="997" width="0.1430%" height="15" fill="rgb(211,161,38)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="981" width="0.1430%" height="15" fill="rgb(219,138,40)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="965" width="0.1430%" height="15" fill="rgb(241,228,46)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="949" width="0.1430%" height="15" fill="rgb(223,209,38)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="933" width="0.1430%" height="15" fill="rgb(236,164,45)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="917" width="0.1430%" height="15" fill="rgb(231,15,5)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="901" width="0.1430%" height="15" fill="rgb(252,35,15)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.14%)</title><rect x="91.9228%" y="885" width="0.1430%" height="15" fill="rgb(248,181,18)" fg:x="1286" fg:w="2"/><text x="92.1728%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.9943%" y="869" width="0.0715%" height="15" fill="rgb(233,39,42)" fg:x="1287" fg:w="1"/><text x="92.2443%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.9943%" y="853" width="0.0715%" height="15" fill="rgb(238,110,33)" fg:x="1287" fg:w="1"/><text x="92.2443%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.9943%" y="837" width="0.0715%" height="15" fill="rgb(233,195,10)" fg:x="1287" fg:w="1"/><text x="92.2443%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="91.9943%" y="821" width="0.0715%" height="15" fill="rgb(254,105,3)" fg:x="1287" fg:w="1"/><text x="92.2443%" y="831.50"></text></g><g><title>__clone3 (1,228 samples, 87.78%)</title><rect x="4.5747%" y="1141" width="87.7770%" height="15" fill="rgb(221,225,9)" fg:x="64" fg:w="1228"/><text x="4.8247%" y="1151.50">__clone3</text></g><g><title>start_thread (1,227 samples, 87.71%)</title><rect x="4.6462%" y="1125" width="87.7055%" height="15" fill="rgb(224,227,45)" fg:x="65" fg:w="1227"/><text x="4.8962%" y="1135.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,227 samples, 87.71%)</title><rect x="4.6462%" y="1109" width="87.7055%" height="15" fill="rgb(229,198,43)" fg:x="65" fg:w="1227"/><text x="4.8962%" y="1119.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (6 samples, 0.43%)</title><rect x="91.9228%" y="1093" width="0.4289%" height="15" fill="rgb(206,209,35)" fg:x="1286" fg:w="6"/><text x="92.1728%" y="1103.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (6 samples, 0.43%)</title><rect x="91.9228%" y="1077" width="0.4289%" height="15" fill="rgb(245,195,53)" fg:x="1286" fg:w="6"/><text x="92.1728%" y="1087.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (6 samples, 0.43%)</title><rect x="91.9228%" y="1061" width="0.4289%" height="15" fill="rgb(240,92,26)" fg:x="1286" fg:w="6"/><text x="92.1728%" y="1071.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (6 samples, 0.43%)</title><rect x="91.9228%" y="1045" width="0.4289%" height="15" fill="rgb(207,40,23)" fg:x="1286" fg:w="6"/><text x="92.1728%" y="1055.50"></text></g><g><title>__GI___mprotect (4 samples, 0.29%)</title><rect x="92.0658%" y="1029" width="0.2859%" height="15" fill="rgb(223,111,35)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="92.0658%" y="1013" width="0.2859%" height="15" fill="rgb(229,147,28)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="92.0658%" y="997" width="0.2859%" height="15" fill="rgb(211,29,28)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="92.0658%" y="981" width="0.2859%" height="15" fill="rgb(228,72,33)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="92.0658%" y="965" width="0.2859%" height="15" fill="rgb(205,214,31)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.29%)</title><rect x="92.0658%" y="949" width="0.2859%" height="15" fill="rgb(224,111,15)" fg:x="1288" fg:w="4"/><text x="92.3158%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="92.1372%" y="933" width="0.2144%" height="15" fill="rgb(253,21,26)" fg:x="1289" fg:w="3"/><text x="92.3872%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="92.1372%" y="917" width="0.2144%" height="15" fill="rgb(245,139,43)" fg:x="1289" fg:w="3"/><text x="92.3872%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.21%)</title><rect x="92.1372%" y="901" width="0.2144%" height="15" fill="rgb(252,170,7)" fg:x="1289" fg:w="3"/><text x="92.3872%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.2802%" y="885" width="0.0715%" height="15" fill="rgb(231,118,14)" fg:x="1291" fg:w="1"/><text x="92.5302%" y="895.50"></text></g><g><title>_mi_abandoned_collect (1 samples, 0.07%)</title><rect x="92.3517%" y="1013" width="0.0715%" height="15" fill="rgb(238,83,0)" fg:x="1292" fg:w="1"/><text x="92.6017%" y="1023.50"></text></g><g><title>mi_segment_check_free (1 samples, 0.07%)</title><rect x="92.3517%" y="997" width="0.0715%" height="15" fill="rgb(221,39,39)" fg:x="1292" fg:w="1"/><text x="92.6017%" y="1007.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.07%)</title><rect x="92.3517%" y="981" width="0.0715%" height="15" fill="rgb(222,119,46)" fg:x="1292" fg:w="1"/><text x="92.6017%" y="991.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.07%)</title><rect x="92.4232%" y="1013" width="0.0715%" height="15" fill="rgb(222,165,49)" fg:x="1293" fg:w="1"/><text x="92.6732%" y="1023.50"></text></g><g><title>_mi_free_delayed_block (1 samples, 0.07%)</title><rect x="92.4232%" y="997" width="0.0715%" height="15" fill="rgb(219,113,52)" fg:x="1293" fg:w="1"/><text x="92.6732%" y="1007.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.07%)</title><rect x="92.4232%" y="981" width="0.0715%" height="15" fill="rgb(214,7,15)" fg:x="1293" fg:w="1"/><text x="92.6732%" y="991.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.07%)</title><rect x="92.4232%" y="965" width="0.0715%" height="15" fill="rgb(235,32,4)" fg:x="1293" fg:w="1"/><text x="92.6732%" y="975.50"></text></g><g><title>__GI_exit (3 samples, 0.21%)</title><rect x="92.3517%" y="1093" width="0.2144%" height="15" fill="rgb(238,90,54)" fg:x="1292" fg:w="3"/><text x="92.6017%" y="1103.50"></text></g><g><title>__run_exit_handlers (3 samples, 0.21%)</title><rect x="92.3517%" y="1077" width="0.2144%" height="15" fill="rgb(213,208,19)" fg:x="1292" fg:w="3"/><text x="92.6017%" y="1087.50"></text></g><g><title>mi_process_done (3 samples, 0.21%)</title><rect x="92.3517%" y="1061" width="0.2144%" height="15" fill="rgb(233,156,4)" fg:x="1292" fg:w="3"/><text x="92.6017%" y="1071.50"></text></g><g><title>mi_process_done (3 samples, 0.21%)</title><rect x="92.3517%" y="1045" width="0.2144%" height="15" fill="rgb(207,194,5)" fg:x="1292" fg:w="3"/><text x="92.6017%" y="1055.50"></text></g><g><title>mi_heap_collect_ex (3 samples, 0.21%)</title><rect x="92.3517%" y="1029" width="0.2144%" height="15" fill="rgb(206,111,30)" fg:x="1292" fg:w="3"/><text x="92.6017%" y="1039.50"></text></g><g><title>mi_segment_cache_purge (1 samples, 0.07%)</title><rect x="92.4946%" y="1013" width="0.0715%" height="15" fill="rgb(243,70,54)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="1023.50"></text></g><g><title>mi_commit_mask_decommit (1 samples, 0.07%)</title><rect x="92.4946%" y="997" width="0.0715%" height="15" fill="rgb(242,28,8)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="1007.50"></text></g><g><title>_mi_os_decommit (1 samples, 0.07%)</title><rect x="92.4946%" y="981" width="0.0715%" height="15" fill="rgb(219,106,18)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="991.50"></text></g><g><title>mi_os_commitx (1 samples, 0.07%)</title><rect x="92.4946%" y="965" width="0.0715%" height="15" fill="rgb(244,222,10)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="975.50"></text></g><g><title>__GI_madvise (1 samples, 0.07%)</title><rect x="92.4946%" y="949" width="0.0715%" height="15" fill="rgb(236,179,52)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="933" width="0.0715%" height="15" fill="rgb(213,23,39)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="917" width="0.0715%" height="15" fill="rgb(238,48,10)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="901" width="0.0715%" height="15" fill="rgb(251,196,23)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="885" width="0.0715%" height="15" fill="rgb(250,152,24)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="869" width="0.0715%" height="15" fill="rgb(209,150,17)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="853" width="0.0715%" height="15" fill="rgb(234,202,34)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="837" width="0.0715%" height="15" fill="rgb(253,148,53)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="821" width="0.0715%" height="15" fill="rgb(218,129,16)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="805" width="0.0715%" height="15" fill="rgb(216,85,19)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="789" width="0.0715%" height="15" fill="rgb(235,228,7)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.4946%" y="773" width="0.0715%" height="15" fill="rgb(245,175,0)" fg:x="1294" fg:w="1"/><text x="92.7446%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;memmap2::Mmap&gt;&gt; (1 samples, 0.07%)</title><rect x="92.5661%" y="853" width="0.0715%" height="15" fill="rgb(208,168,36)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="92.5661%" y="837" width="0.0715%" height="15" fill="rgb(246,171,24)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.07%)</title><rect x="92.5661%" y="821" width="0.0715%" height="15" fill="rgb(215,142,24)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (1 samples, 0.07%)</title><rect x="92.5661%" y="805" width="0.0715%" height="15" fill="rgb(250,187,7)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (1 samples, 0.07%)</title><rect x="92.5661%" y="789" width="0.0715%" height="15" fill="rgb(228,66,33)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="799.50"></text></g><g><title>__GI___munmap (1 samples, 0.07%)</title><rect x="92.5661%" y="773" width="0.0715%" height="15" fill="rgb(234,215,21)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="757" width="0.0715%" height="15" fill="rgb(222,191,20)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="741" width="0.0715%" height="15" fill="rgb(245,79,54)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="725" width="0.0715%" height="15" fill="rgb(240,10,37)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="709" width="0.0715%" height="15" fill="rgb(214,192,32)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="693" width="0.0715%" height="15" fill="rgb(209,36,54)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="677" width="0.0715%" height="15" fill="rgb(220,10,11)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="661" width="0.0715%" height="15" fill="rgb(221,106,17)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="645" width="0.0715%" height="15" fill="rgb(251,142,44)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="629" width="0.0715%" height="15" fill="rgb(238,13,15)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="613" width="0.0715%" height="15" fill="rgb(208,107,27)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="92.5661%" y="597" width="0.0715%" height="15" fill="rgb(205,136,37)" fg:x="1295" fg:w="1"/><text x="92.8161%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (2 samples, 0.14%)</title><rect x="92.5661%" y="869" width="0.1430%" height="15" fill="rgb(250,205,27)" fg:x="1295" fg:w="2"/><text x="92.8161%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Maps&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="853" width="0.0715%" height="15" fill="rgb(210,80,43)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="837" width="0.0715%" height="15" fill="rgb(247,160,36)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="92.6376%" y="821" width="0.0715%" height="15" fill="rgb(234,13,49)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.07%)</title><rect x="92.6376%" y="805" width="0.0715%" height="15" fill="rgb(234,122,0)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="789" width="0.0715%" height="15" fill="rgb(207,146,38)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="773" width="0.0715%" height="15" fill="rgb(207,177,25)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="757" width="0.0715%" height="15" fill="rgb(211,178,42)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="741" width="0.0715%" height="15" fill="rgb(230,69,54)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="725" width="0.0715%" height="15" fill="rgb(214,135,41)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="92.6376%" y="709" width="0.0715%" height="15" fill="rgb(237,67,25)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.07%)</title><rect x="92.6376%" y="693" width="0.0715%" height="15" fill="rgb(222,189,50)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.07%)</title><rect x="92.6376%" y="677" width="0.0715%" height="15" fill="rgb(245,148,34)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.07%)</title><rect x="92.6376%" y="661" width="0.0715%" height="15" fill="rgb(222,29,6)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="645" width="0.0715%" height="15" fill="rgb(221,189,43)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="629" width="0.0715%" height="15" fill="rgb(207,36,27)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="613" width="0.0715%" height="15" fill="rgb(217,90,24)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="92.6376%" y="597" width="0.0715%" height="15" fill="rgb(224,66,35)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="581" width="0.0715%" height="15" fill="rgb(221,13,50)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="565" width="0.0715%" height="15" fill="rgb(236,68,49)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;demoparser::parsing::variants::PropData&gt;&gt; (1 samples, 0.07%)</title><rect x="92.6376%" y="549" width="0.0715%" height="15" fill="rgb(229,146,28)" fg:x="1296" fg:w="1"/><text x="92.8876%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.50%)</title><rect x="92.9235%" y="853" width="0.5004%" height="15" fill="rgb(225,31,38)" fg:x="1300" fg:w="7"/><text x="93.1735%" y="863.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 0.07%)</title><rect x="93.7098%" y="773" width="0.0715%" height="15" fill="rgb(250,208,3)" fg:x="1311" fg:w="1"/><text x="93.9598%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.07%)</title><rect x="93.7098%" y="757" width="0.0715%" height="15" fill="rgb(246,54,23)" fg:x="1311" fg:w="1"/><text x="93.9598%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="93.7813%" y="757" width="0.0715%" height="15" fill="rgb(243,76,11)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="93.7813%" y="741" width="0.0715%" height="15" fill="rgb(245,21,50)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.07%)</title><rect x="93.7813%" y="725" width="0.0715%" height="15" fill="rgb(228,9,43)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="93.7813%" y="709" width="0.0715%" height="15" fill="rgb(208,100,47)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.07%)</title><rect x="93.7813%" y="693" width="0.0715%" height="15" fill="rgb(232,26,8)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="703.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.07%)</title><rect x="93.7813%" y="677" width="0.0715%" height="15" fill="rgb(216,166,38)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="687.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.07%)</title><rect x="93.7813%" y="661" width="0.0715%" height="15" fill="rgb(251,202,51)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="671.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.07%)</title><rect x="93.7813%" y="645" width="0.0715%" height="15" fill="rgb(254,216,34)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="655.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.07%)</title><rect x="93.7813%" y="629" width="0.0715%" height="15" fill="rgb(251,32,27)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="639.50"></text></g><g><title>_mi_memcpy (1 samples, 0.07%)</title><rect x="93.7813%" y="613" width="0.0715%" height="15" fill="rgb(208,127,28)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="623.50"></text></g><g><title>memcpy (1 samples, 0.07%)</title><rect x="93.7813%" y="597" width="0.0715%" height="15" fill="rgb(224,137,22)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="93.7813%" y="581" width="0.0715%" height="15" fill="rgb(254,70,32)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="565" width="0.0715%" height="15" fill="rgb(229,75,37)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="549" width="0.0715%" height="15" fill="rgb(252,64,23)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="533" width="0.0715%" height="15" fill="rgb(232,162,48)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="517" width="0.0715%" height="15" fill="rgb(246,160,12)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="501" width="0.0715%" height="15" fill="rgb(247,166,0)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="485" width="0.0715%" height="15" fill="rgb(249,219,21)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="469" width="0.0715%" height="15" fill="rgb(205,209,3)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="453" width="0.0715%" height="15" fill="rgb(243,44,1)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="437" width="0.0715%" height="15" fill="rgb(206,159,16)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="421" width="0.0715%" height="15" fill="rgb(244,77,30)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="93.7813%" y="405" width="0.0715%" height="15" fill="rgb(218,69,12)" fg:x="1312" fg:w="1"/><text x="94.0313%" y="415.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (4 samples, 0.29%)</title><rect x="93.7098%" y="837" width="0.2859%" height="15" fill="rgb(212,87,7)" fg:x="1311" fg:w="4"/><text x="93.9598%" y="847.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (4 samples, 0.29%)</title><rect x="93.7098%" y="821" width="0.2859%" height="15" fill="rgb(245,114,25)" fg:x="1311" fg:w="4"/><text x="93.9598%" y="831.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.29%)</title><rect x="93.7098%" y="805" width="0.2859%" height="15" fill="rgb(210,61,42)" fg:x="1311" fg:w="4"/><text x="93.9598%" y="815.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.29%)</title><rect x="93.7098%" y="789" width="0.2859%" height="15" fill="rgb(211,52,33)" fg:x="1311" fg:w="4"/><text x="93.9598%" y="799.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 0.21%)</title><rect x="93.7813%" y="773" width="0.2144%" height="15" fill="rgb(234,58,33)" fg:x="1312" fg:w="3"/><text x="94.0313%" y="783.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.14%)</title><rect x="93.8528%" y="757" width="0.1430%" height="15" fill="rgb(220,115,36)" fg:x="1313" fg:w="2"/><text x="94.1028%" y="767.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.14%)</title><rect x="93.8528%" y="741" width="0.1430%" height="15" fill="rgb(243,153,54)" fg:x="1313" fg:w="2"/><text x="94.1028%" y="751.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.14%)</title><rect x="93.8528%" y="725" width="0.1430%" height="15" fill="rgb(251,47,18)" fg:x="1313" fg:w="2"/><text x="94.1028%" y="735.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.14%)</title><rect x="93.8528%" y="709" width="0.1430%" height="15" fill="rgb(242,102,42)" fg:x="1313" fg:w="2"/><text x="94.1028%" y="719.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.14%)</title><rect x="93.8528%" y="693" width="0.1430%" height="15" fill="rgb(234,31,38)" fg:x="1313" fg:w="2"/><text x="94.1028%" y="703.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 0.07%)</title><rect x="93.9242%" y="677" width="0.0715%" height="15" fill="rgb(221,117,51)" fg:x="1314" fg:w="1"/><text x="94.1742%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 1.43%)</title><rect x="93.9957%" y="821" width="1.4296%" height="15" fill="rgb(212,20,18)" fg:x="1315" fg:w="20"/><text x="94.2457%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 1.22%)</title><rect x="95.4253%" y="805" width="1.2152%" height="15" fill="rgb(245,133,36)" fg:x="1335" fg:w="17"/><text x="95.6753%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dashmap::DashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;u32,demoparser::parsing::variants::VarVec&gt;&gt;&gt;&gt; (16 samples, 1.14%)</title><rect x="96.6405%" y="805" width="1.1437%" height="15" fill="rgb(212,6,19)" fg:x="1352" fg:w="16"/><text x="96.8905%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.14%)</title><rect x="96.6405%" y="789" width="1.1437%" height="15" fill="rgb(218,1,36)" fg:x="1352" fg:w="16"/><text x="96.8905%" y="799.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.07%)</title><rect x="97.9986%" y="693" width="0.0715%" height="15" fill="rgb(246,84,54)" fg:x="1371" fg:w="1"/><text x="98.2486%" y="703.50"></text></g><g><title>_mi_free_delayed_block (1 samples, 0.07%)</title><rect x="97.9986%" y="677" width="0.0715%" height="15" fill="rgb(242,110,6)" fg:x="1371" fg:w="1"/><text x="98.2486%" y="687.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.07%)</title><rect x="97.9986%" y="661" width="0.0715%" height="15" fill="rgb(214,47,5)" fg:x="1371" fg:w="1"/><text x="98.2486%" y="671.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.07%)</title><rect x="97.9986%" y="645" width="0.0715%" height="15" fill="rgb(218,159,25)" fg:x="1371" fg:w="1"/><text x="98.2486%" y="655.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.57%)</title><rect x="97.9986%" y="709" width="0.5718%" height="15" fill="rgb(215,211,28)" fg:x="1371" fg:w="8"/><text x="98.2486%" y="719.50"></text></g><g><title>mi_find_page (7 samples, 0.50%)</title><rect x="98.0701%" y="693" width="0.5004%" height="15" fill="rgb(238,59,32)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="703.50"></text></g><g><title>mi_find_free_page (7 samples, 0.50%)</title><rect x="98.0701%" y="677" width="0.5004%" height="15" fill="rgb(226,82,3)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="687.50"></text></g><g><title>mi_page_queue_find_free_ex (7 samples, 0.50%)</title><rect x="98.0701%" y="661" width="0.5004%" height="15" fill="rgb(240,164,32)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="671.50"></text></g><g><title>mi_page_extend_free (7 samples, 0.50%)</title><rect x="98.0701%" y="645" width="0.5004%" height="15" fill="rgb(232,46,7)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="655.50"></text></g><g><title>mi_page_extend_free (7 samples, 0.50%)</title><rect x="98.0701%" y="629" width="0.5004%" height="15" fill="rgb(229,129,53)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="639.50"></text></g><g><title>mi_page_free_list_extend (7 samples, 0.50%)</title><rect x="98.0701%" y="613" width="0.5004%" height="15" fill="rgb(234,188,29)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="623.50"></text></g><g><title>mi_block_set_next (7 samples, 0.50%)</title><rect x="98.0701%" y="597" width="0.5004%" height="15" fill="rgb(246,141,4)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="607.50"></text></g><g><title>mi_block_set_nextx (7 samples, 0.50%)</title><rect x="98.0701%" y="581" width="0.5004%" height="15" fill="rgb(229,23,39)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="98.0701%" y="565" width="0.5004%" height="15" fill="rgb(206,12,3)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="575.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="98.0701%" y="549" width="0.5004%" height="15" fill="rgb(252,226,20)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="98.0701%" y="533" width="0.5004%" height="15" fill="rgb(216,123,35)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.50%)</title><rect x="98.0701%" y="517" width="0.5004%" height="15" fill="rgb(212,68,40)" fg:x="1372" fg:w="7"/><text x="98.3201%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="98.1415%" y="501" width="0.4289%" height="15" fill="rgb(254,125,32)" fg:x="1373" fg:w="6"/><text x="98.3915%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="98.1415%" y="485" width="0.4289%" height="15" fill="rgb(253,97,22)" fg:x="1373" fg:w="6"/><text x="98.3915%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="98.1415%" y="469" width="0.4289%" height="15" fill="rgb(241,101,14)" fg:x="1373" fg:w="6"/><text x="98.3915%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.43%)</title><rect x="98.1415%" y="453" width="0.4289%" height="15" fill="rgb(238,103,29)" fg:x="1373" fg:w="6"/><text x="98.3915%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.86%)</title><rect x="97.7841%" y="789" width="0.8578%" height="15" fill="rgb(233,195,47)" fg:x="1368" fg:w="12"/><text x="98.0341%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.86%)</title><rect x="97.7841%" y="773" width="0.8578%" height="15" fill="rgb(246,218,30)" fg:x="1368" fg:w="12"/><text x="98.0341%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.86%)</title><rect x="97.7841%" y="757" width="0.8578%" height="15" fill="rgb(219,145,47)" fg:x="1368" fg:w="12"/><text x="98.0341%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.86%)</title><rect x="97.7841%" y="741" width="0.8578%" height="15" fill="rgb(243,12,26)" fg:x="1368" fg:w="12"/><text x="98.0341%" y="751.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.86%)</title><rect x="97.7841%" y="725" width="0.8578%" height="15" fill="rgb(214,87,16)" fg:x="1368" fg:w="12"/><text x="98.0341%" y="735.50"></text></g><g><title>mi_malloc (1 samples, 0.07%)</title><rect x="98.5704%" y="709" width="0.0715%" height="15" fill="rgb(208,99,42)" fg:x="1379" fg:w="1"/><text x="98.8204%" y="719.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.07%)</title><rect x="98.5704%" y="693" width="0.0715%" height="15" fill="rgb(253,99,2)" fg:x="1379" fg:w="1"/><text x="98.8204%" y="703.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.07%)</title><rect x="98.5704%" y="677" width="0.0715%" height="15" fill="rgb(220,168,23)" fg:x="1379" fg:w="1"/><text x="98.8204%" y="687.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.07%)</title><rect x="98.5704%" y="661" width="0.0715%" height="15" fill="rgb(242,38,24)" fg:x="1379" fg:w="1"/><text x="98.8204%" y="671.50"></text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (47 samples, 3.36%)</title><rect x="95.4253%" y="821" width="3.3595%" height="15" fill="rgb(225,182,9)" fg:x="1335" fg:w="47"/><text x="95.6753%" y="831.50">dem..</text></g><g><title>threadpool::ThreadPool::execute (14 samples, 1.00%)</title><rect x="97.7841%" y="805" width="1.0007%" height="15" fill="rgb(243,178,37)" fg:x="1368" fg:w="14"/><text x="98.0341%" y="815.50"></text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (2 samples, 0.14%)</title><rect x="98.6419%" y="789" width="0.1430%" height="15" fill="rgb(232,139,19)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="799.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (2 samples, 0.14%)</title><rect x="98.6419%" y="773" width="0.1430%" height="15" fill="rgb(225,201,24)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="783.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (2 samples, 0.14%)</title><rect x="98.6419%" y="757" width="0.1430%" height="15" fill="rgb(221,47,46)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="767.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::write (2 samples, 0.14%)</title><rect x="98.6419%" y="741" width="0.1430%" height="15" fill="rgb(249,23,13)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="751.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (2 samples, 0.14%)</title><rect x="98.6419%" y="725" width="0.1430%" height="15" fill="rgb(219,9,5)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.14%)</title><rect x="98.6419%" y="709" width="0.1430%" height="15" fill="rgb(254,171,16)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.14%)</title><rect x="98.6419%" y="693" width="0.1430%" height="15" fill="rgb(230,171,20)" fg:x="1380" fg:w="2"/><text x="98.8919%" y="703.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Parser&gt;::read_i32 (2 samples, 0.14%)</title><rect x="98.7848%" y="821" width="0.1430%" height="15" fill="rgb(210,71,41)" fg:x="1382" fg:w="2"/><text x="99.0348%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.14%)</title><rect x="98.7848%" y="805" width="0.1430%" height="15" fill="rgb(206,173,20)" fg:x="1382" fg:w="2"/><text x="99.0348%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.14%)</title><rect x="98.7848%" y="789" width="0.1430%" height="15" fill="rgb(233,88,34)" fg:x="1382" fg:w="2"/><text x="99.0348%" y="799.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (85 samples, 6.08%)</title><rect x="93.4239%" y="853" width="6.0758%" height="15" fill="rgb(223,209,46)" fg:x="1307" fg:w="85"/><text x="93.6739%" y="863.50">demopars..</text></g><g><title>demoparser::parsing::parser::Parser::parse_packet (77 samples, 5.50%)</title><rect x="93.9957%" y="837" width="5.5039%" height="15" fill="rgb(250,43,18)" fg:x="1315" fg:w="77"/><text x="94.2457%" y="847.50">demopar..</text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Parser&gt;::read_varint (8 samples, 0.57%)</title><rect x="98.9278%" y="821" width="0.5718%" height="15" fill="rgb(208,13,10)" fg:x="1384" fg:w="8"/><text x="99.1778%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="805" width="0.0715%" height="15" fill="rgb(212,200,36)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="789" width="0.0715%" height="15" fill="rgb(225,90,30)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="773" width="0.0715%" height="15" fill="rgb(236,182,39)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="757" width="0.0715%" height="15" fill="rgb(212,144,35)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="741" width="0.0715%" height="15" fill="rgb(228,63,44)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.4282%" y="725" width="0.0715%" height="15" fill="rgb(228,109,6)" fg:x="1391" fg:w="1"/><text x="99.6782%" y="735.50"></text></g><g><title>__libc_start_main_impl (101 samples, 7.22%)</title><rect x="92.3517%" y="1125" width="7.2194%" height="15" fill="rgb(238,117,24)" fg:x="1292" fg:w="101"/><text x="92.6017%" y="1135.50">__libc_sta..</text></g><g><title>__libc_start_call_main (101 samples, 7.22%)</title><rect x="92.3517%" y="1109" width="7.2194%" height="15" fill="rgb(242,26,26)" fg:x="1292" fg:w="101"/><text x="92.6017%" y="1119.50">__libc_sta..</text></g><g><title>main (98 samples, 7.01%)</title><rect x="92.5661%" y="1093" width="7.0050%" height="15" fill="rgb(221,92,48)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (98 samples, 7.01%)</title><rect x="92.5661%" y="1077" width="7.0050%" height="15" fill="rgb(209,209,32)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1087.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (98 samples, 7.01%)</title><rect x="92.5661%" y="1061" width="7.0050%" height="15" fill="rgb(221,70,22)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1071.50">std::pani..</text></g><g><title>std::panicking::try (98 samples, 7.01%)</title><rect x="92.5661%" y="1045" width="7.0050%" height="15" fill="rgb(248,145,5)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1055.50">std::pani..</text></g><g><title>std::panicking::try::do_call (98 samples, 7.01%)</title><rect x="92.5661%" y="1029" width="7.0050%" height="15" fill="rgb(226,116,26)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1039.50">std::pani..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (98 samples, 7.01%)</title><rect x="92.5661%" y="1013" width="7.0050%" height="15" fill="rgb(244,5,17)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1023.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (98 samples, 7.01%)</title><rect x="92.5661%" y="997" width="7.0050%" height="15" fill="rgb(252,159,33)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="1007.50">std::pani..</text></g><g><title>std::panicking::try (98 samples, 7.01%)</title><rect x="92.5661%" y="981" width="7.0050%" height="15" fill="rgb(206,71,0)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="991.50">std::pani..</text></g><g><title>std::panicking::try::do_call (98 samples, 7.01%)</title><rect x="92.5661%" y="965" width="7.0050%" height="15" fill="rgb(233,118,54)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="975.50">std::pani..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (98 samples, 7.01%)</title><rect x="92.5661%" y="949" width="7.0050%" height="15" fill="rgb(234,83,48)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="959.50">core::ops..</text></g><g><title>std::rt::lang_start::{{closure}} (98 samples, 7.01%)</title><rect x="92.5661%" y="933" width="7.0050%" height="15" fill="rgb(228,3,54)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="943.50">std::rt::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (98 samples, 7.01%)</title><rect x="92.5661%" y="917" width="7.0050%" height="15" fill="rgb(226,155,13)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="927.50">std::sys_..</text></g><g><title>core::ops::function::FnOnce::call_once (98 samples, 7.01%)</title><rect x="92.5661%" y="901" width="7.0050%" height="15" fill="rgb(241,28,37)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="911.50">core::ops..</text></g><g><title>demoparser::main (98 samples, 7.01%)</title><rect x="92.5661%" y="885" width="7.0050%" height="15" fill="rgb(233,93,10)" fg:x="1295" fg:w="98"/><text x="92.8161%" y="895.50">demoparse..</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (96 samples, 6.86%)</title><rect x="92.7091%" y="869" width="6.8620%" height="15" fill="rgb(225,113,19)" fg:x="1297" fg:w="96"/><text x="92.9591%" y="879.50">demoparse..</text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Parser&gt;::read_frame (1 samples, 0.07%)</title><rect x="99.4996%" y="853" width="0.0715%" height="15" fill="rgb(241,2,18)" fg:x="1392" fg:w="1"/><text x="99.7496%" y="863.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Parser&gt;::read_byte (1 samples, 0.07%)</title><rect x="99.4996%" y="837" width="0.0715%" height="15" fill="rgb(228,207,21)" fg:x="1392" fg:w="1"/><text x="99.7496%" y="847.50"></text></g><g><title>demoparser (1,394 samples, 99.64%)</title><rect x="0.0000%" y="1157" width="99.6426%" height="15" fill="rgb(213,211,35)" fg:x="0" fg:w="1394"/><text x="0.2500%" y="1167.50">demoparser</text></g><g><title>_start (102 samples, 7.29%)</title><rect x="92.3517%" y="1141" width="7.2909%" height="15" fill="rgb(209,83,10)" fg:x="1292" fg:w="102"/><text x="92.6017%" y="1151.50">_start</text></g><g><title>_dl_start (1 samples, 0.07%)</title><rect x="99.5711%" y="1125" width="0.0715%" height="15" fill="rgb(209,164,1)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1135.50"></text></g><g><title>_dl_start_final (1 samples, 0.07%)</title><rect x="99.5711%" y="1109" width="0.0715%" height="15" fill="rgb(213,184,43)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1119.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.07%)</title><rect x="99.5711%" y="1093" width="0.0715%" height="15" fill="rgb(231,61,34)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1103.50"></text></g><g><title>dl_main (1 samples, 0.07%)</title><rect x="99.5711%" y="1077" width="0.0715%" height="15" fill="rgb(235,75,3)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1087.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.07%)</title><rect x="99.5711%" y="1061" width="0.0715%" height="15" fill="rgb(220,106,47)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1071.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.07%)</title><rect x="99.5711%" y="1045" width="0.0715%" height="15" fill="rgb(210,196,33)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1055.50"></text></g><g><title>elf_machine_rela (1 samples, 0.07%)</title><rect x="99.5711%" y="1029" width="0.0715%" height="15" fill="rgb(229,154,42)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1039.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.07%)</title><rect x="99.5711%" y="1013" width="0.0715%" height="15" fill="rgb(228,114,26)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1023.50"></text></g><g><title>dl_new_hash (1 samples, 0.07%)</title><rect x="99.5711%" y="997" width="0.0715%" height="15" fill="rgb(208,144,1)" fg:x="1393" fg:w="1"/><text x="99.8211%" y="1007.50"></text></g><g><title>all (1,399 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(239,112,37)" fg:x="0" fg:w="1399"/><text x="0.2500%" y="1183.50"></text></g><g><title>perf-exec (5 samples, 0.36%)</title><rect x="99.6426%" y="1157" width="0.3574%" height="15" fill="rgb(210,96,50)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1141" width="0.3574%" height="15" fill="rgb(222,178,2)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1125" width="0.3574%" height="15" fill="rgb(226,74,18)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1109" width="0.3574%" height="15" fill="rgb(225,67,54)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1093" width="0.3574%" height="15" fill="rgb(251,92,32)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1077" width="0.3574%" height="15" fill="rgb(228,149,22)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1061" width="0.3574%" height="15" fill="rgb(243,54,13)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1045" width="0.3574%" height="15" fill="rgb(243,180,28)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1029" width="0.3574%" height="15" fill="rgb(208,167,24)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="1013" width="0.3574%" height="15" fill="rgb(245,73,45)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="997" width="0.3574%" height="15" fill="rgb(237,203,48)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.36%)</title><rect x="99.6426%" y="981" width="0.3574%" height="15" fill="rgb(211,197,16)" fg:x="1394" fg:w="5"/><text x="99.8926%" y="991.50"></text></g></svg></svg>