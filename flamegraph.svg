<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1237.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="509"><g><title>[unknown] (55 samples, 10.81%)</title><rect x="1.7682%" y="1157" width="10.8055%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="55"/><text x="2.0182%" y="1167.50">[unknown]</text></g><g><title>[unknown] (55 samples, 10.81%)</title><rect x="1.7682%" y="1141" width="10.8055%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="55"/><text x="2.0182%" y="1151.50">[unknown]</text></g><g><title>[unknown] (47 samples, 9.23%)</title><rect x="3.3399%" y="1125" width="9.2338%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="47"/><text x="3.5899%" y="1135.50">[unknown]</text></g><g><title>[unknown] (38 samples, 7.47%)</title><rect x="5.1081%" y="1109" width="7.4656%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="38"/><text x="5.3581%" y="1119.50">[unknown]</text></g><g><title>[unknown] (21 samples, 4.13%)</title><rect x="8.4479%" y="1093" width="4.1257%" height="15" fill="rgb(208,68,35)" fg:x="43" fg:w="21"/><text x="8.6979%" y="1103.50">[unk..</text></g><g><title>[unknown] (19 samples, 3.73%)</title><rect x="8.8409%" y="1077" width="3.7328%" height="15" fill="rgb(232,128,0)" fg:x="45" fg:w="19"/><text x="9.0909%" y="1087.50">[unk..</text></g><g><title>[unknown] (17 samples, 3.34%)</title><rect x="9.2338%" y="1061" width="3.3399%" height="15" fill="rgb(207,160,47)" fg:x="47" fg:w="17"/><text x="9.4838%" y="1071.50">[un..</text></g><g><title>[unknown] (15 samples, 2.95%)</title><rect x="9.6267%" y="1045" width="2.9470%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="15"/><text x="9.8767%" y="1055.50">[u..</text></g><g><title>[unknown] (13 samples, 2.55%)</title><rect x="10.0196%" y="1029" width="2.5540%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="13"/><text x="10.2696%" y="1039.50">[u..</text></g><g><title>[unknown] (9 samples, 1.77%)</title><rect x="10.8055%" y="1013" width="1.7682%" height="15" fill="rgb(220,122,19)" fg:x="55" fg:w="9"/><text x="11.0555%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 1.38%)</title><rect x="11.1984%" y="997" width="1.3752%" height="15" fill="rgb(250,228,42)" fg:x="57" fg:w="7"/><text x="11.4484%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 1.18%)</title><rect x="11.3949%" y="981" width="1.1788%" height="15" fill="rgb(240,193,28)" fg:x="58" fg:w="6"/><text x="11.6449%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.98%)</title><rect x="11.5914%" y="965" width="0.9823%" height="15" fill="rgb(216,20,37)" fg:x="59" fg:w="5"/><text x="11.8414%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.98%)</title><rect x="11.5914%" y="949" width="0.9823%" height="15" fill="rgb(206,188,39)" fg:x="59" fg:w="5"/><text x="11.8414%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="11.7878%" y="933" width="0.7859%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="4"/><text x="12.0378%" y="943.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="11.7878%" y="917" width="0.7859%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="4"/><text x="12.0378%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="12.1807%" y="901" width="0.3929%" height="15" fill="rgb(225,20,46)" fg:x="62" fg:w="2"/><text x="12.4307%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="12.1807%" y="885" width="0.3929%" height="15" fill="rgb(210,31,41)" fg:x="62" fg:w="2"/><text x="12.4307%" y="895.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="12.5737%" y="1045" width="0.1965%" height="15" fill="rgb(221,200,47)" fg:x="64" fg:w="1"/><text x="12.8237%" y="1055.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="12.5737%" y="1029" width="0.1965%" height="15" fill="rgb(226,26,5)" fg:x="64" fg:w="1"/><text x="12.8237%" y="1039.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="12.5737%" y="1013" width="0.1965%" height="15" fill="rgb(249,33,26)" fg:x="64" fg:w="1"/><text x="12.8237%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="12.5737%" y="997" width="0.1965%" height="15" fill="rgb(235,183,28)" fg:x="64" fg:w="1"/><text x="12.8237%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.20%)</title><rect x="12.5737%" y="981" width="0.1965%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="1"/><text x="12.8237%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.20%)</title><rect x="12.5737%" y="965" width="0.1965%" height="15" fill="rgb(247,18,42)" fg:x="64" fg:w="1"/><text x="12.8237%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.20%)</title><rect x="12.5737%" y="949" width="0.1965%" height="15" fill="rgb(241,131,45)" fg:x="64" fg:w="1"/><text x="12.8237%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="12.5737%" y="933" width="0.1965%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="1"/><text x="12.8237%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="12.5737%" y="917" width="0.1965%" height="15" fill="rgb(225,111,53)" fg:x="64" fg:w="1"/><text x="12.8237%" y="927.50"></text></g><g><title>demoparser::parse_demo (5 samples, 0.98%)</title><rect x="12.5737%" y="1157" width="0.9823%" height="15" fill="rgb(238,160,17)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1167.50"></text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (5 samples, 0.98%)</title><rect x="12.5737%" y="1141" width="0.9823%" height="15" fill="rgb(214,148,48)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1151.50"></text></g><g><title>demoparser::parsing::parser::Parser::speed (5 samples, 0.98%)</title><rect x="12.5737%" y="1125" width="0.9823%" height="15" fill="rgb(232,36,49)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1135.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (5 samples, 0.98%)</title><rect x="12.5737%" y="1109" width="0.9823%" height="15" fill="rgb(209,103,24)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1119.50"></text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (5 samples, 0.98%)</title><rect x="12.5737%" y="1093" width="0.9823%" height="15" fill="rgb(229,88,8)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1103.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (5 samples, 0.98%)</title><rect x="12.5737%" y="1077" width="0.9823%" height="15" fill="rgb(213,181,19)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1087.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (5 samples, 0.98%)</title><rect x="12.5737%" y="1061" width="0.9823%" height="15" fill="rgb(254,191,54)" fg:x="64" fg:w="5"/><text x="12.8237%" y="1071.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.79%)</title><rect x="12.7701%" y="1045" width="0.7859%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="4"/><text x="13.0201%" y="1055.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.79%)</title><rect x="12.7701%" y="1029" width="0.7859%" height="15" fill="rgb(233,36,39)" fg:x="65" fg:w="4"/><text x="13.0201%" y="1039.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.79%)</title><rect x="12.7701%" y="1013" width="0.7859%" height="15" fill="rgb(226,3,54)" fg:x="65" fg:w="4"/><text x="13.0201%" y="1023.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.79%)</title><rect x="12.7701%" y="997" width="0.7859%" height="15" fill="rgb(245,192,40)" fg:x="65" fg:w="4"/><text x="13.0201%" y="1007.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (4 samples, 0.79%)</title><rect x="12.7701%" y="981" width="0.7859%" height="15" fill="rgb(238,167,29)" fg:x="65" fg:w="4"/><text x="13.0201%" y="991.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.39%)</title><rect x="13.1631%" y="965" width="0.3929%" height="15" fill="rgb(232,182,51)" fg:x="67" fg:w="2"/><text x="13.4131%" y="975.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 0.39%)</title><rect x="13.1631%" y="949" width="0.3929%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="2"/><text x="13.4131%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="13.3595%" y="933" width="0.1965%" height="15" fill="rgb(208,69,12)" fg:x="68" fg:w="1"/><text x="13.6095%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="13.3595%" y="917" width="0.1965%" height="15" fill="rgb(235,93,37)" fg:x="68" fg:w="1"/><text x="13.6095%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.20%)</title><rect x="13.3595%" y="901" width="0.1965%" height="15" fill="rgb(213,116,39)" fg:x="68" fg:w="1"/><text x="13.6095%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.20%)</title><rect x="13.3595%" y="885" width="0.1965%" height="15" fill="rgb(222,207,29)" fg:x="68" fg:w="1"/><text x="13.6095%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.20%)</title><rect x="13.3595%" y="869" width="0.1965%" height="15" fill="rgb(206,96,30)" fg:x="68" fg:w="1"/><text x="13.6095%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="13.3595%" y="853" width="0.1965%" height="15" fill="rgb(218,138,4)" fg:x="68" fg:w="1"/><text x="13.6095%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="13.3595%" y="837" width="0.1965%" height="15" fill="rgb(250,191,14)" fg:x="68" fg:w="1"/><text x="13.6095%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.20%)</title><rect x="13.3595%" y="821" width="0.1965%" height="15" fill="rgb(239,60,40)" fg:x="68" fg:w="1"/><text x="13.6095%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.20%)</title><rect x="13.3595%" y="805" width="0.1965%" height="15" fill="rgb(206,27,48)" fg:x="68" fg:w="1"/><text x="13.6095%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.20%)</title><rect x="13.3595%" y="789" width="0.1965%" height="15" fill="rgb(225,35,8)" fg:x="68" fg:w="1"/><text x="13.6095%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.20%)</title><rect x="13.3595%" y="773" width="0.1965%" height="15" fill="rgb(250,213,24)" fg:x="68" fg:w="1"/><text x="13.6095%" y="783.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="13.3595%" y="757" width="0.1965%" height="15" fill="rgb(247,123,22)" fg:x="68" fg:w="1"/><text x="13.6095%" y="767.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="13.3595%" y="741" width="0.1965%" height="15" fill="rgb(231,138,38)" fg:x="68" fg:w="1"/><text x="13.6095%" y="751.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.20%)</title><rect x="13.3595%" y="725" width="0.1965%" height="15" fill="rgb(231,145,46)" fg:x="68" fg:w="1"/><text x="13.6095%" y="735.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.20%)</title><rect x="13.3595%" y="709" width="0.1965%" height="15" fill="rgb(251,118,11)" fg:x="68" fg:w="1"/><text x="13.6095%" y="719.50"></text></g><g><title>[unknown] (70 samples, 13.75%)</title><rect x="0.0000%" y="1173" width="13.7525%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="70"/><text x="0.2500%" y="1183.50">[unknown]</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="13.5560%" y="1157" width="0.1965%" height="15" fill="rgb(247,81,37)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1167.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="13.5560%" y="1141" width="0.1965%" height="15" fill="rgb(209,12,38)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1151.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="13.5560%" y="1125" width="0.1965%" height="15" fill="rgb(227,1,9)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1135.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.20%)</title><rect x="13.5560%" y="1109" width="0.1965%" height="15" fill="rgb(248,47,43)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.20%)</title><rect x="13.5560%" y="1093" width="0.1965%" height="15" fill="rgb(221,10,30)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1103.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.20%)</title><rect x="13.5560%" y="1077" width="0.1965%" height="15" fill="rgb(210,229,1)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.20%)</title><rect x="13.5560%" y="1061" width="0.1965%" height="15" fill="rgb(222,148,37)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.20%)</title><rect x="13.5560%" y="1045" width="0.1965%" height="15" fill="rgb(234,67,33)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.20%)</title><rect x="13.5560%" y="1029" width="0.1965%" height="15" fill="rgb(247,98,35)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.20%)</title><rect x="13.5560%" y="1013" width="0.1965%" height="15" fill="rgb(247,138,52)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.20%)</title><rect x="13.5560%" y="997" width="0.1965%" height="15" fill="rgb(213,79,30)" fg:x="69" fg:w="1"/><text x="13.8060%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.20%)</title><rect x="13.5560%" y="981" width="0.1965%" height="15" fill="rgb(246,177,23)" fg:x="69" fg:w="1"/><text x="13.8060%" y="991.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.20%)</title><rect x="13.5560%" y="965" width="0.1965%" height="15" fill="rgb(230,62,27)" fg:x="69" fg:w="1"/><text x="13.8060%" y="975.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.20%)</title><rect x="13.5560%" y="949" width="0.1965%" height="15" fill="rgb(216,154,8)" fg:x="69" fg:w="1"/><text x="13.8060%" y="959.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.20%)</title><rect x="13.5560%" y="933" width="0.1965%" height="15" fill="rgb(244,35,45)" fg:x="69" fg:w="1"/><text x="13.8060%" y="943.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.20%)</title><rect x="13.5560%" y="917" width="0.1965%" height="15" fill="rgb(251,115,12)" fg:x="69" fg:w="1"/><text x="13.8060%" y="927.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.20%)</title><rect x="13.5560%" y="901" width="0.1965%" height="15" fill="rgb(240,54,50)" fg:x="69" fg:w="1"/><text x="13.8060%" y="911.50"></text></g><g><title>[libc.so.6] (1 samples, 0.20%)</title><rect x="13.5560%" y="885" width="0.1965%" height="15" fill="rgb(233,84,52)" fg:x="69" fg:w="1"/><text x="13.8060%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1157" width="0.1965%" height="15" fill="rgb(207,117,47)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1141" width="0.1965%" height="15" fill="rgb(249,43,39)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1125" width="0.1965%" height="15" fill="rgb(209,38,44)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1109" width="0.1965%" height="15" fill="rgb(236,212,23)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1093" width="0.1965%" height="15" fill="rgb(242,79,21)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1077" width="0.1965%" height="15" fill="rgb(211,96,35)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="13.7525%" y="1061" width="0.1965%" height="15" fill="rgb(253,215,40)" fg:x="70" fg:w="1"/><text x="14.0025%" y="1071.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.20%)</title><rect x="14.3418%" y="1141" width="0.1965%" height="15" fill="rgb(211,81,21)" fg:x="73" fg:w="1"/><text x="14.5918%" y="1151.50"></text></g><g><title>_mi_os_commit (1 samples, 0.20%)</title><rect x="14.5383%" y="629" width="0.1965%" height="15" fill="rgb(208,190,38)" fg:x="74" fg:w="1"/><text x="14.7883%" y="639.50"></text></g><g><title>mi_os_commitx (1 samples, 0.20%)</title><rect x="14.5383%" y="613" width="0.1965%" height="15" fill="rgb(235,213,38)" fg:x="74" fg:w="1"/><text x="14.7883%" y="623.50"></text></g><g><title>__GI___mprotect (1 samples, 0.20%)</title><rect x="14.5383%" y="597" width="0.1965%" height="15" fill="rgb(237,122,38)" fg:x="74" fg:w="1"/><text x="14.7883%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="581" width="0.1965%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="1"/><text x="14.7883%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="565" width="0.1965%" height="15" fill="rgb(240,68,47)" fg:x="74" fg:w="1"/><text x="14.7883%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="549" width="0.1965%" height="15" fill="rgb(210,16,53)" fg:x="74" fg:w="1"/><text x="14.7883%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="533" width="0.1965%" height="15" fill="rgb(235,124,12)" fg:x="74" fg:w="1"/><text x="14.7883%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="517" width="0.1965%" height="15" fill="rgb(224,169,11)" fg:x="74" fg:w="1"/><text x="14.7883%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="501" width="0.1965%" height="15" fill="rgb(250,166,2)" fg:x="74" fg:w="1"/><text x="14.7883%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="14.5383%" y="485" width="0.1965%" height="15" fill="rgb(242,216,29)" fg:x="74" fg:w="1"/><text x="14.7883%" y="495.50"></text></g><g><title>rayon_core::job::JobFifo::new (8 samples, 1.57%)</title><rect x="14.5383%" y="917" width="1.5717%" height="15" fill="rgb(230,116,27)" fg:x="74" fg:w="8"/><text x="14.7883%" y="927.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (8 samples, 1.57%)</title><rect x="14.5383%" y="901" width="1.5717%" height="15" fill="rgb(228,99,48)" fg:x="74" fg:w="8"/><text x="14.7883%" y="911.50"></text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (8 samples, 1.57%)</title><rect x="14.5383%" y="885" width="1.5717%" height="15" fill="rgb(253,11,6)" fg:x="74" fg:w="8"/><text x="14.7883%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 1.57%)</title><rect x="14.5383%" y="869" width="1.5717%" height="15" fill="rgb(247,143,39)" fg:x="74" fg:w="8"/><text x="14.7883%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 1.57%)</title><rect x="14.5383%" y="853" width="1.5717%" height="15" fill="rgb(236,97,10)" fg:x="74" fg:w="8"/><text x="14.7883%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 1.57%)</title><rect x="14.5383%" y="837" width="1.5717%" height="15" fill="rgb(233,208,19)" fg:x="74" fg:w="8"/><text x="14.7883%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 1.57%)</title><rect x="14.5383%" y="821" width="1.5717%" height="15" fill="rgb(216,164,2)" fg:x="74" fg:w="8"/><text x="14.7883%" y="831.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 1.57%)</title><rect x="14.5383%" y="805" width="1.5717%" height="15" fill="rgb(220,129,5)" fg:x="74" fg:w="8"/><text x="14.7883%" y="815.50"></text></g><g><title>_mi_malloc_generic (8 samples, 1.57%)</title><rect x="14.5383%" y="789" width="1.5717%" height="15" fill="rgb(242,17,10)" fg:x="74" fg:w="8"/><text x="14.7883%" y="799.50"></text></g><g><title>mi_find_page (8 samples, 1.57%)</title><rect x="14.5383%" y="773" width="1.5717%" height="15" fill="rgb(242,107,0)" fg:x="74" fg:w="8"/><text x="14.7883%" y="783.50"></text></g><g><title>mi_find_free_page (8 samples, 1.57%)</title><rect x="14.5383%" y="757" width="1.5717%" height="15" fill="rgb(251,28,31)" fg:x="74" fg:w="8"/><text x="14.7883%" y="767.50"></text></g><g><title>mi_page_queue_find_free_ex (8 samples, 1.57%)</title><rect x="14.5383%" y="741" width="1.5717%" height="15" fill="rgb(233,223,10)" fg:x="74" fg:w="8"/><text x="14.7883%" y="751.50"></text></g><g><title>mi_page_fresh (8 samples, 1.57%)</title><rect x="14.5383%" y="725" width="1.5717%" height="15" fill="rgb(215,21,27)" fg:x="74" fg:w="8"/><text x="14.7883%" y="735.50"></text></g><g><title>mi_page_fresh_alloc (8 samples, 1.57%)</title><rect x="14.5383%" y="709" width="1.5717%" height="15" fill="rgb(232,23,21)" fg:x="74" fg:w="8"/><text x="14.7883%" y="719.50"></text></g><g><title>mi_segments_page_alloc (8 samples, 1.57%)</title><rect x="14.5383%" y="693" width="1.5717%" height="15" fill="rgb(244,5,23)" fg:x="74" fg:w="8"/><text x="14.7883%" y="703.50"></text></g><g><title>mi_segment_reclaim_or_alloc (8 samples, 1.57%)</title><rect x="14.5383%" y="677" width="1.5717%" height="15" fill="rgb(226,81,46)" fg:x="74" fg:w="8"/><text x="14.7883%" y="687.50"></text></g><g><title>mi_segment_alloc (8 samples, 1.57%)</title><rect x="14.5383%" y="661" width="1.5717%" height="15" fill="rgb(247,70,30)" fg:x="74" fg:w="8"/><text x="14.7883%" y="671.50"></text></g><g><title>mi_segment_init (8 samples, 1.57%)</title><rect x="14.5383%" y="645" width="1.5717%" height="15" fill="rgb(212,68,19)" fg:x="74" fg:w="8"/><text x="14.7883%" y="655.50"></text></g><g><title>memset (7 samples, 1.38%)</title><rect x="14.7348%" y="629" width="1.3752%" height="15" fill="rgb(240,187,13)" fg:x="75" fg:w="7"/><text x="14.9848%" y="639.50"></text></g><g><title>[libc.so.6] (7 samples, 1.38%)</title><rect x="14.7348%" y="613" width="1.3752%" height="15" fill="rgb(223,113,26)" fg:x="75" fg:w="7"/><text x="14.9848%" y="623.50"></text></g><g><title>[unknown] (6 samples, 1.18%)</title><rect x="14.9312%" y="597" width="1.1788%" height="15" fill="rgb(206,192,2)" fg:x="76" fg:w="6"/><text x="15.1812%" y="607.50"></text></g><g><title>[unknown] (6 samples, 1.18%)</title><rect x="14.9312%" y="581" width="1.1788%" height="15" fill="rgb(241,108,4)" fg:x="76" fg:w="6"/><text x="15.1812%" y="591.50"></text></g><g><title>[unknown] (6 samples, 1.18%)</title><rect x="14.9312%" y="565" width="1.1788%" height="15" fill="rgb(247,173,49)" fg:x="76" fg:w="6"/><text x="15.1812%" y="575.50"></text></g><g><title>[unknown] (6 samples, 1.18%)</title><rect x="14.9312%" y="549" width="1.1788%" height="15" fill="rgb(224,114,35)" fg:x="76" fg:w="6"/><text x="15.1812%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="15.3242%" y="533" width="0.7859%" height="15" fill="rgb(245,159,27)" fg:x="78" fg:w="4"/><text x="15.5742%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="15.3242%" y="517" width="0.7859%" height="15" fill="rgb(245,172,44)" fg:x="78" fg:w="4"/><text x="15.5742%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="15.3242%" y="501" width="0.7859%" height="15" fill="rgb(236,23,11)" fg:x="78" fg:w="4"/><text x="15.5742%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="15.3242%" y="485" width="0.7859%" height="15" fill="rgb(205,117,38)" fg:x="78" fg:w="4"/><text x="15.5742%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="15.5206%" y="469" width="0.5894%" height="15" fill="rgb(237,72,25)" fg:x="79" fg:w="3"/><text x="15.7706%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="15.5206%" y="453" width="0.5894%" height="15" fill="rgb(244,70,9)" fg:x="79" fg:w="3"/><text x="15.7706%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="15.5206%" y="437" width="0.5894%" height="15" fill="rgb(217,125,39)" fg:x="79" fg:w="3"/><text x="15.7706%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="15.7171%" y="421" width="0.3929%" height="15" fill="rgb(235,36,10)" fg:x="80" fg:w="2"/><text x="15.9671%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.20%)</title><rect x="16.1100%" y="885" width="0.1965%" height="15" fill="rgb(251,123,47)" fg:x="82" fg:w="1"/><text x="16.3600%" y="895.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (1 samples, 0.20%)</title><rect x="16.1100%" y="869" width="0.1965%" height="15" fill="rgb(221,13,13)" fg:x="82" fg:w="1"/><text x="16.3600%" y="879.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (1 samples, 0.20%)</title><rect x="16.1100%" y="853" width="0.1965%" height="15" fill="rgb(238,131,9)" fg:x="82" fg:w="1"/><text x="16.3600%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.20%)</title><rect x="16.1100%" y="837" width="0.1965%" height="15" fill="rgb(211,50,8)" fg:x="82" fg:w="1"/><text x="16.3600%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.20%)</title><rect x="16.1100%" y="821" width="0.1965%" height="15" fill="rgb(245,182,24)" fg:x="82" fg:w="1"/><text x="16.3600%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.20%)</title><rect x="16.1100%" y="805" width="0.1965%" height="15" fill="rgb(242,14,37)" fg:x="82" fg:w="1"/><text x="16.3600%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.20%)</title><rect x="16.1100%" y="789" width="0.1965%" height="15" fill="rgb(246,228,12)" fg:x="82" fg:w="1"/><text x="16.3600%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.20%)</title><rect x="16.1100%" y="773" width="0.1965%" height="15" fill="rgb(213,55,15)" fg:x="82" fg:w="1"/><text x="16.3600%" y="783.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (1 samples, 0.20%)</title><rect x="16.1100%" y="757" width="0.1965%" height="15" fill="rgb(209,9,3)" fg:x="82" fg:w="1"/><text x="16.3600%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (1 samples, 0.20%)</title><rect x="16.1100%" y="741" width="0.1965%" height="15" fill="rgb(230,59,30)" fg:x="82" fg:w="1"/><text x="16.3600%" y="751.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (1 samples, 0.20%)</title><rect x="16.1100%" y="725" width="0.1965%" height="15" fill="rgb(209,121,21)" fg:x="82" fg:w="1"/><text x="16.3600%" y="735.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.20%)</title><rect x="16.1100%" y="709" width="0.1965%" height="15" fill="rgb(220,109,13)" fg:x="82" fg:w="1"/><text x="16.3600%" y="719.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (1 samples, 0.20%)</title><rect x="16.1100%" y="693" width="0.1965%" height="15" fill="rgb(232,18,1)" fg:x="82" fg:w="1"/><text x="16.3600%" y="703.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.20%)</title><rect x="16.1100%" y="677" width="0.1965%" height="15" fill="rgb(215,41,42)" fg:x="82" fg:w="1"/><text x="16.3600%" y="687.50"></text></g><g><title>std::panic::catch_unwind (27 samples, 5.30%)</title><rect x="14.5383%" y="1061" width="5.3045%" height="15" fill="rgb(224,123,36)" fg:x="74" fg:w="27"/><text x="14.7883%" y="1071.50">std::p..</text></g><g><title>std::panicking::try (27 samples, 5.30%)</title><rect x="14.5383%" y="1045" width="5.3045%" height="15" fill="rgb(240,125,3)" fg:x="74" fg:w="27"/><text x="14.7883%" y="1055.50">std::p..</text></g><g><title>std::panicking::try::do_call (27 samples, 5.30%)</title><rect x="14.5383%" y="1029" width="5.3045%" height="15" fill="rgb(205,98,50)" fg:x="74" fg:w="27"/><text x="14.7883%" y="1039.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27 samples, 5.30%)</title><rect x="14.5383%" y="1013" width="5.3045%" height="15" fill="rgb(205,185,37)" fg:x="74" fg:w="27"/><text x="14.7883%" y="1023.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (27 samples, 5.30%)</title><rect x="14.5383%" y="997" width="5.3045%" height="15" fill="rgb(238,207,15)" fg:x="74" fg:w="27"/><text x="14.7883%" y="1007.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 5.30%)</title><rect x="14.5383%" y="981" width="5.3045%" height="15" fill="rgb(213,199,42)" fg:x="74" fg:w="27"/><text x="14.7883%" y="991.50">std::s..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (27 samples, 5.30%)</title><rect x="14.5383%" y="965" width="5.3045%" height="15" fill="rgb(235,201,11)" fg:x="74" fg:w="27"/><text x="14.7883%" y="975.50">&lt;rayon..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (27 samples, 5.30%)</title><rect x="14.5383%" y="949" width="5.3045%" height="15" fill="rgb(207,46,11)" fg:x="74" fg:w="27"/><text x="14.7883%" y="959.50">rayon_..</text></g><g><title>rayon_core::registry::main_loop (27 samples, 5.30%)</title><rect x="14.5383%" y="933" width="5.3045%" height="15" fill="rgb(241,35,35)" fg:x="74" fg:w="27"/><text x="14.7883%" y="943.50">rayon_..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (19 samples, 3.73%)</title><rect x="16.1100%" y="917" width="3.7328%" height="15" fill="rgb(243,32,47)" fg:x="82" fg:w="19"/><text x="16.3600%" y="927.50">rayo..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (19 samples, 3.73%)</title><rect x="16.1100%" y="901" width="3.7328%" height="15" fill="rgb(247,202,23)" fg:x="82" fg:w="19"/><text x="16.3600%" y="911.50">rayo..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (18 samples, 3.54%)</title><rect x="16.3065%" y="885" width="3.5363%" height="15" fill="rgb(219,102,11)" fg:x="83" fg:w="18"/><text x="16.5565%" y="895.50">ray..</text></g><g><title>rayon_core::sleep::Sleep::sleep (18 samples, 3.54%)</title><rect x="16.3065%" y="869" width="3.5363%" height="15" fill="rgb(243,110,44)" fg:x="83" fg:w="18"/><text x="16.5565%" y="879.50">ray..</text></g><g><title>std::sync::condvar::Condvar::wait (18 samples, 3.54%)</title><rect x="16.3065%" y="853" width="3.5363%" height="15" fill="rgb(222,74,54)" fg:x="83" fg:w="18"/><text x="16.5565%" y="863.50">std..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (18 samples, 3.54%)</title><rect x="16.3065%" y="837" width="3.5363%" height="15" fill="rgb(216,99,12)" fg:x="83" fg:w="18"/><text x="16.5565%" y="847.50">std..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (18 samples, 3.54%)</title><rect x="16.3065%" y="821" width="3.5363%" height="15" fill="rgb(226,22,26)" fg:x="83" fg:w="18"/><text x="16.5565%" y="831.50">std..</text></g><g><title>std::sys::unix::futex::futex_wait (18 samples, 3.54%)</title><rect x="16.3065%" y="805" width="3.5363%" height="15" fill="rgb(217,163,10)" fg:x="83" fg:w="18"/><text x="16.5565%" y="815.50">std..</text></g><g><title>syscall (18 samples, 3.54%)</title><rect x="16.3065%" y="789" width="3.5363%" height="15" fill="rgb(213,25,53)" fg:x="83" fg:w="18"/><text x="16.5565%" y="799.50">sys..</text></g><g><title>[unknown] (18 samples, 3.54%)</title><rect x="16.3065%" y="773" width="3.5363%" height="15" fill="rgb(252,105,26)" fg:x="83" fg:w="18"/><text x="16.5565%" y="783.50">[un..</text></g><g><title>[unknown] (18 samples, 3.54%)</title><rect x="16.3065%" y="757" width="3.5363%" height="15" fill="rgb(220,39,43)" fg:x="83" fg:w="18"/><text x="16.5565%" y="767.50">[un..</text></g><g><title>[unknown] (15 samples, 2.95%)</title><rect x="16.8959%" y="741" width="2.9470%" height="15" fill="rgb(229,68,48)" fg:x="86" fg:w="15"/><text x="17.1459%" y="751.50">[u..</text></g><g><title>[unknown] (15 samples, 2.95%)</title><rect x="16.8959%" y="725" width="2.9470%" height="15" fill="rgb(252,8,32)" fg:x="86" fg:w="15"/><text x="17.1459%" y="735.50">[u..</text></g><g><title>[unknown] (15 samples, 2.95%)</title><rect x="16.8959%" y="709" width="2.9470%" height="15" fill="rgb(223,20,43)" fg:x="86" fg:w="15"/><text x="17.1459%" y="719.50">[u..</text></g><g><title>[unknown] (10 samples, 1.96%)</title><rect x="17.8782%" y="693" width="1.9646%" height="15" fill="rgb(229,81,49)" fg:x="91" fg:w="10"/><text x="18.1282%" y="703.50">[..</text></g><g><title>[unknown] (10 samples, 1.96%)</title><rect x="17.8782%" y="677" width="1.9646%" height="15" fill="rgb(236,28,36)" fg:x="91" fg:w="10"/><text x="18.1282%" y="687.50">[..</text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="18.2711%" y="661" width="1.5717%" height="15" fill="rgb(249,185,26)" fg:x="93" fg:w="8"/><text x="18.5211%" y="671.50"></text></g><g><title>[unknown] (7 samples, 1.38%)</title><rect x="18.4676%" y="645" width="1.3752%" height="15" fill="rgb(249,174,33)" fg:x="94" fg:w="7"/><text x="18.7176%" y="655.50"></text></g><g><title>[unknown] (7 samples, 1.38%)</title><rect x="18.4676%" y="629" width="1.3752%" height="15" fill="rgb(233,201,37)" fg:x="94" fg:w="7"/><text x="18.7176%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="19.2534%" y="613" width="0.5894%" height="15" fill="rgb(221,78,26)" fg:x="98" fg:w="3"/><text x="19.5034%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="19.4499%" y="597" width="0.3929%" height="15" fill="rgb(250,127,30)" fg:x="99" fg:w="2"/><text x="19.6999%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.6464%" y="581" width="0.1965%" height="15" fill="rgb(230,49,44)" fg:x="100" fg:w="1"/><text x="19.8964%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (28 samples, 5.50%)</title><rect x="14.5383%" y="1125" width="5.5010%" height="15" fill="rgb(229,67,23)" fg:x="74" fg:w="28"/><text x="14.7883%" y="1135.50">&lt;alloc:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (28 samples, 5.50%)</title><rect x="14.5383%" y="1109" width="5.5010%" height="15" fill="rgb(249,83,47)" fg:x="74" fg:w="28"/><text x="14.7883%" y="1119.50">&lt;alloc:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (28 samples, 5.50%)</title><rect x="14.5383%" y="1093" width="5.5010%" height="15" fill="rgb(215,43,3)" fg:x="74" fg:w="28"/><text x="14.7883%" y="1103.50">core::o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (28 samples, 5.50%)</title><rect x="14.5383%" y="1077" width="5.5010%" height="15" fill="rgb(238,154,13)" fg:x="74" fg:w="28"/><text x="14.7883%" y="1087.50">std::th..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.20%)</title><rect x="19.8428%" y="1061" width="0.1965%" height="15" fill="rgb(219,56,2)" fg:x="101" fg:w="1"/><text x="20.0928%" y="1071.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.20%)</title><rect x="19.8428%" y="1045" width="0.1965%" height="15" fill="rgb(233,0,4)" fg:x="101" fg:w="1"/><text x="20.0928%" y="1055.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.20%)</title><rect x="19.8428%" y="1029" width="0.1965%" height="15" fill="rgb(235,30,7)" fg:x="101" fg:w="1"/><text x="20.0928%" y="1039.50"></text></g><g><title>tcache_init (1 samples, 0.20%)</title><rect x="19.8428%" y="1013" width="0.1965%" height="15" fill="rgb(250,79,13)" fg:x="101" fg:w="1"/><text x="20.0928%" y="1023.50"></text></g><g><title>tcache_init (1 samples, 0.20%)</title><rect x="19.8428%" y="997" width="0.1965%" height="15" fill="rgb(211,146,34)" fg:x="101" fg:w="1"/><text x="20.0928%" y="1007.50"></text></g><g><title>arena_get2 (1 samples, 0.20%)</title><rect x="19.8428%" y="981" width="0.1965%" height="15" fill="rgb(228,22,38)" fg:x="101" fg:w="1"/><text x="20.0928%" y="991.50"></text></g><g><title>arena_get2 (1 samples, 0.20%)</title><rect x="19.8428%" y="965" width="0.1965%" height="15" fill="rgb(235,168,5)" fg:x="101" fg:w="1"/><text x="20.0928%" y="975.50"></text></g><g><title>_int_new_arena (1 samples, 0.20%)</title><rect x="19.8428%" y="949" width="0.1965%" height="15" fill="rgb(221,155,16)" fg:x="101" fg:w="1"/><text x="20.0928%" y="959.50"></text></g><g><title>new_heap (1 samples, 0.20%)</title><rect x="19.8428%" y="933" width="0.1965%" height="15" fill="rgb(215,215,53)" fg:x="101" fg:w="1"/><text x="20.0928%" y="943.50"></text></g><g><title>alloc_new_heap (1 samples, 0.20%)</title><rect x="19.8428%" y="917" width="0.1965%" height="15" fill="rgb(223,4,10)" fg:x="101" fg:w="1"/><text x="20.0928%" y="927.50"></text></g><g><title>__GI___munmap (1 samples, 0.20%)</title><rect x="19.8428%" y="901" width="0.1965%" height="15" fill="rgb(234,103,6)" fg:x="101" fg:w="1"/><text x="20.0928%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="885" width="0.1965%" height="15" fill="rgb(227,97,0)" fg:x="101" fg:w="1"/><text x="20.0928%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="869" width="0.1965%" height="15" fill="rgb(234,150,53)" fg:x="101" fg:w="1"/><text x="20.0928%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="853" width="0.1965%" height="15" fill="rgb(228,201,54)" fg:x="101" fg:w="1"/><text x="20.0928%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="837" width="0.1965%" height="15" fill="rgb(222,22,37)" fg:x="101" fg:w="1"/><text x="20.0928%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="821" width="0.1965%" height="15" fill="rgb(237,53,32)" fg:x="101" fg:w="1"/><text x="20.0928%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="805" width="0.1965%" height="15" fill="rgb(233,25,53)" fg:x="101" fg:w="1"/><text x="20.0928%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="789" width="0.1965%" height="15" fill="rgb(210,40,34)" fg:x="101" fg:w="1"/><text x="20.0928%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="773" width="0.1965%" height="15" fill="rgb(241,220,44)" fg:x="101" fg:w="1"/><text x="20.0928%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="757" width="0.1965%" height="15" fill="rgb(235,28,35)" fg:x="101" fg:w="1"/><text x="20.0928%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="741" width="0.1965%" height="15" fill="rgb(210,56,17)" fg:x="101" fg:w="1"/><text x="20.0928%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="725" width="0.1965%" height="15" fill="rgb(224,130,29)" fg:x="101" fg:w="1"/><text x="20.0928%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="709" width="0.1965%" height="15" fill="rgb(235,212,8)" fg:x="101" fg:w="1"/><text x="20.0928%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="693" width="0.1965%" height="15" fill="rgb(223,33,50)" fg:x="101" fg:w="1"/><text x="20.0928%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="677" width="0.1965%" height="15" fill="rgb(219,149,13)" fg:x="101" fg:w="1"/><text x="20.0928%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="19.8428%" y="661" width="0.1965%" height="15" fill="rgb(250,156,29)" fg:x="101" fg:w="1"/><text x="20.0928%" y="671.50"></text></g><g><title>__GI___sigaltstack (2 samples, 0.39%)</title><rect x="20.0393%" y="1093" width="0.3929%" height="15" fill="rgb(216,193,19)" fg:x="102" fg:w="2"/><text x="20.2893%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="20.2358%" y="1077" width="0.1965%" height="15" fill="rgb(216,135,14)" fg:x="103" fg:w="1"/><text x="20.4858%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="20.2358%" y="1061" width="0.1965%" height="15" fill="rgb(241,47,5)" fg:x="103" fg:w="1"/><text x="20.4858%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="20.2358%" y="1045" width="0.1965%" height="15" fill="rgb(233,42,35)" fg:x="103" fg:w="1"/><text x="20.4858%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="20.2358%" y="1029" width="0.1965%" height="15" fill="rgb(231,13,6)" fg:x="103" fg:w="1"/><text x="20.4858%" y="1039.50"></text></g><g><title>__clone3 (37 samples, 7.27%)</title><rect x="13.7525%" y="1173" width="7.2692%" height="15" fill="rgb(207,181,40)" fg:x="70" fg:w="37"/><text x="14.0025%" y="1183.50">__clone3</text></g><g><title>start_thread (36 samples, 7.07%)</title><rect x="13.9489%" y="1157" width="7.0727%" height="15" fill="rgb(254,173,49)" fg:x="71" fg:w="36"/><text x="14.1989%" y="1167.50">start_thr..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (33 samples, 6.48%)</title><rect x="14.5383%" y="1141" width="6.4833%" height="15" fill="rgb(221,1,38)" fg:x="74" fg:w="33"/><text x="14.7883%" y="1151.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.98%)</title><rect x="20.0393%" y="1125" width="0.9823%" height="15" fill="rgb(206,124,46)" fg:x="102" fg:w="5"/><text x="20.2893%" y="1135.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.98%)</title><rect x="20.0393%" y="1109" width="0.9823%" height="15" fill="rgb(249,21,11)" fg:x="102" fg:w="5"/><text x="20.2893%" y="1119.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 0.59%)</title><rect x="20.4322%" y="1093" width="0.5894%" height="15" fill="rgb(222,201,40)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1103.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 0.59%)</title><rect x="20.4322%" y="1077" width="0.5894%" height="15" fill="rgb(235,61,29)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1087.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.59%)</title><rect x="20.4322%" y="1061" width="0.5894%" height="15" fill="rgb(219,207,3)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1071.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.59%)</title><rect x="20.4322%" y="1045" width="0.5894%" height="15" fill="rgb(222,56,46)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="1029" width="0.5894%" height="15" fill="rgb(239,76,54)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="1013" width="0.5894%" height="15" fill="rgb(231,124,27)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="997" width="0.5894%" height="15" fill="rgb(249,195,6)" fg:x="104" fg:w="3"/><text x="20.6822%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="981" width="0.5894%" height="15" fill="rgb(237,174,47)" fg:x="104" fg:w="3"/><text x="20.6822%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="965" width="0.5894%" height="15" fill="rgb(206,201,31)" fg:x="104" fg:w="3"/><text x="20.6822%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="949" width="0.5894%" height="15" fill="rgb(231,57,52)" fg:x="104" fg:w="3"/><text x="20.6822%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="933" width="0.5894%" height="15" fill="rgb(248,177,22)" fg:x="104" fg:w="3"/><text x="20.6822%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="20.4322%" y="917" width="0.5894%" height="15" fill="rgb(215,211,37)" fg:x="104" fg:w="3"/><text x="20.6822%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="20.6287%" y="901" width="0.3929%" height="15" fill="rgb(241,128,51)" fg:x="105" fg:w="2"/><text x="20.8787%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="20.8251%" y="885" width="0.1965%" height="15" fill="rgb(227,165,31)" fg:x="106" fg:w="1"/><text x="21.0751%" y="895.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.20%)</title><rect x="21.0216%" y="741" width="0.1965%" height="15" fill="rgb(228,167,24)" fg:x="107" fg:w="1"/><text x="21.2716%" y="751.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.20%)</title><rect x="21.0216%" y="725" width="0.1965%" height="15" fill="rgb(228,143,12)" fg:x="107" fg:w="1"/><text x="21.2716%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="21.0216%" y="709" width="0.1965%" height="15" fill="rgb(249,149,8)" fg:x="107" fg:w="1"/><text x="21.2716%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.20%)</title><rect x="21.2181%" y="725" width="0.1965%" height="15" fill="rgb(243,35,44)" fg:x="108" fg:w="1"/><text x="21.4681%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (1 samples, 0.20%)</title><rect x="21.2181%" y="709" width="0.1965%" height="15" fill="rgb(246,89,9)" fg:x="108" fg:w="1"/><text x="21.4681%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (1 samples, 0.20%)</title><rect x="21.2181%" y="693" width="0.1965%" height="15" fill="rgb(233,213,13)" fg:x="108" fg:w="1"/><text x="21.4681%" y="703.50"></text></g><g><title>__GI___munmap (1 samples, 0.20%)</title><rect x="21.2181%" y="677" width="0.1965%" height="15" fill="rgb(233,141,41)" fg:x="108" fg:w="1"/><text x="21.4681%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="661" width="0.1965%" height="15" fill="rgb(239,167,4)" fg:x="108" fg:w="1"/><text x="21.4681%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="645" width="0.1965%" height="15" fill="rgb(209,217,16)" fg:x="108" fg:w="1"/><text x="21.4681%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="629" width="0.1965%" height="15" fill="rgb(219,88,35)" fg:x="108" fg:w="1"/><text x="21.4681%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="613" width="0.1965%" height="15" fill="rgb(220,193,23)" fg:x="108" fg:w="1"/><text x="21.4681%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="597" width="0.1965%" height="15" fill="rgb(230,90,52)" fg:x="108" fg:w="1"/><text x="21.4681%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="581" width="0.1965%" height="15" fill="rgb(252,106,19)" fg:x="108" fg:w="1"/><text x="21.4681%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="565" width="0.1965%" height="15" fill="rgb(206,74,20)" fg:x="108" fg:w="1"/><text x="21.4681%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="549" width="0.1965%" height="15" fill="rgb(230,138,44)" fg:x="108" fg:w="1"/><text x="21.4681%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="533" width="0.1965%" height="15" fill="rgb(235,182,43)" fg:x="108" fg:w="1"/><text x="21.4681%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="517" width="0.1965%" height="15" fill="rgb(242,16,51)" fg:x="108" fg:w="1"/><text x="21.4681%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="501" width="0.1965%" height="15" fill="rgb(248,9,4)" fg:x="108" fg:w="1"/><text x="21.4681%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="485" width="0.1965%" height="15" fill="rgb(210,31,22)" fg:x="108" fg:w="1"/><text x="21.4681%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="469" width="0.1965%" height="15" fill="rgb(239,54,39)" fg:x="108" fg:w="1"/><text x="21.4681%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="453" width="0.1965%" height="15" fill="rgb(230,99,41)" fg:x="108" fg:w="1"/><text x="21.4681%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="21.2181%" y="437" width="0.1965%" height="15" fill="rgb(253,106,12)" fg:x="108" fg:w="1"/><text x="21.4681%" y="447.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.20%)</title><rect x="21.8075%" y="341" width="0.1965%" height="15" fill="rgb(213,46,41)" fg:x="111" fg:w="1"/><text x="22.0575%" y="351.50"></text></g><g><title>mi_slice_first (1 samples, 0.20%)</title><rect x="21.8075%" y="325" width="0.1965%" height="15" fill="rgb(215,133,35)" fg:x="111" fg:w="1"/><text x="22.0575%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="693" width="0.7859%" height="15" fill="rgb(213,28,5)" fg:x="109" fg:w="4"/><text x="21.6645%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="677" width="0.7859%" height="15" fill="rgb(215,77,49)" fg:x="109" fg:w="4"/><text x="21.6645%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="661" width="0.7859%" height="15" fill="rgb(248,100,22)" fg:x="109" fg:w="4"/><text x="21.6645%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="645" width="0.7859%" height="15" fill="rgb(208,67,9)" fg:x="109" fg:w="4"/><text x="21.6645%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.79%)</title><rect x="21.4145%" y="629" width="0.7859%" height="15" fill="rgb(219,133,21)" fg:x="109" fg:w="4"/><text x="21.6645%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4 samples, 0.79%)</title><rect x="21.4145%" y="613" width="0.7859%" height="15" fill="rgb(246,46,29)" fg:x="109" fg:w="4"/><text x="21.6645%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.79%)</title><rect x="21.4145%" y="597" width="0.7859%" height="15" fill="rgb(246,185,52)" fg:x="109" fg:w="4"/><text x="21.6645%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.79%)</title><rect x="21.4145%" y="581" width="0.7859%" height="15" fill="rgb(252,136,11)" fg:x="109" fg:w="4"/><text x="21.6645%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="565" width="0.7859%" height="15" fill="rgb(219,138,53)" fg:x="109" fg:w="4"/><text x="21.6645%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="549" width="0.7859%" height="15" fill="rgb(211,51,23)" fg:x="109" fg:w="4"/><text x="21.6645%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="533" width="0.7859%" height="15" fill="rgb(247,221,28)" fg:x="109" fg:w="4"/><text x="21.6645%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.79%)</title><rect x="21.4145%" y="517" width="0.7859%" height="15" fill="rgb(251,222,45)" fg:x="109" fg:w="4"/><text x="21.6645%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="501" width="0.7859%" height="15" fill="rgb(217,162,53)" fg:x="109" fg:w="4"/><text x="21.6645%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (4 samples, 0.79%)</title><rect x="21.4145%" y="485" width="0.7859%" height="15" fill="rgb(229,93,14)" fg:x="109" fg:w="4"/><text x="21.6645%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (3 samples, 0.59%)</title><rect x="21.6110%" y="469" width="0.5894%" height="15" fill="rgb(209,67,49)" fg:x="110" fg:w="3"/><text x="21.8610%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.39%)</title><rect x="21.8075%" y="453" width="0.3929%" height="15" fill="rgb(213,87,29)" fg:x="111" fg:w="2"/><text x="22.0575%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.39%)</title><rect x="21.8075%" y="437" width="0.3929%" height="15" fill="rgb(205,151,52)" fg:x="111" fg:w="2"/><text x="22.0575%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.39%)</title><rect x="21.8075%" y="421" width="0.3929%" height="15" fill="rgb(253,215,39)" fg:x="111" fg:w="2"/><text x="22.0575%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.39%)</title><rect x="21.8075%" y="405" width="0.3929%" height="15" fill="rgb(221,220,41)" fg:x="111" fg:w="2"/><text x="22.0575%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.39%)</title><rect x="21.8075%" y="389" width="0.3929%" height="15" fill="rgb(218,133,21)" fg:x="111" fg:w="2"/><text x="22.0575%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.39%)</title><rect x="21.8075%" y="373" width="0.3929%" height="15" fill="rgb(221,193,43)" fg:x="111" fg:w="2"/><text x="22.0575%" y="383.50"></text></g><g><title>mi_free (2 samples, 0.39%)</title><rect x="21.8075%" y="357" width="0.3929%" height="15" fill="rgb(240,128,52)" fg:x="111" fg:w="2"/><text x="22.0575%" y="367.50"></text></g><g><title>mi_block_set_next (1 samples, 0.20%)</title><rect x="22.0039%" y="341" width="0.1965%" height="15" fill="rgb(253,114,12)" fg:x="112" fg:w="1"/><text x="22.2539%" y="351.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.20%)</title><rect x="22.0039%" y="325" width="0.1965%" height="15" fill="rgb(215,223,47)" fg:x="112" fg:w="1"/><text x="22.2539%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (5 samples, 0.98%)</title><rect x="21.4145%" y="725" width="0.9823%" height="15" fill="rgb(248,225,23)" fg:x="109" fg:w="5"/><text x="21.6645%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (5 samples, 0.98%)</title><rect x="21.4145%" y="709" width="0.9823%" height="15" fill="rgb(250,108,0)" fg:x="109" fg:w="5"/><text x="21.6645%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::demo_parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="693" width="0.1965%" height="15" fill="rgb(228,208,7)" fg:x="113" fg:w="1"/><text x="22.4504%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::demo_parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="677" width="0.1965%" height="15" fill="rgb(244,45,10)" fg:x="113" fg:w="1"/><text x="22.4504%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::demo_parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="661" width="0.1965%" height="15" fill="rgb(207,125,25)" fg:x="113" fg:w="1"/><text x="22.4504%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="22.2004%" y="645" width="0.1965%" height="15" fill="rgb(210,195,18)" fg:x="113" fg:w="1"/><text x="22.4504%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.20%)</title><rect x="22.2004%" y="629" width="0.1965%" height="15" fill="rgb(249,80,12)" fg:x="113" fg:w="1"/><text x="22.4504%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.20%)</title><rect x="22.2004%" y="613" width="0.1965%" height="15" fill="rgb(221,65,9)" fg:x="113" fg:w="1"/><text x="22.4504%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.20%)</title><rect x="22.2004%" y="597" width="0.1965%" height="15" fill="rgb(235,49,36)" fg:x="113" fg:w="1"/><text x="22.4504%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::demo_parsing::data_table::ServerClass)&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="581" width="0.1965%" height="15" fill="rgb(225,32,20)" fg:x="113" fg:w="1"/><text x="22.4504%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::data_table::ServerClass&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="565" width="0.1965%" height="15" fill="rgb(215,141,46)" fg:x="113" fg:w="1"/><text x="22.4504%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::entities::Prop&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="549" width="0.1965%" height="15" fill="rgb(250,160,47)" fg:x="113" fg:w="1"/><text x="22.4504%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="22.2004%" y="533" width="0.1965%" height="15" fill="rgb(216,222,40)" fg:x="113" fg:w="1"/><text x="22.4504%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::entities::Prop]&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="517" width="0.1965%" height="15" fill="rgb(234,217,39)" fg:x="113" fg:w="1"/><text x="22.4504%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::entities::Prop&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="501" width="0.1965%" height="15" fill="rgb(207,178,40)" fg:x="113" fg:w="1"/><text x="22.4504%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="485" width="0.1965%" height="15" fill="rgb(221,136,13)" fg:x="113" fg:w="1"/><text x="22.4504%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="469" width="0.1965%" height="15" fill="rgb(249,199,10)" fg:x="113" fg:w="1"/><text x="22.4504%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="22.2004%" y="453" width="0.1965%" height="15" fill="rgb(249,222,13)" fg:x="113" fg:w="1"/><text x="22.4504%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="22.2004%" y="437" width="0.1965%" height="15" fill="rgb(244,185,38)" fg:x="113" fg:w="1"/><text x="22.4504%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.20%)</title><rect x="22.2004%" y="421" width="0.1965%" height="15" fill="rgb(236,202,9)" fg:x="113" fg:w="1"/><text x="22.4504%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.20%)</title><rect x="22.2004%" y="405" width="0.1965%" height="15" fill="rgb(250,229,37)" fg:x="113" fg:w="1"/><text x="22.4504%" y="415.50"></text></g><g><title>mi_free (1 samples, 0.20%)</title><rect x="22.2004%" y="389" width="0.1965%" height="15" fill="rgb(206,174,23)" fg:x="113" fg:w="1"/><text x="22.4504%" y="399.50"></text></g><g><title>mi_block_set_next (1 samples, 0.20%)</title><rect x="22.2004%" y="373" width="0.1965%" height="15" fill="rgb(211,33,43)" fg:x="113" fg:w="1"/><text x="22.4504%" y="383.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.20%)</title><rect x="22.2004%" y="357" width="0.1965%" height="15" fill="rgb(245,58,50)" fg:x="113" fg:w="1"/><text x="22.4504%" y="367.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::new (1 samples, 0.20%)</title><rect x="22.3969%" y="693" width="0.1965%" height="15" fill="rgb(244,68,36)" fg:x="114" fg:w="1"/><text x="22.6469%" y="703.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_cache_path (1 samples, 0.20%)</title><rect x="22.3969%" y="677" width="0.1965%" height="15" fill="rgb(232,229,15)" fg:x="114" fg:w="1"/><text x="22.6469%" y="687.50"></text></g><g><title>sha256::digest (1 samples, 0.20%)</title><rect x="22.3969%" y="661" width="0.1965%" height="15" fill="rgb(254,30,23)" fg:x="114" fg:w="1"/><text x="22.6469%" y="671.50"></text></g><g><title>&lt;&amp;str as sha256::Sha256Digest&gt;::digest (1 samples, 0.20%)</title><rect x="22.3969%" y="645" width="0.1965%" height="15" fill="rgb(235,160,14)" fg:x="114" fg:w="1"/><text x="22.6469%" y="655.50"></text></g><g><title>sha256::__digest__ (1 samples, 0.20%)</title><rect x="22.3969%" y="629" width="0.1965%" height="15" fill="rgb(212,155,44)" fg:x="114" fg:w="1"/><text x="22.6469%" y="639.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.20%)</title><rect x="22.3969%" y="613" width="0.1965%" height="15" fill="rgb(226,2,50)" fg:x="114" fg:w="1"/><text x="22.6469%" y="623.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (1 samples, 0.20%)</title><rect x="22.3969%" y="597" width="0.1965%" height="15" fill="rgb(234,177,6)" fg:x="114" fg:w="1"/><text x="22.6469%" y="607.50"></text></g><g><title>sha2::sha256::Engine256::update (1 samples, 0.20%)</title><rect x="22.3969%" y="581" width="0.1965%" height="15" fill="rgb(217,24,9)" fg:x="114" fg:w="1"/><text x="22.6469%" y="591.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (1 samples, 0.20%)</title><rect x="22.3969%" y="565" width="0.1965%" height="15" fill="rgb(220,13,46)" fg:x="114" fg:w="1"/><text x="22.6469%" y="575.50"></text></g><g><title>sha2::sha256::Engine256::update::{{closure}} (1 samples, 0.20%)</title><rect x="22.3969%" y="549" width="0.1965%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="1"/><text x="22.6469%" y="559.50"></text></g><g><title>sha2::sha256::compress256 (1 samples, 0.20%)</title><rect x="22.3969%" y="533" width="0.1965%" height="15" fill="rgb(222,198,25)" fg:x="114" fg:w="1"/><text x="22.6469%" y="543.50"></text></g><g><title>sha2::sha256::x86::compress (1 samples, 0.20%)</title><rect x="22.3969%" y="517" width="0.1965%" height="15" fill="rgb(211,99,13)" fg:x="114" fg:w="1"/><text x="22.6469%" y="527.50"></text></g><g><title>sha2::sha256::x86::digest_blocks (1 samples, 0.20%)</title><rect x="22.3969%" y="501" width="0.1965%" height="15" fill="rgb(232,111,31)" fg:x="114" fg:w="1"/><text x="22.6469%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.20%)</title><rect x="22.3969%" y="485" width="0.1965%" height="15" fill="rgb(245,82,37)" fg:x="114" fg:w="1"/><text x="22.6469%" y="495.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (5 samples, 0.98%)</title><rect x="23.5756%" y="677" width="0.9823%" height="15" fill="rgb(227,149,46)" fg:x="120" fg:w="5"/><text x="23.8256%" y="687.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (5 samples, 0.98%)</title><rect x="23.5756%" y="661" width="0.9823%" height="15" fill="rgb(218,36,50)" fg:x="120" fg:w="5"/><text x="23.8256%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (5 samples, 0.98%)</title><rect x="23.5756%" y="645" width="0.9823%" height="15" fill="rgb(226,80,48)" fg:x="120" fg:w="5"/><text x="23.8256%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.59%)</title><rect x="24.5580%" y="677" width="0.5894%" height="15" fill="rgb(238,224,15)" fg:x="125" fg:w="3"/><text x="24.8080%" y="687.50"></text></g><g><title>core::cmp::min (1 samples, 0.20%)</title><rect x="24.9509%" y="661" width="0.1965%" height="15" fill="rgb(241,136,10)" fg:x="127" fg:w="1"/><text x="25.2009%" y="671.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_by_id (1 samples, 0.20%)</title><rect x="24.9509%" y="645" width="0.1965%" height="15" fill="rgb(208,32,45)" fg:x="127" fg:w="1"/><text x="25.2009%" y="655.50"></text></g><g><title>_mi_memcpy_aligned (8 samples, 1.57%)</title><rect x="28.2908%" y="549" width="1.5717%" height="15" fill="rgb(207,135,9)" fg:x="144" fg:w="8"/><text x="28.5408%" y="559.50"></text></g><g><title>_mi_memcpy (8 samples, 1.57%)</title><rect x="28.2908%" y="533" width="1.5717%" height="15" fill="rgb(206,86,44)" fg:x="144" fg:w="8"/><text x="28.5408%" y="543.50"></text></g><g><title>memcpy (8 samples, 1.57%)</title><rect x="28.2908%" y="517" width="1.5717%" height="15" fill="rgb(245,177,15)" fg:x="144" fg:w="8"/><text x="28.5408%" y="527.50"></text></g><g><title>[libc.so.6] (8 samples, 1.57%)</title><rect x="28.2908%" y="501" width="1.5717%" height="15" fill="rgb(206,64,50)" fg:x="144" fg:w="8"/><text x="28.5408%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 1.77%)</title><rect x="28.2908%" y="661" width="1.7682%" height="15" fill="rgb(234,36,40)" fg:x="144" fg:w="9"/><text x="28.5408%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 1.77%)</title><rect x="28.2908%" y="645" width="1.7682%" height="15" fill="rgb(213,64,8)" fg:x="144" fg:w="9"/><text x="28.5408%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 1.77%)</title><rect x="28.2908%" y="629" width="1.7682%" height="15" fill="rgb(210,75,36)" fg:x="144" fg:w="9"/><text x="28.5408%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 1.77%)</title><rect x="28.2908%" y="613" width="1.7682%" height="15" fill="rgb(229,88,21)" fg:x="144" fg:w="9"/><text x="28.5408%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 1.77%)</title><rect x="28.2908%" y="597" width="1.7682%" height="15" fill="rgb(252,204,47)" fg:x="144" fg:w="9"/><text x="28.5408%" y="607.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 1.77%)</title><rect x="28.2908%" y="581" width="1.7682%" height="15" fill="rgb(208,77,27)" fg:x="144" fg:w="9"/><text x="28.5408%" y="591.50"></text></g><g><title>_mi_heap_realloc_zero (9 samples, 1.77%)</title><rect x="28.2908%" y="565" width="1.7682%" height="15" fill="rgb(221,76,26)" fg:x="144" fg:w="9"/><text x="28.5408%" y="575.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="29.8625%" y="549" width="0.1965%" height="15" fill="rgb(225,139,18)" fg:x="152" fg:w="1"/><text x="30.1125%" y="559.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.20%)</title><rect x="29.8625%" y="533" width="0.1965%" height="15" fill="rgb(230,137,11)" fg:x="152" fg:w="1"/><text x="30.1125%" y="543.50"></text></g><g><title>mi_find_page (1 samples, 0.20%)</title><rect x="29.8625%" y="517" width="0.1965%" height="15" fill="rgb(212,28,1)" fg:x="152" fg:w="1"/><text x="30.1125%" y="527.50"></text></g><g><title>mi_large_huge_page_alloc (1 samples, 0.20%)</title><rect x="29.8625%" y="501" width="0.1965%" height="15" fill="rgb(248,164,17)" fg:x="152" fg:w="1"/><text x="30.1125%" y="511.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.20%)</title><rect x="29.8625%" y="485" width="0.1965%" height="15" fill="rgb(222,171,42)" fg:x="152" fg:w="1"/><text x="30.1125%" y="495.50"></text></g><g><title>mi_segments_page_alloc (1 samples, 0.20%)</title><rect x="29.8625%" y="469" width="0.1965%" height="15" fill="rgb(243,84,45)" fg:x="152" fg:w="1"/><text x="30.1125%" y="479.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.20%)</title><rect x="29.8625%" y="453" width="0.1965%" height="15" fill="rgb(252,49,23)" fg:x="152" fg:w="1"/><text x="30.1125%" y="463.50"></text></g><g><title>mi_segment_span_allocate (1 samples, 0.20%)</title><rect x="29.8625%" y="437" width="0.1965%" height="15" fill="rgb(215,19,7)" fg:x="152" fg:w="1"/><text x="30.1125%" y="447.50"></text></g><g><title>mi_segment_ensure_committed (1 samples, 0.20%)</title><rect x="29.8625%" y="421" width="0.1965%" height="15" fill="rgb(238,81,41)" fg:x="152" fg:w="1"/><text x="30.1125%" y="431.50"></text></g><g><title>mi_segment_commitx (1 samples, 0.20%)</title><rect x="29.8625%" y="405" width="0.1965%" height="15" fill="rgb(210,199,37)" fg:x="152" fg:w="1"/><text x="30.1125%" y="415.50"></text></g><g><title>_mi_clock_now (1 samples, 0.20%)</title><rect x="29.8625%" y="389" width="0.1965%" height="15" fill="rgb(244,192,49)" fg:x="152" fg:w="1"/><text x="30.1125%" y="399.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.20%)</title><rect x="29.8625%" y="373" width="0.1965%" height="15" fill="rgb(226,211,11)" fg:x="152" fg:w="1"/><text x="30.1125%" y="383.50"></text></g><g><title>[[vdso]] (1 samples, 0.20%)</title><rect x="29.8625%" y="357" width="0.1965%" height="15" fill="rgb(236,162,54)" fg:x="152" fg:w="1"/><text x="30.1125%" y="367.50"></text></g><g><title>[[vdso]] (1 samples, 0.20%)</title><rect x="29.8625%" y="341" width="0.1965%" height="15" fill="rgb(220,229,9)" fg:x="152" fg:w="1"/><text x="30.1125%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.20%)</title><rect x="30.0589%" y="661" width="0.1965%" height="15" fill="rgb(250,87,22)" fg:x="153" fg:w="1"/><text x="30.3089%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.20%)</title><rect x="30.0589%" y="645" width="0.1965%" height="15" fill="rgb(239,43,17)" fg:x="153" fg:w="1"/><text x="30.3089%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 7.27%)</title><rect x="25.1473%" y="677" width="7.2692%" height="15" fill="rgb(231,177,25)" fg:x="128" fg:w="37"/><text x="25.3973%" y="687.50">alloc::vec..</text></g><g><title>core::ptr::write (11 samples, 2.16%)</title><rect x="30.2554%" y="661" width="2.1611%" height="15" fill="rgb(219,179,1)" fg:x="154" fg:w="11"/><text x="30.5054%" y="671.50">c..</text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="645" width="0.5894%" height="15" fill="rgb(238,219,53)" fg:x="162" fg:w="3"/><text x="32.0771%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="629" width="0.5894%" height="15" fill="rgb(232,167,36)" fg:x="162" fg:w="3"/><text x="32.0771%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="613" width="0.5894%" height="15" fill="rgb(244,19,51)" fg:x="162" fg:w="3"/><text x="32.0771%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="597" width="0.5894%" height="15" fill="rgb(224,6,22)" fg:x="162" fg:w="3"/><text x="32.0771%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="581" width="0.5894%" height="15" fill="rgb(224,145,5)" fg:x="162" fg:w="3"/><text x="32.0771%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="565" width="0.5894%" height="15" fill="rgb(234,130,49)" fg:x="162" fg:w="3"/><text x="32.0771%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="549" width="0.5894%" height="15" fill="rgb(254,6,2)" fg:x="162" fg:w="3"/><text x="32.0771%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="533" width="0.5894%" height="15" fill="rgb(208,96,46)" fg:x="162" fg:w="3"/><text x="32.0771%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="517" width="0.5894%" height="15" fill="rgb(239,3,39)" fg:x="162" fg:w="3"/><text x="32.0771%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="501" width="0.5894%" height="15" fill="rgb(233,210,1)" fg:x="162" fg:w="3"/><text x="32.0771%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="485" width="0.5894%" height="15" fill="rgb(244,137,37)" fg:x="162" fg:w="3"/><text x="32.0771%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="31.8271%" y="469" width="0.5894%" height="15" fill="rgb(240,136,2)" fg:x="162" fg:w="3"/><text x="32.0771%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 1.57%)</title><rect x="32.4165%" y="613" width="1.5717%" height="15" fill="rgb(239,18,37)" fg:x="165" fg:w="8"/><text x="32.6665%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 1.57%)</title><rect x="32.4165%" y="597" width="1.5717%" height="15" fill="rgb(218,185,22)" fg:x="165" fg:w="8"/><text x="32.6665%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 1.57%)</title><rect x="32.4165%" y="581" width="1.5717%" height="15" fill="rgb(225,218,4)" fg:x="165" fg:w="8"/><text x="32.6665%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 1.57%)</title><rect x="32.4165%" y="565" width="1.5717%" height="15" fill="rgb(230,182,32)" fg:x="165" fg:w="8"/><text x="32.6665%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 1.57%)</title><rect x="32.4165%" y="549" width="1.5717%" height="15" fill="rgb(242,56,43)" fg:x="165" fg:w="8"/><text x="32.6665%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 1.57%)</title><rect x="32.4165%" y="533" width="1.5717%" height="15" fill="rgb(233,99,24)" fg:x="165" fg:w="8"/><text x="32.6665%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 1.57%)</title><rect x="32.4165%" y="517" width="1.5717%" height="15" fill="rgb(234,209,42)" fg:x="165" fg:w="8"/><text x="32.6665%" y="527.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 1.57%)</title><rect x="32.4165%" y="501" width="1.5717%" height="15" fill="rgb(227,7,12)" fg:x="165" fg:w="8"/><text x="32.6665%" y="511.50"></text></g><g><title>_mi_heap_realloc_zero (8 samples, 1.57%)</title><rect x="32.4165%" y="485" width="1.5717%" height="15" fill="rgb(245,203,43)" fg:x="165" fg:w="8"/><text x="32.6665%" y="495.50"></text></g><g><title>_mi_memcpy_aligned (8 samples, 1.57%)</title><rect x="32.4165%" y="469" width="1.5717%" height="15" fill="rgb(238,205,33)" fg:x="165" fg:w="8"/><text x="32.6665%" y="479.50"></text></g><g><title>_mi_memcpy (8 samples, 1.57%)</title><rect x="32.4165%" y="453" width="1.5717%" height="15" fill="rgb(231,56,7)" fg:x="165" fg:w="8"/><text x="32.6665%" y="463.50"></text></g><g><title>memcpy (8 samples, 1.57%)</title><rect x="32.4165%" y="437" width="1.5717%" height="15" fill="rgb(244,186,29)" fg:x="165" fg:w="8"/><text x="32.6665%" y="447.50"></text></g><g><title>[libc.so.6] (8 samples, 1.57%)</title><rect x="32.4165%" y="421" width="1.5717%" height="15" fill="rgb(234,111,31)" fg:x="165" fg:w="8"/><text x="32.6665%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="405" width="0.3929%" height="15" fill="rgb(241,149,10)" fg:x="171" fg:w="2"/><text x="33.8453%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="389" width="0.3929%" height="15" fill="rgb(249,206,44)" fg:x="171" fg:w="2"/><text x="33.8453%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="373" width="0.3929%" height="15" fill="rgb(251,153,30)" fg:x="171" fg:w="2"/><text x="33.8453%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="357" width="0.3929%" height="15" fill="rgb(239,152,38)" fg:x="171" fg:w="2"/><text x="33.8453%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="341" width="0.3929%" height="15" fill="rgb(249,139,47)" fg:x="171" fg:w="2"/><text x="33.8453%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="325" width="0.3929%" height="15" fill="rgb(244,64,35)" fg:x="171" fg:w="2"/><text x="33.8453%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="309" width="0.3929%" height="15" fill="rgb(216,46,15)" fg:x="171" fg:w="2"/><text x="33.8453%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="293" width="0.3929%" height="15" fill="rgb(250,74,19)" fg:x="171" fg:w="2"/><text x="33.8453%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="277" width="0.3929%" height="15" fill="rgb(249,42,33)" fg:x="171" fg:w="2"/><text x="33.8453%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="261" width="0.3929%" height="15" fill="rgb(242,149,17)" fg:x="171" fg:w="2"/><text x="33.8453%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="245" width="0.3929%" height="15" fill="rgb(244,29,21)" fg:x="171" fg:w="2"/><text x="33.8453%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="229" width="0.3929%" height="15" fill="rgb(220,130,37)" fg:x="171" fg:w="2"/><text x="33.8453%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="33.5953%" y="213" width="0.3929%" height="15" fill="rgb(211,67,2)" fg:x="171" fg:w="2"/><text x="33.8453%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="33.7917%" y="197" width="0.1965%" height="15" fill="rgb(235,68,52)" fg:x="172" fg:w="1"/><text x="34.0417%" y="207.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (1 samples, 0.20%)</title><rect x="35.1670%" y="469" width="0.1965%" height="15" fill="rgb(246,142,3)" fg:x="179" fg:w="1"/><text x="35.4170%" y="479.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (1 samples, 0.20%)</title><rect x="35.1670%" y="453" width="0.1965%" height="15" fill="rgb(241,25,7)" fg:x="179" fg:w="1"/><text x="35.4170%" y="463.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (13 samples, 2.55%)</title><rect x="35.3635%" y="469" width="2.5540%" height="15" fill="rgb(242,119,39)" fg:x="180" fg:w="13"/><text x="35.6135%" y="479.50">mi..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.20%)</title><rect x="47.5442%" y="453" width="0.1965%" height="15" fill="rgb(241,98,45)" fg:x="242" fg:w="1"/><text x="47.7942%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.20%)</title><rect x="47.5442%" y="437" width="0.1965%" height="15" fill="rgb(254,28,30)" fg:x="242" fg:w="1"/><text x="47.7942%" y="447.50"></text></g><g><title>[libc.so.6] (13 samples, 2.55%)</title><rect x="47.7407%" y="453" width="2.5540%" height="15" fill="rgb(241,142,54)" fg:x="243" fg:w="13"/><text x="47.9907%" y="463.50">[l..</text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (56 samples, 11.00%)</title><rect x="50.2947%" y="453" width="11.0020%" height="15" fill="rgb(222,85,15)" fg:x="256" fg:w="56"/><text x="50.5447%" y="463.50">miniz_oxide::inf..</text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (44 samples, 8.64%)</title><rect x="52.6523%" y="437" width="8.6444%" height="15" fill="rgb(210,85,47)" fg:x="268" fg:w="44"/><text x="52.9023%" y="447.50">miniz_oxide:..</text></g><g><title>miniz_oxide::inflate::core::apply_match (12 samples, 2.36%)</title><rect x="61.2967%" y="453" width="2.3576%" height="15" fill="rgb(224,206,25)" fg:x="312" fg:w="12"/><text x="61.5467%" y="463.50">m..</text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (3 samples, 0.59%)</title><rect x="63.8507%" y="421" width="0.5894%" height="15" fill="rgb(243,201,19)" fg:x="325" fg:w="3"/><text x="64.1007%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (3 samples, 0.59%)</title><rect x="63.8507%" y="405" width="0.5894%" height="15" fill="rgb(236,59,4)" fg:x="325" fg:w="3"/><text x="64.1007%" y="415.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (3 samples, 0.59%)</title><rect x="63.8507%" y="389" width="0.5894%" height="15" fill="rgb(254,179,45)" fg:x="325" fg:w="3"/><text x="64.1007%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (3 samples, 0.59%)</title><rect x="63.8507%" y="373" width="0.5894%" height="15" fill="rgb(226,14,10)" fg:x="325" fg:w="3"/><text x="64.1007%" y="383.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4 samples, 0.79%)</title><rect x="64.4401%" y="421" width="0.7859%" height="15" fill="rgb(244,27,41)" fg:x="328" fg:w="4"/><text x="64.6901%" y="431.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (4 samples, 0.79%)</title><rect x="64.4401%" y="405" width="0.7859%" height="15" fill="rgb(235,35,32)" fg:x="328" fg:w="4"/><text x="64.6901%" y="415.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (4 samples, 0.79%)</title><rect x="64.4401%" y="389" width="0.7859%" height="15" fill="rgb(218,68,31)" fg:x="328" fg:w="4"/><text x="64.6901%" y="399.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (13 samples, 2.55%)</title><rect x="63.6542%" y="453" width="2.5540%" height="15" fill="rgb(207,120,37)" fg:x="324" fg:w="13"/><text x="63.9042%" y="463.50">mi..</text></g><g><title>miniz_oxide::inflate::core::read_u32_le (12 samples, 2.36%)</title><rect x="63.8507%" y="437" width="2.3576%" height="15" fill="rgb(227,98,0)" fg:x="325" fg:w="12"/><text x="64.1007%" y="447.50">m..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (5 samples, 0.98%)</title><rect x="65.2259%" y="421" width="0.9823%" height="15" fill="rgb(207,7,3)" fg:x="332" fg:w="5"/><text x="65.4759%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (5 samples, 0.98%)</title><rect x="65.2259%" y="405" width="0.9823%" height="15" fill="rgb(206,98,19)" fg:x="332" fg:w="5"/><text x="65.4759%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.98%)</title><rect x="65.2259%" y="389" width="0.9823%" height="15" fill="rgb(217,5,26)" fg:x="332" fg:w="5"/><text x="65.4759%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.98%)</title><rect x="65.2259%" y="373" width="0.9823%" height="15" fill="rgb(235,190,38)" fg:x="332" fg:w="5"/><text x="65.4759%" y="383.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (46 samples, 9.04%)</title><rect x="66.2083%" y="453" width="9.0373%" height="15" fill="rgb(247,86,24)" fg:x="337" fg:w="46"/><text x="66.4583%" y="463.50">miniz_oxide::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.98%)</title><rect x="74.2633%" y="437" width="0.9823%" height="15" fill="rgb(205,101,16)" fg:x="378" fg:w="5"/><text x="74.5133%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.98%)</title><rect x="74.2633%" y="421" width="0.9823%" height="15" fill="rgb(246,168,33)" fg:x="378" fg:w="5"/><text x="74.5133%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.59%)</title><rect x="74.6562%" y="405" width="0.5894%" height="15" fill="rgb(231,114,1)" fg:x="380" fg:w="3"/><text x="74.9062%" y="415.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::bytes_left (1 samples, 0.20%)</title><rect x="75.2456%" y="453" width="0.1965%" height="15" fill="rgb(207,184,53)" fg:x="383" fg:w="1"/><text x="75.4956%" y="463.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (193 samples, 37.92%)</title><rect x="37.9175%" y="469" width="37.9175%" height="15" fill="rgb(224,95,51)" fg:x="193" fg:w="193"/><text x="38.1675%" y="479.50">miniz_oxide::inflate::core::decompress_fast</text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (2 samples, 0.39%)</title><rect x="75.4420%" y="453" width="0.3929%" height="15" fill="rgb(212,188,45)" fg:x="384" fg:w="2"/><text x="75.6920%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="76.6208%" y="453" width="0.1965%" height="15" fill="rgb(223,154,38)" fg:x="390" fg:w="1"/><text x="76.8708%" y="463.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (6 samples, 1.18%)</title><rect x="75.8350%" y="469" width="1.1788%" height="15" fill="rgb(251,22,52)" fg:x="386" fg:w="6"/><text x="76.0850%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.20%)</title><rect x="76.8173%" y="453" width="0.1965%" height="15" fill="rgb(229,209,22)" fg:x="391" fg:w="1"/><text x="77.0673%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.20%)</title><rect x="76.8173%" y="437" width="0.1965%" height="15" fill="rgb(234,138,34)" fg:x="391" fg:w="1"/><text x="77.0673%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.20%)</title><rect x="76.8173%" y="421" width="0.1965%" height="15" fill="rgb(212,95,11)" fg:x="391" fg:w="1"/><text x="77.0673%" y="431.50"></text></g><g><title>miniz_oxide::inflate::core::read_byte (1 samples, 0.20%)</title><rect x="77.0138%" y="469" width="0.1965%" height="15" fill="rgb(240,179,47)" fg:x="392" fg:w="1"/><text x="77.2638%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="453" width="0.1965%" height="15" fill="rgb(240,163,11)" fg:x="392" fg:w="1"/><text x="77.2638%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="437" width="0.1965%" height="15" fill="rgb(236,37,12)" fg:x="392" fg:w="1"/><text x="77.2638%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="421" width="0.1965%" height="15" fill="rgb(232,164,16)" fg:x="392" fg:w="1"/><text x="77.2638%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="405" width="0.1965%" height="15" fill="rgb(244,205,15)" fg:x="392" fg:w="1"/><text x="77.2638%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="389" width="0.1965%" height="15" fill="rgb(223,117,47)" fg:x="392" fg:w="1"/><text x="77.2638%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="373" width="0.1965%" height="15" fill="rgb(244,107,35)" fg:x="392" fg:w="1"/><text x="77.2638%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="357" width="0.1965%" height="15" fill="rgb(205,140,8)" fg:x="392" fg:w="1"/><text x="77.2638%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="77.0138%" y="341" width="0.1965%" height="15" fill="rgb(228,84,46)" fg:x="392" fg:w="1"/><text x="77.2638%" y="351.50"></text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.39%)</title><rect x="77.2102%" y="421" width="0.3929%" height="15" fill="rgb(254,188,9)" fg:x="393" fg:w="2"/><text x="77.4602%" y="431.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (2 samples, 0.39%)</title><rect x="77.2102%" y="405" width="0.3929%" height="15" fill="rgb(206,112,54)" fg:x="393" fg:w="2"/><text x="77.4602%" y="415.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.39%)</title><rect x="77.2102%" y="389" width="0.3929%" height="15" fill="rgb(216,84,49)" fg:x="393" fg:w="2"/><text x="77.4602%" y="399.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="77.6031%" y="421" width="0.1965%" height="15" fill="rgb(214,194,35)" fg:x="395" fg:w="1"/><text x="77.8531%" y="431.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (224 samples, 44.01%)</title><rect x="33.9882%" y="485" width="44.0079%" height="15" fill="rgb(249,28,3)" fg:x="173" fg:w="224"/><text x="34.2382%" y="495.50">miniz_oxide::inflate::core::decompress</text></g><g><title>miniz_oxide::shared::update_adler32 (4 samples, 0.79%)</title><rect x="77.2102%" y="469" width="0.7859%" height="15" fill="rgb(222,56,52)" fg:x="393" fg:w="4"/><text x="77.4602%" y="479.50"></text></g><g><title>adler::Adler32::write_slice (4 samples, 0.79%)</title><rect x="77.2102%" y="453" width="0.7859%" height="15" fill="rgb(245,217,50)" fg:x="393" fg:w="4"/><text x="77.4602%" y="463.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (4 samples, 0.79%)</title><rect x="77.2102%" y="437" width="0.7859%" height="15" fill="rgb(213,201,24)" fg:x="393" fg:w="4"/><text x="77.4602%" y="447.50"></text></g><g><title>adler::algo::U32X4::from (1 samples, 0.20%)</title><rect x="77.7996%" y="421" width="0.1965%" height="15" fill="rgb(248,116,28)" fg:x="396" fg:w="1"/><text x="78.0496%" y="431.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (228 samples, 44.79%)</title><rect x="33.9882%" y="581" width="44.7937%" height="15" fill="rgb(219,72,43)" fg:x="173" fg:w="228"/><text x="34.2382%" y="591.50">std::io::Read::read_buf::{{closure}}</text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (228 samples, 44.79%)</title><rect x="33.9882%" y="565" width="44.7937%" height="15" fill="rgb(209,138,14)" fg:x="173" fg:w="228"/><text x="34.2382%" y="575.50">&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>flate2::zio::read (228 samples, 44.79%)</title><rect x="33.9882%" y="549" width="44.7937%" height="15" fill="rgb(222,18,33)" fg:x="173" fg:w="228"/><text x="34.2382%" y="559.50">flate2::zio::read</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (228 samples, 44.79%)</title><rect x="33.9882%" y="533" width="44.7937%" height="15" fill="rgb(213,199,7)" fg:x="173" fg:w="228"/><text x="34.2382%" y="543.50">&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress</text></g><g><title>miniz_oxide::inflate::stream::inflate (228 samples, 44.79%)</title><rect x="33.9882%" y="517" width="44.7937%" height="15" fill="rgb(250,110,10)" fg:x="173" fg:w="228"/><text x="34.2382%" y="527.50">miniz_oxide::inflate::stream::inflate</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (228 samples, 44.79%)</title><rect x="33.9882%" y="501" width="44.7937%" height="15" fill="rgb(248,123,6)" fg:x="173" fg:w="228"/><text x="34.2382%" y="511.50">miniz_oxide::inflate::stream::inflate_loop</text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (4 samples, 0.79%)</title><rect x="77.9961%" y="485" width="0.7859%" height="15" fill="rgb(206,91,31)" fg:x="397" fg:w="4"/><text x="78.2461%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.79%)</title><rect x="77.9961%" y="469" width="0.7859%" height="15" fill="rgb(211,154,13)" fg:x="397" fg:w="4"/><text x="78.2461%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.79%)</title><rect x="77.9961%" y="453" width="0.7859%" height="15" fill="rgb(225,148,7)" fg:x="397" fg:w="4"/><text x="78.2461%" y="463.50"></text></g><g><title>[libc.so.6] (4 samples, 0.79%)</title><rect x="77.9961%" y="437" width="0.7859%" height="15" fill="rgb(220,160,43)" fg:x="397" fg:w="4"/><text x="78.2461%" y="447.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_by_id (295 samples, 57.96%)</title><rect x="22.5933%" y="693" width="57.9568%" height="15" fill="rgb(213,52,39)" fg:x="115" fg:w="295"/><text x="22.8433%" y="703.50">demoparser::parsing::cache::cache_reader::ReadCache::read_by_id</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (245 samples, 48.13%)</title><rect x="32.4165%" y="677" width="48.1336%" height="15" fill="rgb(243,137,7)" fg:x="165" fg:w="245"/><text x="32.6665%" y="687.50">demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::decompress_bytes (245 samples, 48.13%)</title><rect x="32.4165%" y="661" width="48.1336%" height="15" fill="rgb(230,79,13)" fg:x="165" fg:w="245"/><text x="32.6665%" y="671.50">demoparser::parsing::cache::cache_reader::ReadCache::decompress_bytes</text></g><g><title>std::io::Read::read_to_end (245 samples, 48.13%)</title><rect x="32.4165%" y="645" width="48.1336%" height="15" fill="rgb(247,105,23)" fg:x="165" fg:w="245"/><text x="32.6665%" y="655.50">std::io::Read::read_to_end</text></g><g><title>std::io::default_read_to_end (245 samples, 48.13%)</title><rect x="32.4165%" y="629" width="48.1336%" height="15" fill="rgb(223,179,41)" fg:x="165" fg:w="245"/><text x="32.6665%" y="639.50">std::io::default_read_to_end</text></g><g><title>std::io::Read::read_buf (237 samples, 46.56%)</title><rect x="33.9882%" y="613" width="46.5619%" height="15" fill="rgb(218,9,34)" fg:x="173" fg:w="237"/><text x="34.2382%" y="623.50">std::io::Read::read_buf</text></g><g><title>std::io::default_read_buf (237 samples, 46.56%)</title><rect x="33.9882%" y="597" width="46.5619%" height="15" fill="rgb(222,106,8)" fg:x="173" fg:w="237"/><text x="34.2382%" y="607.50">std::io::default_read_buf</text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (9 samples, 1.77%)</title><rect x="78.7819%" y="581" width="1.7682%" height="15" fill="rgb(211,220,0)" fg:x="401" fg:w="9"/><text x="79.0319%" y="591.50"></text></g><g><title>core::intrinsics::write_bytes (9 samples, 1.77%)</title><rect x="78.7819%" y="565" width="1.7682%" height="15" fill="rgb(229,52,16)" fg:x="401" fg:w="9"/><text x="79.0319%" y="575.50"></text></g><g><title>[libc.so.6] (9 samples, 1.77%)</title><rect x="78.7819%" y="549" width="1.7682%" height="15" fill="rgb(212,155,18)" fg:x="401" fg:w="9"/><text x="79.0319%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="80.1572%" y="533" width="0.3929%" height="15" fill="rgb(242,21,14)" fg:x="408" fg:w="2"/><text x="80.4072%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="80.1572%" y="517" width="0.3929%" height="15" fill="rgb(222,19,48)" fg:x="408" fg:w="2"/><text x="80.4072%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="80.3536%" y="501" width="0.1965%" height="15" fill="rgb(232,45,27)" fg:x="409" fg:w="1"/><text x="80.6036%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="80.3536%" y="485" width="0.1965%" height="15" fill="rgb(249,103,42)" fg:x="409" fg:w="1"/><text x="80.6036%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="80.3536%" y="469" width="0.1965%" height="15" fill="rgb(246,81,33)" fg:x="409" fg:w="1"/><text x="80.6036%" y="479.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_dt_ge_map (1 samples, 0.20%)</title><rect x="80.5501%" y="693" width="0.1965%" height="15" fill="rgb(252,33,42)" fg:x="410" fg:w="1"/><text x="80.8001%" y="703.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_bytes_from_index (1 samples, 0.20%)</title><rect x="80.5501%" y="677" width="0.1965%" height="15" fill="rgb(209,212,41)" fg:x="410" fg:w="1"/><text x="80.8001%" y="687.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::decompress_bytes (1 samples, 0.20%)</title><rect x="80.5501%" y="661" width="0.1965%" height="15" fill="rgb(207,154,6)" fg:x="410" fg:w="1"/><text x="80.8001%" y="671.50"></text></g><g><title>flate2::zlib::bufread::ZlibDecoder&lt;R&gt;::new (1 samples, 0.20%)</title><rect x="80.5501%" y="645" width="0.1965%" height="15" fill="rgb(223,64,47)" fg:x="410" fg:w="1"/><text x="80.8001%" y="655.50"></text></g><g><title>flate2::mem::Decompress::new (1 samples, 0.20%)</title><rect x="80.5501%" y="629" width="0.1965%" height="15" fill="rgb(211,161,38)" fg:x="410" fg:w="1"/><text x="80.8001%" y="639.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::make (1 samples, 0.20%)</title><rect x="80.5501%" y="613" width="0.1965%" height="15" fill="rgb(219,138,40)" fg:x="410" fg:w="1"/><text x="80.8001%" y="623.50"></text></g><g><title>miniz_oxide::inflate::stream::InflateState::new_boxed (1 samples, 0.20%)</title><rect x="80.5501%" y="597" width="0.1965%" height="15" fill="rgb(241,228,46)" fg:x="410" fg:w="1"/><text x="80.8001%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (1 samples, 0.20%)</title><rect x="80.5501%" y="581" width="0.1965%" height="15" fill="rgb(223,209,38)" fg:x="410" fg:w="1"/><text x="80.8001%" y="591.50"></text></g><g><title>&lt;miniz_oxide::inflate::stream::InflateState as core::default::Default&gt;::default (1 samples, 0.20%)</title><rect x="80.5501%" y="565" width="0.1965%" height="15" fill="rgb(236,164,45)" fg:x="410" fg:w="1"/><text x="80.8001%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.20%)</title><rect x="80.5501%" y="549" width="0.1965%" height="15" fill="rgb(231,15,5)" fg:x="410" fg:w="1"/><text x="80.8001%" y="559.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::read_index (1 samples, 0.20%)</title><rect x="80.7466%" y="693" width="0.1965%" height="15" fill="rgb(252,35,15)" fg:x="411" fg:w="1"/><text x="80.9966%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.20%)</title><rect x="80.7466%" y="677" width="0.1965%" height="15" fill="rgb(248,181,18)" fg:x="411" fg:w="1"/><text x="80.9966%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.20%)</title><rect x="80.7466%" y="661" width="0.1965%" height="15" fill="rgb(233,39,42)" fg:x="411" fg:w="1"/><text x="80.9966%" y="671.50"></text></g><g><title>core::mem::replace (1 samples, 0.20%)</title><rect x="80.7466%" y="645" width="0.1965%" height="15" fill="rgb(238,110,33)" fg:x="411" fg:w="1"/><text x="80.9966%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="80.9430%" y="565" width="0.1965%" height="15" fill="rgb(233,195,10)" fg:x="412" fg:w="1"/><text x="81.1930%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="80.9430%" y="549" width="0.1965%" height="15" fill="rgb(254,105,3)" fg:x="412" fg:w="1"/><text x="81.1930%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="80.9430%" y="533" width="0.1965%" height="15" fill="rgb(221,225,9)" fg:x="412" fg:w="1"/><text x="81.1930%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.59%)</title><rect x="82.1218%" y="533" width="0.5894%" height="15" fill="rgb(224,227,45)" fg:x="418" fg:w="3"/><text x="82.3718%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.59%)</title><rect x="82.1218%" y="517" width="0.5894%" height="15" fill="rgb(229,198,43)" fg:x="418" fg:w="3"/><text x="82.3718%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.59%)</title><rect x="82.1218%" y="501" width="0.5894%" height="15" fill="rgb(206,209,35)" fg:x="418" fg:w="3"/><text x="82.3718%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.59%)</title><rect x="82.1218%" y="485" width="0.5894%" height="15" fill="rgb(245,195,53)" fg:x="418" fg:w="3"/><text x="82.3718%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.59%)</title><rect x="82.1218%" y="469" width="0.5894%" height="15" fill="rgb(240,92,26)" fg:x="418" fg:w="3"/><text x="82.3718%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.59%)</title><rect x="82.1218%" y="453" width="0.5894%" height="15" fill="rgb(207,40,23)" fg:x="418" fg:w="3"/><text x="82.3718%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.59%)</title><rect x="82.1218%" y="437" width="0.5894%" height="15" fill="rgb(223,111,35)" fg:x="418" fg:w="3"/><text x="82.3718%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.59%)</title><rect x="82.1218%" y="421" width="0.5894%" height="15" fill="rgb(229,147,28)" fg:x="418" fg:w="3"/><text x="82.3718%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.59%)</title><rect x="82.1218%" y="405" width="0.5894%" height="15" fill="rgb(211,29,28)" fg:x="418" fg:w="3"/><text x="82.3718%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.59%)</title><rect x="82.1218%" y="389" width="0.5894%" height="15" fill="rgb(228,72,33)" fg:x="418" fg:w="3"/><text x="82.3718%" y="399.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.59%)</title><rect x="82.1218%" y="373" width="0.5894%" height="15" fill="rgb(205,214,31)" fg:x="418" fg:w="3"/><text x="82.3718%" y="383.50"></text></g><g><title>mi_malloc (3 samples, 0.59%)</title><rect x="82.1218%" y="357" width="0.5894%" height="15" fill="rgb(224,111,15)" fg:x="418" fg:w="3"/><text x="82.3718%" y="367.50"></text></g><g><title>mi_heap_malloc (3 samples, 0.59%)</title><rect x="82.1218%" y="341" width="0.5894%" height="15" fill="rgb(253,21,26)" fg:x="418" fg:w="3"/><text x="82.3718%" y="351.50"></text></g><g><title>mi_heap_malloc_small (3 samples, 0.59%)</title><rect x="82.1218%" y="325" width="0.5894%" height="15" fill="rgb(245,139,43)" fg:x="418" fg:w="3"/><text x="82.3718%" y="335.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.59%)</title><rect x="82.1218%" y="309" width="0.5894%" height="15" fill="rgb(252,170,7)" fg:x="418" fg:w="3"/><text x="82.3718%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 1.18%)</title><rect x="81.7289%" y="549" width="1.1788%" height="15" fill="rgb(231,118,14)" fg:x="416" fg:w="6"/><text x="81.9789%" y="559.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (1 samples, 0.20%)</title><rect x="82.7112%" y="533" width="0.1965%" height="15" fill="rgb(238,83,0)" fg:x="421" fg:w="1"/><text x="82.9612%" y="543.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (10 samples, 1.96%)</title><rect x="81.1395%" y="565" width="1.9646%" height="15" fill="rgb(221,39,39)" fg:x="413" fg:w="10"/><text x="81.3895%" y="575.50">&lt;..</text></g><g><title>&lt;protobuf::special::SpecialFields as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="82.9077%" y="549" width="0.1965%" height="15" fill="rgb(222,119,46)" fg:x="422" fg:w="1"/><text x="83.1577%" y="559.50"></text></g><g><title>&lt;protobuf::cached_size::CachedSize as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="82.9077%" y="533" width="0.1965%" height="15" fill="rgb(222,165,49)" fg:x="422" fg:w="1"/><text x="83.1577%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 2.55%)</title><rect x="80.9430%" y="629" width="2.5540%" height="15" fill="rgb(219,113,52)" fg:x="412" fg:w="13"/><text x="81.1930%" y="639.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 2.55%)</title><rect x="80.9430%" y="613" width="2.5540%" height="15" fill="rgb(214,7,15)" fg:x="412" fg:w="13"/><text x="81.1930%" y="623.50">al..</text></g><g><title>alloc::slice::hack::to_vec (13 samples, 2.55%)</title><rect x="80.9430%" y="597" width="2.5540%" height="15" fill="rgb(235,32,4)" fg:x="412" fg:w="13"/><text x="81.1930%" y="607.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 2.55%)</title><rect x="80.9430%" y="581" width="2.5540%" height="15" fill="rgb(238,90,54)" fg:x="412" fg:w="13"/><text x="81.1930%" y="591.50">&lt;T..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.39%)</title><rect x="83.1041%" y="565" width="0.3929%" height="15" fill="rgb(213,208,19)" fg:x="423" fg:w="2"/><text x="83.3541%" y="575.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (14 samples, 2.75%)</title><rect x="80.9430%" y="645" width="2.7505%" height="15" fill="rgb(233,156,4)" fg:x="412" fg:w="14"/><text x="81.1930%" y="655.50">&lt;c..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="83.4971%" y="629" width="0.1965%" height="15" fill="rgb(207,194,5)" fg:x="425" fg:w="1"/><text x="83.7471%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="83.4971%" y="613" width="0.1965%" height="15" fill="rgb(206,111,30)" fg:x="425" fg:w="1"/><text x="83.7471%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.20%)</title><rect x="83.4971%" y="597" width="0.1965%" height="15" fill="rgb(243,70,54)" fg:x="425" fg:w="1"/><text x="83.7471%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.20%)</title><rect x="83.4971%" y="581" width="0.1965%" height="15" fill="rgb(242,28,8)" fg:x="425" fg:w="1"/><text x="83.7471%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.20%)</title><rect x="83.4971%" y="565" width="0.1965%" height="15" fill="rgb(219,106,18)" fg:x="425" fg:w="1"/><text x="83.7471%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.20%)</title><rect x="83.4971%" y="549" width="0.1965%" height="15" fill="rgb(244,222,10)" fg:x="425" fg:w="1"/><text x="83.7471%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="83.4971%" y="533" width="0.1965%" height="15" fill="rgb(236,179,52)" fg:x="425" fg:w="1"/><text x="83.7471%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="83.4971%" y="517" width="0.1965%" height="15" fill="rgb(213,23,39)" fg:x="425" fg:w="1"/><text x="83.7471%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.20%)</title><rect x="83.4971%" y="501" width="0.1965%" height="15" fill="rgb(238,48,10)" fg:x="425" fg:w="1"/><text x="83.7471%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.20%)</title><rect x="83.4971%" y="485" width="0.1965%" height="15" fill="rgb(251,196,23)" fg:x="425" fg:w="1"/><text x="83.7471%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.20%)</title><rect x="83.4971%" y="469" width="0.1965%" height="15" fill="rgb(250,152,24)" fg:x="425" fg:w="1"/><text x="83.7471%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.20%)</title><rect x="83.4971%" y="453" width="0.1965%" height="15" fill="rgb(209,150,17)" fg:x="425" fg:w="1"/><text x="83.7471%" y="463.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="83.4971%" y="437" width="0.1965%" height="15" fill="rgb(234,202,34)" fg:x="425" fg:w="1"/><text x="83.7471%" y="447.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="83.4971%" y="421" width="0.1965%" height="15" fill="rgb(253,148,53)" fg:x="425" fg:w="1"/><text x="83.7471%" y="431.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.20%)</title><rect x="83.4971%" y="405" width="0.1965%" height="15" fill="rgb(218,129,16)" fg:x="425" fg:w="1"/><text x="83.7471%" y="415.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.20%)</title><rect x="83.4971%" y="389" width="0.1965%" height="15" fill="rgb(216,85,19)" fg:x="425" fg:w="1"/><text x="83.7471%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="645" width="0.1965%" height="15" fill="rgb(235,228,7)" fg:x="426" fg:w="1"/><text x="83.9435%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="629" width="0.1965%" height="15" fill="rgb(245,175,0)" fg:x="426" fg:w="1"/><text x="83.9435%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="83.6935%" y="613" width="0.1965%" height="15" fill="rgb(208,168,36)" fg:x="426" fg:w="1"/><text x="83.9435%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="597" width="0.1965%" height="15" fill="rgb(246,171,24)" fg:x="426" fg:w="1"/><text x="83.9435%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="581" width="0.1965%" height="15" fill="rgb(215,142,24)" fg:x="426" fg:w="1"/><text x="83.9435%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="565" width="0.1965%" height="15" fill="rgb(250,187,7)" fg:x="426" fg:w="1"/><text x="83.9435%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="549" width="0.1965%" height="15" fill="rgb(228,66,33)" fg:x="426" fg:w="1"/><text x="83.9435%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="533" width="0.1965%" height="15" fill="rgb(234,215,21)" fg:x="426" fg:w="1"/><text x="83.9435%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="83.6935%" y="517" width="0.1965%" height="15" fill="rgb(222,191,20)" fg:x="426" fg:w="1"/><text x="83.9435%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="83.6935%" y="501" width="0.1965%" height="15" fill="rgb(245,79,54)" fg:x="426" fg:w="1"/><text x="83.9435%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.20%)</title><rect x="83.6935%" y="485" width="0.1965%" height="15" fill="rgb(240,10,37)" fg:x="426" fg:w="1"/><text x="83.9435%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.20%)</title><rect x="83.6935%" y="469" width="0.1965%" height="15" fill="rgb(214,192,32)" fg:x="426" fg:w="1"/><text x="83.9435%" y="479.50"></text></g><g><title>__rg_dealloc (1 samples, 0.20%)</title><rect x="83.6935%" y="453" width="0.1965%" height="15" fill="rgb(209,36,54)" fg:x="426" fg:w="1"/><text x="83.9435%" y="463.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.20%)</title><rect x="83.6935%" y="437" width="0.1965%" height="15" fill="rgb(220,10,11)" fg:x="426" fg:w="1"/><text x="83.9435%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.20%)</title><rect x="83.8900%" y="629" width="0.1965%" height="15" fill="rgb(221,106,17)" fg:x="427" fg:w="1"/><text x="84.1400%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.20%)</title><rect x="83.8900%" y="613" width="0.1965%" height="15" fill="rgb(251,142,44)" fg:x="427" fg:w="1"/><text x="84.1400%" y="623.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.20%)</title><rect x="83.8900%" y="597" width="0.1965%" height="15" fill="rgb(238,13,15)" fg:x="427" fg:w="1"/><text x="84.1400%" y="607.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.20%)</title><rect x="83.8900%" y="581" width="0.1965%" height="15" fill="rgb(208,107,27)" fg:x="427" fg:w="1"/><text x="84.1400%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.20%)</title><rect x="83.8900%" y="565" width="0.1965%" height="15" fill="rgb(205,136,37)" fg:x="427" fg:w="1"/><text x="84.1400%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.20%)</title><rect x="83.8900%" y="549" width="0.1965%" height="15" fill="rgb(250,205,27)" fg:x="427" fg:w="1"/><text x="84.1400%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.20%)</title><rect x="83.8900%" y="533" width="0.1965%" height="15" fill="rgb(210,80,43)" fg:x="427" fg:w="1"/><text x="84.1400%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.20%)</title><rect x="83.8900%" y="517" width="0.1965%" height="15" fill="rgb(247,160,36)" fg:x="427" fg:w="1"/><text x="84.1400%" y="527.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.20%)</title><rect x="83.8900%" y="501" width="0.1965%" height="15" fill="rgb(234,13,49)" fg:x="427" fg:w="1"/><text x="84.1400%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.20%)</title><rect x="83.8900%" y="485" width="0.1965%" height="15" fill="rgb(234,122,0)" fg:x="427" fg:w="1"/><text x="84.1400%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.20%)</title><rect x="83.8900%" y="469" width="0.1965%" height="15" fill="rgb(207,146,38)" fg:x="427" fg:w="1"/><text x="84.1400%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.20%)</title><rect x="83.8900%" y="453" width="0.1965%" height="15" fill="rgb(207,177,25)" fg:x="427" fg:w="1"/><text x="84.1400%" y="463.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.20%)</title><rect x="83.8900%" y="437" width="0.1965%" height="15" fill="rgb(211,178,42)" fg:x="427" fg:w="1"/><text x="84.1400%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.20%)</title><rect x="83.8900%" y="421" width="0.1965%" height="15" fill="rgb(230,69,54)" fg:x="427" fg:w="1"/><text x="84.1400%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.20%)</title><rect x="83.8900%" y="405" width="0.1965%" height="15" fill="rgb(214,135,41)" fg:x="427" fg:w="1"/><text x="84.1400%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.20%)</title><rect x="83.8900%" y="389" width="0.1965%" height="15" fill="rgb(237,67,25)" fg:x="427" fg:w="1"/><text x="84.1400%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.20%)</title><rect x="83.8900%" y="373" width="0.1965%" height="15" fill="rgb(222,189,50)" fg:x="427" fg:w="1"/><text x="84.1400%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.20%)</title><rect x="83.8900%" y="357" width="0.1965%" height="15" fill="rgb(245,148,34)" fg:x="427" fg:w="1"/><text x="84.1400%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.20%)</title><rect x="83.8900%" y="341" width="0.1965%" height="15" fill="rgb(222,29,6)" fg:x="427" fg:w="1"/><text x="84.1400%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t: 32]&gt;&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="629" width="0.1965%" height="15" fill="rgb(221,189,43)" fg:x="428" fg:w="1"/><text x="84.3364%" y="639.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="84.0864%" y="613" width="0.1965%" height="15" fill="rgb(207,36,27)" fg:x="428" fg:w="1"/><text x="84.3364%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="597" width="0.1965%" height="15" fill="rgb(217,90,24)" fg:x="428" fg:w="1"/><text x="84.3364%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="581" width="0.1965%" height="15" fill="rgb(224,66,35)" fg:x="428" fg:w="1"/><text x="84.3364%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="565" width="0.1965%" height="15" fill="rgb(221,13,50)" fg:x="428" fg:w="1"/><text x="84.3364%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="549" width="0.1965%" height="15" fill="rgb(236,68,49)" fg:x="428" fg:w="1"/><text x="84.3364%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="533" width="0.1965%" height="15" fill="rgb(229,146,28)" fg:x="428" fg:w="1"/><text x="84.3364%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.20%)</title><rect x="84.0864%" y="517" width="0.1965%" height="15" fill="rgb(225,31,38)" fg:x="428" fg:w="1"/><text x="84.3364%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="84.0864%" y="501" width="0.1965%" height="15" fill="rgb(250,208,3)" fg:x="428" fg:w="1"/><text x="84.3364%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.20%)</title><rect x="84.0864%" y="485" width="0.1965%" height="15" fill="rgb(246,54,23)" fg:x="428" fg:w="1"/><text x="84.3364%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.20%)</title><rect x="84.0864%" y="469" width="0.1965%" height="15" fill="rgb(243,76,11)" fg:x="428" fg:w="1"/><text x="84.3364%" y="479.50"></text></g><g><title>mi_free (1 samples, 0.20%)</title><rect x="84.0864%" y="453" width="0.1965%" height="15" fill="rgb(245,21,50)" fg:x="428" fg:w="1"/><text x="84.3364%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.39%)</title><rect x="84.2829%" y="597" width="0.3929%" height="15" fill="rgb(228,9,43)" fg:x="429" fg:w="2"/><text x="84.5329%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.39%)</title><rect x="84.2829%" y="581" width="0.3929%" height="15" fill="rgb(208,100,47)" fg:x="429" fg:w="2"/><text x="84.5329%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="84.2829%" y="565" width="0.3929%" height="15" fill="rgb(232,26,8)" fg:x="429" fg:w="2"/><text x="84.5329%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.39%)</title><rect x="84.2829%" y="549" width="0.3929%" height="15" fill="rgb(216,166,38)" fg:x="429" fg:w="2"/><text x="84.5329%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.39%)</title><rect x="84.2829%" y="533" width="0.3929%" height="15" fill="rgb(251,202,51)" fg:x="429" fg:w="2"/><text x="84.5329%" y="543.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.39%)</title><rect x="84.2829%" y="517" width="0.3929%" height="15" fill="rgb(254,216,34)" fg:x="429" fg:w="2"/><text x="84.5329%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.39%)</title><rect x="84.2829%" y="501" width="0.3929%" height="15" fill="rgb(251,32,27)" fg:x="429" fg:w="2"/><text x="84.5329%" y="511.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 0.39%)</title><rect x="84.2829%" y="485" width="0.3929%" height="15" fill="rgb(208,127,28)" fg:x="429" fg:w="2"/><text x="84.5329%" y="495.50"></text></g><g><title>_mi_memcpy (2 samples, 0.39%)</title><rect x="84.2829%" y="469" width="0.3929%" height="15" fill="rgb(224,137,22)" fg:x="429" fg:w="2"/><text x="84.5329%" y="479.50"></text></g><g><title>memcpy (2 samples, 0.39%)</title><rect x="84.2829%" y="453" width="0.3929%" height="15" fill="rgb(254,70,32)" fg:x="429" fg:w="2"/><text x="84.5329%" y="463.50"></text></g><g><title>[libc.so.6] (2 samples, 0.39%)</title><rect x="84.2829%" y="437" width="0.3929%" height="15" fill="rgb(229,75,37)" fg:x="429" fg:w="2"/><text x="84.5329%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="84.4794%" y="421" width="0.1965%" height="15" fill="rgb(252,64,23)" fg:x="430" fg:w="1"/><text x="84.7294%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="84.4794%" y="405" width="0.1965%" height="15" fill="rgb(232,162,48)" fg:x="430" fg:w="1"/><text x="84.7294%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="84.4794%" y="389" width="0.1965%" height="15" fill="rgb(246,160,12)" fg:x="430" fg:w="1"/><text x="84.7294%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="84.4794%" y="373" width="0.1965%" height="15" fill="rgb(247,166,0)" fg:x="430" fg:w="1"/><text x="84.7294%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.59%)</title><rect x="84.2829%" y="613" width="0.5894%" height="15" fill="rgb(249,219,21)" fg:x="429" fg:w="3"/><text x="84.5329%" y="623.50"></text></g><g><title>core::ptr::write (1 samples, 0.20%)</title><rect x="84.6758%" y="597" width="0.1965%" height="15" fill="rgb(205,209,3)" fg:x="431" fg:w="1"/><text x="84.9258%" y="607.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.20%)</title><rect x="85.0688%" y="597" width="0.1965%" height="15" fill="rgb(243,44,1)" fg:x="433" fg:w="1"/><text x="85.3188%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.20%)</title><rect x="85.0688%" y="581" width="0.1965%" height="15" fill="rgb(206,159,16)" fg:x="433" fg:w="1"/><text x="85.3188%" y="591.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.20%)</title><rect x="85.0688%" y="565" width="0.1965%" height="15" fill="rgb(244,77,30)" fg:x="433" fg:w="1"/><text x="85.3188%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.20%)</title><rect x="85.0688%" y="549" width="0.1965%" height="15" fill="rgb(218,69,12)" fg:x="433" fg:w="1"/><text x="85.3188%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.20%)</title><rect x="85.0688%" y="533" width="0.1965%" height="15" fill="rgb(212,87,7)" fg:x="433" fg:w="1"/><text x="85.3188%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.20%)</title><rect x="85.0688%" y="517" width="0.1965%" height="15" fill="rgb(245,114,25)" fg:x="433" fg:w="1"/><text x="85.3188%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.20%)</title><rect x="85.0688%" y="501" width="0.1965%" height="15" fill="rgb(210,61,42)" fg:x="433" fg:w="1"/><text x="85.3188%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.20%)</title><rect x="85.0688%" y="485" width="0.1965%" height="15" fill="rgb(211,52,33)" fg:x="433" fg:w="1"/><text x="85.3188%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="85.0688%" y="469" width="0.1965%" height="15" fill="rgb(234,58,33)" fg:x="433" fg:w="1"/><text x="85.3188%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="85.0688%" y="453" width="0.1965%" height="15" fill="rgb(220,115,36)" fg:x="433" fg:w="1"/><text x="85.3188%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.20%)</title><rect x="85.0688%" y="437" width="0.1965%" height="15" fill="rgb(243,153,54)" fg:x="433" fg:w="1"/><text x="85.3188%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.20%)</title><rect x="85.0688%" y="421" width="0.1965%" height="15" fill="rgb(251,47,18)" fg:x="433" fg:w="1"/><text x="85.3188%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.20%)</title><rect x="85.0688%" y="405" width="0.1965%" height="15" fill="rgb(242,102,42)" fg:x="433" fg:w="1"/><text x="85.3188%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.20%)</title><rect x="85.0688%" y="389" width="0.1965%" height="15" fill="rgb(234,31,38)" fg:x="433" fg:w="1"/><text x="85.3188%" y="399.50"></text></g><g><title>__rust_alloc (1 samples, 0.20%)</title><rect x="85.0688%" y="373" width="0.1965%" height="15" fill="rgb(221,117,51)" fg:x="433" fg:w="1"/><text x="85.3188%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.20%)</title><rect x="85.2652%" y="597" width="0.1965%" height="15" fill="rgb(212,20,18)" fg:x="434" fg:w="1"/><text x="85.5152%" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.20%)</title><rect x="85.2652%" y="581" width="0.1965%" height="15" fill="rgb(245,133,36)" fg:x="434" fg:w="1"/><text x="85.5152%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.20%)</title><rect x="85.6582%" y="581" width="0.1965%" height="15" fill="rgb(212,6,19)" fg:x="436" fg:w="1"/><text x="85.9082%" y="591.50"></text></g><g><title>core::ptr::read (1 samples, 0.20%)</title><rect x="85.6582%" y="565" width="0.1965%" height="15" fill="rgb(218,1,36)" fg:x="436" fg:w="1"/><text x="85.9082%" y="575.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.20%)</title><rect x="85.6582%" y="549" width="0.1965%" height="15" fill="rgb(246,84,54)" fg:x="436" fg:w="1"/><text x="85.9082%" y="559.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 0.20%)</title><rect x="85.8546%" y="581" width="0.1965%" height="15" fill="rgb(242,110,6)" fg:x="437" fg:w="1"/><text x="86.1046%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.20%)</title><rect x="85.8546%" y="565" width="0.1965%" height="15" fill="rgb(214,47,5)" fg:x="437" fg:w="1"/><text x="86.1046%" y="575.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::high_value (1 samples, 0.20%)</title><rect x="86.0511%" y="581" width="0.1965%" height="15" fill="rgb(218,159,25)" fg:x="438" fg:w="1"/><text x="86.3011%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.20%)</title><rect x="86.0511%" y="565" width="0.1965%" height="15" fill="rgb(215,211,28)" fg:x="438" fg:w="1"/><text x="86.3011%" y="575.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (13 samples, 2.55%)</title><rect x="83.8900%" y="645" width="2.5540%" height="15" fill="rgb(238,59,32)" fg:x="427" fg:w="13"/><text x="84.1400%" y="655.50">de..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (11 samples, 2.16%)</title><rect x="84.2829%" y="629" width="2.1611%" height="15" fill="rgb(226,82,3)" fg:x="429" fg:w="11"/><text x="84.5329%" y="639.50">d..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (8 samples, 1.57%)</title><rect x="84.8723%" y="613" width="1.5717%" height="15" fill="rgb(240,164,32)" fg:x="432" fg:w="8"/><text x="85.1223%" y="623.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (5 samples, 0.98%)</title><rect x="85.4617%" y="597" width="0.9823%" height="15" fill="rgb(232,46,7)" fg:x="435" fg:w="5"/><text x="85.7117%" y="607.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::is_prop_excl (1 samples, 0.20%)</title><rect x="86.2475%" y="581" width="0.1965%" height="15" fill="rgb(229,129,53)" fg:x="439" fg:w="1"/><text x="86.4975%" y="591.50"></text></g><g><title>csgoproto::netmessages::CNETMsg_File::file_name (1 samples, 0.20%)</title><rect x="86.2475%" y="565" width="0.1965%" height="15" fill="rgb(234,188,29)" fg:x="439" fg:w="1"/><text x="86.4975%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.20%)</title><rect x="86.2475%" y="549" width="0.1965%" height="15" fill="rgb(246,141,4)" fg:x="439" fg:w="1"/><text x="86.4975%" y="559.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::ToString&gt;::to_string (1 samples, 0.20%)</title><rect x="86.4440%" y="629" width="0.1965%" height="15" fill="rgb(229,23,39)" fg:x="440" fg:w="1"/><text x="86.6940%" y="639.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.20%)</title><rect x="86.4440%" y="613" width="0.1965%" height="15" fill="rgb(206,12,3)" fg:x="440" fg:w="1"/><text x="86.6940%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.20%)</title><rect x="86.4440%" y="597" width="0.1965%" height="15" fill="rgb(252,226,20)" fg:x="440" fg:w="1"/><text x="86.6940%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.20%)</title><rect x="86.4440%" y="581" width="0.1965%" height="15" fill="rgb(216,123,35)" fg:x="440" fg:w="1"/><text x="86.6940%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.20%)</title><rect x="86.4440%" y="565" width="0.1965%" height="15" fill="rgb(212,68,40)" fg:x="440" fg:w="1"/><text x="86.6940%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.20%)</title><rect x="86.4440%" y="549" width="0.1965%" height="15" fill="rgb(254,125,32)" fg:x="440" fg:w="1"/><text x="86.6940%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.20%)</title><rect x="86.4440%" y="533" width="0.1965%" height="15" fill="rgb(253,97,22)" fg:x="440" fg:w="1"/><text x="86.6940%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="86.4440%" y="517" width="0.1965%" height="15" fill="rgb(241,101,14)" fg:x="440" fg:w="1"/><text x="86.6940%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.20%)</title><rect x="86.4440%" y="501" width="0.1965%" height="15" fill="rgb(238,103,29)" fg:x="440" fg:w="1"/><text x="86.6940%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.20%)</title><rect x="86.4440%" y="485" width="0.1965%" height="15" fill="rgb(233,195,47)" fg:x="440" fg:w="1"/><text x="86.6940%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.20%)</title><rect x="86.4440%" y="469" width="0.1965%" height="15" fill="rgb(246,218,30)" fg:x="440" fg:w="1"/><text x="86.6940%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.20%)</title><rect x="86.4440%" y="453" width="0.1965%" height="15" fill="rgb(219,145,47)" fg:x="440" fg:w="1"/><text x="86.6940%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.20%)</title><rect x="86.4440%" y="437" width="0.1965%" height="15" fill="rgb(243,12,26)" fg:x="440" fg:w="1"/><text x="86.6940%" y="447.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="86.4440%" y="421" width="0.1965%" height="15" fill="rgb(214,87,16)" fg:x="440" fg:w="1"/><text x="86.6940%" y="431.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="86.4440%" y="405" width="0.1965%" height="15" fill="rgb(208,99,42)" fg:x="440" fg:w="1"/><text x="86.6940%" y="415.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.20%)</title><rect x="86.4440%" y="389" width="0.1965%" height="15" fill="rgb(253,99,2)" fg:x="440" fg:w="1"/><text x="86.6940%" y="399.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.20%)</title><rect x="86.4440%" y="373" width="0.1965%" height="15" fill="rgb(220,168,23)" fg:x="440" fg:w="1"/><text x="86.6940%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.20%)</title><rect x="86.6405%" y="629" width="0.1965%" height="15" fill="rgb(242,38,24)" fg:x="441" fg:w="1"/><text x="86.8905%" y="639.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_string (3 samples, 0.59%)</title><rect x="86.4440%" y="645" width="0.5894%" height="15" fill="rgb(225,182,9)" fg:x="440" fg:w="3"/><text x="86.6940%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.20%)</title><rect x="86.8369%" y="629" width="0.1965%" height="15" fill="rgb(243,178,37)" fg:x="442" fg:w="1"/><text x="87.0869%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.20%)</title><rect x="86.8369%" y="613" width="0.1965%" height="15" fill="rgb(232,139,19)" fg:x="442" fg:w="1"/><text x="87.0869%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.20%)</title><rect x="86.8369%" y="597" width="0.1965%" height="15" fill="rgb(225,201,24)" fg:x="442" fg:w="1"/><text x="87.0869%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="86.8369%" y="581" width="0.1965%" height="15" fill="rgb(221,47,46)" fg:x="442" fg:w="1"/><text x="87.0869%" y="591.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="86.8369%" y="565" width="0.1965%" height="15" fill="rgb(249,23,13)" fg:x="442" fg:w="1"/><text x="87.0869%" y="575.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.20%)</title><rect x="86.8369%" y="549" width="0.1965%" height="15" fill="rgb(219,9,5)" fg:x="442" fg:w="1"/><text x="87.0869%" y="559.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bytes::ByteReader::read_varint (1 samples, 0.20%)</title><rect x="87.0334%" y="645" width="0.1965%" height="15" fill="rgb(254,171,16)" fg:x="443" fg:w="1"/><text x="87.2834%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.20%)</title><rect x="87.4263%" y="629" width="0.1965%" height="15" fill="rgb(230,171,20)" fg:x="445" fg:w="1"/><text x="87.6763%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.59%)</title><rect x="87.8193%" y="597" width="0.5894%" height="15" fill="rgb(210,71,41)" fg:x="447" fg:w="3"/><text x="88.0693%" y="607.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.20%)</title><rect x="88.4086%" y="597" width="0.1965%" height="15" fill="rgb(206,173,20)" fg:x="450" fg:w="1"/><text x="88.6586%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.20%)</title><rect x="88.6051%" y="533" width="0.1965%" height="15" fill="rgb(233,88,34)" fg:x="451" fg:w="1"/><text x="88.8551%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.20%)</title><rect x="88.6051%" y="517" width="0.1965%" height="15" fill="rgb(223,209,46)" fg:x="451" fg:w="1"/><text x="88.8551%" y="527.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.20%)</title><rect x="88.6051%" y="501" width="0.1965%" height="15" fill="rgb(250,43,18)" fg:x="451" fg:w="1"/><text x="88.8551%" y="511.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.20%)</title><rect x="88.6051%" y="485" width="0.1965%" height="15" fill="rgb(208,13,10)" fg:x="451" fg:w="1"/><text x="88.8551%" y="495.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="88.6051%" y="469" width="0.1965%" height="15" fill="rgb(212,200,36)" fg:x="451" fg:w="1"/><text x="88.8551%" y="479.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.20%)</title><rect x="88.6051%" y="453" width="0.1965%" height="15" fill="rgb(225,90,30)" fg:x="451" fg:w="1"/><text x="88.8551%" y="463.50"></text></g><g><title>mi_find_page (1 samples, 0.20%)</title><rect x="88.6051%" y="437" width="0.1965%" height="15" fill="rgb(236,182,39)" fg:x="451" fg:w="1"/><text x="88.8551%" y="447.50"></text></g><g><title>mi_find_free_page (1 samples, 0.20%)</title><rect x="88.6051%" y="421" width="0.1965%" height="15" fill="rgb(212,144,35)" fg:x="451" fg:w="1"/><text x="88.8551%" y="431.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.20%)</title><rect x="88.6051%" y="405" width="0.1965%" height="15" fill="rgb(228,63,44)" fg:x="451" fg:w="1"/><text x="88.8551%" y="415.50"></text></g><g><title>mi_page_fresh (1 samples, 0.20%)</title><rect x="88.6051%" y="389" width="0.1965%" height="15" fill="rgb(228,109,6)" fg:x="451" fg:w="1"/><text x="88.8551%" y="399.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.20%)</title><rect x="88.6051%" y="373" width="0.1965%" height="15" fill="rgb(238,117,24)" fg:x="451" fg:w="1"/><text x="88.8551%" y="383.50"></text></g><g><title>mi_segments_page_alloc (1 samples, 0.20%)</title><rect x="88.6051%" y="357" width="0.1965%" height="15" fill="rgb(242,26,26)" fg:x="451" fg:w="1"/><text x="88.8551%" y="367.50"></text></g><g><title>mi_segment_delayed_decommit (1 samples, 0.20%)</title><rect x="88.6051%" y="341" width="0.1965%" height="15" fill="rgb(221,92,48)" fg:x="451" fg:w="1"/><text x="88.8551%" y="351.50"></text></g><g><title>_mi_clock_now (1 samples, 0.20%)</title><rect x="88.6051%" y="325" width="0.1965%" height="15" fill="rgb(209,209,32)" fg:x="451" fg:w="1"/><text x="88.8551%" y="335.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.20%)</title><rect x="88.6051%" y="309" width="0.1965%" height="15" fill="rgb(221,70,22)" fg:x="451" fg:w="1"/><text x="88.8551%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.39%)</title><rect x="88.6051%" y="581" width="0.3929%" height="15" fill="rgb(248,145,5)" fg:x="451" fg:w="2"/><text x="88.8551%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.39%)</title><rect x="88.6051%" y="565" width="0.3929%" height="15" fill="rgb(226,116,26)" fg:x="451" fg:w="2"/><text x="88.8551%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="88.6051%" y="549" width="0.3929%" height="15" fill="rgb(244,5,17)" fg:x="451" fg:w="2"/><text x="88.8551%" y="559.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="88.8016%" y="533" width="0.1965%" height="15" fill="rgb(252,159,33)" fg:x="452" fg:w="1"/><text x="89.0516%" y="543.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="88.8016%" y="517" width="0.1965%" height="15" fill="rgb(206,71,0)" fg:x="452" fg:w="1"/><text x="89.0516%" y="527.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.20%)</title><rect x="88.8016%" y="501" width="0.1965%" height="15" fill="rgb(233,118,54)" fg:x="452" fg:w="1"/><text x="89.0516%" y="511.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.20%)</title><rect x="88.8016%" y="485" width="0.1965%" height="15" fill="rgb(234,83,48)" fg:x="452" fg:w="1"/><text x="89.0516%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 1.38%)</title><rect x="88.6051%" y="597" width="1.3752%" height="15" fill="rgb(228,3,54)" fg:x="451" fg:w="7"/><text x="88.8551%" y="607.50"></text></g><g><title>core::ptr::write (5 samples, 0.98%)</title><rect x="88.9980%" y="581" width="0.9823%" height="15" fill="rgb(226,155,13)" fg:x="453" fg:w="5"/><text x="89.2480%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.59%)</title><rect x="92.1415%" y="549" width="0.5894%" height="15" fill="rgb(241,28,37)" fg:x="469" fg:w="3"/><text x="92.3915%" y="559.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (1 samples, 0.20%)</title><rect x="92.9273%" y="533" width="0.1965%" height="15" fill="rgb(233,93,10)" fg:x="473" fg:w="1"/><text x="93.1773%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (3 samples, 0.59%)</title><rect x="92.7308%" y="549" width="0.5894%" height="15" fill="rgb(225,113,19)" fg:x="472" fg:w="3"/><text x="92.9808%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.20%)</title><rect x="93.1238%" y="533" width="0.1965%" height="15" fill="rgb(241,2,18)" fg:x="474" fg:w="1"/><text x="93.3738%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (3 samples, 0.59%)</title><rect x="93.5167%" y="517" width="0.5894%" height="15" fill="rgb(228,207,21)" fg:x="476" fg:w="3"/><text x="93.7667%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (3 samples, 0.59%)</title><rect x="93.5167%" y="501" width="0.5894%" height="15" fill="rgb(213,211,35)" fg:x="476" fg:w="3"/><text x="93.7667%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (3 samples, 0.59%)</title><rect x="93.5167%" y="485" width="0.5894%" height="15" fill="rgb(209,83,10)" fg:x="476" fg:w="3"/><text x="93.7667%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::pos (3 samples, 0.59%)</title><rect x="93.5167%" y="469" width="0.5894%" height="15" fill="rgb(209,164,1)" fg:x="476" fg:w="3"/><text x="93.7667%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::pos_within_buf (1 samples, 0.20%)</title><rect x="93.9096%" y="453" width="0.1965%" height="15" fill="rgb(213,184,43)" fg:x="478" fg:w="1"/><text x="94.1596%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.20%)</title><rect x="94.1061%" y="517" width="0.1965%" height="15" fill="rgb(231,61,34)" fg:x="479" fg:w="1"/><text x="94.3561%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.20%)</title><rect x="94.1061%" y="501" width="0.1965%" height="15" fill="rgb(235,75,3)" fg:x="479" fg:w="1"/><text x="94.3561%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (8 samples, 1.57%)</title><rect x="93.3202%" y="549" width="1.5717%" height="15" fill="rgb(220,106,47)" fg:x="475" fg:w="8"/><text x="93.5702%" y="559.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (8 samples, 1.57%)</title><rect x="93.3202%" y="533" width="1.5717%" height="15" fill="rgb(210,196,33)" fg:x="475" fg:w="8"/><text x="93.5702%" y="543.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (3 samples, 0.59%)</title><rect x="94.3026%" y="517" width="0.5894%" height="15" fill="rgb(229,154,42)" fg:x="480" fg:w="3"/><text x="94.5526%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (3 samples, 0.59%)</title><rect x="94.3026%" y="501" width="0.5894%" height="15" fill="rgb(228,114,26)" fg:x="480" fg:w="3"/><text x="94.5526%" y="511.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (3 samples, 0.59%)</title><rect x="94.3026%" y="485" width="0.5894%" height="15" fill="rgb(208,144,1)" fg:x="480" fg:w="3"/><text x="94.5526%" y="495.50"></text></g><g><title>alloc::string::String::from_utf8 (3 samples, 0.59%)</title><rect x="94.8919%" y="517" width="0.5894%" height="15" fill="rgb(239,112,37)" fg:x="483" fg:w="3"/><text x="95.1419%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.39%)</title><rect x="95.0884%" y="501" width="0.3929%" height="15" fill="rgb(210,96,50)" fg:x="484" fg:w="2"/><text x="95.3384%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.39%)</title><rect x="95.0884%" y="485" width="0.3929%" height="15" fill="rgb(222,178,2)" fg:x="484" fg:w="2"/><text x="95.3384%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="95.2849%" y="469" width="0.1965%" height="15" fill="rgb(226,74,18)" fg:x="485" fg:w="1"/><text x="95.5349%" y="479.50"></text></g><g><title>core::mem::replace (1 samples, 0.20%)</title><rect x="95.4813%" y="517" width="0.1965%" height="15" fill="rgb(225,67,54)" fg:x="486" fg:w="1"/><text x="95.7313%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.20%)</title><rect x="95.4813%" y="501" width="0.1965%" height="15" fill="rgb(251,92,32)" fg:x="486" fg:w="1"/><text x="95.7313%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.20%)</title><rect x="95.4813%" y="485" width="0.1965%" height="15" fill="rgb(228,149,22)" fg:x="486" fg:w="1"/><text x="95.7313%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.20%)</title><rect x="95.8743%" y="469" width="0.1965%" height="15" fill="rgb(243,54,13)" fg:x="488" fg:w="1"/><text x="96.1243%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.20%)</title><rect x="95.8743%" y="453" width="0.1965%" height="15" fill="rgb(243,180,28)" fg:x="488" fg:w="1"/><text x="96.1243%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.20%)</title><rect x="95.8743%" y="437" width="0.1965%" height="15" fill="rgb(208,167,24)" fg:x="488" fg:w="1"/><text x="96.1243%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.20%)</title><rect x="95.8743%" y="421" width="0.1965%" height="15" fill="rgb(245,73,45)" fg:x="488" fg:w="1"/><text x="96.1243%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="95.8743%" y="405" width="0.1965%" height="15" fill="rgb(237,203,48)" fg:x="488" fg:w="1"/><text x="96.1243%" y="415.50"></text></g><g><title>__rg_alloc (1 samples, 0.20%)</title><rect x="95.8743%" y="389" width="0.1965%" height="15" fill="rgb(211,197,16)" fg:x="488" fg:w="1"/><text x="96.1243%" y="399.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.20%)</title><rect x="95.8743%" y="373" width="0.1965%" height="15" fill="rgb(243,99,51)" fg:x="488" fg:w="1"/><text x="96.1243%" y="383.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.20%)</title><rect x="95.8743%" y="357" width="0.1965%" height="15" fill="rgb(215,123,29)" fg:x="488" fg:w="1"/><text x="96.1243%" y="367.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (31 samples, 6.09%)</title><rect x="90.1768%" y="565" width="6.0904%" height="15" fill="rgb(239,186,37)" fg:x="459" fg:w="31"/><text x="90.4268%" y="575.50">&lt;csgopro..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (7 samples, 1.38%)</title><rect x="94.8919%" y="549" width="1.3752%" height="15" fill="rgb(252,136,39)" fg:x="483" fg:w="7"/><text x="95.1419%" y="559.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (7 samples, 1.38%)</title><rect x="94.8919%" y="533" width="1.3752%" height="15" fill="rgb(223,213,32)" fg:x="483" fg:w="7"/><text x="95.1419%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (3 samples, 0.59%)</title><rect x="95.6778%" y="517" width="0.5894%" height="15" fill="rgb(233,115,5)" fg:x="487" fg:w="3"/><text x="95.9278%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (3 samples, 0.59%)</title><rect x="95.6778%" y="501" width="0.5894%" height="15" fill="rgb(207,226,44)" fg:x="487" fg:w="3"/><text x="95.9278%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (3 samples, 0.59%)</title><rect x="95.6778%" y="485" width="0.5894%" height="15" fill="rgb(208,126,0)" fg:x="487" fg:w="3"/><text x="95.9278%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (1 samples, 0.20%)</title><rect x="96.0707%" y="469" width="0.1965%" height="15" fill="rgb(244,66,21)" fg:x="489" fg:w="1"/><text x="96.3207%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (1 samples, 0.20%)</title><rect x="96.0707%" y="453" width="0.1965%" height="15" fill="rgb(222,97,12)" fg:x="489" fg:w="1"/><text x="96.3207%" y="463.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (1 samples, 0.20%)</title><rect x="96.0707%" y="437" width="0.1965%" height="15" fill="rgb(219,213,19)" fg:x="489" fg:w="1"/><text x="96.3207%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.20%)</title><rect x="96.0707%" y="421" width="0.1965%" height="15" fill="rgb(252,169,30)" fg:x="489" fg:w="1"/><text x="96.3207%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.20%)</title><rect x="96.0707%" y="405" width="0.1965%" height="15" fill="rgb(206,32,51)" fg:x="489" fg:w="1"/><text x="96.3207%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (32 samples, 6.29%)</title><rect x="90.1768%" y="581" width="6.2868%" height="15" fill="rgb(250,172,42)" fg:x="459" fg:w="32"/><text x="90.4268%" y="591.50">protobuf..</text></g><g><title>core::ptr::drop_in_place&lt;protobuf::coded_input_stream::CodedInputStream::merge_message::DecrRecursion&gt; (1 samples, 0.20%)</title><rect x="96.2672%" y="565" width="0.1965%" height="15" fill="rgb(209,34,43)" fg:x="490" fg:w="1"/><text x="96.5172%" y="575.50"></text></g><g><title>&lt;protobuf::coded_input_stream::CodedInputStream::merge_message::DecrRecursion as core::ops::drop::Drop&gt;::drop (1 samples, 0.20%)</title><rect x="96.2672%" y="549" width="0.1965%" height="15" fill="rgb(223,11,35)" fg:x="490" fg:w="1"/><text x="96.5172%" y="559.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::decr_recursion (1 samples, 0.20%)</title><rect x="96.2672%" y="533" width="0.1965%" height="15" fill="rgb(251,219,26)" fg:x="490" fg:w="1"/><text x="96.5172%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.20%)</title><rect x="96.2672%" y="517" width="0.1965%" height="15" fill="rgb(231,119,3)" fg:x="490" fg:w="1"/><text x="96.5172%" y="527.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (80 samples, 15.72%)</title><rect x="80.9430%" y="661" width="15.7171%" height="15" fill="rgb(216,97,11)" fg:x="412" fg:w="80"/><text x="81.1930%" y="671.50">demoparser::parsing::dem..</text></g><g><title>protobuf::message::Message::parse_from_bytes (48 samples, 9.43%)</title><rect x="87.2299%" y="645" width="9.4303%" height="15" fill="rgb(223,59,9)" fg:x="444" fg:w="48"/><text x="87.4799%" y="655.50">protobuf::mes..</text></g><g><title>protobuf::message::Message::parse_from (46 samples, 9.04%)</title><rect x="87.6228%" y="629" width="9.0373%" height="15" fill="rgb(233,93,31)" fg:x="446" fg:w="46"/><text x="87.8728%" y="639.50">protobuf::mes..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (46 samples, 9.04%)</title><rect x="87.6228%" y="613" width="9.0373%" height="15" fill="rgb(239,81,33)" fg:x="446" fg:w="46"/><text x="87.8728%" y="623.50">&lt;csgoproto::n..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (34 samples, 6.68%)</title><rect x="89.9804%" y="597" width="6.6798%" height="15" fill="rgb(213,120,34)" fg:x="458" fg:w="34"/><text x="90.2304%" y="607.50">protobuf:..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.20%)</title><rect x="96.4637%" y="581" width="0.1965%" height="15" fill="rgb(243,49,53)" fg:x="491" fg:w="1"/><text x="96.7137%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.20%)</title><rect x="96.6601%" y="597" width="0.1965%" height="15" fill="rgb(247,216,33)" fg:x="492" fg:w="1"/><text x="96.9101%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.20%)</title><rect x="96.6601%" y="581" width="0.1965%" height="15" fill="rgb(226,26,14)" fg:x="492" fg:w="1"/><text x="96.9101%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.20%)</title><rect x="97.0530%" y="501" width="0.1965%" height="15" fill="rgb(215,49,53)" fg:x="494" fg:w="1"/><text x="97.3030%" y="511.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.20%)</title><rect x="97.0530%" y="485" width="0.1965%" height="15" fill="rgb(245,162,40)" fg:x="494" fg:w="1"/><text x="97.3030%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.20%)</title><rect x="97.0530%" y="469" width="0.1965%" height="15" fill="rgb(229,68,17)" fg:x="494" fg:w="1"/><text x="97.3030%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.20%)</title><rect x="97.0530%" y="453" width="0.1965%" height="15" fill="rgb(213,182,10)" fg:x="494" fg:w="1"/><text x="97.3030%" y="463.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.20%)</title><rect x="97.0530%" y="437" width="0.1965%" height="15" fill="rgb(245,125,30)" fg:x="494" fg:w="1"/><text x="97.3030%" y="447.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.20%)</title><rect x="97.0530%" y="421" width="0.1965%" height="15" fill="rgb(232,202,2)" fg:x="494" fg:w="1"/><text x="97.3030%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.20%)</title><rect x="97.0530%" y="405" width="0.1965%" height="15" fill="rgb(237,140,51)" fg:x="494" fg:w="1"/><text x="97.3030%" y="415.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.20%)</title><rect x="97.0530%" y="389" width="0.1965%" height="15" fill="rgb(236,157,25)" fg:x="494" fg:w="1"/><text x="97.3030%" y="399.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.20%)</title><rect x="97.0530%" y="373" width="0.1965%" height="15" fill="rgb(219,209,0)" fg:x="494" fg:w="1"/><text x="97.3030%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.20%)</title><rect x="97.0530%" y="357" width="0.1965%" height="15" fill="rgb(240,116,54)" fg:x="494" fg:w="1"/><text x="97.3030%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.20%)</title><rect x="97.0530%" y="341" width="0.1965%" height="15" fill="rgb(216,10,36)" fg:x="494" fg:w="1"/><text x="97.3030%" y="351.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1 samples, 0.20%)</title><rect x="97.0530%" y="325" width="0.1965%" height="15" fill="rgb(222,72,44)" fg:x="494" fg:w="1"/><text x="97.3030%" y="335.50"></text></g><g><title>core::num::flt2dec::to_shortest_str (1 samples, 0.20%)</title><rect x="97.0530%" y="309" width="0.1965%" height="15" fill="rgb(232,159,9)" fg:x="494" fg:w="1"/><text x="97.3030%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.20%)</title><rect x="97.0530%" y="293" width="0.1965%" height="15" fill="rgb(210,39,32)" fg:x="494" fg:w="1"/><text x="97.3030%" y="303.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (1 samples, 0.20%)</title><rect x="97.0530%" y="277" width="0.1965%" height="15" fill="rgb(216,194,45)" fg:x="494" fg:w="1"/><text x="97.3030%" y="287.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (1 samples, 0.20%)</title><rect x="97.0530%" y="261" width="0.1965%" height="15" fill="rgb(218,18,35)" fg:x="494" fg:w="1"/><text x="97.3030%" y="271.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_packet_entities (12 samples, 2.36%)</title><rect x="96.6601%" y="629" width="2.3576%" height="15" fill="rgb(207,83,51)" fg:x="492" fg:w="12"/><text x="96.9101%" y="639.50">d..</text></g><g><title>demoparser::parsing::demo_parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::update_entity (12 samples, 2.36%)</title><rect x="96.6601%" y="613" width="2.3576%" height="15" fill="rgb(225,63,43)" fg:x="492" fg:w="12"/><text x="96.9101%" y="623.50">d..</text></g><g><title>std::io::stdio::_print (11 samples, 2.16%)</title><rect x="96.8566%" y="597" width="2.1611%" height="15" fill="rgb(207,57,36)" fg:x="493" fg:w="11"/><text x="97.1066%" y="607.50">s..</text></g><g><title>std::io::stdio::print_to (11 samples, 2.16%)</title><rect x="96.8566%" y="581" width="2.1611%" height="15" fill="rgb(216,99,33)" fg:x="493" fg:w="11"/><text x="97.1066%" y="591.50">s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 1.96%)</title><rect x="97.0530%" y="565" width="1.9646%" height="15" fill="rgb(225,42,16)" fg:x="494" fg:w="10"/><text x="97.3030%" y="575.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 1.96%)</title><rect x="97.0530%" y="549" width="1.9646%" height="15" fill="rgb(220,201,45)" fg:x="494" fg:w="10"/><text x="97.3030%" y="559.50">&lt;..</text></g><g><title>std::io::Write::write_fmt (10 samples, 1.96%)</title><rect x="97.0530%" y="533" width="1.9646%" height="15" fill="rgb(225,33,4)" fg:x="494" fg:w="10"/><text x="97.3030%" y="543.50">s..</text></g><g><title>core::fmt::write (10 samples, 1.96%)</title><rect x="97.0530%" y="517" width="1.9646%" height="15" fill="rgb(224,33,50)" fg:x="494" fg:w="10"/><text x="97.3030%" y="527.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 1.77%)</title><rect x="97.2495%" y="501" width="1.7682%" height="15" fill="rgb(246,198,51)" fg:x="495" fg:w="9"/><text x="97.4995%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 1.77%)</title><rect x="97.2495%" y="485" width="1.7682%" height="15" fill="rgb(205,22,4)" fg:x="495" fg:w="9"/><text x="97.4995%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 1.77%)</title><rect x="97.2495%" y="469" width="1.7682%" height="15" fill="rgb(206,3,8)" fg:x="495" fg:w="9"/><text x="97.4995%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 1.77%)</title><rect x="97.2495%" y="453" width="1.7682%" height="15" fill="rgb(251,23,15)" fg:x="495" fg:w="9"/><text x="97.4995%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (9 samples, 1.77%)</title><rect x="97.2495%" y="437" width="1.7682%" height="15" fill="rgb(252,88,28)" fg:x="495" fg:w="9"/><text x="97.4995%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9 samples, 1.77%)</title><rect x="97.2495%" y="421" width="1.7682%" height="15" fill="rgb(212,127,14)" fg:x="495" fg:w="9"/><text x="97.4995%" y="431.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (9 samples, 1.77%)</title><rect x="97.2495%" y="405" width="1.7682%" height="15" fill="rgb(247,145,37)" fg:x="495" fg:w="9"/><text x="97.4995%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (9 samples, 1.77%)</title><rect x="97.2495%" y="389" width="1.7682%" height="15" fill="rgb(209,117,53)" fg:x="495" fg:w="9"/><text x="97.4995%" y="399.50"></text></g><g><title>__GI___libc_write (9 samples, 1.77%)</title><rect x="97.2495%" y="373" width="1.7682%" height="15" fill="rgb(212,90,42)" fg:x="495" fg:w="9"/><text x="97.4995%" y="383.50"></text></g><g><title>__GI___libc_write (9 samples, 1.77%)</title><rect x="97.2495%" y="357" width="1.7682%" height="15" fill="rgb(218,164,37)" fg:x="495" fg:w="9"/><text x="97.4995%" y="367.50"></text></g><g><title>[unknown] (9 samples, 1.77%)</title><rect x="97.2495%" y="341" width="1.7682%" height="15" fill="rgb(246,65,34)" fg:x="495" fg:w="9"/><text x="97.4995%" y="351.50"></text></g><g><title>[unknown] (9 samples, 1.77%)</title><rect x="97.2495%" y="325" width="1.7682%" height="15" fill="rgb(231,100,33)" fg:x="495" fg:w="9"/><text x="97.4995%" y="335.50"></text></g><g><title>[unknown] (9 samples, 1.77%)</title><rect x="97.2495%" y="309" width="1.7682%" height="15" fill="rgb(228,126,14)" fg:x="495" fg:w="9"/><text x="97.4995%" y="319.50"></text></g><g><title>[unknown] (9 samples, 1.77%)</title><rect x="97.2495%" y="293" width="1.7682%" height="15" fill="rgb(215,173,21)" fg:x="495" fg:w="9"/><text x="97.4995%" y="303.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="277" width="1.5717%" height="15" fill="rgb(210,6,40)" fg:x="496" fg:w="8"/><text x="97.6960%" y="287.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="261" width="1.5717%" height="15" fill="rgb(212,48,18)" fg:x="496" fg:w="8"/><text x="97.6960%" y="271.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="245" width="1.5717%" height="15" fill="rgb(230,214,11)" fg:x="496" fg:w="8"/><text x="97.6960%" y="255.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="229" width="1.5717%" height="15" fill="rgb(254,105,39)" fg:x="496" fg:w="8"/><text x="97.6960%" y="239.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="213" width="1.5717%" height="15" fill="rgb(245,158,5)" fg:x="496" fg:w="8"/><text x="97.6960%" y="223.50"></text></g><g><title>[unknown] (8 samples, 1.57%)</title><rect x="97.4460%" y="197" width="1.5717%" height="15" fill="rgb(249,208,11)" fg:x="496" fg:w="8"/><text x="97.6960%" y="207.50"></text></g><g><title>[unknown] (7 samples, 1.38%)</title><rect x="97.6424%" y="181" width="1.3752%" height="15" fill="rgb(210,39,28)" fg:x="497" fg:w="7"/><text x="97.8924%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="98.2318%" y="165" width="0.7859%" height="15" fill="rgb(211,56,53)" fg:x="500" fg:w="4"/><text x="98.4818%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.79%)</title><rect x="98.2318%" y="149" width="0.7859%" height="15" fill="rgb(226,201,30)" fg:x="500" fg:w="4"/><text x="98.4818%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="98.4283%" y="133" width="0.5894%" height="15" fill="rgb(239,101,34)" fg:x="501" fg:w="3"/><text x="98.6783%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.59%)</title><rect x="98.4283%" y="117" width="0.5894%" height="15" fill="rgb(226,209,5)" fg:x="501" fg:w="3"/><text x="98.6783%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.6248%" y="101" width="0.3929%" height="15" fill="rgb(250,105,47)" fg:x="502" fg:w="2"/><text x="98.8748%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.6248%" y="85" width="0.3929%" height="15" fill="rgb(230,72,3)" fg:x="502" fg:w="2"/><text x="98.8748%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.6248%" y="69" width="0.3929%" height="15" fill="rgb(232,218,39)" fg:x="502" fg:w="2"/><text x="98.8748%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.6248%" y="53" width="0.3929%" height="15" fill="rgb(248,166,6)" fg:x="502" fg:w="2"/><text x="98.8748%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="98.6248%" y="37" width="0.3929%" height="15" fill="rgb(247,89,20)" fg:x="502" fg:w="2"/><text x="98.8748%" y="47.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.20%)</title><rect x="99.0177%" y="437" width="0.1965%" height="15" fill="rgb(248,130,54)" fg:x="504" fg:w="1"/><text x="99.2677%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.20%)</title><rect x="99.0177%" y="421" width="0.1965%" height="15" fill="rgb(234,196,4)" fg:x="504" fg:w="1"/><text x="99.2677%" y="431.50"></text></g><g><title>__libc_start_main_impl (399 samples, 78.39%)</title><rect x="21.0216%" y="1157" width="78.3890%" height="15" fill="rgb(250,143,31)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1167.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (399 samples, 78.39%)</title><rect x="21.0216%" y="1141" width="78.3890%" height="15" fill="rgb(211,110,34)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1151.50">__libc_start_call_main</text></g><g><title>main (399 samples, 78.39%)</title><rect x="21.0216%" y="1125" width="78.3890%" height="15" fill="rgb(215,124,48)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1135.50">main</text></g><g><title>std::rt::lang_start_internal (399 samples, 78.39%)</title><rect x="21.0216%" y="1109" width="78.3890%" height="15" fill="rgb(216,46,13)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1119.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (399 samples, 78.39%)</title><rect x="21.0216%" y="1093" width="78.3890%" height="15" fill="rgb(205,184,25)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (399 samples, 78.39%)</title><rect x="21.0216%" y="1077" width="78.3890%" height="15" fill="rgb(228,1,10)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (399 samples, 78.39%)</title><rect x="21.0216%" y="1061" width="78.3890%" height="15" fill="rgb(213,116,27)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1071.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (399 samples, 78.39%)</title><rect x="21.0216%" y="1045" width="78.3890%" height="15" fill="rgb(241,95,50)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1055.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (399 samples, 78.39%)</title><rect x="21.0216%" y="1029" width="78.3890%" height="15" fill="rgb(238,48,32)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (399 samples, 78.39%)</title><rect x="21.0216%" y="1013" width="78.3890%" height="15" fill="rgb(235,113,49)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (399 samples, 78.39%)</title><rect x="21.0216%" y="997" width="78.3890%" height="15" fill="rgb(205,127,43)" fg:x="107" fg:w="399"/><text x="21.2716%" y="1007.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (399 samples, 78.39%)</title><rect x="21.0216%" y="981" width="78.3890%" height="15" fill="rgb(250,162,2)" fg:x="107" fg:w="399"/><text x="21.2716%" y="991.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (399 samples, 78.39%)</title><rect x="21.0216%" y="965" width="78.3890%" height="15" fill="rgb(220,13,41)" fg:x="107" fg:w="399"/><text x="21.2716%" y="975.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (399 samples, 78.39%)</title><rect x="21.0216%" y="949" width="78.3890%" height="15" fill="rgb(249,221,25)" fg:x="107" fg:w="399"/><text x="21.2716%" y="959.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (399 samples, 78.39%)</title><rect x="21.0216%" y="933" width="78.3890%" height="15" fill="rgb(215,208,19)" fg:x="107" fg:w="399"/><text x="21.2716%" y="943.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (399 samples, 78.39%)</title><rect x="21.0216%" y="917" width="78.3890%" height="15" fill="rgb(236,175,2)" fg:x="107" fg:w="399"/><text x="21.2716%" y="927.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (399 samples, 78.39%)</title><rect x="21.0216%" y="901" width="78.3890%" height="15" fill="rgb(241,52,2)" fg:x="107" fg:w="399"/><text x="21.2716%" y="911.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (399 samples, 78.39%)</title><rect x="21.0216%" y="885" width="78.3890%" height="15" fill="rgb(248,140,14)" fg:x="107" fg:w="399"/><text x="21.2716%" y="895.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (399 samples, 78.39%)</title><rect x="21.0216%" y="869" width="78.3890%" height="15" fill="rgb(253,22,42)" fg:x="107" fg:w="399"/><text x="21.2716%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (399 samples, 78.39%)</title><rect x="21.0216%" y="853" width="78.3890%" height="15" fill="rgb(234,61,47)" fg:x="107" fg:w="399"/><text x="21.2716%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (399 samples, 78.39%)</title><rect x="21.0216%" y="837" width="78.3890%" height="15" fill="rgb(208,226,15)" fg:x="107" fg:w="399"/><text x="21.2716%" y="847.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (399 samples, 78.39%)</title><rect x="21.0216%" y="821" width="78.3890%" height="15" fill="rgb(217,221,4)" fg:x="107" fg:w="399"/><text x="21.2716%" y="831.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (399 samples, 78.39%)</title><rect x="21.0216%" y="805" width="78.3890%" height="15" fill="rgb(212,174,34)" fg:x="107" fg:w="399"/><text x="21.2716%" y="815.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (399 samples, 78.39%)</title><rect x="21.0216%" y="789" width="78.3890%" height="15" fill="rgb(253,83,4)" fg:x="107" fg:w="399"/><text x="21.2716%" y="799.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (399 samples, 78.39%)</title><rect x="21.0216%" y="773" width="78.3890%" height="15" fill="rgb(250,195,49)" fg:x="107" fg:w="399"/><text x="21.2716%" y="783.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (399 samples, 78.39%)</title><rect x="21.0216%" y="757" width="78.3890%" height="15" fill="rgb(241,192,25)" fg:x="107" fg:w="399"/><text x="21.2716%" y="767.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (398 samples, 78.19%)</title><rect x="21.2181%" y="741" width="78.1925%" height="15" fill="rgb(208,124,10)" fg:x="108" fg:w="398"/><text x="21.4681%" y="751.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (392 samples, 77.01%)</title><rect x="22.3969%" y="725" width="77.0138%" height="15" fill="rgb(222,33,0)" fg:x="114" fg:w="392"/><text x="22.6469%" y="735.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::speed (392 samples, 77.01%)</title><rect x="22.3969%" y="709" width="77.0138%" height="15" fill="rgb(234,209,28)" fg:x="114" fg:w="392"/><text x="22.6469%" y="719.50">demoparser::parsing::parser::Parser::speed</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (94 samples, 18.47%)</title><rect x="80.9430%" y="693" width="18.4676%" height="15" fill="rgb(224,11,23)" fg:x="412" fg:w="94"/><text x="81.1930%" y="703.50">demoparser::parsing::parser::..</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (94 samples, 18.47%)</title><rect x="80.9430%" y="677" width="18.4676%" height="15" fill="rgb(232,99,1)" fg:x="412" fg:w="94"/><text x="81.1930%" y="687.50">demoparser::parsing::parser::..</text></g><g><title>demoparser::parsing::parser::Parser::messages_from_packet (14 samples, 2.75%)</title><rect x="96.6601%" y="661" width="2.7505%" height="15" fill="rgb(237,95,45)" fg:x="492" fg:w="14"/><text x="96.9101%" y="671.50">de..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (14 samples, 2.75%)</title><rect x="96.6601%" y="645" width="2.7505%" height="15" fill="rgb(208,109,11)" fg:x="492" fg:w="14"/><text x="96.9101%" y="655.50">de..</text></g><g><title>demoparser::parsing::demo_parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_event_map (2 samples, 0.39%)</title><rect x="99.0177%" y="629" width="0.3929%" height="15" fill="rgb(216,190,48)" fg:x="504" fg:w="2"/><text x="99.2677%" y="639.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (2 samples, 0.39%)</title><rect x="99.0177%" y="613" width="0.3929%" height="15" fill="rgb(251,171,36)" fg:x="504" fg:w="2"/><text x="99.2677%" y="623.50"></text></g><g><title>protobuf::message::Message::parse_from (2 samples, 0.39%)</title><rect x="99.0177%" y="597" width="0.3929%" height="15" fill="rgb(230,62,22)" fg:x="504" fg:w="2"/><text x="99.2677%" y="607.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEventList as protobuf::message::Message&gt;::merge_from (2 samples, 0.39%)</title><rect x="99.0177%" y="581" width="0.3929%" height="15" fill="rgb(225,114,35)" fg:x="504" fg:w="2"/><text x="99.2677%" y="591.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (2 samples, 0.39%)</title><rect x="99.0177%" y="565" width="0.3929%" height="15" fill="rgb(215,118,42)" fg:x="504" fg:w="2"/><text x="99.2677%" y="575.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (2 samples, 0.39%)</title><rect x="99.0177%" y="549" width="0.3929%" height="15" fill="rgb(243,119,21)" fg:x="504" fg:w="2"/><text x="99.2677%" y="559.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event_list::Descriptor_t as protobuf::message::Message&gt;::merge_from (2 samples, 0.39%)</title><rect x="99.0177%" y="533" width="0.3929%" height="15" fill="rgb(252,177,53)" fg:x="504" fg:w="2"/><text x="99.2677%" y="543.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (2 samples, 0.39%)</title><rect x="99.0177%" y="517" width="0.3929%" height="15" fill="rgb(237,209,29)" fg:x="504" fg:w="2"/><text x="99.2677%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (2 samples, 0.39%)</title><rect x="99.0177%" y="501" width="0.3929%" height="15" fill="rgb(212,65,23)" fg:x="504" fg:w="2"/><text x="99.2677%" y="511.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event_list::Key_t as protobuf::message::Message&gt;::merge_from (2 samples, 0.39%)</title><rect x="99.0177%" y="485" width="0.3929%" height="15" fill="rgb(230,222,46)" fg:x="504" fg:w="2"/><text x="99.2677%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (2 samples, 0.39%)</title><rect x="99.0177%" y="469" width="0.3929%" height="15" fill="rgb(215,135,32)" fg:x="504" fg:w="2"/><text x="99.2677%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (2 samples, 0.39%)</title><rect x="99.0177%" y="453" width="0.3929%" height="15" fill="rgb(246,101,22)" fg:x="504" fg:w="2"/><text x="99.2677%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (1 samples, 0.20%)</title><rect x="99.2141%" y="437" width="0.1965%" height="15" fill="rgb(206,107,13)" fg:x="505" fg:w="1"/><text x="99.4641%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (1 samples, 0.20%)</title><rect x="99.2141%" y="421" width="0.1965%" height="15" fill="rgb(250,100,44)" fg:x="505" fg:w="1"/><text x="99.4641%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (1 samples, 0.20%)</title><rect x="99.2141%" y="405" width="0.1965%" height="15" fill="rgb(231,147,38)" fg:x="505" fg:w="1"/><text x="99.4641%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.20%)</title><rect x="99.2141%" y="389" width="0.1965%" height="15" fill="rgb(229,8,40)" fg:x="505" fg:w="1"/><text x="99.4641%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.20%)</title><rect x="99.2141%" y="373" width="0.1965%" height="15" fill="rgb(221,135,30)" fg:x="505" fg:w="1"/><text x="99.4641%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.20%)</title><rect x="99.2141%" y="357" width="0.1965%" height="15" fill="rgb(249,193,18)" fg:x="505" fg:w="1"/><text x="99.4641%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.20%)</title><rect x="99.2141%" y="341" width="0.1965%" height="15" fill="rgb(209,133,39)" fg:x="505" fg:w="1"/><text x="99.4641%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="99.2141%" y="325" width="0.1965%" height="15" fill="rgb(232,100,14)" fg:x="505" fg:w="1"/><text x="99.4641%" y="335.50"></text></g><g><title>mi_malloc (1 samples, 0.20%)</title><rect x="99.2141%" y="309" width="0.1965%" height="15" fill="rgb(224,185,1)" fg:x="505" fg:w="1"/><text x="99.4641%" y="319.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.20%)</title><rect x="99.2141%" y="293" width="0.1965%" height="15" fill="rgb(223,139,8)" fg:x="505" fg:w="1"/><text x="99.4641%" y="303.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.20%)</title><rect x="99.2141%" y="277" width="0.1965%" height="15" fill="rgb(232,213,38)" fg:x="505" fg:w="1"/><text x="99.4641%" y="287.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.20%)</title><rect x="99.2141%" y="261" width="0.1965%" height="15" fill="rgb(207,94,22)" fg:x="505" fg:w="1"/><text x="99.4641%" y="271.50"></text></g><g><title>demoparser (507 samples, 99.61%)</title><rect x="0.0000%" y="1189" width="99.6071%" height="15" fill="rgb(219,183,54)" fg:x="0" fg:w="507"/><text x="0.2500%" y="1199.50">demoparser</text></g><g><title>_start (400 samples, 78.59%)</title><rect x="21.0216%" y="1173" width="78.5855%" height="15" fill="rgb(216,185,54)" fg:x="107" fg:w="400"/><text x="21.2716%" y="1183.50">_start</text></g><g><title>_dl_start (1 samples, 0.20%)</title><rect x="99.4106%" y="1157" width="0.1965%" height="15" fill="rgb(254,217,39)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1167.50"></text></g><g><title>_dl_start_final (1 samples, 0.20%)</title><rect x="99.4106%" y="1141" width="0.1965%" height="15" fill="rgb(240,178,23)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1151.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.20%)</title><rect x="99.4106%" y="1125" width="0.1965%" height="15" fill="rgb(218,11,47)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1135.50"></text></g><g><title>dl_main (1 samples, 0.20%)</title><rect x="99.4106%" y="1109" width="0.1965%" height="15" fill="rgb(218,51,51)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1119.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.20%)</title><rect x="99.4106%" y="1093" width="0.1965%" height="15" fill="rgb(238,126,27)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1103.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.20%)</title><rect x="99.4106%" y="1077" width="0.1965%" height="15" fill="rgb(249,202,22)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1087.50"></text></g><g><title>elf_machine_rela (1 samples, 0.20%)</title><rect x="99.4106%" y="1061" width="0.1965%" height="15" fill="rgb(254,195,49)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1071.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.20%)</title><rect x="99.4106%" y="1045" width="0.1965%" height="15" fill="rgb(208,123,14)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1055.50"></text></g><g><title>dl_new_hash (1 samples, 0.20%)</title><rect x="99.4106%" y="1029" width="0.1965%" height="15" fill="rgb(224,200,8)" fg:x="506" fg:w="1"/><text x="99.6606%" y="1039.50"></text></g><g><title>all (509 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(217,61,36)" fg:x="0" fg:w="509"/><text x="0.2500%" y="1215.50"></text></g><g><title>perf-exec (2 samples, 0.39%)</title><rect x="99.6071%" y="1189" width="0.3929%" height="15" fill="rgb(206,35,45)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1173" width="0.3929%" height="15" fill="rgb(217,65,33)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1157" width="0.3929%" height="15" fill="rgb(222,158,48)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1141" width="0.3929%" height="15" fill="rgb(254,2,54)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1125" width="0.3929%" height="15" fill="rgb(250,143,38)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1109" width="0.3929%" height="15" fill="rgb(248,25,0)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1093" width="0.3929%" height="15" fill="rgb(206,152,27)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1077" width="0.3929%" height="15" fill="rgb(240,77,30)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1061" width="0.3929%" height="15" fill="rgb(231,5,3)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1045" width="0.3929%" height="15" fill="rgb(207,226,32)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1029" width="0.3929%" height="15" fill="rgb(222,207,47)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="1013" width="0.3929%" height="15" fill="rgb(229,115,45)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="997" width="0.3929%" height="15" fill="rgb(224,191,6)" fg:x="507" fg:w="2"/><text x="99.8571%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.39%)</title><rect x="99.6071%" y="981" width="0.3929%" height="15" fill="rgb(230,227,24)" fg:x="507" fg:w="2"/><text x="99.8571%" y="991.50"></text></g></svg></svg>