<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2022" onload="init(evt)" viewBox="0 0 1200 2022" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2022" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="2005.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="2005.00"> </text><svg id="frames" x="10" width="1180" total_samples="119"><g><title>[unknown] (29 samples, 24.37%)</title><rect x="21.0084%" y="1925" width="24.3697%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="29"/><text x="21.2584%" y="1935.50">[unknown]</text></g><g><title>[unknown] (29 samples, 24.37%)</title><rect x="21.0084%" y="1909" width="24.3697%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="29"/><text x="21.2584%" y="1919.50">[unknown]</text></g><g><title>[unknown] (29 samples, 24.37%)</title><rect x="21.0084%" y="1893" width="24.3697%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="29"/><text x="21.2584%" y="1903.50">[unknown]</text></g><g><title>[unknown] (24 samples, 20.17%)</title><rect x="25.2101%" y="1877" width="20.1681%" height="15" fill="rgb(248,212,6)" fg:x="30" fg:w="24"/><text x="25.4601%" y="1887.50">[unknown]</text></g><g><title>[unknown] (4 samples, 3.36%)</title><rect x="42.0168%" y="1861" width="3.3613%" height="15" fill="rgb(208,68,35)" fg:x="50" fg:w="4"/><text x="42.2668%" y="1871.50">[un..</text></g><g><title>[unknown] (4 samples, 3.36%)</title><rect x="42.0168%" y="1845" width="3.3613%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="4"/><text x="42.2668%" y="1855.50">[un..</text></g><g><title>[unknown] (3 samples, 2.52%)</title><rect x="42.8571%" y="1829" width="2.5210%" height="15" fill="rgb(207,160,47)" fg:x="51" fg:w="3"/><text x="43.1071%" y="1839.50">[u..</text></g><g><title>[unknown] (3 samples, 2.52%)</title><rect x="42.8571%" y="1813" width="2.5210%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="3"/><text x="43.1071%" y="1823.50">[u..</text></g><g><title>[unknown] (3 samples, 2.52%)</title><rect x="42.8571%" y="1797" width="2.5210%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="3"/><text x="43.1071%" y="1807.50">[u..</text></g><g><title>[unknown] (3 samples, 2.52%)</title><rect x="42.8571%" y="1781" width="2.5210%" height="15" fill="rgb(220,122,19)" fg:x="51" fg:w="3"/><text x="43.1071%" y="1791.50">[u..</text></g><g><title>[unknown] (3 samples, 2.52%)</title><rect x="42.8571%" y="1765" width="2.5210%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="3"/><text x="43.1071%" y="1775.50">[u..</text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="43.6975%" y="1749" width="1.6807%" height="15" fill="rgb(240,193,28)" fg:x="52" fg:w="2"/><text x="43.9475%" y="1759.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="43.6975%" y="1733" width="1.6807%" height="15" fill="rgb(216,20,37)" fg:x="52" fg:w="2"/><text x="43.9475%" y="1743.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="43.6975%" y="1717" width="1.6807%" height="15" fill="rgb(206,188,39)" fg:x="52" fg:w="2"/><text x="43.9475%" y="1727.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="43.6975%" y="1701" width="1.6807%" height="15" fill="rgb(217,207,13)" fg:x="52" fg:w="2"/><text x="43.9475%" y="1711.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="43.6975%" y="1685" width="1.6807%" height="15" fill="rgb(231,73,38)" fg:x="52" fg:w="2"/><text x="43.9475%" y="1695.50"></text></g><g><title>[unknown] (55 samples, 46.22%)</title><rect x="0.0000%" y="1941" width="46.2185%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="55"/><text x="0.2500%" y="1951.50">[unknown]</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (1 samples, 0.84%)</title><rect x="45.3782%" y="1925" width="0.8403%" height="15" fill="rgb(210,31,41)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1935.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (1 samples, 0.84%)</title><rect x="45.3782%" y="1909" width="0.8403%" height="15" fill="rgb(221,200,47)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1919.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.84%)</title><rect x="45.3782%" y="1893" width="0.8403%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1903.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_excl_props (1 samples, 0.84%)</title><rect x="45.3782%" y="1877" width="0.8403%" height="15" fill="rgb(249,33,26)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1887.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.84%)</title><rect x="45.3782%" y="1861" width="0.8403%" height="15" fill="rgb(235,183,28)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1871.50"></text></g><g><title>[libc.so.6] (1 samples, 0.84%)</title><rect x="45.3782%" y="1845" width="0.8403%" height="15" fill="rgb(221,5,38)" fg:x="54" fg:w="1"/><text x="45.6282%" y="1855.50"></text></g><g><title>rayon_core::job::JobFifo::new (12 samples, 10.08%)</title><rect x="46.2185%" y="1685" width="10.0840%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1695.50">rayon_core::job..</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (12 samples, 10.08%)</title><rect x="46.2185%" y="1669" width="10.0840%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1679.50">crossbeam_deque..</text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (12 samples, 10.08%)</title><rect x="46.2185%" y="1653" width="10.0840%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1663.50">&lt;crossbeam_dequ..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 10.08%)</title><rect x="46.2185%" y="1637" width="10.0840%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1647.50">alloc::boxed::B..</text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1621" width="10.0840%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1631.50">alloc::alloc::e..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 10.08%)</title><rect x="46.2185%" y="1605" width="10.0840%" height="15" fill="rgb(214,148,48)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1615.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 10.08%)</title><rect x="46.2185%" y="1589" width="10.0840%" height="15" fill="rgb(232,36,49)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1599.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::alloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1573" width="10.0840%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1583.50">alloc::alloc::a..</text></g><g><title>_mi_malloc_generic (12 samples, 10.08%)</title><rect x="46.2185%" y="1557" width="10.0840%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1567.50">_mi_malloc_gene..</text></g><g><title>mi_find_page (12 samples, 10.08%)</title><rect x="46.2185%" y="1541" width="10.0840%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1551.50">mi_find_page</text></g><g><title>mi_find_free_page (12 samples, 10.08%)</title><rect x="46.2185%" y="1525" width="10.0840%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1535.50">mi_find_free_pa..</text></g><g><title>mi_page_queue_find_free_ex (12 samples, 10.08%)</title><rect x="46.2185%" y="1509" width="10.0840%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1519.50">mi_page_queue_f..</text></g><g><title>mi_page_fresh (12 samples, 10.08%)</title><rect x="46.2185%" y="1493" width="10.0840%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1503.50">mi_page_fresh</text></g><g><title>mi_page_fresh_alloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1477" width="10.0840%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1487.50">mi_page_fresh_a..</text></g><g><title>mi_segments_page_alloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1461" width="10.0840%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1471.50">mi_segments_pag..</text></g><g><title>mi_segment_reclaim_or_alloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1445" width="10.0840%" height="15" fill="rgb(238,167,29)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1455.50">mi_segment_recl..</text></g><g><title>mi_segment_alloc (12 samples, 10.08%)</title><rect x="46.2185%" y="1429" width="10.0840%" height="15" fill="rgb(232,182,51)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1439.50">mi_segment_alloc</text></g><g><title>mi_segment_init (12 samples, 10.08%)</title><rect x="46.2185%" y="1413" width="10.0840%" height="15" fill="rgb(231,60,39)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1423.50">mi_segment_init</text></g><g><title>memset (12 samples, 10.08%)</title><rect x="46.2185%" y="1397" width="10.0840%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1407.50">memset</text></g><g><title>[libc.so.6] (12 samples, 10.08%)</title><rect x="46.2185%" y="1381" width="10.0840%" height="15" fill="rgb(235,93,37)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1391.50">[libc.so.6]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="46.2185%" y="1365" width="10.0840%" height="15" fill="rgb(213,116,39)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1375.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="46.2185%" y="1349" width="10.0840%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1359.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="46.2185%" y="1333" width="10.0840%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1343.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="46.2185%" y="1317" width="10.0840%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1327.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="46.2185%" y="1301" width="10.0840%" height="15" fill="rgb(250,191,14)" fg:x="55" fg:w="12"/><text x="46.4685%" y="1311.50">[unknown]</text></g><g><title>[unknown] (7 samples, 5.88%)</title><rect x="50.4202%" y="1285" width="5.8824%" height="15" fill="rgb(239,60,40)" fg:x="60" fg:w="7"/><text x="50.6702%" y="1295.50">[unknow..</text></g><g><title>[unknown] (7 samples, 5.88%)</title><rect x="50.4202%" y="1269" width="5.8824%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="7"/><text x="50.6702%" y="1279.50">[unknow..</text></g><g><title>[unknown] (7 samples, 5.88%)</title><rect x="50.4202%" y="1253" width="5.8824%" height="15" fill="rgb(225,35,8)" fg:x="60" fg:w="7"/><text x="50.6702%" y="1263.50">[unknow..</text></g><g><title>[unknown] (7 samples, 5.88%)</title><rect x="50.4202%" y="1237" width="5.8824%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="7"/><text x="50.6702%" y="1247.50">[unknow..</text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="54.6218%" y="1221" width="1.6807%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="2"/><text x="54.8718%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="54.6218%" y="1205" width="1.6807%" height="15" fill="rgb(231,138,38)" fg:x="65" fg:w="2"/><text x="54.8718%" y="1215.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 20.17%)</title><rect x="46.2185%" y="1829" width="20.1681%" height="15" fill="rgb(231,145,46)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1839.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24 samples, 20.17%)</title><rect x="46.2185%" y="1813" width="20.1681%" height="15" fill="rgb(251,118,11)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1823.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24 samples, 20.17%)</title><rect x="46.2185%" y="1797" width="20.1681%" height="15" fill="rgb(217,147,25)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1807.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 20.17%)</title><rect x="46.2185%" y="1781" width="20.1681%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1791.50">&lt;core::panic::unwind_safe::Asser..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (24 samples, 20.17%)</title><rect x="46.2185%" y="1765" width="20.1681%" height="15" fill="rgb(209,12,38)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1775.50">std::thread::Builder::spawn_unch..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 20.17%)</title><rect x="46.2185%" y="1749" width="20.1681%" height="15" fill="rgb(227,1,9)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1759.50">std::sys_common::backtrace::__ru..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (24 samples, 20.17%)</title><rect x="46.2185%" y="1733" width="20.1681%" height="15" fill="rgb(248,47,43)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1743.50">&lt;rayon_core::registry::DefaultSp..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (24 samples, 20.17%)</title><rect x="46.2185%" y="1717" width="20.1681%" height="15" fill="rgb(221,10,30)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1727.50">rayon_core::registry::ThreadBuil..</text></g><g><title>rayon_core::registry::main_loop (24 samples, 20.17%)</title><rect x="46.2185%" y="1701" width="20.1681%" height="15" fill="rgb(210,229,1)" fg:x="55" fg:w="24"/><text x="46.4685%" y="1711.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (12 samples, 10.08%)</title><rect x="56.3025%" y="1685" width="10.0840%" height="15" fill="rgb(222,148,37)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1695.50">rayon_core::reg..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (12 samples, 10.08%)</title><rect x="56.3025%" y="1669" width="10.0840%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1679.50">rayon_core::reg..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (12 samples, 10.08%)</title><rect x="56.3025%" y="1653" width="10.0840%" height="15" fill="rgb(247,98,35)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1663.50">rayon_core::sle..</text></g><g><title>rayon_core::sleep::Sleep::sleep (12 samples, 10.08%)</title><rect x="56.3025%" y="1637" width="10.0840%" height="15" fill="rgb(247,138,52)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1647.50">rayon_core::sle..</text></g><g><title>std::sync::condvar::Condvar::wait (12 samples, 10.08%)</title><rect x="56.3025%" y="1621" width="10.0840%" height="15" fill="rgb(213,79,30)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1631.50">std::sync::cond..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (12 samples, 10.08%)</title><rect x="56.3025%" y="1605" width="10.0840%" height="15" fill="rgb(246,177,23)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1615.50">std::sys::unix:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (12 samples, 10.08%)</title><rect x="56.3025%" y="1589" width="10.0840%" height="15" fill="rgb(230,62,27)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1599.50">std::sys::unix:..</text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 10.08%)</title><rect x="56.3025%" y="1573" width="10.0840%" height="15" fill="rgb(216,154,8)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1583.50">std::sys::unix:..</text></g><g><title>syscall (12 samples, 10.08%)</title><rect x="56.3025%" y="1557" width="10.0840%" height="15" fill="rgb(244,35,45)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1567.50">syscall</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1541" width="10.0840%" height="15" fill="rgb(251,115,12)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1551.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1525" width="10.0840%" height="15" fill="rgb(240,54,50)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1535.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1509" width="10.0840%" height="15" fill="rgb(233,84,52)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1519.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1493" width="10.0840%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1503.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1477" width="10.0840%" height="15" fill="rgb(249,43,39)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1487.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1461" width="10.0840%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1471.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1445" width="10.0840%" height="15" fill="rgb(236,212,23)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1455.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1429" width="10.0840%" height="15" fill="rgb(242,79,21)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1439.50">[unknown]</text></g><g><title>[unknown] (12 samples, 10.08%)</title><rect x="56.3025%" y="1413" width="10.0840%" height="15" fill="rgb(211,96,35)" fg:x="67" fg:w="12"/><text x="56.5525%" y="1423.50">[unknown]</text></g><g><title>[unknown] (6 samples, 5.04%)</title><rect x="61.3445%" y="1397" width="5.0420%" height="15" fill="rgb(253,215,40)" fg:x="73" fg:w="6"/><text x="61.5945%" y="1407.50">[unkno..</text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1669" width="0.8403%" height="15" fill="rgb(211,81,21)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1653" width="0.8403%" height="15" fill="rgb(208,190,38)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1637" width="0.8403%" height="15" fill="rgb(235,213,38)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1621" width="0.8403%" height="15" fill="rgb(237,122,38)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1605" width="0.8403%" height="15" fill="rgb(244,218,35)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1589" width="0.8403%" height="15" fill="rgb(240,68,47)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1573" width="0.8403%" height="15" fill="rgb(210,16,53)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1557" width="0.8403%" height="15" fill="rgb(235,124,12)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1541" width="0.8403%" height="15" fill="rgb(224,169,11)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1525" width="0.8403%" height="15" fill="rgb(250,166,2)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1509" width="0.8403%" height="15" fill="rgb(242,216,29)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1493" width="0.8403%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="66.3866%" y="1477" width="0.8403%" height="15" fill="rgb(228,99,48)" fg:x="79" fg:w="1"/><text x="66.6366%" y="1487.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (26 samples, 21.85%)</title><rect x="46.2185%" y="1893" width="21.8487%" height="15" fill="rgb(253,11,6)" fg:x="55" fg:w="26"/><text x="46.4685%" y="1903.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (26 samples, 21.85%)</title><rect x="46.2185%" y="1877" width="21.8487%" height="15" fill="rgb(247,143,39)" fg:x="55" fg:w="26"/><text x="46.4685%" y="1887.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (26 samples, 21.85%)</title><rect x="46.2185%" y="1861" width="21.8487%" height="15" fill="rgb(236,97,10)" fg:x="55" fg:w="26"/><text x="46.4685%" y="1871.50">core::ops::function::FnOnce::call_o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (26 samples, 21.85%)</title><rect x="46.2185%" y="1845" width="21.8487%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="26"/><text x="46.4685%" y="1855.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 1.68%)</title><rect x="66.3866%" y="1829" width="1.6807%" height="15" fill="rgb(216,164,2)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1839.50"></text></g><g><title>__pthread_getattr_np (2 samples, 1.68%)</title><rect x="66.3866%" y="1813" width="1.6807%" height="15" fill="rgb(220,129,5)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1823.50"></text></g><g><title>__GI___libc_malloc (2 samples, 1.68%)</title><rect x="66.3866%" y="1797" width="1.6807%" height="15" fill="rgb(242,17,10)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1807.50"></text></g><g><title>tcache_init (2 samples, 1.68%)</title><rect x="66.3866%" y="1781" width="1.6807%" height="15" fill="rgb(242,107,0)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1791.50"></text></g><g><title>tcache_init (2 samples, 1.68%)</title><rect x="66.3866%" y="1765" width="1.6807%" height="15" fill="rgb(251,28,31)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1775.50"></text></g><g><title>arena_get2 (2 samples, 1.68%)</title><rect x="66.3866%" y="1749" width="1.6807%" height="15" fill="rgb(233,223,10)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1759.50"></text></g><g><title>arena_get2 (2 samples, 1.68%)</title><rect x="66.3866%" y="1733" width="1.6807%" height="15" fill="rgb(215,21,27)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1743.50"></text></g><g><title>_int_new_arena (2 samples, 1.68%)</title><rect x="66.3866%" y="1717" width="1.6807%" height="15" fill="rgb(232,23,21)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1727.50"></text></g><g><title>new_heap (2 samples, 1.68%)</title><rect x="66.3866%" y="1701" width="1.6807%" height="15" fill="rgb(244,5,23)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1711.50"></text></g><g><title>alloc_new_heap (2 samples, 1.68%)</title><rect x="66.3866%" y="1685" width="1.6807%" height="15" fill="rgb(226,81,46)" fg:x="79" fg:w="2"/><text x="66.6366%" y="1695.50"></text></g><g><title>__GI___munmap (1 samples, 0.84%)</title><rect x="67.2269%" y="1669" width="0.8403%" height="15" fill="rgb(247,70,30)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1653" width="0.8403%" height="15" fill="rgb(212,68,19)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1637" width="0.8403%" height="15" fill="rgb(240,187,13)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1621" width="0.8403%" height="15" fill="rgb(223,113,26)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1605" width="0.8403%" height="15" fill="rgb(206,192,2)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1589" width="0.8403%" height="15" fill="rgb(241,108,4)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1573" width="0.8403%" height="15" fill="rgb(247,173,49)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="67.2269%" y="1557" width="0.8403%" height="15" fill="rgb(224,114,35)" fg:x="80" fg:w="1"/><text x="67.4769%" y="1567.50"></text></g><g><title>__GI___mmap64 (13 samples, 10.92%)</title><rect x="68.0672%" y="1829" width="10.9244%" height="15" fill="rgb(245,159,27)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1839.50">__GI___mmap64</text></g><g><title>__GI___mmap64 (13 samples, 10.92%)</title><rect x="68.0672%" y="1813" width="10.9244%" height="15" fill="rgb(245,172,44)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1823.50">__GI___mmap64</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1797" width="10.9244%" height="15" fill="rgb(236,23,11)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1807.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1781" width="10.9244%" height="15" fill="rgb(205,117,38)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1791.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1765" width="10.9244%" height="15" fill="rgb(237,72,25)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1775.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1749" width="10.9244%" height="15" fill="rgb(244,70,9)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1759.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1733" width="10.9244%" height="15" fill="rgb(217,125,39)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1743.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1717" width="10.9244%" height="15" fill="rgb(235,36,10)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1727.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1701" width="10.9244%" height="15" fill="rgb(251,123,47)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1711.50">[unknown]</text></g><g><title>[unknown] (13 samples, 10.92%)</title><rect x="68.0672%" y="1685" width="10.9244%" height="15" fill="rgb(221,13,13)" fg:x="81" fg:w="13"/><text x="68.3172%" y="1695.50">[unknown]</text></g><g><title>[unknown] (11 samples, 9.24%)</title><rect x="69.7479%" y="1669" width="9.2437%" height="15" fill="rgb(238,131,9)" fg:x="83" fg:w="11"/><text x="69.9979%" y="1679.50">[unknown]</text></g><g><title>[unknown] (8 samples, 6.72%)</title><rect x="72.2689%" y="1653" width="6.7227%" height="15" fill="rgb(211,50,8)" fg:x="86" fg:w="8"/><text x="72.5189%" y="1663.50">[unknown]</text></g><g><title>[unknown] (7 samples, 5.88%)</title><rect x="73.1092%" y="1637" width="5.8824%" height="15" fill="rgb(245,182,24)" fg:x="87" fg:w="7"/><text x="73.3592%" y="1647.50">[unknow..</text></g><g><title>[unknown] (6 samples, 5.04%)</title><rect x="73.9496%" y="1621" width="5.0420%" height="15" fill="rgb(242,14,37)" fg:x="88" fg:w="6"/><text x="74.1996%" y="1631.50">[unkno..</text></g><g><title>[unknown] (6 samples, 5.04%)</title><rect x="73.9496%" y="1605" width="5.0420%" height="15" fill="rgb(246,228,12)" fg:x="88" fg:w="6"/><text x="74.1996%" y="1615.50">[unkno..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="74.7899%" y="1589" width="4.2017%" height="15" fill="rgb(213,55,15)" fg:x="89" fg:w="5"/><text x="75.0399%" y="1599.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="74.7899%" y="1573" width="4.2017%" height="15" fill="rgb(209,9,3)" fg:x="89" fg:w="5"/><text x="75.0399%" y="1583.50">[unkn..</text></g><g><title>__clone3 (41 samples, 34.45%)</title><rect x="46.2185%" y="1941" width="34.4538%" height="15" fill="rgb(230,59,30)" fg:x="55" fg:w="41"/><text x="46.4685%" y="1951.50">__clone3</text></g><g><title>start_thread (41 samples, 34.45%)</title><rect x="46.2185%" y="1925" width="34.4538%" height="15" fill="rgb(209,121,21)" fg:x="55" fg:w="41"/><text x="46.4685%" y="1935.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (41 samples, 34.45%)</title><rect x="46.2185%" y="1909" width="34.4538%" height="15" fill="rgb(220,109,13)" fg:x="55" fg:w="41"/><text x="46.4685%" y="1919.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (15 samples, 12.61%)</title><rect x="68.0672%" y="1893" width="12.6050%" height="15" fill="rgb(232,18,1)" fg:x="81" fg:w="15"/><text x="68.3172%" y="1903.50">std::sys::unix::sta..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (15 samples, 12.61%)</title><rect x="68.0672%" y="1877" width="12.6050%" height="15" fill="rgb(215,41,42)" fg:x="81" fg:w="15"/><text x="68.3172%" y="1887.50">std::sys::unix::sta..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (15 samples, 12.61%)</title><rect x="68.0672%" y="1861" width="12.6050%" height="15" fill="rgb(224,123,36)" fg:x="81" fg:w="15"/><text x="68.3172%" y="1871.50">std::sys::unix::sta..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (15 samples, 12.61%)</title><rect x="68.0672%" y="1845" width="12.6050%" height="15" fill="rgb(240,125,3)" fg:x="81" fg:w="15"/><text x="68.3172%" y="1855.50">std::sys::unix::sta..</text></g><g><title>__GI___mprotect (2 samples, 1.68%)</title><rect x="78.9916%" y="1829" width="1.6807%" height="15" fill="rgb(205,98,50)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1839.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1813" width="1.6807%" height="15" fill="rgb(205,185,37)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1823.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1797" width="1.6807%" height="15" fill="rgb(238,207,15)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1807.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1781" width="1.6807%" height="15" fill="rgb(213,199,42)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1791.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1765" width="1.6807%" height="15" fill="rgb(235,201,11)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1775.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1749" width="1.6807%" height="15" fill="rgb(207,46,11)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1759.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1733" width="1.6807%" height="15" fill="rgb(241,35,35)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1743.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="78.9916%" y="1717" width="1.6807%" height="15" fill="rgb(243,32,47)" fg:x="94" fg:w="2"/><text x="79.2416%" y="1727.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="79.8319%" y="1701" width="0.8403%" height="15" fill="rgb(247,202,23)" fg:x="95" fg:w="1"/><text x="80.0819%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;memmap2::Mmap&gt;&gt; (1 samples, 0.84%)</title><rect x="80.6723%" y="1477" width="0.8403%" height="15" fill="rgb(219,102,11)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1487.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="80.6723%" y="1461" width="0.8403%" height="15" fill="rgb(243,110,44)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1471.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.84%)</title><rect x="80.6723%" y="1445" width="0.8403%" height="15" fill="rgb(222,74,54)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (1 samples, 0.84%)</title><rect x="80.6723%" y="1429" width="0.8403%" height="15" fill="rgb(216,99,12)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (1 samples, 0.84%)</title><rect x="80.6723%" y="1413" width="0.8403%" height="15" fill="rgb(226,22,26)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1423.50"></text></g><g><title>__GI___munmap (1 samples, 0.84%)</title><rect x="80.6723%" y="1397" width="0.8403%" height="15" fill="rgb(217,163,10)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1381" width="0.8403%" height="15" fill="rgb(213,25,53)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1365" width="0.8403%" height="15" fill="rgb(252,105,26)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1349" width="0.8403%" height="15" fill="rgb(220,39,43)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1333" width="0.8403%" height="15" fill="rgb(229,68,48)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1317" width="0.8403%" height="15" fill="rgb(252,8,32)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1301" width="0.8403%" height="15" fill="rgb(223,20,43)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1285" width="0.8403%" height="15" fill="rgb(229,81,49)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1269" width="0.8403%" height="15" fill="rgb(236,28,36)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1253" width="0.8403%" height="15" fill="rgb(249,185,26)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1237" width="0.8403%" height="15" fill="rgb(249,174,33)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="80.6723%" y="1221" width="0.8403%" height="15" fill="rgb(233,201,37)" fg:x="96" fg:w="1"/><text x="80.9223%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Parser&gt; (2 samples, 1.68%)</title><rect x="80.6723%" y="1493" width="1.6807%" height="15" fill="rgb(221,78,26)" fg:x="96" fg:w="2"/><text x="80.9223%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser_settings::Maps&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1477" width="0.8403%" height="15" fill="rgb(250,127,30)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1461" width="0.8403%" height="15" fill="rgb(230,49,44)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1445" width="0.8403%" height="15" fill="rgb(229,67,23)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1429" width="0.8403%" height="15" fill="rgb(249,83,47)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1439.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="81.5126%" y="1413" width="0.8403%" height="15" fill="rgb(215,43,3)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1423.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.84%)</title><rect x="81.5126%" y="1397" width="0.8403%" height="15" fill="rgb(238,154,13)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1407.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.84%)</title><rect x="81.5126%" y="1381" width="0.8403%" height="15" fill="rgb(219,56,2)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1391.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.84%)</title><rect x="81.5126%" y="1365" width="0.8403%" height="15" fill="rgb(233,0,4)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1349" width="0.8403%" height="15" fill="rgb(235,30,7)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1333" width="0.8403%" height="15" fill="rgb(250,79,13)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1317" width="0.8403%" height="15" fill="rgb(211,146,34)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="81.5126%" y="1301" width="0.8403%" height="15" fill="rgb(228,22,38)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1285" width="0.8403%" height="15" fill="rgb(235,168,5)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1269" width="0.8403%" height="15" fill="rgb(221,155,16)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1253" width="0.8403%" height="15" fill="rgb(215,215,53)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1237" width="0.8403%" height="15" fill="rgb(223,4,10)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.84%)</title><rect x="81.5126%" y="1221" width="0.8403%" height="15" fill="rgb(234,103,6)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1231.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="81.5126%" y="1205" width="0.8403%" height="15" fill="rgb(227,97,0)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.84%)</title><rect x="81.5126%" y="1189" width="0.8403%" height="15" fill="rgb(234,150,53)" fg:x="97" fg:w="1"/><text x="81.7626%" y="1199.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_array (1 samples, 0.84%)</title><rect x="82.3529%" y="1221" width="0.8403%" height="15" fill="rgb(228,201,54)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1231.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.84%)</title><rect x="82.3529%" y="1205" width="0.8403%" height="15" fill="rgb(222,22,37)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1215.50"></text></g><g><title>protobuf::text_format::print::fmt (1 samples, 0.84%)</title><rect x="82.3529%" y="1189" width="0.8403%" height="15" fill="rgb(237,53,32)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1199.50"></text></g><g><title>protobuf::text_format::print::print_to_string_internal (1 samples, 0.84%)</title><rect x="82.3529%" y="1173" width="0.8403%" height="15" fill="rgb(233,25,53)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1183.50"></text></g><g><title>protobuf::text_format::print::print_to_internal (1 samples, 0.84%)</title><rect x="82.3529%" y="1157" width="0.8403%" height="15" fill="rgb(210,40,34)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1167.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::descriptor_dyn (1 samples, 0.84%)</title><rect x="82.3529%" y="1141" width="0.8403%" height="15" fill="rgb(241,220,44)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1151.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor (1 samples, 0.84%)</title><rect x="82.3529%" y="1125" width="0.8403%" height="15" fill="rgb(235,28,35)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1135.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.84%)</title><rect x="82.3529%" y="1109" width="0.8403%" height="15" fill="rgb(210,56,17)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1119.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.84%)</title><rect x="82.3529%" y="1093" width="0.8403%" height="15" fill="rgb(224,130,29)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1103.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.84%)</title><rect x="82.3529%" y="1077" width="0.8403%" height="15" fill="rgb(235,212,8)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1087.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.84%)</title><rect x="82.3529%" y="1061" width="0.8403%" height="15" fill="rgb(223,33,50)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1071.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.84%)</title><rect x="82.3529%" y="1045" width="0.8403%" height="15" fill="rgb(219,149,13)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1055.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.84%)</title><rect x="82.3529%" y="1029" width="0.8403%" height="15" fill="rgb(250,156,29)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1039.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="1013" width="0.8403%" height="15" fill="rgb(216,193,19)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1023.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="997" width="0.8403%" height="15" fill="rgb(216,135,14)" fg:x="98" fg:w="1"/><text x="82.6029%" y="1007.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="981" width="0.8403%" height="15" fill="rgb(241,47,5)" fg:x="98" fg:w="1"/><text x="82.6029%" y="991.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 0.84%)</title><rect x="82.3529%" y="965" width="0.8403%" height="15" fill="rgb(233,42,35)" fg:x="98" fg:w="1"/><text x="82.6029%" y="975.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.84%)</title><rect x="82.3529%" y="949" width="0.8403%" height="15" fill="rgb(231,13,6)" fg:x="98" fg:w="1"/><text x="82.6029%" y="959.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.84%)</title><rect x="82.3529%" y="933" width="0.8403%" height="15" fill="rgb(207,181,40)" fg:x="98" fg:w="1"/><text x="82.6029%" y="943.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.84%)</title><rect x="82.3529%" y="917" width="0.8403%" height="15" fill="rgb(254,173,49)" fg:x="98" fg:w="1"/><text x="82.6029%" y="927.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.84%)</title><rect x="82.3529%" y="901" width="0.8403%" height="15" fill="rgb(221,1,38)" fg:x="98" fg:w="1"/><text x="82.6029%" y="911.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.84%)</title><rect x="82.3529%" y="885" width="0.8403%" height="15" fill="rgb(206,124,46)" fg:x="98" fg:w="1"/><text x="82.6029%" y="895.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.84%)</title><rect x="82.3529%" y="869" width="0.8403%" height="15" fill="rgb(249,21,11)" fg:x="98" fg:w="1"/><text x="82.6029%" y="879.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="853" width="0.8403%" height="15" fill="rgb(222,201,40)" fg:x="98" fg:w="1"/><text x="82.6029%" y="863.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="837" width="0.8403%" height="15" fill="rgb(235,61,29)" fg:x="98" fg:w="1"/><text x="82.6029%" y="847.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="821" width="0.8403%" height="15" fill="rgb(219,207,3)" fg:x="98" fg:w="1"/><text x="82.6029%" y="831.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.84%)</title><rect x="82.3529%" y="805" width="0.8403%" height="15" fill="rgb(222,56,46)" fg:x="98" fg:w="1"/><text x="82.6029%" y="815.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.84%)</title><rect x="82.3529%" y="789" width="0.8403%" height="15" fill="rgb(239,76,54)" fg:x="98" fg:w="1"/><text x="82.6029%" y="799.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.84%)</title><rect x="82.3529%" y="773" width="0.8403%" height="15" fill="rgb(231,124,27)" fg:x="98" fg:w="1"/><text x="82.6029%" y="783.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.84%)</title><rect x="82.3529%" y="757" width="0.8403%" height="15" fill="rgb(249,195,6)" fg:x="98" fg:w="1"/><text x="82.6029%" y="767.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.84%)</title><rect x="82.3529%" y="741" width="0.8403%" height="15" fill="rgb(237,174,47)" fg:x="98" fg:w="1"/><text x="82.6029%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.84%)</title><rect x="82.3529%" y="725" width="0.8403%" height="15" fill="rgb(206,201,31)" fg:x="98" fg:w="1"/><text x="82.6029%" y="735.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="709" width="0.8403%" height="15" fill="rgb(231,57,52)" fg:x="98" fg:w="1"/><text x="82.6029%" y="719.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="693" width="0.8403%" height="15" fill="rgb(248,177,22)" fg:x="98" fg:w="1"/><text x="82.6029%" y="703.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="677" width="0.8403%" height="15" fill="rgb(215,211,37)" fg:x="98" fg:w="1"/><text x="82.6029%" y="687.50"></text></g><g><title>csgoproto::netmessages::file_descriptor_proto (1 samples, 0.84%)</title><rect x="82.3529%" y="661" width="0.8403%" height="15" fill="rgb(241,128,51)" fg:x="98" fg:w="1"/><text x="82.6029%" y="671.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.84%)</title><rect x="82.3529%" y="645" width="0.8403%" height="15" fill="rgb(227,165,31)" fg:x="98" fg:w="1"/><text x="82.6029%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.84%)</title><rect x="82.3529%" y="629" width="0.8403%" height="15" fill="rgb(228,167,24)" fg:x="98" fg:w="1"/><text x="82.6029%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.84%)</title><rect x="82.3529%" y="613" width="0.8403%" height="15" fill="rgb(228,143,12)" fg:x="98" fg:w="1"/><text x="82.6029%" y="623.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.84%)</title><rect x="82.3529%" y="597" width="0.8403%" height="15" fill="rgb(249,149,8)" fg:x="98" fg:w="1"/><text x="82.6029%" y="607.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.84%)</title><rect x="82.3529%" y="581" width="0.8403%" height="15" fill="rgb(243,35,44)" fg:x="98" fg:w="1"/><text x="82.6029%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.84%)</title><rect x="82.3529%" y="565" width="0.8403%" height="15" fill="rgb(246,89,9)" fg:x="98" fg:w="1"/><text x="82.6029%" y="575.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="549" width="0.8403%" height="15" fill="rgb(233,213,13)" fg:x="98" fg:w="1"/><text x="82.6029%" y="559.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="533" width="0.8403%" height="15" fill="rgb(233,141,41)" fg:x="98" fg:w="1"/><text x="82.6029%" y="543.50"></text></g><g><title>csgoproto::netmessages::file_descriptor_proto::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="517" width="0.8403%" height="15" fill="rgb(239,167,4)" fg:x="98" fg:w="1"/><text x="82.6029%" y="527.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.84%)</title><rect x="82.3529%" y="501" width="0.8403%" height="15" fill="rgb(209,217,16)" fg:x="98" fg:w="1"/><text x="82.6029%" y="511.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.84%)</title><rect x="82.3529%" y="485" width="0.8403%" height="15" fill="rgb(219,88,35)" fg:x="98" fg:w="1"/><text x="82.6029%" y="495.50"></text></g><g><title>&lt;protobuf::descriptor::FileDescriptorProto as protobuf::message::Message&gt;::merge_from (1 samples, 0.84%)</title><rect x="82.3529%" y="469" width="0.8403%" height="15" fill="rgb(220,193,23)" fg:x="98" fg:w="1"/><text x="82.6029%" y="479.50"></text></g><g><title>protobuf::rt::message::read_singular_message_into_field (1 samples, 0.84%)</title><rect x="82.3529%" y="453" width="0.8403%" height="15" fill="rgb(230,90,52)" fg:x="98" fg:w="1"/><text x="82.6029%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.84%)</title><rect x="82.3529%" y="437" width="0.8403%" height="15" fill="rgb(252,106,19)" fg:x="98" fg:w="1"/><text x="82.6029%" y="447.50"></text></g><g><title>&lt;protobuf::descriptor::SourceCodeInfo as protobuf::message::Message&gt;::merge_from (1 samples, 0.84%)</title><rect x="82.3529%" y="421" width="0.8403%" height="15" fill="rgb(206,74,20)" fg:x="98" fg:w="1"/><text x="82.6029%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.84%)</title><rect x="82.3529%" y="405" width="0.8403%" height="15" fill="rgb(230,138,44)" fg:x="98" fg:w="1"/><text x="82.6029%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.84%)</title><rect x="82.3529%" y="389" width="0.8403%" height="15" fill="rgb(235,182,43)" fg:x="98" fg:w="1"/><text x="82.6029%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.84%)</title><rect x="82.3529%" y="373" width="0.8403%" height="15" fill="rgb(242,16,51)" fg:x="98" fg:w="1"/><text x="82.6029%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.84%)</title><rect x="82.3529%" y="357" width="0.8403%" height="15" fill="rgb(248,9,4)" fg:x="98" fg:w="1"/><text x="82.6029%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.84%)</title><rect x="82.3529%" y="341" width="0.8403%" height="15" fill="rgb(210,31,22)" fg:x="98" fg:w="1"/><text x="82.6029%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.84%)</title><rect x="82.3529%" y="325" width="0.8403%" height="15" fill="rgb(239,54,39)" fg:x="98" fg:w="1"/><text x="82.6029%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.84%)</title><rect x="82.3529%" y="309" width="0.8403%" height="15" fill="rgb(230,99,41)" fg:x="98" fg:w="1"/><text x="82.6029%" y="319.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.84%)</title><rect x="82.3529%" y="293" width="0.8403%" height="15" fill="rgb(253,106,12)" fg:x="98" fg:w="1"/><text x="82.6029%" y="303.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.84%)</title><rect x="82.3529%" y="277" width="0.8403%" height="15" fill="rgb(213,46,41)" fg:x="98" fg:w="1"/><text x="82.6029%" y="287.50"></text></g><g><title>_mi_memcpy (1 samples, 0.84%)</title><rect x="82.3529%" y="261" width="0.8403%" height="15" fill="rgb(215,133,35)" fg:x="98" fg:w="1"/><text x="82.6029%" y="271.50"></text></g><g><title>memcpy (1 samples, 0.84%)</title><rect x="82.3529%" y="245" width="0.8403%" height="15" fill="rgb(213,28,5)" fg:x="98" fg:w="1"/><text x="82.6029%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.84%)</title><rect x="82.3529%" y="229" width="0.8403%" height="15" fill="rgb(215,77,49)" fg:x="98" fg:w="1"/><text x="82.6029%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="213" width="0.8403%" height="15" fill="rgb(248,100,22)" fg:x="98" fg:w="1"/><text x="82.6029%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="197" width="0.8403%" height="15" fill="rgb(208,67,9)" fg:x="98" fg:w="1"/><text x="82.6029%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="181" width="0.8403%" height="15" fill="rgb(219,133,21)" fg:x="98" fg:w="1"/><text x="82.6029%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="165" width="0.8403%" height="15" fill="rgb(246,46,29)" fg:x="98" fg:w="1"/><text x="82.6029%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="149" width="0.8403%" height="15" fill="rgb(246,185,52)" fg:x="98" fg:w="1"/><text x="82.6029%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="133" width="0.8403%" height="15" fill="rgb(252,136,11)" fg:x="98" fg:w="1"/><text x="82.6029%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="117" width="0.8403%" height="15" fill="rgb(219,138,53)" fg:x="98" fg:w="1"/><text x="82.6029%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="101" width="0.8403%" height="15" fill="rgb(211,51,23)" fg:x="98" fg:w="1"/><text x="82.6029%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="85" width="0.8403%" height="15" fill="rgb(247,221,28)" fg:x="98" fg:w="1"/><text x="82.6029%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="69" width="0.8403%" height="15" fill="rgb(251,222,45)" fg:x="98" fg:w="1"/><text x="82.6029%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="53" width="0.8403%" height="15" fill="rgb(217,162,53)" fg:x="98" fg:w="1"/><text x="82.6029%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="82.3529%" y="37" width="0.8403%" height="15" fill="rgb(229,93,14)" fg:x="98" fg:w="1"/><text x="82.6029%" y="47.50"></text></g><g><title>demoparser::parsing::entities::parse_packet_entities (2 samples, 1.68%)</title><rect x="82.3529%" y="1285" width="1.6807%" height="15" fill="rgb(209,67,49)" fg:x="98" fg:w="2"/><text x="82.6029%" y="1295.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (2 samples, 1.68%)</title><rect x="82.3529%" y="1269" width="1.6807%" height="15" fill="rgb(213,87,29)" fg:x="98" fg:w="2"/><text x="82.6029%" y="1279.50"></text></g><g><title>demoparser::parsing::entities::parse_ent_props (2 samples, 1.68%)</title><rect x="82.3529%" y="1253" width="1.6807%" height="15" fill="rgb(205,151,52)" fg:x="98" fg:w="2"/><text x="82.6029%" y="1263.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (2 samples, 1.68%)</title><rect x="82.3529%" y="1237" width="1.6807%" height="15" fill="rgb(253,215,39)" fg:x="98" fg:w="2"/><text x="82.6029%" y="1247.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_int (1 samples, 0.84%)</title><rect x="83.1933%" y="1221" width="0.8403%" height="15" fill="rgb(221,220,41)" fg:x="99" fg:w="1"/><text x="83.4433%" y="1231.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.84%)</title><rect x="83.1933%" y="1205" width="0.8403%" height="15" fill="rgb(218,133,21)" fg:x="99" fg:w="1"/><text x="83.4433%" y="1215.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.84%)</title><rect x="83.1933%" y="1189" width="0.8403%" height="15" fill="rgb(221,193,43)" fg:x="99" fg:w="1"/><text x="83.4433%" y="1199.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.84%)</title><rect x="83.1933%" y="1173" width="0.8403%" height="15" fill="rgb(240,128,52)" fg:x="99" fg:w="1"/><text x="83.4433%" y="1183.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.84%)</title><rect x="84.0336%" y="1269" width="0.8403%" height="15" fill="rgb(253,114,12)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1279.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.84%)</title><rect x="84.0336%" y="1253" width="0.8403%" height="15" fill="rgb(215,223,47)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.84%)</title><rect x="84.0336%" y="1237" width="0.8403%" height="15" fill="rgb(248,225,23)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.84%)</title><rect x="84.0336%" y="1221" width="0.8403%" height="15" fill="rgb(250,108,0)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.84%)</title><rect x="84.0336%" y="1205" width="0.8403%" height="15" fill="rgb(228,208,7)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.84%)</title><rect x="84.0336%" y="1189" width="0.8403%" height="15" fill="rgb(244,45,10)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.84%)</title><rect x="84.0336%" y="1173" width="0.8403%" height="15" fill="rgb(207,125,25)" fg:x="100" fg:w="1"/><text x="84.2836%" y="1183.50"></text></g><g><title>demoparser::parsing::game_events::gen_name_val_pairs (1 samples, 0.84%)</title><rect x="84.8739%" y="1269" width="0.8403%" height="15" fill="rgb(210,195,18)" fg:x="101" fg:w="1"/><text x="85.1239%" y="1279.50"></text></g><g><title>demoparser::parsing::game_events::parse_key (1 samples, 0.84%)</title><rect x="84.8739%" y="1253" width="0.8403%" height="15" fill="rgb(249,80,12)" fg:x="101" fg:w="1"/><text x="85.1239%" y="1263.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 0.84%)</title><rect x="84.8739%" y="1237" width="0.8403%" height="15" fill="rgb(221,65,9)" fg:x="101" fg:w="1"/><text x="85.1239%" y="1247.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.84%)</title><rect x="84.8739%" y="1221" width="0.8403%" height="15" fill="rgb(235,49,36)" fg:x="101" fg:w="1"/><text x="85.1239%" y="1231.50"></text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_game_events (3 samples, 2.52%)</title><rect x="84.0336%" y="1285" width="2.5210%" height="15" fill="rgb(225,32,20)" fg:x="100" fg:w="3"/><text x="84.2836%" y="1295.50">de..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.84%)</title><rect x="85.7143%" y="1269" width="0.8403%" height="15" fill="rgb(215,141,46)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1279.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.84%)</title><rect x="85.7143%" y="1253" width="0.8403%" height="15" fill="rgb(250,160,47)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1263.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (1 samples, 0.84%)</title><rect x="85.7143%" y="1237" width="0.8403%" height="15" fill="rgb(216,222,40)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.84%)</title><rect x="85.7143%" y="1221" width="0.8403%" height="15" fill="rgb(234,217,39)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1231.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.84%)</title><rect x="85.7143%" y="1205" width="0.8403%" height="15" fill="rgb(207,178,40)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1215.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.84%)</title><rect x="85.7143%" y="1189" width="0.8403%" height="15" fill="rgb(221,136,13)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1199.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (1 samples, 0.84%)</title><rect x="85.7143%" y="1173" width="0.8403%" height="15" fill="rgb(249,199,10)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1183.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.84%)</title><rect x="85.7143%" y="1157" width="0.8403%" height="15" fill="rgb(249,222,13)" fg:x="102" fg:w="1"/><text x="85.9643%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 5.04%)</title><rect x="82.3529%" y="1461" width="5.0420%" height="15" fill="rgb(244,185,38)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1471.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 5.04%)</title><rect x="82.3529%" y="1445" width="5.0420%" height="15" fill="rgb(236,202,9)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1455.50">&lt;alloc..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 5.04%)</title><rect x="82.3529%" y="1429" width="5.0420%" height="15" fill="rgb(250,229,37)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1439.50">alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 5.04%)</title><rect x="82.3529%" y="1413" width="5.0420%" height="15" fill="rgb(206,174,23)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1423.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 5.04%)</title><rect x="82.3529%" y="1397" width="5.0420%" height="15" fill="rgb(211,33,43)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1407.50">&lt;alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 5.04%)</title><rect x="82.3529%" y="1381" width="5.0420%" height="15" fill="rgb(245,58,50)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1391.50">core::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 5.04%)</title><rect x="82.3529%" y="1365" width="5.0420%" height="15" fill="rgb(244,68,36)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1375.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 5.04%)</title><rect x="82.3529%" y="1349" width="5.0420%" height="15" fill="rgb(232,229,15)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1359.50">core::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 5.04%)</title><rect x="82.3529%" y="1333" width="5.0420%" height="15" fill="rgb(254,30,23)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1343.50">core::..</text></g><g><title>demoparser::parsing::parser::Parser::compute_jobs::{{closure}} (6 samples, 5.04%)</title><rect x="82.3529%" y="1317" width="5.0420%" height="15" fill="rgb(235,160,14)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1327.50">demopa..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (6 samples, 5.04%)</title><rect x="82.3529%" y="1301" width="5.0420%" height="15" fill="rgb(212,155,44)" fg:x="98" fg:w="6"/><text x="82.6029%" y="1311.50">demopa..</text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (1 samples, 0.84%)</title><rect x="86.5546%" y="1285" width="0.8403%" height="15" fill="rgb(226,2,50)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1269" width="0.8403%" height="15" fill="rgb(234,177,6)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1253" width="0.8403%" height="15" fill="rgb(217,24,9)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="86.5546%" y="1237" width="0.8403%" height="15" fill="rgb(220,13,46)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1221" width="0.8403%" height="15" fill="rgb(239,221,27)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1205" width="0.8403%" height="15" fill="rgb(222,198,25)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1189" width="0.8403%" height="15" fill="rgb(211,99,13)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1173" width="0.8403%" height="15" fill="rgb(232,111,31)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.84%)</title><rect x="86.5546%" y="1157" width="0.8403%" height="15" fill="rgb(245,82,37)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1167.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="86.5546%" y="1141" width="0.8403%" height="15" fill="rgb(227,149,46)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.84%)</title><rect x="86.5546%" y="1125" width="0.8403%" height="15" fill="rgb(218,36,50)" fg:x="103" fg:w="1"/><text x="86.8046%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 2.52%)</title><rect x="87.3950%" y="1429" width="2.5210%" height="15" fill="rgb(226,80,48)" fg:x="104" fg:w="3"/><text x="87.6450%" y="1439.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.68%)</title><rect x="88.2353%" y="1413" width="1.6807%" height="15" fill="rgb(238,224,15)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.68%)</title><rect x="88.2353%" y="1397" width="1.6807%" height="15" fill="rgb(241,136,10)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1407.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.68%)</title><rect x="88.2353%" y="1381" width="1.6807%" height="15" fill="rgb(208,32,45)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.68%)</title><rect x="88.2353%" y="1365" width="1.6807%" height="15" fill="rgb(207,135,9)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1375.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.68%)</title><rect x="88.2353%" y="1349" width="1.6807%" height="15" fill="rgb(206,86,44)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1359.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.68%)</title><rect x="88.2353%" y="1333" width="1.6807%" height="15" fill="rgb(245,177,15)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1343.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 1.68%)</title><rect x="88.2353%" y="1317" width="1.6807%" height="15" fill="rgb(206,64,50)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1327.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 1.68%)</title><rect x="88.2353%" y="1301" width="1.6807%" height="15" fill="rgb(234,36,40)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1311.50"></text></g><g><title>_mi_memcpy (2 samples, 1.68%)</title><rect x="88.2353%" y="1285" width="1.6807%" height="15" fill="rgb(213,64,8)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1295.50"></text></g><g><title>memcpy (2 samples, 1.68%)</title><rect x="88.2353%" y="1269" width="1.6807%" height="15" fill="rgb(210,75,36)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1279.50"></text></g><g><title>[libc.so.6] (2 samples, 1.68%)</title><rect x="88.2353%" y="1253" width="1.6807%" height="15" fill="rgb(229,88,21)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 1.68%)</title><rect x="88.2353%" y="1237" width="1.6807%" height="15" fill="rgb(252,204,47)" fg:x="105" fg:w="2"/><text x="88.4853%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1221" width="0.8403%" height="15" fill="rgb(208,77,27)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1205" width="0.8403%" height="15" fill="rgb(221,76,26)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1189" width="0.8403%" height="15" fill="rgb(225,139,18)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1173" width="0.8403%" height="15" fill="rgb(230,137,11)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1157" width="0.8403%" height="15" fill="rgb(212,28,1)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1141" width="0.8403%" height="15" fill="rgb(248,164,17)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1125" width="0.8403%" height="15" fill="rgb(222,171,42)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1109" width="0.8403%" height="15" fill="rgb(243,84,45)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1093" width="0.8403%" height="15" fill="rgb(252,49,23)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1077" width="0.8403%" height="15" fill="rgb(215,19,7)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="89.0756%" y="1061" width="0.8403%" height="15" fill="rgb(238,81,41)" fg:x="106" fg:w="1"/><text x="89.3256%" y="1071.50"></text></g><g><title>demoparser::parsing::parser::Parser::compute_jobs (11 samples, 9.24%)</title><rect x="82.3529%" y="1477" width="9.2437%" height="15" fill="rgb(210,199,37)" fg:x="98" fg:w="11"/><text x="82.6029%" y="1487.50">demoparser::p..</text></g><g><title>demoparser::parsing::cache::ReadCache::get_event_deltas (5 samples, 4.20%)</title><rect x="87.3950%" y="1461" width="4.2017%" height="15" fill="rgb(244,192,49)" fg:x="104" fg:w="5"/><text x="87.6450%" y="1471.50">demop..</text></g><g><title>demoparser::parsing::cache::ReadCache::read_deltas_by_pidx (5 samples, 4.20%)</title><rect x="87.3950%" y="1445" width="4.2017%" height="15" fill="rgb(226,211,11)" fg:x="104" fg:w="5"/><text x="87.6450%" y="1455.50">demop..</text></g><g><title>std::io::Read::read_to_end (2 samples, 1.68%)</title><rect x="89.9160%" y="1429" width="1.6807%" height="15" fill="rgb(236,162,54)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1439.50"></text></g><g><title>std::io::default_read_to_end (2 samples, 1.68%)</title><rect x="89.9160%" y="1413" width="1.6807%" height="15" fill="rgb(220,229,9)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 1.68%)</title><rect x="89.9160%" y="1397" width="1.6807%" height="15" fill="rgb(250,87,22)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 1.68%)</title><rect x="89.9160%" y="1381" width="1.6807%" height="15" fill="rgb(239,43,17)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.68%)</title><rect x="89.9160%" y="1365" width="1.6807%" height="15" fill="rgb(231,177,25)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.68%)</title><rect x="89.9160%" y="1349" width="1.6807%" height="15" fill="rgb(219,179,1)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1359.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.68%)</title><rect x="89.9160%" y="1333" width="1.6807%" height="15" fill="rgb(238,219,53)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.68%)</title><rect x="89.9160%" y="1317" width="1.6807%" height="15" fill="rgb(232,167,36)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1327.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.68%)</title><rect x="89.9160%" y="1301" width="1.6807%" height="15" fill="rgb(244,19,51)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1311.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.68%)</title><rect x="89.9160%" y="1285" width="1.6807%" height="15" fill="rgb(224,6,22)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1295.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 1.68%)</title><rect x="89.9160%" y="1269" width="1.6807%" height="15" fill="rgb(224,145,5)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1279.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 1.68%)</title><rect x="89.9160%" y="1253" width="1.6807%" height="15" fill="rgb(234,130,49)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1263.50"></text></g><g><title>_mi_memcpy (2 samples, 1.68%)</title><rect x="89.9160%" y="1237" width="1.6807%" height="15" fill="rgb(254,6,2)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1247.50"></text></g><g><title>memcpy (2 samples, 1.68%)</title><rect x="89.9160%" y="1221" width="1.6807%" height="15" fill="rgb(208,96,46)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1231.50"></text></g><g><title>[libc.so.6] (2 samples, 1.68%)</title><rect x="89.9160%" y="1205" width="1.6807%" height="15" fill="rgb(239,3,39)" fg:x="107" fg:w="2"/><text x="90.1660%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1189" width="0.8403%" height="15" fill="rgb(233,210,1)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1173" width="0.8403%" height="15" fill="rgb(244,137,37)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1157" width="0.8403%" height="15" fill="rgb(240,136,2)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1141" width="0.8403%" height="15" fill="rgb(239,18,37)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1125" width="0.8403%" height="15" fill="rgb(218,185,22)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1109" width="0.8403%" height="15" fill="rgb(225,218,4)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1093" width="0.8403%" height="15" fill="rgb(230,182,32)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1077" width="0.8403%" height="15" fill="rgb(242,56,43)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1061" width="0.8403%" height="15" fill="rgb(233,99,24)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1045" width="0.8403%" height="15" fill="rgb(234,209,42)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="90.7563%" y="1029" width="0.8403%" height="15" fill="rgb(227,7,12)" fg:x="108" fg:w="1"/><text x="91.0063%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.84%)</title><rect x="91.5966%" y="1397" width="0.8403%" height="15" fill="rgb(245,203,43)" fg:x="109" fg:w="1"/><text x="91.8466%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.84%)</title><rect x="91.5966%" y="1381" width="0.8403%" height="15" fill="rgb(238,205,33)" fg:x="109" fg:w="1"/><text x="91.8466%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.84%)</title><rect x="91.5966%" y="1365" width="0.8403%" height="15" fill="rgb(231,56,7)" fg:x="109" fg:w="1"/><text x="91.8466%" y="1375.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key::{{closure}} (1 samples, 0.84%)</title><rect x="92.4370%" y="1285" width="0.8403%" height="15" fill="rgb(244,186,29)" fg:x="110" fg:w="1"/><text x="92.6870%" y="1295.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.84%)</title><rect x="92.4370%" y="1269" width="0.8403%" height="15" fill="rgb(234,111,31)" fg:x="110" fg:w="1"/><text x="92.6870%" y="1279.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (3 samples, 2.52%)</title><rect x="91.5966%" y="1445" width="2.5210%" height="15" fill="rgb(241,149,10)" fg:x="109" fg:w="3"/><text x="91.8466%" y="1455.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 2.52%)</title><rect x="91.5966%" y="1429" width="2.5210%" height="15" fill="rgb(249,206,44)" fg:x="109" fg:w="3"/><text x="91.8466%" y="1439.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 2.52%)</title><rect x="91.5966%" y="1413" width="2.5210%" height="15" fill="rgb(251,153,30)" fg:x="109" fg:w="3"/><text x="91.8466%" y="1423.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 1.68%)</title><rect x="92.4370%" y="1397" width="1.6807%" height="15" fill="rgb(239,152,38)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1407.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 1.68%)</title><rect x="92.4370%" y="1381" width="1.6807%" height="15" fill="rgb(249,139,47)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1391.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 1.68%)</title><rect x="92.4370%" y="1365" width="1.6807%" height="15" fill="rgb(244,64,35)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1375.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 1.68%)</title><rect x="92.4370%" y="1349" width="1.6807%" height="15" fill="rgb(216,46,15)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (2 samples, 1.68%)</title><rect x="92.4370%" y="1333" width="1.6807%" height="15" fill="rgb(250,74,19)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1343.50"></text></g><g><title>alloc::slice::merge_sort (2 samples, 1.68%)</title><rect x="92.4370%" y="1317" width="1.6807%" height="15" fill="rgb(249,42,33)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1327.50"></text></g><g><title>alloc::slice::merge (2 samples, 1.68%)</title><rect x="92.4370%" y="1301" width="1.6807%" height="15" fill="rgb(242,149,17)" fg:x="110" fg:w="2"/><text x="92.6870%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::slice::merge::MergeHole&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.84%)</title><rect x="93.2773%" y="1285" width="0.8403%" height="15" fill="rgb(244,29,21)" fg:x="111" fg:w="1"/><text x="93.5273%" y="1295.50"></text></g><g><title>&lt;alloc::slice::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.84%)</title><rect x="93.2773%" y="1269" width="0.8403%" height="15" fill="rgb(220,130,37)" fg:x="111" fg:w="1"/><text x="93.5273%" y="1279.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.84%)</title><rect x="93.2773%" y="1253" width="0.8403%" height="15" fill="rgb(211,67,2)" fg:x="111" fg:w="1"/><text x="93.5273%" y="1263.50"></text></g><g><title>[libc.so.6] (1 samples, 0.84%)</title><rect x="93.2773%" y="1237" width="0.8403%" height="15" fill="rgb(235,68,52)" fg:x="111" fg:w="1"/><text x="93.5273%" y="1247.50"></text></g><g><title>std::panic::catch_unwind (17 samples, 14.29%)</title><rect x="80.6723%" y="1797" width="14.2857%" height="15" fill="rgb(246,142,3)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1807.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (17 samples, 14.29%)</title><rect x="80.6723%" y="1781" width="14.2857%" height="15" fill="rgb(241,25,7)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1791.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (17 samples, 14.29%)</title><rect x="80.6723%" y="1765" width="14.2857%" height="15" fill="rgb(242,119,39)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1775.50">std::panicking::try::d..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (17 samples, 14.29%)</title><rect x="80.6723%" y="1749" width="14.2857%" height="15" fill="rgb(241,98,45)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1759.50">core::ops::function::i..</text></g><g><title>std::rt::lang_start::{{closure}} (17 samples, 14.29%)</title><rect x="80.6723%" y="1733" width="14.2857%" height="15" fill="rgb(254,28,30)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1743.50">std::rt::lang_start::{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17 samples, 14.29%)</title><rect x="80.6723%" y="1717" width="14.2857%" height="15" fill="rgb(241,142,54)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1727.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 14.29%)</title><rect x="80.6723%" y="1701" width="14.2857%" height="15" fill="rgb(222,85,15)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1711.50">core::ops::function::F..</text></g><g><title>demoparser::main (17 samples, 14.29%)</title><rect x="80.6723%" y="1685" width="14.2857%" height="15" fill="rgb(210,85,47)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1695.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 14.29%)</title><rect x="80.6723%" y="1669" width="14.2857%" height="15" fill="rgb(224,206,25)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1679.50">core::iter::traits::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17 samples, 14.29%)</title><rect x="80.6723%" y="1653" width="14.2857%" height="15" fill="rgb(243,201,19)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1663.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (17 samples, 14.29%)</title><rect x="80.6723%" y="1637" width="14.2857%" height="15" fill="rgb(236,59,4)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1647.50">alloc::vec::in_place_c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17 samples, 14.29%)</title><rect x="80.6723%" y="1621" width="14.2857%" height="15" fill="rgb(254,179,45)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1631.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17 samples, 14.29%)</title><rect x="80.6723%" y="1605" width="14.2857%" height="15" fill="rgb(226,14,10)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1615.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 14.29%)</title><rect x="80.6723%" y="1589" width="14.2857%" height="15" fill="rgb(244,27,41)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1599.50">core::iter::traits::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 14.29%)</title><rect x="80.6723%" y="1573" width="14.2857%" height="15" fill="rgb(235,35,32)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1583.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 14.29%)</title><rect x="80.6723%" y="1557" width="14.2857%" height="15" fill="rgb(218,68,31)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1567.50">core::iter::traits::it..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 14.29%)</title><rect x="80.6723%" y="1541" width="14.2857%" height="15" fill="rgb(207,120,37)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1551.50">core::iter::adapters::..</text></g><g><title>demoparser::main::{{closure}} (17 samples, 14.29%)</title><rect x="80.6723%" y="1525" width="14.2857%" height="15" fill="rgb(227,98,0)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1535.50">demoparser::main::{{cl..</text></g><g><title>demoparser::parse_demo (17 samples, 14.29%)</title><rect x="80.6723%" y="1509" width="14.2857%" height="15" fill="rgb(207,7,3)" fg:x="96" fg:w="17"/><text x="80.9223%" y="1519.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (15 samples, 12.61%)</title><rect x="82.3529%" y="1493" width="12.6050%" height="15" fill="rgb(206,98,19)" fg:x="98" fg:w="15"/><text x="82.6029%" y="1503.50">demoparser::parsing..</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (4 samples, 3.36%)</title><rect x="91.5966%" y="1477" width="3.3613%" height="15" fill="rgb(217,5,26)" fg:x="109" fg:w="4"/><text x="91.8466%" y="1487.50">dem..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (4 samples, 3.36%)</title><rect x="91.5966%" y="1461" width="3.3613%" height="15" fill="rgb(235,190,38)" fg:x="109" fg:w="4"/><text x="91.8466%" y="1471.50">dem..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.84%)</title><rect x="94.1176%" y="1445" width="0.8403%" height="15" fill="rgb(247,86,24)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1455.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.84%)</title><rect x="94.1176%" y="1429" width="0.8403%" height="15" fill="rgb(205,101,16)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1439.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.84%)</title><rect x="94.1176%" y="1413" width="0.8403%" height="15" fill="rgb(246,168,33)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.84%)</title><rect x="94.1176%" y="1397" width="0.8403%" height="15" fill="rgb(231,114,1)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.84%)</title><rect x="94.1176%" y="1381" width="0.8403%" height="15" fill="rgb(207,184,53)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.84%)</title><rect x="94.1176%" y="1365" width="0.8403%" height="15" fill="rgb(224,95,51)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1375.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.84%)</title><rect x="94.1176%" y="1349" width="0.8403%" height="15" fill="rgb(212,188,45)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1359.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.84%)</title><rect x="94.1176%" y="1333" width="0.8403%" height="15" fill="rgb(223,154,38)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1343.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.84%)</title><rect x="94.1176%" y="1317" width="0.8403%" height="15" fill="rgb(251,22,52)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1327.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.84%)</title><rect x="94.1176%" y="1301" width="0.8403%" height="15" fill="rgb(229,209,22)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1311.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.84%)</title><rect x="94.1176%" y="1285" width="0.8403%" height="15" fill="rgb(234,138,34)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1295.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.84%)</title><rect x="94.1176%" y="1269" width="0.8403%" height="15" fill="rgb(212,95,11)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1279.50"></text></g><g><title>_mi_memcpy (1 samples, 0.84%)</title><rect x="94.1176%" y="1253" width="0.8403%" height="15" fill="rgb(240,179,47)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1263.50"></text></g><g><title>memcpy (1 samples, 0.84%)</title><rect x="94.1176%" y="1237" width="0.8403%" height="15" fill="rgb(240,163,11)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1247.50"></text></g><g><title>[libc.so.6] (1 samples, 0.84%)</title><rect x="94.1176%" y="1221" width="0.8403%" height="15" fill="rgb(236,37,12)" fg:x="112" fg:w="1"/><text x="94.3676%" y="1231.50"></text></g><g><title>demoparser (114 samples, 95.80%)</title><rect x="0.0000%" y="1957" width="95.7983%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1967.50">demoparser</text></g><g><title>_start (18 samples, 15.13%)</title><rect x="80.6723%" y="1941" width="15.1261%" height="15" fill="rgb(244,205,15)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1951.50">_start</text></g><g><title>__libc_start_main_impl (18 samples, 15.13%)</title><rect x="80.6723%" y="1925" width="15.1261%" height="15" fill="rgb(223,117,47)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1935.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (18 samples, 15.13%)</title><rect x="80.6723%" y="1909" width="15.1261%" height="15" fill="rgb(244,107,35)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1919.50">__libc_start_call_main</text></g><g><title>main (18 samples, 15.13%)</title><rect x="80.6723%" y="1893" width="15.1261%" height="15" fill="rgb(205,140,8)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1903.50">main</text></g><g><title>std::rt::lang_start_internal (18 samples, 15.13%)</title><rect x="80.6723%" y="1877" width="15.1261%" height="15" fill="rgb(228,84,46)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1887.50">std::rt::lang_start_int..</text></g><g><title>std::panic::catch_unwind (18 samples, 15.13%)</title><rect x="80.6723%" y="1861" width="15.1261%" height="15" fill="rgb(254,188,9)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1871.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (18 samples, 15.13%)</title><rect x="80.6723%" y="1845" width="15.1261%" height="15" fill="rgb(206,112,54)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1855.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18 samples, 15.13%)</title><rect x="80.6723%" y="1829" width="15.1261%" height="15" fill="rgb(216,84,49)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1839.50">std::panicking::try::do..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (18 samples, 15.13%)</title><rect x="80.6723%" y="1813" width="15.1261%" height="15" fill="rgb(214,194,35)" fg:x="96" fg:w="18"/><text x="80.9223%" y="1823.50">std::rt::lang_start_int..</text></g><g><title>std::rt::init (1 samples, 0.84%)</title><rect x="94.9580%" y="1797" width="0.8403%" height="15" fill="rgb(249,28,3)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1807.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.84%)</title><rect x="94.9580%" y="1781" width="0.8403%" height="15" fill="rgb(222,56,52)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1791.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.84%)</title><rect x="94.9580%" y="1765" width="0.8403%" height="15" fill="rgb(245,217,50)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1775.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.84%)</title><rect x="94.9580%" y="1749" width="0.8403%" height="15" fill="rgb(213,201,24)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1759.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.84%)</title><rect x="94.9580%" y="1733" width="0.8403%" height="15" fill="rgb(248,116,28)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1743.50"></text></g><g><title>_IO_new_fopen (1 samples, 0.84%)</title><rect x="94.9580%" y="1717" width="0.8403%" height="15" fill="rgb(219,72,43)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1727.50"></text></g><g><title>__fopen_internal (1 samples, 0.84%)</title><rect x="94.9580%" y="1701" width="0.8403%" height="15" fill="rgb(209,138,14)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1711.50"></text></g><g><title>_IO_new_file_fopen (1 samples, 0.84%)</title><rect x="94.9580%" y="1685" width="0.8403%" height="15" fill="rgb(222,18,33)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1695.50"></text></g><g><title>__GI__IO_file_open (1 samples, 0.84%)</title><rect x="94.9580%" y="1669" width="0.8403%" height="15" fill="rgb(213,199,7)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1679.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.84%)</title><rect x="94.9580%" y="1653" width="0.8403%" height="15" fill="rgb(250,110,10)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1637" width="0.8403%" height="15" fill="rgb(248,123,6)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1621" width="0.8403%" height="15" fill="rgb(206,91,31)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1605" width="0.8403%" height="15" fill="rgb(211,154,13)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1589" width="0.8403%" height="15" fill="rgb(225,148,7)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1573" width="0.8403%" height="15" fill="rgb(220,160,43)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1557" width="0.8403%" height="15" fill="rgb(213,52,39)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1541" width="0.8403%" height="15" fill="rgb(243,137,7)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1525" width="0.8403%" height="15" fill="rgb(230,79,13)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1509" width="0.8403%" height="15" fill="rgb(247,105,23)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1493" width="0.8403%" height="15" fill="rgb(223,179,41)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1477" width="0.8403%" height="15" fill="rgb(218,9,34)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1461" width="0.8403%" height="15" fill="rgb(222,106,8)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1445" width="0.8403%" height="15" fill="rgb(211,220,0)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1429" width="0.8403%" height="15" fill="rgb(229,52,16)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1413" width="0.8403%" height="15" fill="rgb(212,155,18)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1397" width="0.8403%" height="15" fill="rgb(242,21,14)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.84%)</title><rect x="94.9580%" y="1381" width="0.8403%" height="15" fill="rgb(222,19,48)" fg:x="113" fg:w="1"/><text x="95.2080%" y="1391.50"></text></g><g><title>all (119 samples, 100%)</title><rect x="0.0000%" y="1973" width="100.0000%" height="15" fill="rgb(232,45,27)" fg:x="0" fg:w="119"/><text x="0.2500%" y="1983.50"></text></g><g><title>perf-exec (5 samples, 4.20%)</title><rect x="95.7983%" y="1957" width="4.2017%" height="15" fill="rgb(249,103,42)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1967.50">perf-..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1941" width="4.2017%" height="15" fill="rgb(246,81,33)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1951.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1925" width="4.2017%" height="15" fill="rgb(252,33,42)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1935.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1909" width="4.2017%" height="15" fill="rgb(209,212,41)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1919.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1893" width="4.2017%" height="15" fill="rgb(207,154,6)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1903.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1877" width="4.2017%" height="15" fill="rgb(223,64,47)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1887.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1861" width="4.2017%" height="15" fill="rgb(211,161,38)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1871.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1845" width="4.2017%" height="15" fill="rgb(219,138,40)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1855.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1829" width="4.2017%" height="15" fill="rgb(241,228,46)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1839.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1813" width="4.2017%" height="15" fill="rgb(223,209,38)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1823.50">[unkn..</text></g><g><title>[unknown] (5 samples, 4.20%)</title><rect x="95.7983%" y="1797" width="4.2017%" height="15" fill="rgb(236,164,45)" fg:x="114" fg:w="5"/><text x="96.0483%" y="1807.50">[unkn..</text></g></svg></svg>