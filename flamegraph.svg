<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1926" onload="init(evt)" viewBox="0 0 1200 1926" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1926" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1909.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1909.00"> </text><svg id="frames" x="10" width="1180" total_samples="68"><g><title>[unknown] (23 samples, 33.82%)</title><rect x="0.0000%" y="1845" width="33.8235%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="23"/><text x="0.2500%" y="1855.50">[unknown]</text></g><g><title>[unknown] (13 samples, 19.12%)</title><rect x="14.7059%" y="1829" width="19.1176%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="13"/><text x="14.9559%" y="1839.50">[unknown]</text></g><g><title>[unknown] (13 samples, 19.12%)</title><rect x="14.7059%" y="1813" width="19.1176%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="13"/><text x="14.9559%" y="1823.50">[unknown]</text></g><g><title>[unknown] (13 samples, 19.12%)</title><rect x="14.7059%" y="1797" width="19.1176%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="13"/><text x="14.9559%" y="1807.50">[unknown]</text></g><g><title>[unknown] (13 samples, 19.12%)</title><rect x="14.7059%" y="1781" width="19.1176%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="13"/><text x="14.9559%" y="1791.50">[unknown]</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="29.4118%" y="1765" width="4.4118%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="3"/><text x="29.6618%" y="1775.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="29.4118%" y="1749" width="4.4118%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="3"/><text x="29.6618%" y="1759.50">[unkn..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="30.8824%" y="1733" width="2.9412%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="2"/><text x="31.1324%" y="1743.50">[u..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="30.8824%" y="1717" width="2.9412%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="2"/><text x="31.1324%" y="1727.50">[u..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="30.8824%" y="1701" width="2.9412%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="2"/><text x="31.1324%" y="1711.50">[u..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="30.8824%" y="1685" width="2.9412%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="2"/><text x="31.1324%" y="1695.50">[u..</text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="32.3529%" y="1669" width="1.4706%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="1"/><text x="32.6029%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="32.3529%" y="1653" width="1.4706%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="1"/><text x="32.6029%" y="1663.50"></text></g><g><title>rseq_register_current_thread (1 samples, 1.47%)</title><rect x="33.8235%" y="1813" width="1.4706%" height="15" fill="rgb(206,188,39)" fg:x="23" fg:w="1"/><text x="34.0735%" y="1823.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="33.8235%" y="1797" width="1.4706%" height="15" fill="rgb(217,207,13)" fg:x="23" fg:w="1"/><text x="34.0735%" y="1807.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="33.8235%" y="1781" width="1.4706%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="1"/><text x="34.0735%" y="1791.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 17.65%)</title><rect x="35.2941%" y="1797" width="17.6471%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1807.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 17.65%)</title><rect x="35.2941%" y="1781" width="17.6471%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1791.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (12 samples, 17.65%)</title><rect x="35.2941%" y="1765" width="17.6471%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1775.50">core::ops::function::FnOnce..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 17.65%)</title><rect x="35.2941%" y="1749" width="17.6471%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1759.50">std::thread::Builder::spawn..</text></g><g><title>std::panic::catch_unwind (12 samples, 17.65%)</title><rect x="35.2941%" y="1733" width="17.6471%" height="15" fill="rgb(249,33,26)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1743.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12 samples, 17.65%)</title><rect x="35.2941%" y="1717" width="17.6471%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1727.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12 samples, 17.65%)</title><rect x="35.2941%" y="1701" width="17.6471%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1711.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 17.65%)</title><rect x="35.2941%" y="1685" width="17.6471%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1695.50">&lt;core::panic::unwind_safe::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 17.65%)</title><rect x="35.2941%" y="1669" width="17.6471%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1679.50">std::thread::Builder::spawn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 17.65%)</title><rect x="35.2941%" y="1653" width="17.6471%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1663.50">std::sys_common::backtrace:..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (12 samples, 17.65%)</title><rect x="35.2941%" y="1637" width="17.6471%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1647.50">&lt;rayon_core::registry::Defa..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (12 samples, 17.65%)</title><rect x="35.2941%" y="1621" width="17.6471%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1631.50">rayon_core::registry::Threa..</text></g><g><title>rayon_core::registry::main_loop (12 samples, 17.65%)</title><rect x="35.2941%" y="1605" width="17.6471%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1615.50">rayon_core::registry::main_..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (12 samples, 17.65%)</title><rect x="35.2941%" y="1589" width="17.6471%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1599.50">rayon_core::registry::Worke..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (12 samples, 17.65%)</title><rect x="35.2941%" y="1573" width="17.6471%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1583.50">rayon_core::registry::Worke..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (12 samples, 17.65%)</title><rect x="35.2941%" y="1557" width="17.6471%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1567.50">rayon_core::sleep::Sleep::n..</text></g><g><title>rayon_core::sleep::Sleep::sleep (12 samples, 17.65%)</title><rect x="35.2941%" y="1541" width="17.6471%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1551.50">rayon_core::sleep::Sleep::s..</text></g><g><title>std::sync::condvar::Condvar::wait (12 samples, 17.65%)</title><rect x="35.2941%" y="1525" width="17.6471%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1535.50">std::sync::condvar::Condvar..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (12 samples, 17.65%)</title><rect x="35.2941%" y="1509" width="17.6471%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1519.50">std::sys::unix::locks::fute..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (12 samples, 17.65%)</title><rect x="35.2941%" y="1493" width="17.6471%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1503.50">std::sys::unix::locks::fute..</text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 17.65%)</title><rect x="35.2941%" y="1477" width="17.6471%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1487.50">std::sys::unix::futex::fute..</text></g><g><title>syscall (12 samples, 17.65%)</title><rect x="35.2941%" y="1461" width="17.6471%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1471.50">syscall</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1445" width="17.6471%" height="15" fill="rgb(238,167,29)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1455.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1429" width="17.6471%" height="15" fill="rgb(232,182,51)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1439.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1413" width="17.6471%" height="15" fill="rgb(231,60,39)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1423.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1397" width="17.6471%" height="15" fill="rgb(208,69,12)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1407.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1381" width="17.6471%" height="15" fill="rgb(235,93,37)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1391.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1365" width="17.6471%" height="15" fill="rgb(213,116,39)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1375.50">[unknown]</text></g><g><title>[unknown] (12 samples, 17.65%)</title><rect x="35.2941%" y="1349" width="17.6471%" height="15" fill="rgb(222,207,29)" fg:x="24" fg:w="12"/><text x="35.5441%" y="1359.50">[unknown]</text></g><g><title>[unknown] (6 samples, 8.82%)</title><rect x="44.1176%" y="1333" width="8.8235%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="6"/><text x="44.3676%" y="1343.50">[unknown]</text></g><g><title>[unknown] (6 samples, 8.82%)</title><rect x="44.1176%" y="1317" width="8.8235%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="6"/><text x="44.3676%" y="1327.50">[unknown]</text></g><g><title>[unknown] (6 samples, 8.82%)</title><rect x="44.1176%" y="1301" width="8.8235%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="6"/><text x="44.3676%" y="1311.50">[unknown]</text></g><g><title>__GI___mmap64 (3 samples, 4.41%)</title><rect x="52.9412%" y="1733" width="4.4118%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1743.50">__GI_..</text></g><g><title>__GI___mmap64 (3 samples, 4.41%)</title><rect x="52.9412%" y="1717" width="4.4118%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1727.50">__GI_..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1701" width="4.4118%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1711.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1685" width="4.4118%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1695.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1669" width="4.4118%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1679.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1653" width="4.4118%" height="15" fill="rgb(231,138,38)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1663.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1637" width="4.4118%" height="15" fill="rgb(231,145,46)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1647.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1621" width="4.4118%" height="15" fill="rgb(251,118,11)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1631.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1605" width="4.4118%" height="15" fill="rgb(217,147,25)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1615.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1589" width="4.4118%" height="15" fill="rgb(247,81,37)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1599.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="52.9412%" y="1573" width="4.4118%" height="15" fill="rgb(209,12,38)" fg:x="36" fg:w="3"/><text x="53.1912%" y="1583.50">[unkn..</text></g><g><title>__clone3 (17 samples, 25.00%)</title><rect x="33.8235%" y="1845" width="25.0000%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="17"/><text x="34.0735%" y="1855.50">__clone3</text></g><g><title>start_thread (17 samples, 25.00%)</title><rect x="33.8235%" y="1829" width="25.0000%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="17"/><text x="34.0735%" y="1839.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (16 samples, 23.53%)</title><rect x="35.2941%" y="1813" width="23.5294%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="16"/><text x="35.5441%" y="1823.50">std::sys::unix::thread::Thread::new::..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 5.88%)</title><rect x="52.9412%" y="1797" width="5.8824%" height="15" fill="rgb(210,229,1)" fg:x="36" fg:w="4"/><text x="53.1912%" y="1807.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 5.88%)</title><rect x="52.9412%" y="1781" width="5.8824%" height="15" fill="rgb(222,148,37)" fg:x="36" fg:w="4"/><text x="53.1912%" y="1791.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 5.88%)</title><rect x="52.9412%" y="1765" width="5.8824%" height="15" fill="rgb(234,67,33)" fg:x="36" fg:w="4"/><text x="53.1912%" y="1775.50">std::sy..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 5.88%)</title><rect x="52.9412%" y="1749" width="5.8824%" height="15" fill="rgb(247,98,35)" fg:x="36" fg:w="4"/><text x="53.1912%" y="1759.50">std::sy..</text></g><g><title>__GI___mprotect (1 samples, 1.47%)</title><rect x="57.3529%" y="1733" width="1.4706%" height="15" fill="rgb(247,138,52)" fg:x="39" fg:w="1"/><text x="57.6029%" y="1743.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="57.3529%" y="1717" width="1.4706%" height="15" fill="rgb(213,79,30)" fg:x="39" fg:w="1"/><text x="57.6029%" y="1727.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="57.3529%" y="1701" width="1.4706%" height="15" fill="rgb(246,177,23)" fg:x="39" fg:w="1"/><text x="57.6029%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="57.3529%" y="1685" width="1.4706%" height="15" fill="rgb(230,62,27)" fg:x="39" fg:w="1"/><text x="57.6029%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="57.3529%" y="1669" width="1.4706%" height="15" fill="rgb(216,154,8)" fg:x="39" fg:w="1"/><text x="57.6029%" y="1679.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (7 samples, 10.29%)</title><rect x="58.8235%" y="1317" width="10.2941%" height="15" fill="rgb(244,35,45)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1327.50">byteorder::io::..</text></g><g><title>std::io::Read::read_exact (7 samples, 10.29%)</title><rect x="58.8235%" y="1301" width="10.2941%" height="15" fill="rgb(251,115,12)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1311.50">std::io::Read::..</text></g><g><title>std::io::default_read_exact (7 samples, 10.29%)</title><rect x="58.8235%" y="1285" width="10.2941%" height="15" fill="rgb(240,54,50)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1295.50">std::io::defaul..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 10.29%)</title><rect x="58.8235%" y="1269" width="10.2941%" height="15" fill="rgb(233,84,52)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1279.50">&lt;std::fs::File ..</text></g><g><title>std::sys::unix::fs::File::read (7 samples, 10.29%)</title><rect x="58.8235%" y="1253" width="10.2941%" height="15" fill="rgb(207,117,47)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1263.50">std::sys::unix:..</text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 10.29%)</title><rect x="58.8235%" y="1237" width="10.2941%" height="15" fill="rgb(249,43,39)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1247.50">std::sys::unix:..</text></g><g><title>__GI___libc_read (7 samples, 10.29%)</title><rect x="58.8235%" y="1221" width="10.2941%" height="15" fill="rgb(209,38,44)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1231.50">__GI___libc_read</text></g><g><title>__GI___libc_read (7 samples, 10.29%)</title><rect x="58.8235%" y="1205" width="10.2941%" height="15" fill="rgb(236,212,23)" fg:x="40" fg:w="7"/><text x="59.0735%" y="1215.50">__GI___libc_read</text></g><g><title>[unknown] (6 samples, 8.82%)</title><rect x="60.2941%" y="1189" width="8.8235%" height="15" fill="rgb(242,79,21)" fg:x="41" fg:w="6"/><text x="60.5441%" y="1199.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="61.7647%" y="1173" width="7.3529%" height="15" fill="rgb(211,96,35)" fg:x="42" fg:w="5"/><text x="62.0147%" y="1183.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="61.7647%" y="1157" width="7.3529%" height="15" fill="rgb(253,215,40)" fg:x="42" fg:w="5"/><text x="62.0147%" y="1167.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="61.7647%" y="1141" width="7.3529%" height="15" fill="rgb(211,81,21)" fg:x="42" fg:w="5"/><text x="62.0147%" y="1151.50">[unknown]</text></g><g><title>[unknown] (4 samples, 5.88%)</title><rect x="63.2353%" y="1125" width="5.8824%" height="15" fill="rgb(208,190,38)" fg:x="43" fg:w="4"/><text x="63.4853%" y="1135.50">[unknow..</text></g><g><title>[unknown] (4 samples, 5.88%)</title><rect x="63.2353%" y="1109" width="5.8824%" height="15" fill="rgb(235,213,38)" fg:x="43" fg:w="4"/><text x="63.4853%" y="1119.50">[unknow..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="64.7059%" y="1093" width="4.4118%" height="15" fill="rgb(237,122,38)" fg:x="44" fg:w="3"/><text x="64.9559%" y="1103.50">[unkn..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="66.1765%" y="1077" width="2.9412%" height="15" fill="rgb(244,218,35)" fg:x="45" fg:w="2"/><text x="66.4265%" y="1087.50">[u..</text></g><g><title>[unknown] (2 samples, 2.94%)</title><rect x="66.1765%" y="1061" width="2.9412%" height="15" fill="rgb(240,68,47)" fg:x="45" fg:w="2"/><text x="66.4265%" y="1071.50">[u..</text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="67.6471%" y="1045" width="1.4706%" height="15" fill="rgb(210,16,53)" fg:x="46" fg:w="1"/><text x="67.8971%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="67.6471%" y="1029" width="1.4706%" height="15" fill="rgb(235,124,12)" fg:x="46" fg:w="1"/><text x="67.8971%" y="1039.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (5 samples, 7.35%)</title><rect x="69.1176%" y="1317" width="7.3529%" height="15" fill="rgb(224,169,11)" fg:x="47" fg:w="5"/><text x="69.3676%" y="1327.50">byteorder:..</text></g><g><title>std::io::Read::read_exact (5 samples, 7.35%)</title><rect x="69.1176%" y="1301" width="7.3529%" height="15" fill="rgb(250,166,2)" fg:x="47" fg:w="5"/><text x="69.3676%" y="1311.50">std::io::R..</text></g><g><title>std::io::default_read_exact (5 samples, 7.35%)</title><rect x="69.1176%" y="1285" width="7.3529%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="5"/><text x="69.3676%" y="1295.50">std::io::d..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 7.35%)</title><rect x="69.1176%" y="1269" width="7.3529%" height="15" fill="rgb(230,116,27)" fg:x="47" fg:w="5"/><text x="69.3676%" y="1279.50">&lt;std::fs::..</text></g><g><title>std::sys::unix::fs::File::read (4 samples, 5.88%)</title><rect x="70.5882%" y="1253" width="5.8824%" height="15" fill="rgb(228,99,48)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1263.50">std::sy..</text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 5.88%)</title><rect x="70.5882%" y="1237" width="5.8824%" height="15" fill="rgb(253,11,6)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1247.50">std::sy..</text></g><g><title>__GI___libc_read (4 samples, 5.88%)</title><rect x="70.5882%" y="1221" width="5.8824%" height="15" fill="rgb(247,143,39)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1231.50">__GI___..</text></g><g><title>__GI___libc_read (4 samples, 5.88%)</title><rect x="70.5882%" y="1205" width="5.8824%" height="15" fill="rgb(236,97,10)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1215.50">__GI___..</text></g><g><title>[unknown] (4 samples, 5.88%)</title><rect x="70.5882%" y="1189" width="5.8824%" height="15" fill="rgb(233,208,19)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1199.50">[unknow..</text></g><g><title>[unknown] (4 samples, 5.88%)</title><rect x="70.5882%" y="1173" width="5.8824%" height="15" fill="rgb(216,164,2)" fg:x="48" fg:w="4"/><text x="70.8382%" y="1183.50">[unknow..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1157" width="4.4118%" height="15" fill="rgb(220,129,5)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1167.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1141" width="4.4118%" height="15" fill="rgb(242,17,10)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1151.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1125" width="4.4118%" height="15" fill="rgb(242,107,0)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1135.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1109" width="4.4118%" height="15" fill="rgb(251,28,31)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1119.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1093" width="4.4118%" height="15" fill="rgb(233,223,10)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1103.50">[unkn..</text></g><g><title>[unknown] (3 samples, 4.41%)</title><rect x="72.0588%" y="1077" width="4.4118%" height="15" fill="rgb(215,21,27)" fg:x="49" fg:w="3"/><text x="72.3088%" y="1087.50">[unkn..</text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="75.0000%" y="1061" width="1.4706%" height="15" fill="rgb(232,23,21)" fg:x="51" fg:w="1"/><text x="75.2500%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="75.0000%" y="1045" width="1.4706%" height="15" fill="rgb(244,5,23)" fg:x="51" fg:w="1"/><text x="75.2500%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="75.0000%" y="1029" width="1.4706%" height="15" fill="rgb(226,81,46)" fg:x="51" fg:w="1"/><text x="75.2500%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="75.0000%" y="1013" width="1.4706%" height="15" fill="rgb(247,70,30)" fg:x="51" fg:w="1"/><text x="75.2500%" y="1023.50"></text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::get_cache_if_exists (13 samples, 19.12%)</title><rect x="58.8235%" y="1381" width="19.1176%" height="15" fill="rgb(212,68,19)" fg:x="40" fg:w="13"/><text x="59.0735%" y="1391.50">demoparser::parsing::cache::ca..</text></g><g><title>demoparser::parsing::cache::cache_reader::ReadCache::new (13 samples, 19.12%)</title><rect x="58.8235%" y="1365" width="19.1176%" height="15" fill="rgb(240,187,13)" fg:x="40" fg:w="13"/><text x="59.0735%" y="1375.50">demoparser::parsing::cache::ca..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::new (13 samples, 19.12%)</title><rect x="58.8235%" y="1349" width="19.1176%" height="15" fill="rgb(223,113,26)" fg:x="40" fg:w="13"/><text x="59.0735%" y="1359.50">zip::read::&lt;impl zip::read::zi..</text></g><g><title>zip::read::central_header_to_zip_file (13 samples, 19.12%)</title><rect x="58.8235%" y="1333" width="19.1176%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="13"/><text x="59.0735%" y="1343.50">zip::read::central_header_to_z..</text></g><g><title>std::io::Seek::stream_position (1 samples, 1.47%)</title><rect x="76.4706%" y="1317" width="1.4706%" height="15" fill="rgb(241,108,4)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1327.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (1 samples, 1.47%)</title><rect x="76.4706%" y="1301" width="1.4706%" height="15" fill="rgb(247,173,49)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1311.50"></text></g><g><title>std::sys::unix::fs::File::seek (1 samples, 1.47%)</title><rect x="76.4706%" y="1285" width="1.4706%" height="15" fill="rgb(224,114,35)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1295.50"></text></g><g><title>__lseek64 (1 samples, 1.47%)</title><rect x="76.4706%" y="1269" width="1.4706%" height="15" fill="rgb(245,159,27)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="76.4706%" y="1253" width="1.4706%" height="15" fill="rgb(245,172,44)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="76.4706%" y="1237" width="1.4706%" height="15" fill="rgb(236,23,11)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="76.4706%" y="1221" width="1.4706%" height="15" fill="rgb(205,117,38)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="76.4706%" y="1205" width="1.4706%" height="15" fill="rgb(237,72,25)" fg:x="52" fg:w="1"/><text x="76.7206%" y="1215.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_packet_entities (1 samples, 1.47%)</title><rect x="77.9412%" y="1173" width="1.4706%" height="15" fill="rgb(244,70,9)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1183.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities::&lt;impl demoparser::parsing::parser::Parser&gt;::_parse_packet_entities (1 samples, 1.47%)</title><rect x="77.9412%" y="1157" width="1.4706%" height="15" fill="rgb(217,125,39)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1167.50"></text></g><g><title>demoparser::parsing::demo_parsing::entities::parse_ent_props (1 samples, 1.47%)</title><rect x="77.9412%" y="1141" width="1.4706%" height="15" fill="rgb(235,36,10)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1151.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode (1 samples, 1.47%)</title><rect x="77.9412%" y="1125" width="1.4706%" height="15" fill="rgb(251,123,47)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1135.50"></text></g><g><title>demoparser::parsing::demo_parsing::read_bits::MyBitreader::decode_array (1 samples, 1.47%)</title><rect x="77.9412%" y="1109" width="1.4706%" height="15" fill="rgb(221,13,13)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1119.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 1.47%)</title><rect x="77.9412%" y="1093" width="1.4706%" height="15" fill="rgb(238,131,9)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1103.50"></text></g><g><title>protobuf::text_format::print::fmt (1 samples, 1.47%)</title><rect x="77.9412%" y="1077" width="1.4706%" height="15" fill="rgb(211,50,8)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1087.50"></text></g><g><title>protobuf::text_format::print::print_to_string_internal (1 samples, 1.47%)</title><rect x="77.9412%" y="1061" width="1.4706%" height="15" fill="rgb(245,182,24)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1071.50"></text></g><g><title>protobuf::text_format::print::print_to_internal (1 samples, 1.47%)</title><rect x="77.9412%" y="1045" width="1.4706%" height="15" fill="rgb(242,14,37)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1055.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::descriptor_dyn (1 samples, 1.47%)</title><rect x="77.9412%" y="1029" width="1.4706%" height="15" fill="rgb(246,228,12)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1039.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor (1 samples, 1.47%)</title><rect x="77.9412%" y="1013" width="1.4706%" height="15" fill="rgb(213,55,15)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1023.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 1.47%)</title><rect x="77.9412%" y="997" width="1.4706%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="1"/><text x="78.1912%" y="1007.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 1.47%)</title><rect x="77.9412%" y="981" width="1.4706%" height="15" fill="rgb(230,59,30)" fg:x="53" fg:w="1"/><text x="78.1912%" y="991.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 1.47%)</title><rect x="77.9412%" y="965" width="1.4706%" height="15" fill="rgb(209,121,21)" fg:x="53" fg:w="1"/><text x="78.1912%" y="975.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 1.47%)</title><rect x="77.9412%" y="949" width="1.4706%" height="15" fill="rgb(220,109,13)" fg:x="53" fg:w="1"/><text x="78.1912%" y="959.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 1.47%)</title><rect x="77.9412%" y="933" width="1.4706%" height="15" fill="rgb(232,18,1)" fg:x="53" fg:w="1"/><text x="78.1912%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 1.47%)</title><rect x="77.9412%" y="917" width="1.4706%" height="15" fill="rgb(215,41,42)" fg:x="53" fg:w="1"/><text x="78.1912%" y="927.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="901" width="1.4706%" height="15" fill="rgb(224,123,36)" fg:x="53" fg:w="1"/><text x="78.1912%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="885" width="1.4706%" height="15" fill="rgb(240,125,3)" fg:x="53" fg:w="1"/><text x="78.1912%" y="895.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="869" width="1.4706%" height="15" fill="rgb(205,98,50)" fg:x="53" fg:w="1"/><text x="78.1912%" y="879.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 1.47%)</title><rect x="77.9412%" y="853" width="1.4706%" height="15" fill="rgb(205,185,37)" fg:x="53" fg:w="1"/><text x="78.1912%" y="863.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 1.47%)</title><rect x="77.9412%" y="837" width="1.4706%" height="15" fill="rgb(238,207,15)" fg:x="53" fg:w="1"/><text x="78.1912%" y="847.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 1.47%)</title><rect x="77.9412%" y="821" width="1.4706%" height="15" fill="rgb(213,199,42)" fg:x="53" fg:w="1"/><text x="78.1912%" y="831.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 1.47%)</title><rect x="77.9412%" y="805" width="1.4706%" height="15" fill="rgb(235,201,11)" fg:x="53" fg:w="1"/><text x="78.1912%" y="815.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 1.47%)</title><rect x="77.9412%" y="789" width="1.4706%" height="15" fill="rgb(207,46,11)" fg:x="53" fg:w="1"/><text x="78.1912%" y="799.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 1.47%)</title><rect x="77.9412%" y="773" width="1.4706%" height="15" fill="rgb(241,35,35)" fg:x="53" fg:w="1"/><text x="78.1912%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 1.47%)</title><rect x="77.9412%" y="757" width="1.4706%" height="15" fill="rgb(243,32,47)" fg:x="53" fg:w="1"/><text x="78.1912%" y="767.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="741" width="1.4706%" height="15" fill="rgb(247,202,23)" fg:x="53" fg:w="1"/><text x="78.1912%" y="751.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="725" width="1.4706%" height="15" fill="rgb(219,102,11)" fg:x="53" fg:w="1"/><text x="78.1912%" y="735.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="709" width="1.4706%" height="15" fill="rgb(243,110,44)" fg:x="53" fg:w="1"/><text x="78.1912%" y="719.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 1.47%)</title><rect x="77.9412%" y="693" width="1.4706%" height="15" fill="rgb(222,74,54)" fg:x="53" fg:w="1"/><text x="78.1912%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 1.47%)</title><rect x="77.9412%" y="677" width="1.4706%" height="15" fill="rgb(216,99,12)" fg:x="53" fg:w="1"/><text x="78.1912%" y="687.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 1.47%)</title><rect x="77.9412%" y="661" width="1.4706%" height="15" fill="rgb(226,22,26)" fg:x="53" fg:w="1"/><text x="78.1912%" y="671.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 1.47%)</title><rect x="77.9412%" y="645" width="1.4706%" height="15" fill="rgb(217,163,10)" fg:x="53" fg:w="1"/><text x="78.1912%" y="655.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 1.47%)</title><rect x="77.9412%" y="629" width="1.4706%" height="15" fill="rgb(213,25,53)" fg:x="53" fg:w="1"/><text x="78.1912%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 1.47%)</title><rect x="77.9412%" y="613" width="1.4706%" height="15" fill="rgb(252,105,26)" fg:x="53" fg:w="1"/><text x="78.1912%" y="623.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="597" width="1.4706%" height="15" fill="rgb(220,39,43)" fg:x="53" fg:w="1"/><text x="78.1912%" y="607.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="581" width="1.4706%" height="15" fill="rgb(229,68,48)" fg:x="53" fg:w="1"/><text x="78.1912%" y="591.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 1.47%)</title><rect x="77.9412%" y="565" width="1.4706%" height="15" fill="rgb(252,8,32)" fg:x="53" fg:w="1"/><text x="78.1912%" y="575.50"></text></g><g><title>protobuf::reflect::file::generated::GeneratedFileDescriptor::new_generated (1 samples, 1.47%)</title><rect x="77.9412%" y="549" width="1.4706%" height="15" fill="rgb(223,20,43)" fg:x="53" fg:w="1"/><text x="78.1912%" y="559.50"></text></g><g><title>protobuf::reflect::file::index::FileDescriptorCommon::new (1 samples, 1.47%)</title><rect x="77.9412%" y="533" width="1.4706%" height="15" fill="rgb(229,81,49)" fg:x="53" fg:w="1"/><text x="78.1912%" y="543.50"></text></g><g><title>protobuf::reflect::file::index::FileDescriptorCommon::build_message_index (1 samples, 1.47%)</title><rect x="77.9412%" y="517" width="1.4706%" height="15" fill="rgb(236,28,36)" fg:x="53" fg:w="1"/><text x="78.1912%" y="527.50"></text></g><g><title>protobuf::reflect::file::index::FileDescriptorCommon::index_message (1 samples, 1.47%)</title><rect x="77.9412%" y="501" width="1.4706%" height="15" fill="rgb(249,185,26)" fg:x="53" fg:w="1"/><text x="78.1912%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.47%)</title><rect x="77.9412%" y="485" width="1.4706%" height="15" fill="rgb(249,174,33)" fg:x="53" fg:w="1"/><text x="78.1912%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.47%)</title><rect x="77.9412%" y="469" width="1.4706%" height="15" fill="rgb(233,201,37)" fg:x="53" fg:w="1"/><text x="78.1912%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.47%)</title><rect x="77.9412%" y="453" width="1.4706%" height="15" fill="rgb(221,78,26)" fg:x="53" fg:w="1"/><text x="78.1912%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.47%)</title><rect x="77.9412%" y="437" width="1.4706%" height="15" fill="rgb(250,127,30)" fg:x="53" fg:w="1"/><text x="78.1912%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 1.47%)</title><rect x="77.9412%" y="421" width="1.4706%" height="15" fill="rgb(230,49,44)" fg:x="53" fg:w="1"/><text x="78.1912%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 1.47%)</title><rect x="77.9412%" y="405" width="1.4706%" height="15" fill="rgb(229,67,23)" fg:x="53" fg:w="1"/><text x="78.1912%" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 1.47%)</title><rect x="77.9412%" y="389" width="1.4706%" height="15" fill="rgb(249,83,47)" fg:x="53" fg:w="1"/><text x="78.1912%" y="399.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 1.47%)</title><rect x="77.9412%" y="373" width="1.4706%" height="15" fill="rgb(215,43,3)" fg:x="53" fg:w="1"/><text x="78.1912%" y="383.50"></text></g><g><title>mi_heap_malloc (1 samples, 1.47%)</title><rect x="77.9412%" y="357" width="1.4706%" height="15" fill="rgb(238,154,13)" fg:x="53" fg:w="1"/><text x="78.1912%" y="367.50"></text></g><g><title>_mi_malloc_generic (1 samples, 1.47%)</title><rect x="77.9412%" y="341" width="1.4706%" height="15" fill="rgb(219,56,2)" fg:x="53" fg:w="1"/><text x="78.1912%" y="351.50"></text></g><g><title>mi_find_page (1 samples, 1.47%)</title><rect x="77.9412%" y="325" width="1.4706%" height="15" fill="rgb(233,0,4)" fg:x="53" fg:w="1"/><text x="78.1912%" y="335.50"></text></g><g><title>mi_find_free_page (1 samples, 1.47%)</title><rect x="77.9412%" y="309" width="1.4706%" height="15" fill="rgb(235,30,7)" fg:x="53" fg:w="1"/><text x="78.1912%" y="319.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 1.47%)</title><rect x="77.9412%" y="293" width="1.4706%" height="15" fill="rgb(250,79,13)" fg:x="53" fg:w="1"/><text x="78.1912%" y="303.50"></text></g><g><title>mi_page_extend_free (1 samples, 1.47%)</title><rect x="77.9412%" y="277" width="1.4706%" height="15" fill="rgb(211,146,34)" fg:x="53" fg:w="1"/><text x="78.1912%" y="287.50"></text></g><g><title>mi_page_extend_free (1 samples, 1.47%)</title><rect x="77.9412%" y="261" width="1.4706%" height="15" fill="rgb(228,22,38)" fg:x="53" fg:w="1"/><text x="78.1912%" y="271.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 1.47%)</title><rect x="77.9412%" y="245" width="1.4706%" height="15" fill="rgb(235,168,5)" fg:x="53" fg:w="1"/><text x="78.1912%" y="255.50"></text></g><g><title>mi_block_set_next (1 samples, 1.47%)</title><rect x="77.9412%" y="229" width="1.4706%" height="15" fill="rgb(221,155,16)" fg:x="53" fg:w="1"/><text x="78.1912%" y="239.50"></text></g><g><title>mi_block_set_nextx (1 samples, 1.47%)</title><rect x="77.9412%" y="213" width="1.4706%" height="15" fill="rgb(215,215,53)" fg:x="53" fg:w="1"/><text x="78.1912%" y="223.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="197" width="1.4706%" height="15" fill="rgb(223,4,10)" fg:x="53" fg:w="1"/><text x="78.1912%" y="207.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="181" width="1.4706%" height="15" fill="rgb(234,103,6)" fg:x="53" fg:w="1"/><text x="78.1912%" y="191.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="165" width="1.4706%" height="15" fill="rgb(227,97,0)" fg:x="53" fg:w="1"/><text x="78.1912%" y="175.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="149" width="1.4706%" height="15" fill="rgb(234,150,53)" fg:x="53" fg:w="1"/><text x="78.1912%" y="159.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="133" width="1.4706%" height="15" fill="rgb(228,201,54)" fg:x="53" fg:w="1"/><text x="78.1912%" y="143.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="117" width="1.4706%" height="15" fill="rgb(222,22,37)" fg:x="53" fg:w="1"/><text x="78.1912%" y="127.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="101" width="1.4706%" height="15" fill="rgb(237,53,32)" fg:x="53" fg:w="1"/><text x="78.1912%" y="111.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="85" width="1.4706%" height="15" fill="rgb(233,25,53)" fg:x="53" fg:w="1"/><text x="78.1912%" y="95.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="69" width="1.4706%" height="15" fill="rgb(210,40,34)" fg:x="53" fg:w="1"/><text x="78.1912%" y="79.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="53" width="1.4706%" height="15" fill="rgb(241,220,44)" fg:x="53" fg:w="1"/><text x="78.1912%" y="63.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="77.9412%" y="37" width="1.4706%" height="15" fill="rgb(235,28,35)" fg:x="53" fg:w="1"/><text x="78.1912%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.47%)</title><rect x="79.4118%" y="1157" width="1.4706%" height="15" fill="rgb(210,56,17)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1167.50"></text></g><g><title>core::ptr::write (1 samples, 1.47%)</title><rect x="79.4118%" y="1141" width="1.4706%" height="15" fill="rgb(224,130,29)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1125" width="1.4706%" height="15" fill="rgb(235,212,8)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1109" width="1.4706%" height="15" fill="rgb(223,33,50)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1093" width="1.4706%" height="15" fill="rgb(219,149,13)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1077" width="1.4706%" height="15" fill="rgb(250,156,29)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1061" width="1.4706%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1045" width="1.4706%" height="15" fill="rgb(216,135,14)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1029" width="1.4706%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="1013" width="1.4706%" height="15" fill="rgb(233,42,35)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="997" width="1.4706%" height="15" fill="rgb(231,13,6)" fg:x="54" fg:w="1"/><text x="79.6618%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="981" width="1.4706%" height="15" fill="rgb(207,181,40)" fg:x="54" fg:w="1"/><text x="79.6618%" y="991.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="79.4118%" y="965" width="1.4706%" height="15" fill="rgb(254,173,49)" fg:x="54" fg:w="1"/><text x="79.6618%" y="975.50"></text></g><g><title>demoparser::parsing::create_output::&lt;impl demoparser::parsing::parser::Parser&gt;::compute_jobs_with_cache (3 samples, 4.41%)</title><rect x="77.9412%" y="1381" width="4.4118%" height="15" fill="rgb(221,1,38)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1391.50">demop..</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints (3 samples, 4.41%)</title><rect x="77.9412%" y="1365" width="4.4118%" height="15" fill="rgb(206,124,46)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1375.50">demop..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 4.41%)</title><rect x="77.9412%" y="1349" width="4.4118%" height="15" fill="rgb(249,21,11)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1359.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 4.41%)</title><rect x="77.9412%" y="1333" width="4.4118%" height="15" fill="rgb(222,201,40)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1343.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 4.41%)</title><rect x="77.9412%" y="1317" width="4.4118%" height="15" fill="rgb(235,61,29)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1327.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 4.41%)</title><rect x="77.9412%" y="1301" width="4.4118%" height="15" fill="rgb(219,207,3)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1311.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 4.41%)</title><rect x="77.9412%" y="1285" width="4.4118%" height="15" fill="rgb(222,56,46)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1295.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 4.41%)</title><rect x="77.9412%" y="1269" width="4.4118%" height="15" fill="rgb(239,76,54)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1279.50">core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 4.41%)</title><rect x="77.9412%" y="1253" width="4.4118%" height="15" fill="rgb(231,124,27)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1263.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 4.41%)</title><rect x="77.9412%" y="1237" width="4.4118%" height="15" fill="rgb(249,195,6)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1247.50">core:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 4.41%)</title><rect x="77.9412%" y="1221" width="4.4118%" height="15" fill="rgb(237,174,47)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1231.50">core:..</text></g><g><title>demoparser::parsing::parser::Parser::parse_blueprints::{{closure}} (3 samples, 4.41%)</title><rect x="77.9412%" y="1205" width="4.4118%" height="15" fill="rgb(206,201,31)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1215.50">demop..</text></g><g><title>demoparser::parsing::parser::Parser::msg_handler (3 samples, 4.41%)</title><rect x="77.9412%" y="1189" width="4.4118%" height="15" fill="rgb(231,57,52)" fg:x="53" fg:w="3"/><text x="78.1912%" y="1199.50">demop..</text></g><g><title>demoparser::parsing::demo_parsing::stringtables::&lt;impl demoparser::parsing::parser::Parser&gt;::create_string_table (2 samples, 2.94%)</title><rect x="79.4118%" y="1173" width="2.9412%" height="15" fill="rgb(248,177,22)" fg:x="54" fg:w="2"/><text x="79.6618%" y="1183.50">de..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StringTable&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1157" width="1.4706%" height="15" fill="rgb(215,211,37)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt;&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1141" width="1.4706%" height="15" fill="rgb(241,128,51)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.47%)</title><rect x="80.8824%" y="1125" width="1.4706%" height="15" fill="rgb(227,165,31)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::demo_parsing::stringtables::StField]&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1109" width="1.4706%" height="15" fill="rgb(228,167,24)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::demo_parsing::stringtables::StField&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1093" width="1.4706%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1077" width="1.4706%" height="15" fill="rgb(249,149,8)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1061" width="1.4706%" height="15" fill="rgb(243,35,44)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 1.47%)</title><rect x="80.8824%" y="1045" width="1.4706%" height="15" fill="rgb(246,89,9)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1055.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.47%)</title><rect x="80.8824%" y="1029" width="1.4706%" height="15" fill="rgb(233,213,13)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 1.47%)</title><rect x="80.8824%" y="1013" width="1.4706%" height="15" fill="rgb(233,141,41)" fg:x="55" fg:w="1"/><text x="81.1324%" y="1023.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 1.47%)</title><rect x="83.8235%" y="1253" width="1.4706%" height="15" fill="rgb(239,167,4)" fg:x="57" fg:w="1"/><text x="84.0735%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 1.47%)</title><rect x="83.8235%" y="1237" width="1.4706%" height="15" fill="rgb(209,217,16)" fg:x="57" fg:w="1"/><text x="84.0735%" y="1247.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::flatten_dt (3 samples, 4.41%)</title><rect x="82.3529%" y="1333" width="4.4118%" height="15" fill="rgb(219,88,35)" fg:x="56" fg:w="3"/><text x="82.6029%" y="1343.50">demop..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 4.41%)</title><rect x="82.3529%" y="1317" width="4.4118%" height="15" fill="rgb(220,193,23)" fg:x="56" fg:w="3"/><text x="82.6029%" y="1327.50">demop..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (3 samples, 4.41%)</title><rect x="82.3529%" y="1301" width="4.4118%" height="15" fill="rgb(230,90,52)" fg:x="56" fg:w="3"/><text x="82.6029%" y="1311.50">demop..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 2.94%)</title><rect x="83.8235%" y="1285" width="2.9412%" height="15" fill="rgb(252,106,19)" fg:x="57" fg:w="2"/><text x="84.0735%" y="1295.50">de..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (2 samples, 2.94%)</title><rect x="83.8235%" y="1269" width="2.9412%" height="15" fill="rgb(206,74,20)" fg:x="57" fg:w="2"/><text x="84.0735%" y="1279.50">de..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 1.47%)</title><rect x="85.2941%" y="1253" width="1.4706%" height="15" fill="rgb(230,138,44)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1263.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 1.47%)</title><rect x="85.2941%" y="1237" width="1.4706%" height="15" fill="rgb(235,182,43)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1247.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::get_props (1 samples, 1.47%)</title><rect x="85.2941%" y="1221" width="1.4706%" height="15" fill="rgb(242,16,51)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1231.50"></text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::is_prop_excl (1 samples, 1.47%)</title><rect x="85.2941%" y="1205" width="1.4706%" height="15" fill="rgb(248,9,4)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1215.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.47%)</title><rect x="85.2941%" y="1189" width="1.4706%" height="15" fill="rgb(210,31,22)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1199.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 1.47%)</title><rect x="85.2941%" y="1173" width="1.4706%" height="15" fill="rgb(239,54,39)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1183.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.47%)</title><rect x="85.2941%" y="1157" width="1.4706%" height="15" fill="rgb(230,99,41)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1167.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 1.47%)</title><rect x="85.2941%" y="1141" width="1.4706%" height="15" fill="rgb(253,106,12)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1151.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 1.47%)</title><rect x="85.2941%" y="1125" width="1.4706%" height="15" fill="rgb(213,46,41)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1135.50"></text></g><g><title>[libc.so.6] (1 samples, 1.47%)</title><rect x="85.2941%" y="1109" width="1.4706%" height="15" fill="rgb(215,133,35)" fg:x="58" fg:w="1"/><text x="85.5441%" y="1119.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 1.47%)</title><rect x="86.7647%" y="1237" width="1.4706%" height="15" fill="rgb(213,28,5)" fg:x="59" fg:w="1"/><text x="87.0147%" y="1247.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (1 samples, 1.47%)</title><rect x="86.7647%" y="1221" width="1.4706%" height="15" fill="rgb(215,77,49)" fg:x="59" fg:w="1"/><text x="87.0147%" y="1231.50"></text></g><g><title>__libc_start_call_main (22 samples, 32.35%)</title><rect x="58.8235%" y="1813" width="32.3529%" height="15" fill="rgb(248,100,22)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1823.50">__libc_start_call_main</text></g><g><title>main (22 samples, 32.35%)</title><rect x="58.8235%" y="1797" width="32.3529%" height="15" fill="rgb(208,67,9)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1807.50">main</text></g><g><title>std::rt::lang_start_internal (22 samples, 32.35%)</title><rect x="58.8235%" y="1781" width="32.3529%" height="15" fill="rgb(219,133,21)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1791.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (22 samples, 32.35%)</title><rect x="58.8235%" y="1765" width="32.3529%" height="15" fill="rgb(246,46,29)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1775.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22 samples, 32.35%)</title><rect x="58.8235%" y="1749" width="32.3529%" height="15" fill="rgb(246,185,52)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1759.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22 samples, 32.35%)</title><rect x="58.8235%" y="1733" width="32.3529%" height="15" fill="rgb(252,136,11)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1743.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (22 samples, 32.35%)</title><rect x="58.8235%" y="1717" width="32.3529%" height="15" fill="rgb(219,138,53)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1727.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (22 samples, 32.35%)</title><rect x="58.8235%" y="1701" width="32.3529%" height="15" fill="rgb(211,51,23)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1711.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22 samples, 32.35%)</title><rect x="58.8235%" y="1685" width="32.3529%" height="15" fill="rgb(247,221,28)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1695.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22 samples, 32.35%)</title><rect x="58.8235%" y="1669" width="32.3529%" height="15" fill="rgb(251,222,45)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1679.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22 samples, 32.35%)</title><rect x="58.8235%" y="1653" width="32.3529%" height="15" fill="rgb(217,162,53)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1663.50">core::ops::function::impls::&lt;impl core::ops::functio..</text></g><g><title>std::rt::lang_start::{{closure}} (22 samples, 32.35%)</title><rect x="58.8235%" y="1637" width="32.3529%" height="15" fill="rgb(229,93,14)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1647.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 32.35%)</title><rect x="58.8235%" y="1621" width="32.3529%" height="15" fill="rgb(209,67,49)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1631.50">std::sys_common::backtrace::__rust_begin_short_backt..</text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 32.35%)</title><rect x="58.8235%" y="1605" width="32.3529%" height="15" fill="rgb(213,87,29)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1615.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (22 samples, 32.35%)</title><rect x="58.8235%" y="1589" width="32.3529%" height="15" fill="rgb(205,151,52)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1599.50">demoparser::main</text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 32.35%)</title><rect x="58.8235%" y="1573" width="32.3529%" height="15" fill="rgb(253,215,39)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1583.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 32.35%)</title><rect x="58.8235%" y="1557" width="32.3529%" height="15" fill="rgb(221,220,41)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1567.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 32.35%)</title><rect x="58.8235%" y="1541" width="32.3529%" height="15" fill="rgb(218,133,21)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1551.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22 samples, 32.35%)</title><rect x="58.8235%" y="1525" width="32.3529%" height="15" fill="rgb(221,193,43)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1535.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_ne..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 32.35%)</title><rect x="58.8235%" y="1509" width="32.3529%" height="15" fill="rgb(240,128,52)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1519.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::Sp..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 32.35%)</title><rect x="58.8235%" y="1493" width="32.3529%" height="15" fill="rgb(253,114,12)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1503.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 32.35%)</title><rect x="58.8235%" y="1477" width="32.3529%" height="15" fill="rgb(215,223,47)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1487.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 32.35%)</title><rect x="58.8235%" y="1461" width="32.3529%" height="15" fill="rgb(248,225,23)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1471.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 32.35%)</title><rect x="58.8235%" y="1445" width="32.3529%" height="15" fill="rgb(250,108,0)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1455.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>demoparser::main::{{closure}} (22 samples, 32.35%)</title><rect x="58.8235%" y="1429" width="32.3529%" height="15" fill="rgb(228,208,7)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1439.50">demoparser::main::{{closure}}</text></g><g><title>demoparser::parse_demo (22 samples, 32.35%)</title><rect x="58.8235%" y="1413" width="32.3529%" height="15" fill="rgb(244,45,10)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1423.50">demoparser::parse_demo</text></g><g><title>demoparser::parsing::parser::Parser::start_parsing (22 samples, 32.35%)</title><rect x="58.8235%" y="1397" width="32.3529%" height="15" fill="rgb(207,125,25)" fg:x="40" fg:w="22"/><text x="59.0735%" y="1407.50">demoparser::parsing::parser::Parser::start_parsing</text></g><g><title>demoparser::parsing::parser::Parser::parse_bytes (6 samples, 8.82%)</title><rect x="82.3529%" y="1381" width="8.8235%" height="15" fill="rgb(210,195,18)" fg:x="56" fg:w="6"/><text x="82.6029%" y="1391.50">demoparser::..</text></g><g><title>demoparser::parsing::parser::Parser::parse_cmd (6 samples, 8.82%)</title><rect x="82.3529%" y="1365" width="8.8235%" height="15" fill="rgb(249,80,12)" fg:x="56" fg:w="6"/><text x="82.6029%" y="1375.50">demoparser::..</text></g><g><title>demoparser::parsing::demo_parsing::data_table::&lt;impl demoparser::parsing::parser::Parser&gt;::parse_datatable (6 samples, 8.82%)</title><rect x="82.3529%" y="1349" width="8.8235%" height="15" fill="rgb(221,65,9)" fg:x="56" fg:w="6"/><text x="82.6029%" y="1359.50">demoparser::..</text></g><g><title>protobuf::message::Message::parse_from_bytes (3 samples, 4.41%)</title><rect x="86.7647%" y="1333" width="4.4118%" height="15" fill="rgb(235,49,36)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1343.50">proto..</text></g><g><title>protobuf::message::Message::parse_from (3 samples, 4.41%)</title><rect x="86.7647%" y="1317" width="4.4118%" height="15" fill="rgb(225,32,20)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1327.50">proto..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (3 samples, 4.41%)</title><rect x="86.7647%" y="1301" width="4.4118%" height="15" fill="rgb(215,141,46)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1311.50">&lt;csgo..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (3 samples, 4.41%)</title><rect x="86.7647%" y="1285" width="4.4118%" height="15" fill="rgb(250,160,47)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1295.50">proto..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (3 samples, 4.41%)</title><rect x="86.7647%" y="1269" width="4.4118%" height="15" fill="rgb(216,222,40)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1279.50">proto..</text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (3 samples, 4.41%)</title><rect x="86.7647%" y="1253" width="4.4118%" height="15" fill="rgb(234,217,39)" fg:x="59" fg:w="3"/><text x="87.0147%" y="1263.50">&lt;csgo..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (2 samples, 2.94%)</title><rect x="88.2353%" y="1237" width="2.9412%" height="15" fill="rgb(207,178,40)" fg:x="60" fg:w="2"/><text x="88.4853%" y="1247.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (1 samples, 1.47%)</title><rect x="89.7059%" y="1221" width="1.4706%" height="15" fill="rgb(221,136,13)" fg:x="61" fg:w="1"/><text x="89.9559%" y="1231.50"></text></g><g><title>core::mem::replace (1 samples, 1.47%)</title><rect x="89.7059%" y="1205" width="1.4706%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="89.9559%" y="1215.50"></text></g><g><title>demoparser (63 samples, 92.65%)</title><rect x="0.0000%" y="1861" width="92.6471%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="63"/><text x="0.2500%" y="1871.50">demoparser</text></g><g><title>_start (23 samples, 33.82%)</title><rect x="58.8235%" y="1845" width="33.8235%" height="15" fill="rgb(244,185,38)" fg:x="40" fg:w="23"/><text x="59.0735%" y="1855.50">_start</text></g><g><title>__libc_start_main_impl (23 samples, 33.82%)</title><rect x="58.8235%" y="1829" width="33.8235%" height="15" fill="rgb(236,202,9)" fg:x="40" fg:w="23"/><text x="59.0735%" y="1839.50">__libc_start_main_impl</text></g><g><title>call_init (1 samples, 1.47%)</title><rect x="91.1765%" y="1813" width="1.4706%" height="15" fill="rgb(250,229,37)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1823.50"></text></g><g><title>_mi_process_init (1 samples, 1.47%)</title><rect x="91.1765%" y="1797" width="1.4706%" height="15" fill="rgb(206,174,23)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1807.50"></text></g><g><title>mi_process_load (1 samples, 1.47%)</title><rect x="91.1765%" y="1781" width="1.4706%" height="15" fill="rgb(211,33,43)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1791.50"></text></g><g><title>mi_heap_main_init (1 samples, 1.47%)</title><rect x="91.1765%" y="1765" width="1.4706%" height="15" fill="rgb(245,58,50)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1775.50"></text></g><g><title>mi_heap_main_init (1 samples, 1.47%)</title><rect x="91.1765%" y="1749" width="1.4706%" height="15" fill="rgb(244,68,36)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1759.50"></text></g><g><title>_mi_os_random_weak (1 samples, 1.47%)</title><rect x="91.1765%" y="1733" width="1.4706%" height="15" fill="rgb(232,229,15)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1743.50"></text></g><g><title>__GI___clock_gettime (1 samples, 1.47%)</title><rect x="91.1765%" y="1717" width="1.4706%" height="15" fill="rgb(254,30,23)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1727.50"></text></g><g><title>[[vdso]] (1 samples, 1.47%)</title><rect x="91.1765%" y="1701" width="1.4706%" height="15" fill="rgb(235,160,14)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="91.1765%" y="1685" width="1.4706%" height="15" fill="rgb(212,155,44)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="91.1765%" y="1669" width="1.4706%" height="15" fill="rgb(226,2,50)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="91.1765%" y="1653" width="1.4706%" height="15" fill="rgb(234,177,6)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 1.47%)</title><rect x="91.1765%" y="1637" width="1.4706%" height="15" fill="rgb(217,24,9)" fg:x="62" fg:w="1"/><text x="91.4265%" y="1647.50"></text></g><g><title>all (68 samples, 100%)</title><rect x="0.0000%" y="1877" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="68"/><text x="0.2500%" y="1887.50"></text></g><g><title>perf-exec (5 samples, 7.35%)</title><rect x="92.6471%" y="1861" width="7.3529%" height="15" fill="rgb(239,221,27)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1871.50">perf-exec</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1845" width="7.3529%" height="15" fill="rgb(222,198,25)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1855.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1829" width="7.3529%" height="15" fill="rgb(211,99,13)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1839.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1813" width="7.3529%" height="15" fill="rgb(232,111,31)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1823.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1797" width="7.3529%" height="15" fill="rgb(245,82,37)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1807.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1781" width="7.3529%" height="15" fill="rgb(227,149,46)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1791.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1765" width="7.3529%" height="15" fill="rgb(218,36,50)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1775.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1749" width="7.3529%" height="15" fill="rgb(226,80,48)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1759.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1733" width="7.3529%" height="15" fill="rgb(238,224,15)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1743.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1717" width="7.3529%" height="15" fill="rgb(241,136,10)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1727.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1701" width="7.3529%" height="15" fill="rgb(208,32,45)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1711.50">[unknown]</text></g><g><title>[unknown] (5 samples, 7.35%)</title><rect x="92.6471%" y="1685" width="7.3529%" height="15" fill="rgb(207,135,9)" fg:x="63" fg:w="5"/><text x="92.8971%" y="1695.50">[unknown]</text></g></svg></svg>